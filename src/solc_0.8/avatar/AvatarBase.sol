//SPDX-License-Identifier: MIT
// solhint-disable-next-line compiler-version
pragma solidity 0.8.2;

import {Initializable} from "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import {ContextUpgradeable} from "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";
import {AccessControlUpgradeable} from "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import {ERC721Upgradeable} from "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import {PausableUpgradeable} from "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import {ERC2771Handler} from "../common/BaseWithStorage/ERC2771Handler.sol";
import {IAvatarMinter} from "../common/interfaces/IAvatarMinter.sol";

abstract contract AvatarBase is
    Initializable,
    ContextUpgradeable,
    AccessControlUpgradeable,
    ERC721Upgradeable,
    ERC2771Handler,
    PausableUpgradeable,
    IAvatarMinter
{
    // This is not part of the interface, but it seems that this specific event is necessary!!!.
    event Minted(address indexed user, uint256 id);
    event MintedBatch(address indexed user, uint256[] ids);

    // Just in case.
    uint256[50] private __gap1;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSE_ROLE = keccak256("PAUSE_ROLE");
    string public baseTokenURI;
    uint256 private _maxMinLength;

    function __AvatarBase_init_unchained(address adminRole, string memory baseTokenURI_) internal initializer {
        _setupRole(DEFAULT_ADMIN_ROLE, adminRole);
        baseTokenURI = baseTokenURI_;
    }

    /// @dev Set the maximum number of id that can be minted at once
    /// @param maxMintLength maximum number of ids to mint at once
    function setMaxMintLength(uint256 maxMintLength) external {
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "must have admin role");
        require(maxMintLength > 0, "invalid value");
        _maxMinLength = maxMintLength - 1;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to, uint256 id) external override whenNotPaused {
        require(hasRole(MINTER_ROLE, _msgSender()), "must have minter role");
        _mint(to, id);
        emit Minted(to, id);
    }

    /**
     * @dev Creates a new token for `to`. Its token IDs will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mintBatch(address to, uint256[] calldata ids) external override whenNotPaused {
        require(hasRole(MINTER_ROLE, _msgSender()), "must have minter role");
        require(ids.length > 0, "ids empty");
        require(ids.length <= _maxMinLength + 1, "too many ids");
        for (uint256 i = 0; i < ids.length; i++) {
            _mint(to, ids[i]);
        }
        emit MintedBatch(to, ids);
    }

    /// @dev Change the address of the trusted forwarder for meta-TX
    /// @param trustedForwarder_ The new trustedForwarder
    function setTrustedForwarder(address trustedForwarder_) external {
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "must have admin role");
        _trustedForwarder = trustedForwarder_;
    }

    /// @dev Change the base url for token metadata
    /// @param baseUri_ The new base Url.
    function setBaseUrl(string calldata baseUri_) external {
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "must have admin role");
        baseTokenURI = baseUri_;
    }

    /// @dev Puse the contract operation
    function pause() external {
        require(hasRole(PAUSE_ROLE, _msgSender()), "must have pause role");
        _pause();
    }

    /// @dev unpause the contract operation
    function unpause() external {
        require(hasRole(PAUSE_ROLE, _msgSender()), "must have pause role");
        _unpause();
    }

    /**
     * @dev We don't implement {IMintableERC721-exists} but this one is a nice to have.
     */
    function maxMinLength() external view returns (uint256) {
        return _maxMinLength + 1;
    }

    /**
     * @dev We don't implement {IMintableERC721-exists} but this one is a nice to have.
     */
    function exists(uint256 tokenId) external view override returns (bool) {
        return _exists(tokenId);
    }

    /// @dev See {IERC165-supportsInterface}.
    /// We must implement supportsInterface here because ERC721Upgradeable is not abstract.
    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(AccessControlUpgradeable, ERC721Upgradeable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

    function _msgSender() internal view override(ContextUpgradeable, ERC2771Handler) returns (address sender) {
        return ERC2771Handler._msgSender();
    }

    function _msgData() internal view override(ContextUpgradeable, ERC2771Handler) returns (bytes calldata) {
        return ERC2771Handler._msgData();
    }

    function _baseURI() internal view override returns (string memory) {
        return baseTokenURI;
    }

    // Just in case.
    uint256[50] private __gap2;
}
