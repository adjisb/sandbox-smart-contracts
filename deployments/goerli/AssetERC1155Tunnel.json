{
  "address": "0xFEEe6Eec68Ac9941269166560Aca31af9039964F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        },
        {
          "internalType": "contract IAssetERC1155",
          "name": "_rootToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferToL2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootToken",
      "outputs": [
        {
          "internalType": "contract IAssetERC1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x82bf64bdc5b0c1b26319954a23e749505184b6906a50a36321be6b5a153d72ea",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0xFEEe6Eec68Ac9941269166560Aca31af9039964F",
    "transactionIndex": 46,
    "gasUsed": "2982515",
    "logsBloom": "0x00010000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000800000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008080000000000000000000000000000000000001020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xac9bbd14e6e9efba6547264c135040152380f250cf681bac4ecaad060377c687",
    "transactionHash": "0x82bf64bdc5b0c1b26319954a23e749505184b6906a50a36321be6b5a153d72ea",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 6631726,
        "transactionHash": "0x82bf64bdc5b0c1b26319954a23e749505184b6906a50a36321be6b5a153d72ea",
        "address": "0xFEEe6Eec68Ac9941269166560Aca31af9039964F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a796ae911621e00809e0e7c8f0ad6bf118e5139e"
        ],
        "data": "0x",
        "logIndex": 90,
        "blockHash": "0xac9bbd14e6e9efba6547264c135040152380f250cf681bac4ecaad060377c687"
      }
    ],
    "blockNumber": 6631726,
    "cumulativeGasUsed": "11066786",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA",
    "0xf5401219A50E87284fADEAf61fEfDE673908e5D2",
    "0x96E8789B195713B279c163847A7a0A107CDf6FCf"
  ],
  "numDeployments": 1,
  "solcInputHash": "65f5e19c10bd1cac2517886950f4389d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"},{\"internalType\":\"contract IAssetERC1155\",\"name\":\"_rootToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferToL2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootToken\",\"outputs\":[{\"internalType\":\"contract IAssetERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses all token transfers across bridge\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers across bridge\"}},\"title\":\"ASSETERC1155 bridge on L1\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol\":\"AssetERC1155Tunnel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/ExitPayloadReader.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { RLPReader } from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n  using RLPReader for bytes;\\n  using RLPReader for RLPReader.RLPItem;\\n\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct ExitPayload {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  struct Receipt {\\n    RLPReader.RLPItem[] data;\\n    bytes raw;\\n    uint256 logIndex;\\n  }\\n\\n  struct Log {\\n    RLPReader.RLPItem data;\\n    RLPReader.RLPItem[] list;\\n  }\\n\\n  struct LogTopics {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n  function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n  function toExitPayload(bytes memory data)\\n        internal\\n        pure\\n        returns (ExitPayload memory)\\n    {\\n        RLPReader.RLPItem[] memory payloadData = data\\n            .toRlpItem()\\n            .toList();\\n\\n        return ExitPayload(payloadData);\\n    }\\n\\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[0].toUint();\\n    }\\n\\n    function getBlockProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[1].toBytes();\\n    }\\n\\n    function getBlockNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[2].toUint();\\n    }\\n\\n    function getBlockTime(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[3].toUint();\\n    }\\n\\n    function getTxRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[4].toUint());\\n    }\\n\\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[5].toUint());\\n    }\\n\\n    function getReceipt(ExitPayload memory payload) internal pure returns(Receipt memory receipt) {\\n      receipt.raw = payload.data[6].toBytes();\\n      RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n      if (receiptItem.isList()) {\\n          // legacy tx\\n          receipt.data = receiptItem.toList();\\n      } else {\\n          // pop first byte before parsting receipt\\n          bytes memory typedBytes = receipt.raw;\\n          bytes memory result = new bytes(typedBytes.length - 1);\\n          uint256 srcPtr;\\n          uint256 destPtr;\\n          assembly {\\n              srcPtr := add(33, typedBytes)\\n              destPtr := add(0x20, result)\\n          }\\n\\n          copy(srcPtr, destPtr, result.length);\\n          receipt.data = result.toRlpItem().toList();\\n      }\\n\\n      receipt.logIndex = getReceiptLogIndex(payload);\\n      return receipt;\\n    }\\n\\n    function getReceiptProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[7].toBytes();\\n    }\\n\\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[8].toBytes();\\n    }\\n\\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[8].toUint();\\n    }\\n\\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[9].toUint();\\n    }\\n    \\n    // Receipt methods\\n    function toBytes(Receipt memory receipt) internal pure returns(bytes memory) {\\n        return receipt.raw;\\n    }\\n\\n    function getLog(Receipt memory receipt) internal pure returns(Log memory) {\\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n        return Log(logData, logData.toList());\\n    }\\n\\n    // Log methods\\n    function getEmitter(Log memory log) internal pure returns(address) {\\n      return RLPReader.toAddress(log.list[0]);\\n    }\\n\\n    function getTopics(Log memory log) internal pure returns(LogTopics memory) {\\n        return LogTopics(log.list[1].toList());\\n    }\\n\\n    function getData(Log memory log) internal pure returns(bytes memory) {\\n        return log.list[2].toBytes();\\n    }\\n\\n    function toRlpBytes(Log memory log) internal pure returns(bytes memory) {\\n      return log.data.toRlpBytes();\\n    }\\n\\n    // LogTopics methods\\n    function getField(LogTopics memory topics, uint256 index) internal pure returns(RLPReader.RLPItem memory) {\\n      return topics.data[index];\\n    }\\n}\\n\",\"keccak256\":\"0xdb3cbd2e895069e17db4cdb8a7fcde127bf598f1c8b3c6f272d0e89727af3aca\"},\"fx-portal/contracts/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x20a3e580bfbdf11e27fba2b2cef7e2a4533c694b2d5b47d0107fc9bc716a37e9\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\",\"keccak256\":\"0xdfbc8f6ea9a4c2b46bd902bbbfae049a2b8afe839fc8634257c9551ab6f74d66\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/RLPReader.sol\":{\"content\":\"/*\\n* @author Hamdi Allam hamdi.allam97@gmail.com\\n* Please reach out with any questions or concerns\\n*/\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START  = 0xb8;\\n    uint8 constant LIST_SHORT_START   = 0xc0;\\n    uint8 constant LIST_LONG_START    = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint len;\\n        uint memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item;   // Item that's being iterated over.\\n        uint nextPtr;   // Position of the next item in the list.\\n    }\\n\\n    /*\\n    * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n    * @param self The iterator.\\n    * @return The next element in the iteration.\\n    */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint ptr = self.nextPtr;\\n        uint itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n    * @dev Returns true if the iteration has more elements.\\n    * @param self The iterator.\\n    * @return true if the iteration has more elements.\\n    */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n    * @dev Create an iterator. Reverts if item is not a list.\\n    * @param self The RLP item.\\n    * @return An 'Iterator' over the item.\\n    */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded list in bytes\\n    */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr); \\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START)\\n            return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint memPtr = item.memPtr + offset;\\n        uint len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint memPtr, uint len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n        \\n        uint ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint result;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset;\\n\\n        uint result;\\n        uint memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint result;\\n        uint memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n    * Private Helpers\\n    */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint) {\\n        if (item.len == 0) return 0;\\n\\n        uint count = 0;\\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n           count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint memPtr) private pure returns (uint) {\\n        uint itemLen;\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START)\\n            itemLen = 1;\\n        \\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } \\n\\n        else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) \\n            return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\\n            return 1;\\n        else if (byte0 < LIST_SHORT_START)  // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n    * @param src Pointer to source\\n    * @param dest Pointer to destination\\n    * @param len Amount of memory to copy from the source\\n    */\\n    function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len == 0) return;\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x606985ec75fb803aae741a9890b635a5bcf60ba6df1921fdb1aaaaea80cec904\"},\"fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\nimport \\\"../lib/ExitPayloadReader.sol\\\";\\n\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using ExitPayloadReader for bytes;\\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n    using ExitPayloadReader for ExitPayloadReader.Log;\\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages \\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\n\\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n        uint256 blockNumber = payload.getBlockNumber();\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                blockNumber,\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n                payload.getReceiptLogIndex()\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n        ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n        // check child tunnel\\n        require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        bytes32 receiptRoot = payload.getReceiptRoot();\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                receipt.toBytes(), \\n                branchMaskBytes, \\n                payload.getReceiptProof(), \\n                receiptRoot\\n            ),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            blockNumber,\\n            payload.getBlockTime(),\\n            payload.getTxRoot(),\\n            receiptRoot,\\n            payload.getHeaderNumber(),\\n            payload.getBlockProof()\\n        );\\n\\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n        require(\\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        (bytes memory message) = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n                .checkMembership(\\n                blockNumber-startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0x0cd588c3f7c6bb2a450e094e92b899db8c3ea3f5cfedd132efd1eccbddacbe82\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IAssetERC1155 {\\n    function changeBouncerAdmin(address newBouncerAdmin) external;\\n\\n    function setBouncer(address bouncer, bool enabled) external;\\n\\n    function setPredicate(address predicate) external;\\n\\n    function mint(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256 supply,\\n        uint8 rarity,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256 id);\\n\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintMultiple(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256[] calldata supplies,\\n        bytes calldata rarityPack,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256[] memory ids);\\n\\n    // fails on non-NFT or nft who do not have collection (was a mistake)\\n    function collectionOf(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n\\n    // return true for Non-NFT ERC1155 tokens which exists\\n    function isCollection(uint256 id) external view returns (bool);\\n\\n    function collectionIndexOf(uint256 id) external view returns (uint256);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n\\n    function transferCreatorship(\\n        address sender,\\n        address original,\\n        address to\\n    ) external;\\n\\n    function burnFrom(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function getBouncerAdmin() external view returns (address);\\n\\n    function prepareForExtract(\\n        address sender,\\n        uint256 id,\\n        address to\\n    ) external view returns (uint256 newId, string memory metaData);\\n\\n    function isBouncer(address who) external view returns (bool);\\n\\n    function creatorOf(uint256 id) external view returns (address);\\n\\n    function wasEverMinted(uint256 id) external view returns (bool);\\n\\n    function isSuperOperator(address who) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool isOperator);\\n}\\n\",\"keccak256\":\"0x452fd018b87f2b3b20ae285e01741f0554924f0b890a7e1101854558b210012f\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/common/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\nabstract contract ERC1155Receiver is IERC1155Receiver {\\n    function onERC1155Received(\\n        address, /* operator */\\n        address, /* from */\\n        uint256, /* id */\\n        uint256, /* value */\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address, /* operator */\\n        address, /* from */\\n        uint256[] calldata, /* ids */\\n        uint256[] calldata, /* values */\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xef97c9305e65a9ba07d50a5cb84deda5a435b7933d1821ef78f9b9bfea3c4cab\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\\\";\\nimport \\\"../../../common/interfaces/IAssetERC1155.sol\\\";\\nimport \\\"../../../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport \\\"../../common/ERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/security/Pausable.sol\\\";\\n\\n/// @title ASSETERC1155 bridge on L1\\ncontract AssetERC1155Tunnel is FxBaseRootTunnel, ERC1155Receiver, ERC2771Handler, Ownable, Pausable {\\n    IAssetERC1155 public rootToken;\\n\\n    event Deposit(address user, uint256 id, uint256 value, bytes data);\\n    event Withdraw(address user, uint256 id, uint256 value, bytes data);\\n\\n    constructor(\\n        address _checkpointManager,\\n        address _fxRoot,\\n        IAssetERC1155 _rootToken,\\n        address _trustedForwarder\\n    ) FxBaseRootTunnel(_checkpointManager, _fxRoot) {\\n        rootToken = _rootToken;\\n        __ERC2771Handler_initialize(_trustedForwarder);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\\n        return\\n            interfaceId == 0x4e2312e0 || // ERC1155Receiver\\n            interfaceId == 0x01ffc9a7; // ERC165\\n    }\\n\\n    function batchTransferToL2(\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public whenNotPaused() {\\n        address to = _msgSender();\\n        rootToken.safeBatchTransferFrom(to, address(this), ids, values, data);\\n\\n        for (uint256 index = 0; index < ids.length; index++) {\\n            bytes memory message = abi.encode(to, ids[index], values[index], data);\\n            _sendMessageToChild(message);\\n            emit Deposit(to, ids[index], values[index], data);\\n        }\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    /// @dev Pauses all token transfers across bridge\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @dev Unpauses all token transfers across bridge\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _processMessageFromChild(bytes memory message) internal override {\\n        (address to, uint256[] memory ids, uint256[] memory values, bytes memory data) =\\n            abi.decode(message, (address, uint256[], uint256[], bytes));\\n        for (uint256 index = 0; index < ids.length; index++) {\\n            rootToken.wasEverMinted(ids[index])\\n                ? rootToken.safeTransferFrom(address(this), to, ids[index], values[index], data)\\n                : rootToken.mint(to, ids[index], values[index], data);\\n            emit Withdraw(to, ids[index], values[index], data);\\n        }\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x17e520aec42c82160034cfb63734ab5b1a1a43a24866376ef742f95a55320f85\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620034e9380380620034e983398101604081905262000034916200016f565b600180546001600160a01b038087166001600160a01b03199283161790925560008054928616929091169190911790556200007862000072620000d1565b620000ee565b6005805460ff60a01b19169055600680546001600160a01b0319166001600160a01b038416179055620000c781600480546001600160a01b0319166001600160a01b0392909216919091179055565b50505050620001ef565b6000620000e86200014060201b62000a991760201c565b90505b90565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6004546000906001600160a01b031633141562000167575060131936013560601c620000eb565b5033620000eb565b6000806000806080858703121562000185578384fd5b84516200019281620001d6565b6020860151909450620001a581620001d6565b6040860151909350620001b881620001d6565b6060860151909250620001cb81620001d6565b939692955090935050565b6001600160a01b0381168114620001ec57600080fd5b50565b6132ea80620001ff6000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80638da5cb5b116100d8578063ce1b815f1161008c578063f23a6e6111610066578063f23a6e611461036b578063f2fde38b146103a4578063f953cec7146103b757610177565b8063ce1b815f14610334578063da74222814610345578063de9b771f1461035857610177565b8063aea4e49e116100bd578063aea4e49e146102a2578063bc197c81146102b5578063c0857ba01461032157610177565b80638da5cb5b1461027e578063972c49281461028f57610177565b8063572b6c051161012f578063607f2d4211610114578063607f2d421461024b578063715018a61461026e5780638456cb591461027657610177565b8063572b6c05146102215780635c975abb1461024357610177565b80631f2d0065116101605780631f2d0065146101d95780632f828478146102045780633f4ba83a1461021957610177565b806301ffc9a71461017c5780630e387de6146101a4575b600080fd5b61018f61018a366004612d70565b6103ca565b60405190151581526020015b60405180910390f35b6101cb7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b60405190815260200161019b565b6006546101ec906001600160a01b031681565b6040516001600160a01b03909116815260200161019b565b610217610212366004612c68565b610465565b005b61021761067f565b61018f61022f366004612a7f565b6004546001600160a01b0390811691161490565b61018f610702565b61018f610259366004612d0c565b60036020526000908152604090205460ff1681565b610217610724565b6102176107a7565b6005546001600160a01b03166101ec565b6002546101ec906001600160a01b031681565b6102176102b0366004612a7f565b610828565b6102f06102c3366004612b33565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161019b565b6001546101ec906001600160a01b031681565b6004546001600160a01b03166101ec565b610217610353366004612a7f565b6108d6565b6000546101ec906001600160a01b031681565b6102f0610379366004612bee565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b6102176103b2366004612a7f565b61097e565b6102176103c5366004612db0565b610a7f565b60007f4e2312e0000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061045d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b61046d610702565b156104bf5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064015b60405180910390fd5b60006104c9610ae3565b6006546040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081529192506001600160a01b031690632eb2c2d69061051b9084903090899089908990600401612ea9565b600060405180830381600087803b15801561053557600080fd5b505af1158015610549573d6000803e3d6000fd5b5050505060005b84518110156106785760008286838151811061057c57634e487b7160e01b600052603260045260246000fd5b60200260200101518684815181106105a457634e487b7160e01b600052603260045260246000fd5b6020026020010151866040516020016105c09493929190612f6c565b60405160208183030381529060405290506105da81610af2565b7f07c6d86eb9c47d0224ebbb590d5fbb1d9d0d7aca54f94611e5ed37a2c6ee20a78387848151811061061c57634e487b7160e01b600052603260045260246000fd5b602002602001015187858151811061064457634e487b7160e01b600052603260045260246000fd5b60200260200101518760405161065d9493929190612f6c565b60405180910390a150806106708161320c565b915050610550565b5050505050565b610687610ae3565b6001600160a01b03166106a26005546001600160a01b031690565b6001600160a01b0316146106f85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b6565b610700610b6f565b565b60055474010000000000000000000000000000000000000000900460ff165b90565b61072c610ae3565b6001600160a01b03166107476005546001600160a01b031690565b6001600160a01b03161461079d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b6565b6107006000610c31565b6107af610ae3565b6001600160a01b03166107ca6005546001600160a01b031690565b6001600160a01b0316146108205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b6565b610700610c90565b6002546001600160a01b0316156108a75760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201527f4c52454144595f5345540000000000000000000000000000000000000000000060648201526084016104b6565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6108de610ae3565b6001600160a01b03166108f96005546001600160a01b031690565b6001600160a01b03161461094f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b6565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610986610ae3565b6001600160a01b03166109a16005546001600160a01b031690565b6001600160a01b0316146109f75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b6565b6001600160a01b038116610a735760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104b6565b610a7c81610c31565b50565b6000610a8a82610d4d565b9050610a958161109c565b5050565b6004546000906001600160a01b0316331415610adc57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610721565b5033610721565b6000610aed610a99565b905090565b6000546002546040517fb47204770000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263b472047792610b41929116908590600401612f4a565b600060405180830381600087803b158015610b5b57600080fd5b505af1158015610678573d6000803e3d6000fd5b610b77610702565b610bc35760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016104b6565b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610c14610ae3565b6040516001600160a01b03909116815260200160405180910390a1565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610c98610702565b15610ce55760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104b6565b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610c14610ae3565b60606000610d5a8361139f565b90506000610d67826113fe565b90506000610d7483611435565b9050600081610d828461146c565b610d8b86611692565b604051602001610d9d93929190612e7c565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff1615610e3a5760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201527f535345440000000000000000000000000000000000000000000000000000000060648201526084016104b6565b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610e7a856116bc565b90506000610e8782611822565b9050610e92816118ce565b6002546001600160a01b03908116911614610f155760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460448201527f554e4e454c00000000000000000000000000000000000000000000000000000060648201526084016104b6565b6000610f2087611905565b9050610f40610f30846020015190565b87610f3a8a61192f565b84611959565b610fb25760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201527f4f4f46000000000000000000000000000000000000000000000000000000000060648201526084016104b6565b610fe085610fbf89611c80565b610fc88a611caa565b84610fd28c611cd4565b610fdb8d611cfe565b611d28565b506000610fec83611e76565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03661102261101d836000611ec0565b611f06565b1461106f5760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e41545552450060448201526064016104b6565b600061107a84611f81565b80602001905181019061108d9190612de3565b9b9a5050505050505050505050565b600080600080848060200190518101906110b69190612a9b565b935093509350935060005b83518110156113975760065484516001600160a01b039091169063d402756e9086908490811061110157634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161112791815260200190565b60206040518083038186803b15801561113f57600080fd5b505afa158015611153573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111779190612cec565b61123b5760065484516001600160a01b039091169063731133e99087908790859081106111b457634e487b7160e01b600052603260045260246000fd5b60200260200101518685815181106111dc57634e487b7160e01b600052603260045260246000fd5b6020026020010151866040518563ffffffff1660e01b81526004016112049493929190612f6c565b600060405180830381600087803b15801561121e57600080fd5b505af1158015611232573d6000803e3d6000fd5b505050506112fa565b60065484516001600160a01b039091169063f242432a903090889088908690811061127657634e487b7160e01b600052603260045260246000fd5b602002602001015187868151811061129e57634e487b7160e01b600052603260045260246000fd5b6020026020010151876040518663ffffffff1660e01b81526004016112c7959493929190612f07565b600060405180830381600087803b1580156112e157600080fd5b505af11580156112f5573d6000803e3d6000fd5b505050505b7f5b60e6b7a1385a03cd29f6ac8c80abbd3fe29663ec7d8bbe63bb79a35c176da48585838151811061133c57634e487b7160e01b600052603260045260246000fd5b602002602001015185848151811061136457634e487b7160e01b600052603260045260246000fd5b60200260200101518560405161137d9493929190612f6c565b60405180910390a18061138f8161320c565b9150506110c1565b505050505050565b60408051602081019091526060815260006113e96113e48460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b611fab565b60408051602081019091529081529392505050565b606061045d826000015160088151811061142857634e487b7160e01b600052603260045260246000fd5b60200260200101516120dd565b600061045d826000015160028151811061145f57634e487b7160e01b600052603260045260246000fd5b6020026020010151611f06565b6040805160208101909152600081528151606091901561045d57600080611494600086612188565b60f81c905060018114806114ab57508060ff166003145b15611587576001855160026114c09190613183565b6114ca91906131a2565b67ffffffffffffffff8111156114f057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561151a576020820181803683370190505b509250600061152a600187612188565b9050808460008151811061154e57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060019250506115f9565b6002855160026115979190613183565b6115a191906131a2565b67ffffffffffffffff8111156115c757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115f1576020820181803683370190505b509250600091505b60ff82165b83518110156116895761162861161760ff8516836131a2565b611622906002613021565b87612188565b84828151811061164857634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806116818161320c565b9150506115fe565b50505092915050565b600061045d826000015160098151811061145f57634e487b7160e01b600052603260045260246000fd5b6116e060405180606001604052806060815260200160608152602001600081525090565b611708826000015160068151811061142857634e487b7160e01b600052603260045260246000fd5b60208281018290526040805180820182526000808252908301528051808201909152825181529181019082015261173e81612225565b156117535761174c81611fab565b825261180e565b60208201518051600090611769906001906131a2565b67ffffffffffffffff81111561178f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156117b9576020820181803683370190505b5090506000808360210191508260200190506117d78282855161225f565b604080518082018252600080825260209182015281518083019092528451825280850190820152611807906113e4565b8652505050505b61181783611692565b604083015250919050565b60408051608081018252600091810182815260608083019390935281526020810191909152600061187e836000015160038151811061187157634e487b7160e01b600052603260045260246000fd5b6020026020010151611fab565b8360400151815181106118a157634e487b7160e01b600052603260045260246000fd5b6020026020010151905060405180604001604052808281526020016118c583611fab565b90529392505050565b600061045d82602001516000815181106118f857634e487b7160e01b600052603260045260246000fd5b60200260200101516122d9565b600061045d826000015160058151811061145f57634e487b7160e01b600052603260045260246000fd5b606061045d826000015160078151811061142857634e487b7160e01b600052603260045260246000fd5b60008061198d8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b9050600061199a82611fab565b9050606080856000806119ac8b61146c565b90508051600014156119c8576000975050505050505050611c78565b60005b8651811015611c6f5781518311156119ee57600098505050505050505050611c78565b611a1e878281518110611a1157634e487b7160e01b600052603260045260246000fd5b60200260200101516122f3565b955085805190602001208414611a3f57600098505050505050505050611c78565b611a6287828151811061187157634e487b7160e01b600052603260045260246000fd5b9450845160111415611b61578151831415611ad2578c80519060200120611aa38660108151811061142857634e487b7160e01b600052603260045260246000fd5b805190602001201415611ac157600198505050505050505050611c78565b600098505050505050505050611c78565b6000828481518110611af457634e487b7160e01b600052603260045260246000fd5b016020015160f81c90506010811115611b195760009950505050505050505050611c78565b611b4c868260ff1681518110611b3f57634e487b7160e01b600052603260045260246000fd5b6020026020010151612382565b9450611b59600185613021565b935050611c5d565b845160021415611ac1576000611b9b611b948760008151811061142857634e487b7160e01b600052603260045260246000fd5b84866123b0565b8351909150611baa8286613021565b1415611c0d578d80519060200120611bdc8760018151811061142857634e487b7160e01b600052603260045260246000fd5b805190602001201415611bfb5760019950505050505050505050611c78565b60009950505050505050505050611c78565b80611c245760009950505050505050505050611c78565b611c2e8185613021565b9350611c5486600181518110611b3f57634e487b7160e01b600052603260045260246000fd5b9450611c5d9050565b80611c678161320c565b9150506119cb565b50505050505050505b949350505050565b600061045d826000015160038151811061145f57634e487b7160e01b600052603260045260246000fd5b600061045d826000015160048151811061145f57634e487b7160e01b600052603260045260246000fd5b600061045d826000015160008151811061145f57634e487b7160e01b600052603260045260246000fd5b606061045d826000015160018151811061142857634e487b7160e01b600052603260045260246000fd5b6001546040517f41539d4a000000000000000000000000000000000000000000000000000000008152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a06040518083038186803b158015611d8e57600080fd5b505afa158015611da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc69190612d24565b5093505092509250611e1d828b611ddd91906131a2565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588612515565b611e695760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f4845414445520000000060448201526064016104b6565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280611eb8846020015160018151811061187157634e487b7160e01b600052603260045260246000fd5b905292915050565b60408051808201909152600080825260208201528251805183908110611ef657634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b805160009015801590611f1b57508151602110155b611f2457600080fd5b6000611f33836020015161268b565b90506000818460000151611f4791906131a2565b9050600080838660200151611f5c9190613021565b9050805191506020831015611f7857826020036101000a820491505b50949350505050565b606061045d826020015160028151811061142857634e487b7160e01b600052603260045260246000fd5b6060611fb682612225565b611fbf57600080fd5b6000611fca83612710565b905060008167ffffffffffffffff811115611ff557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561203a57816020015b60408051808201909152600080825260208201528152602001906001900390816120135790505b509050600061204c856020015161268b565b856020015161205b9190613021565b90506000805b848110156120d25761207283612793565b91506040518060400160405280838152602001848152508482815181106120a957634e487b7160e01b600052603260045260246000fd5b60209081029190910101526120be8284613021565b9250806120ca8161320c565b915050612061565b509195945050505050565b80516060906120eb57600080fd5b60006120fa836020015161268b565b9050600081846000015161210e91906131a2565b905060008167ffffffffffffffff81111561213957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612163576020820181803683370190505b5090506000816020019050611f788487602001516121819190613021565b8285612855565b6000612195600284613227565b156121dd576010826121a8600286613039565b815181106121c657634e487b7160e01b600052603260045260246000fd5b01602001516121d8919060f81c61323b565b61221b565b6010826121eb600286613039565b8151811061220957634e487b7160e01b600052603260045260246000fd5b016020015161221b919060f81c61304d565b60f81b9392505050565b805160009061223657506000610460565b6020820151805160001a9060c082101561225557600092505050610460565b5060019392505050565b80612269576122d4565b602081106122a15782518252612280602084613021565b925061228d602083613021565b915061229a6020826131a2565b9050612269565b600060016122b08360206131a2565b6122bc906101006130b5565b6122c691906131a2565b845184518216911916178352505b505050565b80516000906015146122ea57600080fd5b61045d82611f06565b60606000826000015167ffffffffffffffff81111561232257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561234c576020820181803683370190505b509050805160001415612360579050610460565b600081602001905061237b8460200151828660000151612855565b5092915050565b805160009060211461239357600080fd5b600080836020015160016123a79190613021565b51949350505050565b600080806123bd8661146c565b90506000815167ffffffffffffffff8111156123e957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612413576020820181803683370190505b509050845b82516124249087613021565b8110156124e357600087828151811061244d57634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000169050808361248289856131a2565b815181106124a057634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505080806124db9061320c565b915050612418565b508080519060200120828051906020012014156125035781519250612508565b600092505b50909150505b9392505050565b6000602082516125259190613227565b156125725760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e67746800000000000000000000000060448201526064016104b6565b6000602083516125829190613039565b905061258f8160026130b5565b85106125dd5760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f20626967000000000000000000000060448201526064016104b6565b60008660205b8551811161267d578581015192506125fc600289613227565b61263157604080516020810184905290810184905260600160405160208183030381529060405280519060200120915061265e565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b612669600289613039565b9750612676602082613021565b90506125e3565b509094149695505050505050565b8051600090811a60808110156126a5576000915050610460565b60b88110806126c0575060c081108015906126c0575060f881105b156126cf576001915050610460565b60c0811015612704576126e4600160b86131b9565b6126f19060ff16826131a2565b6126fc906001613021565b915050610460565b6126e4600160f86131b9565b805160009061272157506000610460565b600080612731846020015161268b565b84602001516127409190613021565b90506000846000015185602001516127589190613021565b90505b8082101561278a5761276c82612793565b6127769083613021565b9150826127828161320c565b93505061275b565b50909392505050565b80516000908190811a60808110156127ae576001915061237b565b60b88110156127d4576127c26080826131a2565b6127cd906001613021565b915061237b565b60c08110156128015760b78103600185019450806020036101000a8551046001820181019350505061237b565b60f8811015612815576127c260c0826131a2565b60019390930151602084900360f7016101000a90049092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0192915050565b8061285f576122d4565b602081106128975782518252612876602084613021565b9250612883602083613021565b91506128906020826131a2565b905061285f565b806122a1576122d4565b60008083601f8401126128b2578182fd5b50813567ffffffffffffffff8111156128c9578182fd5b60208301915083602080830285010111156128e357600080fd5b9250929050565b600082601f8301126128fa578081fd5b8135602061290f61290a83612fd5565b612fa4565b828152818101908583018385028701840188101561292b578586fd5b855b858110156129495781358452928401929084019060010161292d565b5090979650505050505050565b600082601f830112612966578081fd5b8151602061297661290a83612fd5565b8281528181019085830183850287018401881015612992578586fd5b855b8581101561294957815184529284019290840190600101612994565b60008083601f8401126129c1578182fd5b50813567ffffffffffffffff8111156129d8578182fd5b6020830191508360208285010111156128e357600080fd5b600082601f830112612a00578081fd5b8135612a0e61290a82612ff9565b818152846020838601011115612a22578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112612a4c578081fd5b8151612a5a61290a82612ff9565b818152846020838601011115612a6e578283fd5b611c788260208301602087016131dc565b600060208284031215612a90578081fd5b813561250e8161329f565b60008060008060808587031215612ab0578283fd5b8451612abb8161329f565b602086015190945067ffffffffffffffff80821115612ad8578485fd5b612ae488838901612956565b94506040870151915080821115612af9578384fd5b612b0588838901612956565b93506060870151915080821115612b1a578283fd5b50612b2787828801612a3c565b91505092959194509250565b60008060008060008060008060a0898b031215612b4e578384fd5b8835612b598161329f565b97506020890135612b698161329f565b9650604089013567ffffffffffffffff80821115612b85578586fd5b612b918c838d016128a1565b909850965060608b0135915080821115612ba9578586fd5b612bb58c838d016128a1565b909650945060808b0135915080821115612bcd578384fd5b50612bda8b828c016129b0565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215612c06578182fd5b8635612c118161329f565b95506020870135612c218161329f565b94506040870135935060608701359250608087013567ffffffffffffffff811115612c4a578283fd5b612c5689828a016129b0565b979a9699509497509295939492505050565b600080600060608486031215612c7c578081fd5b833567ffffffffffffffff80821115612c93578283fd5b612c9f878388016128ea565b94506020860135915080821115612cb4578283fd5b612cc0878388016128ea565b93506040860135915080821115612cd5578283fd5b50612ce2868287016129f0565b9150509250925092565b600060208284031215612cfd578081fd5b8151801515811461250e578182fd5b600060208284031215612d1d578081fd5b5035919050565b600080600080600060a08688031215612d3b578283fd5b855194506020860151935060408601519250606086015191506080860151612d628161329f565b809150509295509295909350565b600060208284031215612d81578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461250e578182fd5b600060208284031215612dc1578081fd5b813567ffffffffffffffff811115612dd7578182fd5b611c78848285016129f0565b600060208284031215612df4578081fd5b815167ffffffffffffffff811115612e0a578182fd5b611c7884828501612a3c565b6000815180845260208085019450808401835b83811015612e4557815187529582019590820190600101612e29565b509495945050505050565b60008151808452612e688160208601602086016131dc565b601f01601f19169290920160200192915050565b60008482528351612e948160208501602088016131dc565b60209201918201929092526040019392505050565b60006001600160a01b03808816835280871660208401525060a06040830152612ed560a0830186612e16565b8281036060840152612ee78186612e16565b90508281036080840152612efb8185612e50565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612f3f60a0830184612e50565b979650505050505050565b60006001600160a01b038416825260406020830152611c786040830184612e50565b60006001600160a01b038616825284602083015283604083015260806060830152612f9a6080830184612e50565b9695505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612fcd57612fcd613289565b604052919050565b600067ffffffffffffffff821115612fef57612fef613289565b5060209081020190565b600067ffffffffffffffff82111561301357613013613289565b50601f01601f191660200190565b600082198211156130345761303461325d565b500190565b60008261304857613048613273565b500490565b600060ff83168061306057613060613273565b8060ff84160491505092915050565b80825b600180861161308157506130ac565b8187048211156130935761309361325d565b808616156130a057918102915b9490941c938002613072565b94509492505050565b600061250e60001984846000826130ce5750600161250e565b816130db5750600061250e565b81600181146130f157600281146130fb57613128565b600191505061250e565b60ff84111561310c5761310c61325d565b6001841b9150848211156131225761312261325d565b5061250e565b5060208310610133831016604e8410600b841016171561315b575081810a838111156131565761315661325d565b61250e565b613168848484600161306f565b80860482111561317a5761317a61325d565b02949350505050565b600081600019048311821515161561319d5761319d61325d565b500290565b6000828210156131b4576131b461325d565b500390565b600060ff821660ff8416808210156131d3576131d361325d565b90039392505050565b60005b838110156131f75781810151838201526020016131df565b83811115613206576000848401525b50505050565b60006000198214156132205761322061325d565b5060010190565b60008261323657613236613273565b500690565b600060ff83168061324e5761324e613273565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a7c57600080fdfea2646970667358221220738749195239c207e420d9a9891a044641ebaf607fdf94a3436d7bd4ffffe38464736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80638da5cb5b116100d8578063ce1b815f1161008c578063f23a6e6111610066578063f23a6e611461036b578063f2fde38b146103a4578063f953cec7146103b757610177565b8063ce1b815f14610334578063da74222814610345578063de9b771f1461035857610177565b8063aea4e49e116100bd578063aea4e49e146102a2578063bc197c81146102b5578063c0857ba01461032157610177565b80638da5cb5b1461027e578063972c49281461028f57610177565b8063572b6c051161012f578063607f2d4211610114578063607f2d421461024b578063715018a61461026e5780638456cb591461027657610177565b8063572b6c05146102215780635c975abb1461024357610177565b80631f2d0065116101605780631f2d0065146101d95780632f828478146102045780633f4ba83a1461021957610177565b806301ffc9a71461017c5780630e387de6146101a4575b600080fd5b61018f61018a366004612d70565b6103ca565b60405190151581526020015b60405180910390f35b6101cb7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b60405190815260200161019b565b6006546101ec906001600160a01b031681565b6040516001600160a01b03909116815260200161019b565b610217610212366004612c68565b610465565b005b61021761067f565b61018f61022f366004612a7f565b6004546001600160a01b0390811691161490565b61018f610702565b61018f610259366004612d0c565b60036020526000908152604090205460ff1681565b610217610724565b6102176107a7565b6005546001600160a01b03166101ec565b6002546101ec906001600160a01b031681565b6102176102b0366004612a7f565b610828565b6102f06102c3366004612b33565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161019b565b6001546101ec906001600160a01b031681565b6004546001600160a01b03166101ec565b610217610353366004612a7f565b6108d6565b6000546101ec906001600160a01b031681565b6102f0610379366004612bee565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b6102176103b2366004612a7f565b61097e565b6102176103c5366004612db0565b610a7f565b60007f4e2312e0000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061045d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b61046d610702565b156104bf5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064015b60405180910390fd5b60006104c9610ae3565b6006546040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081529192506001600160a01b031690632eb2c2d69061051b9084903090899089908990600401612ea9565b600060405180830381600087803b15801561053557600080fd5b505af1158015610549573d6000803e3d6000fd5b5050505060005b84518110156106785760008286838151811061057c57634e487b7160e01b600052603260045260246000fd5b60200260200101518684815181106105a457634e487b7160e01b600052603260045260246000fd5b6020026020010151866040516020016105c09493929190612f6c565b60405160208183030381529060405290506105da81610af2565b7f07c6d86eb9c47d0224ebbb590d5fbb1d9d0d7aca54f94611e5ed37a2c6ee20a78387848151811061061c57634e487b7160e01b600052603260045260246000fd5b602002602001015187858151811061064457634e487b7160e01b600052603260045260246000fd5b60200260200101518760405161065d9493929190612f6c565b60405180910390a150806106708161320c565b915050610550565b5050505050565b610687610ae3565b6001600160a01b03166106a26005546001600160a01b031690565b6001600160a01b0316146106f85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b6565b610700610b6f565b565b60055474010000000000000000000000000000000000000000900460ff165b90565b61072c610ae3565b6001600160a01b03166107476005546001600160a01b031690565b6001600160a01b03161461079d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b6565b6107006000610c31565b6107af610ae3565b6001600160a01b03166107ca6005546001600160a01b031690565b6001600160a01b0316146108205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b6565b610700610c90565b6002546001600160a01b0316156108a75760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201527f4c52454144595f5345540000000000000000000000000000000000000000000060648201526084016104b6565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6108de610ae3565b6001600160a01b03166108f96005546001600160a01b031690565b6001600160a01b03161461094f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b6565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610986610ae3565b6001600160a01b03166109a16005546001600160a01b031690565b6001600160a01b0316146109f75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b6565b6001600160a01b038116610a735760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104b6565b610a7c81610c31565b50565b6000610a8a82610d4d565b9050610a958161109c565b5050565b6004546000906001600160a01b0316331415610adc57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610721565b5033610721565b6000610aed610a99565b905090565b6000546002546040517fb47204770000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263b472047792610b41929116908590600401612f4a565b600060405180830381600087803b158015610b5b57600080fd5b505af1158015610678573d6000803e3d6000fd5b610b77610702565b610bc35760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016104b6565b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610c14610ae3565b6040516001600160a01b03909116815260200160405180910390a1565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610c98610702565b15610ce55760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104b6565b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610c14610ae3565b60606000610d5a8361139f565b90506000610d67826113fe565b90506000610d7483611435565b9050600081610d828461146c565b610d8b86611692565b604051602001610d9d93929190612e7c565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff1615610e3a5760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201527f535345440000000000000000000000000000000000000000000000000000000060648201526084016104b6565b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610e7a856116bc565b90506000610e8782611822565b9050610e92816118ce565b6002546001600160a01b03908116911614610f155760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460448201527f554e4e454c00000000000000000000000000000000000000000000000000000060648201526084016104b6565b6000610f2087611905565b9050610f40610f30846020015190565b87610f3a8a61192f565b84611959565b610fb25760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201527f4f4f46000000000000000000000000000000000000000000000000000000000060648201526084016104b6565b610fe085610fbf89611c80565b610fc88a611caa565b84610fd28c611cd4565b610fdb8d611cfe565b611d28565b506000610fec83611e76565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03661102261101d836000611ec0565b611f06565b1461106f5760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e41545552450060448201526064016104b6565b600061107a84611f81565b80602001905181019061108d9190612de3565b9b9a5050505050505050505050565b600080600080848060200190518101906110b69190612a9b565b935093509350935060005b83518110156113975760065484516001600160a01b039091169063d402756e9086908490811061110157634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161112791815260200190565b60206040518083038186803b15801561113f57600080fd5b505afa158015611153573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111779190612cec565b61123b5760065484516001600160a01b039091169063731133e99087908790859081106111b457634e487b7160e01b600052603260045260246000fd5b60200260200101518685815181106111dc57634e487b7160e01b600052603260045260246000fd5b6020026020010151866040518563ffffffff1660e01b81526004016112049493929190612f6c565b600060405180830381600087803b15801561121e57600080fd5b505af1158015611232573d6000803e3d6000fd5b505050506112fa565b60065484516001600160a01b039091169063f242432a903090889088908690811061127657634e487b7160e01b600052603260045260246000fd5b602002602001015187868151811061129e57634e487b7160e01b600052603260045260246000fd5b6020026020010151876040518663ffffffff1660e01b81526004016112c7959493929190612f07565b600060405180830381600087803b1580156112e157600080fd5b505af11580156112f5573d6000803e3d6000fd5b505050505b7f5b60e6b7a1385a03cd29f6ac8c80abbd3fe29663ec7d8bbe63bb79a35c176da48585838151811061133c57634e487b7160e01b600052603260045260246000fd5b602002602001015185848151811061136457634e487b7160e01b600052603260045260246000fd5b60200260200101518560405161137d9493929190612f6c565b60405180910390a18061138f8161320c565b9150506110c1565b505050505050565b60408051602081019091526060815260006113e96113e48460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b611fab565b60408051602081019091529081529392505050565b606061045d826000015160088151811061142857634e487b7160e01b600052603260045260246000fd5b60200260200101516120dd565b600061045d826000015160028151811061145f57634e487b7160e01b600052603260045260246000fd5b6020026020010151611f06565b6040805160208101909152600081528151606091901561045d57600080611494600086612188565b60f81c905060018114806114ab57508060ff166003145b15611587576001855160026114c09190613183565b6114ca91906131a2565b67ffffffffffffffff8111156114f057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561151a576020820181803683370190505b509250600061152a600187612188565b9050808460008151811061154e57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060019250506115f9565b6002855160026115979190613183565b6115a191906131a2565b67ffffffffffffffff8111156115c757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115f1576020820181803683370190505b509250600091505b60ff82165b83518110156116895761162861161760ff8516836131a2565b611622906002613021565b87612188565b84828151811061164857634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806116818161320c565b9150506115fe565b50505092915050565b600061045d826000015160098151811061145f57634e487b7160e01b600052603260045260246000fd5b6116e060405180606001604052806060815260200160608152602001600081525090565b611708826000015160068151811061142857634e487b7160e01b600052603260045260246000fd5b60208281018290526040805180820182526000808252908301528051808201909152825181529181019082015261173e81612225565b156117535761174c81611fab565b825261180e565b60208201518051600090611769906001906131a2565b67ffffffffffffffff81111561178f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156117b9576020820181803683370190505b5090506000808360210191508260200190506117d78282855161225f565b604080518082018252600080825260209182015281518083019092528451825280850190820152611807906113e4565b8652505050505b61181783611692565b604083015250919050565b60408051608081018252600091810182815260608083019390935281526020810191909152600061187e836000015160038151811061187157634e487b7160e01b600052603260045260246000fd5b6020026020010151611fab565b8360400151815181106118a157634e487b7160e01b600052603260045260246000fd5b6020026020010151905060405180604001604052808281526020016118c583611fab565b90529392505050565b600061045d82602001516000815181106118f857634e487b7160e01b600052603260045260246000fd5b60200260200101516122d9565b600061045d826000015160058151811061145f57634e487b7160e01b600052603260045260246000fd5b606061045d826000015160078151811061142857634e487b7160e01b600052603260045260246000fd5b60008061198d8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b9050600061199a82611fab565b9050606080856000806119ac8b61146c565b90508051600014156119c8576000975050505050505050611c78565b60005b8651811015611c6f5781518311156119ee57600098505050505050505050611c78565b611a1e878281518110611a1157634e487b7160e01b600052603260045260246000fd5b60200260200101516122f3565b955085805190602001208414611a3f57600098505050505050505050611c78565b611a6287828151811061187157634e487b7160e01b600052603260045260246000fd5b9450845160111415611b61578151831415611ad2578c80519060200120611aa38660108151811061142857634e487b7160e01b600052603260045260246000fd5b805190602001201415611ac157600198505050505050505050611c78565b600098505050505050505050611c78565b6000828481518110611af457634e487b7160e01b600052603260045260246000fd5b016020015160f81c90506010811115611b195760009950505050505050505050611c78565b611b4c868260ff1681518110611b3f57634e487b7160e01b600052603260045260246000fd5b6020026020010151612382565b9450611b59600185613021565b935050611c5d565b845160021415611ac1576000611b9b611b948760008151811061142857634e487b7160e01b600052603260045260246000fd5b84866123b0565b8351909150611baa8286613021565b1415611c0d578d80519060200120611bdc8760018151811061142857634e487b7160e01b600052603260045260246000fd5b805190602001201415611bfb5760019950505050505050505050611c78565b60009950505050505050505050611c78565b80611c245760009950505050505050505050611c78565b611c2e8185613021565b9350611c5486600181518110611b3f57634e487b7160e01b600052603260045260246000fd5b9450611c5d9050565b80611c678161320c565b9150506119cb565b50505050505050505b949350505050565b600061045d826000015160038151811061145f57634e487b7160e01b600052603260045260246000fd5b600061045d826000015160048151811061145f57634e487b7160e01b600052603260045260246000fd5b600061045d826000015160008151811061145f57634e487b7160e01b600052603260045260246000fd5b606061045d826000015160018151811061142857634e487b7160e01b600052603260045260246000fd5b6001546040517f41539d4a000000000000000000000000000000000000000000000000000000008152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a06040518083038186803b158015611d8e57600080fd5b505afa158015611da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc69190612d24565b5093505092509250611e1d828b611ddd91906131a2565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588612515565b611e695760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f4845414445520000000060448201526064016104b6565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280611eb8846020015160018151811061187157634e487b7160e01b600052603260045260246000fd5b905292915050565b60408051808201909152600080825260208201528251805183908110611ef657634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b805160009015801590611f1b57508151602110155b611f2457600080fd5b6000611f33836020015161268b565b90506000818460000151611f4791906131a2565b9050600080838660200151611f5c9190613021565b9050805191506020831015611f7857826020036101000a820491505b50949350505050565b606061045d826020015160028151811061142857634e487b7160e01b600052603260045260246000fd5b6060611fb682612225565b611fbf57600080fd5b6000611fca83612710565b905060008167ffffffffffffffff811115611ff557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561203a57816020015b60408051808201909152600080825260208201528152602001906001900390816120135790505b509050600061204c856020015161268b565b856020015161205b9190613021565b90506000805b848110156120d25761207283612793565b91506040518060400160405280838152602001848152508482815181106120a957634e487b7160e01b600052603260045260246000fd5b60209081029190910101526120be8284613021565b9250806120ca8161320c565b915050612061565b509195945050505050565b80516060906120eb57600080fd5b60006120fa836020015161268b565b9050600081846000015161210e91906131a2565b905060008167ffffffffffffffff81111561213957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612163576020820181803683370190505b5090506000816020019050611f788487602001516121819190613021565b8285612855565b6000612195600284613227565b156121dd576010826121a8600286613039565b815181106121c657634e487b7160e01b600052603260045260246000fd5b01602001516121d8919060f81c61323b565b61221b565b6010826121eb600286613039565b8151811061220957634e487b7160e01b600052603260045260246000fd5b016020015161221b919060f81c61304d565b60f81b9392505050565b805160009061223657506000610460565b6020820151805160001a9060c082101561225557600092505050610460565b5060019392505050565b80612269576122d4565b602081106122a15782518252612280602084613021565b925061228d602083613021565b915061229a6020826131a2565b9050612269565b600060016122b08360206131a2565b6122bc906101006130b5565b6122c691906131a2565b845184518216911916178352505b505050565b80516000906015146122ea57600080fd5b61045d82611f06565b60606000826000015167ffffffffffffffff81111561232257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561234c576020820181803683370190505b509050805160001415612360579050610460565b600081602001905061237b8460200151828660000151612855565b5092915050565b805160009060211461239357600080fd5b600080836020015160016123a79190613021565b51949350505050565b600080806123bd8661146c565b90506000815167ffffffffffffffff8111156123e957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612413576020820181803683370190505b509050845b82516124249087613021565b8110156124e357600087828151811061244d57634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000169050808361248289856131a2565b815181106124a057634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505080806124db9061320c565b915050612418565b508080519060200120828051906020012014156125035781519250612508565b600092505b50909150505b9392505050565b6000602082516125259190613227565b156125725760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e67746800000000000000000000000060448201526064016104b6565b6000602083516125829190613039565b905061258f8160026130b5565b85106125dd5760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f20626967000000000000000000000060448201526064016104b6565b60008660205b8551811161267d578581015192506125fc600289613227565b61263157604080516020810184905290810184905260600160405160208183030381529060405280519060200120915061265e565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b612669600289613039565b9750612676602082613021565b90506125e3565b509094149695505050505050565b8051600090811a60808110156126a5576000915050610460565b60b88110806126c0575060c081108015906126c0575060f881105b156126cf576001915050610460565b60c0811015612704576126e4600160b86131b9565b6126f19060ff16826131a2565b6126fc906001613021565b915050610460565b6126e4600160f86131b9565b805160009061272157506000610460565b600080612731846020015161268b565b84602001516127409190613021565b90506000846000015185602001516127589190613021565b90505b8082101561278a5761276c82612793565b6127769083613021565b9150826127828161320c565b93505061275b565b50909392505050565b80516000908190811a60808110156127ae576001915061237b565b60b88110156127d4576127c26080826131a2565b6127cd906001613021565b915061237b565b60c08110156128015760b78103600185019450806020036101000a8551046001820181019350505061237b565b60f8811015612815576127c260c0826131a2565b60019390930151602084900360f7016101000a90049092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0192915050565b8061285f576122d4565b602081106128975782518252612876602084613021565b9250612883602083613021565b91506128906020826131a2565b905061285f565b806122a1576122d4565b60008083601f8401126128b2578182fd5b50813567ffffffffffffffff8111156128c9578182fd5b60208301915083602080830285010111156128e357600080fd5b9250929050565b600082601f8301126128fa578081fd5b8135602061290f61290a83612fd5565b612fa4565b828152818101908583018385028701840188101561292b578586fd5b855b858110156129495781358452928401929084019060010161292d565b5090979650505050505050565b600082601f830112612966578081fd5b8151602061297661290a83612fd5565b8281528181019085830183850287018401881015612992578586fd5b855b8581101561294957815184529284019290840190600101612994565b60008083601f8401126129c1578182fd5b50813567ffffffffffffffff8111156129d8578182fd5b6020830191508360208285010111156128e357600080fd5b600082601f830112612a00578081fd5b8135612a0e61290a82612ff9565b818152846020838601011115612a22578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112612a4c578081fd5b8151612a5a61290a82612ff9565b818152846020838601011115612a6e578283fd5b611c788260208301602087016131dc565b600060208284031215612a90578081fd5b813561250e8161329f565b60008060008060808587031215612ab0578283fd5b8451612abb8161329f565b602086015190945067ffffffffffffffff80821115612ad8578485fd5b612ae488838901612956565b94506040870151915080821115612af9578384fd5b612b0588838901612956565b93506060870151915080821115612b1a578283fd5b50612b2787828801612a3c565b91505092959194509250565b60008060008060008060008060a0898b031215612b4e578384fd5b8835612b598161329f565b97506020890135612b698161329f565b9650604089013567ffffffffffffffff80821115612b85578586fd5b612b918c838d016128a1565b909850965060608b0135915080821115612ba9578586fd5b612bb58c838d016128a1565b909650945060808b0135915080821115612bcd578384fd5b50612bda8b828c016129b0565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215612c06578182fd5b8635612c118161329f565b95506020870135612c218161329f565b94506040870135935060608701359250608087013567ffffffffffffffff811115612c4a578283fd5b612c5689828a016129b0565b979a9699509497509295939492505050565b600080600060608486031215612c7c578081fd5b833567ffffffffffffffff80821115612c93578283fd5b612c9f878388016128ea565b94506020860135915080821115612cb4578283fd5b612cc0878388016128ea565b93506040860135915080821115612cd5578283fd5b50612ce2868287016129f0565b9150509250925092565b600060208284031215612cfd578081fd5b8151801515811461250e578182fd5b600060208284031215612d1d578081fd5b5035919050565b600080600080600060a08688031215612d3b578283fd5b855194506020860151935060408601519250606086015191506080860151612d628161329f565b809150509295509295909350565b600060208284031215612d81578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461250e578182fd5b600060208284031215612dc1578081fd5b813567ffffffffffffffff811115612dd7578182fd5b611c78848285016129f0565b600060208284031215612df4578081fd5b815167ffffffffffffffff811115612e0a578182fd5b611c7884828501612a3c565b6000815180845260208085019450808401835b83811015612e4557815187529582019590820190600101612e29565b509495945050505050565b60008151808452612e688160208601602086016131dc565b601f01601f19169290920160200192915050565b60008482528351612e948160208501602088016131dc565b60209201918201929092526040019392505050565b60006001600160a01b03808816835280871660208401525060a06040830152612ed560a0830186612e16565b8281036060840152612ee78186612e16565b90508281036080840152612efb8185612e50565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612f3f60a0830184612e50565b979650505050505050565b60006001600160a01b038416825260406020830152611c786040830184612e50565b60006001600160a01b038616825284602083015283604083015260806060830152612f9a6080830184612e50565b9695505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612fcd57612fcd613289565b604052919050565b600067ffffffffffffffff821115612fef57612fef613289565b5060209081020190565b600067ffffffffffffffff82111561301357613013613289565b50601f01601f191660200190565b600082198211156130345761303461325d565b500190565b60008261304857613048613273565b500490565b600060ff83168061306057613060613273565b8060ff84160491505092915050565b80825b600180861161308157506130ac565b8187048211156130935761309361325d565b808616156130a057918102915b9490941c938002613072565b94509492505050565b600061250e60001984846000826130ce5750600161250e565b816130db5750600061250e565b81600181146130f157600281146130fb57613128565b600191505061250e565b60ff84111561310c5761310c61325d565b6001841b9150848211156131225761312261325d565b5061250e565b5060208310610133831016604e8410600b841016171561315b575081810a838111156131565761315661325d565b61250e565b613168848484600161306f565b80860482111561317a5761317a61325d565b02949350505050565b600081600019048311821515161561319d5761319d61325d565b500290565b6000828210156131b4576131b461325d565b500390565b600060ff821660ff8416808210156131d3576131d361325d565b90039392505050565b60005b838110156131f75781810151838201526020016131df565b83811115613206576000848401525b50505050565b60006000198214156132205761322061325d565b5060010190565b60008261323657613236613273565b500690565b600060ff83168061324e5761324e613273565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a7c57600080fdfea2646970667358221220738749195239c207e420d9a9891a044641ebaf607fdf94a3436d7bd4ffffe38464736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses all token transfers across bridge"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses all token transfers across bridge"
      }
    },
    "title": "ASSETERC1155 bridge on L1",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9307,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "fxRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFxStateSender)9257"
      },
      {
        "astId": 9310,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICheckpointManager)9275"
      },
      {
        "astId": 9312,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9316,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "processedExits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 27731,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 389,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 504,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "_paused",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 43096,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "rootToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IAssetERC1155)31131"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAssetERC1155)31131": {
        "encoding": "inplace",
        "label": "contract IAssetERC1155",
        "numberOfBytes": "20"
      },
      "t_contract(ICheckpointManager)9275": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)9257": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}