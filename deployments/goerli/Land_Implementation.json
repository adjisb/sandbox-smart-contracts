{
  "address": "0x3caFC4f876F8c548c9092b63BdD5C84B74b6e1AB",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "height",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "sender",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approveFor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "size",
          "type": "uint256"
        },
        {
          "name": "x",
          "type": "uint256"
        },
        {
          "name": "y",
          "type": "uint256"
        },
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferQuad",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "metaTransactionContract",
          "type": "address"
        },
        {
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "size",
          "type": "uint256"
        },
        {
          "name": "x",
          "type": "uint256"
        },
        {
          "name": "y",
          "type": "uint256"
        },
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintAndTransferQuad",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "size",
          "type": "uint256"
        },
        {
          "name": "x",
          "type": "uint256"
        },
        {
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "size",
          "type": "uint256"
        },
        {
          "name": "x",
          "type": "uint256"
        },
        {
          "name": "y",
          "type": "uint256"
        },
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintQuad",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getY",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "_numNFTPerAddress",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMetaTransactionProcessor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getX",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_owners",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "_operatorsForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "width",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "superOperator",
          "type": "address"
        },
        {
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "id",
          "type": "uint256"
        },
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_operators",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "minter",
          "type": "address"
        },
        {
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMetaTransactionProcessor",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "name": "xs",
          "type": "uint256[]"
        },
        {
          "name": "ys",
          "type": "uint256[]"
        },
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferQuad",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "sender",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "Minter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "MetaTransactionProcessor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    }
  ],
  "transactionHash": "0xf8b786424d6e8a12f60b6aad748f149302c1ed01dd685e00a8c1ac000e514250",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0x3caFC4f876F8c548c9092b63BdD5C84B74b6e1AB",
    "transactionIndex": 44,
    "gasUsed": "4441225",
    "logsBloom": "0x
    "blockHash": "0xad59dc413c45242bd958e888566fd84a561dbef615d5695c40baaff66a20cb90",
    "transactionHash": "0xf8b786424d6e8a12f60b6aad748f149302c1ed01dd685e00a8c1ac000e514250",
    "logs": [],
    "blockNumber": 8373514,
    "cumulativeGasUsed": "11759855",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "84fd80ea1745398757adf3d650e0462d",
  "metadata": "{\"compiler\":{\"version\":\"0.5.9+commit.c68bc34e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"height\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"ids\",\"type\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"ids\",\"type\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferQuad\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"metaTransactionContract\",\"type\":\"address\"},{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintAndTransferQuad\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintQuad\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_numNFTPerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMetaTransactionProcessor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_owners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_operatorsForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"width\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"superOperator\",\"type\":\"address\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_operators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMetaTransactionProcessor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"isOperator\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"name\":\"xs\",\"type\":\"uint256[]\"},{\"name\":\"ys\",\"type\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferQuad\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Minter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MetaTransactionProcessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"params\":{\"id\":\"The id of the token\",\"operator\":\"The address receiving the approval\"}},\"approveFor(address,address,uint256)\":{\"params\":{\"id\":\"The id of the token\",\"operator\":\"The address receiving the approval\",\"sender\":\"The address giving the approval\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for\"},\"return\":\"The number of Land token owned by the address\"},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"additional data\",\"from\":\"The sender of the token\",\"ids\":\"The ids of the tokens\",\"to\":\"The recipient of the token\"}},\"batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)\":{\"params\":{\"data\":\"additional data\",\"from\":\"current owner of the quad\",\"sizes\":\"list of sizes for each quad\",\"to\":\"destination\",\"xs\":\"list of top left x coordinates for each quad\",\"ys\":\"list of top left y coordinates for each quad\"}},\"burn(uint256)\":{\"params\":{\"id\":\"token which will be burnt.\"}},\"burnFrom(address,uint256)\":{\"params\":{\"from\":\"address whose token is to be burnt.\",\"id\":\"token which will be burnt.\"}},\"changeAdmin(address)\":{\"params\":{\"newAdmin\":\"address of the new administrator.\"}},\"exists(uint256,uint256,uint256)\":{\"params\":{\"size\":\"size of the\",\"x\":\"x coordinate of the quad\",\"y\":\"y coordinate of the quad\"},\"return\":\"bool for if Land has been minted or not\"},\"getAdmin()\":{\"return\":\"the current administrator of this contract.\"},\"getApproved(uint256)\":{\"params\":{\"id\":\"The id of the token\"},\"return\":\"The address of the operator\"},\"getX(uint256)\":{\"params\":{\"id\":\"tokenId\"},\"return\":\"the x coordinates\"},\"getY(uint256)\":{\"params\":{\"id\":\"tokenId\"},\"return\":\"the y coordinates\"},\"height()\":{\"return\":\"height\"},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator\",\"owner\":\"The address of the owner\"},\"return\":\"The status of the approval\"},\"isMetaTransactionProcessor(address)\":{\"params\":{\"who\":\"The address to query.\"},\"return\":\"whether the address has meta-transaction execution rights.\"},\"isMinter(address)\":{\"params\":{\"who\":\"The address to query.\"},\"return\":\"whether the address has minter rights.\"},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"return\":\"whether the address has superOperator rights.\"},\"mintAndTransferQuad(address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"extra data to pass to the transfer\",\"size\":\"The size of the new quad\",\"to\":\"The recipient of the new quad\",\"x\":\"The top left x coordinate of the new quad\",\"y\":\"The top left y coordinate of the new quad\"}},\"mintQuad(address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"extra data to pass to the transfer\",\"size\":\"The size of the new quad\",\"to\":\"The recipient of the new quad\",\"x\":\"The top left x coordinate of the new quad\",\"y\":\"The top left y coordinate of the new quad\"}},\"name()\":{\"return\":\"The name of the token contract\"},\"ownerOf(uint256)\":{\"params\":{\"id\":\"The id of the Land\"},\"return\":\"The address of the owner\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"additional data\",\"from\":\"The sender of the token\",\"ids\":\"The ids of the tokens\",\"to\":\"The recipient of the token\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token\",\"id\":\"The id of the token\",\"to\":\"The recipient of the token\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data\",\"from\":\"The sender of the token\",\"id\":\"The id of the token\",\"to\":\"The recipient of the token\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval\",\"operator\":\"The address receiving the approval\"}},\"setApprovalForAllFor(address,address,bool)\":{\"params\":{\"approved\":\"The determination of the approval\",\"operator\":\"The address receiving the approval\",\"sender\":\"The address giving the approval\"}},\"setMetaTransactionProcessor(address,bool)\":{\"params\":{\"enabled\":\"set whether the metaTransactionProcessor is enabled or disabled.\",\"metaTransactionProcessor\":\"address that will be given/removed metaTransactionProcessor rights.\"}},\"setMinter(address,bool)\":{\"params\":{\"enabled\":\"set whether the minter is enabled or disabled.\",\"minter\":\"address that will be given/removed minter right.\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"The id of the interface\"},\"return\":\"True if the interface is supported\"},\"symbol()\":{\"return\":\"The symbol of the token contract\"},\"tokenURI(uint256)\":{\"params\":{\"id\":\"The id of the token\"},\"return\":\"The URI of the token\"},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token\",\"id\":\"The id of the token\",\"to\":\"The recipient of the token\"}},\"transferQuad(address,address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"additional data\",\"from\":\"current owner of the quad\",\"size\":\"size of the quad\",\"to\":\"destination\",\"x\":\"The top left x coordinate of the quad\",\"y\":\"The top left y coordinate of the quad\"}},\"width()\":{\"return\":\"width\"}}},\"userdoc\":{\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf\"},\"approveFor(address,address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf\"},\"balanceOf(address)\":{\"notice\":\"Return the number of Land owned by an address\"},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses\"},\"batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)\":{\"notice\":\"transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\"},\"burn(uint256)\":{\"notice\":\"Burns token `id`.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burn token`id` from `from`.\"},\"changeAdmin(address)\":{\"notice\":\"change the administrator to be `newAdmin`.\"},\"exists(uint256,uint256,uint256)\":{\"notice\":\"checks if Land has been minted or not\"},\"getAdmin()\":{\"notice\":\"gives the current administrator of this contract.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token\"},\"getX(uint256)\":{\"notice\":\"x coordinate of Land token\"},\"getY(uint256)\":{\"notice\":\"y coordinate of Land token\"},\"height()\":{\"notice\":\"total height of the map\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator\"},\"isMetaTransactionProcessor(address)\":{\"notice\":\"check whether address `who` is given meta-transaction execution rights.\"},\"isMinter(address)\":{\"notice\":\"check whether address `who` is given minter rights.\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"mintAndTransferQuad(address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Checks if a parent quad has child quads already minted. Then mints the rest child quads and transfers the parent quad. Should only be called by the tunnel.\"},\"mintQuad(address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\"},\"name()\":{\"notice\":\"Return the name of the token contract\"},\"ownerOf(uint256)\":{\"notice\":\"Return the owner of a Land\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses ensuring the receiving contract has a receiver method\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender\"},\"setMetaTransactionProcessor(address,bool)\":{\"notice\":\"Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\"},\"setMinter(address,bool)\":{\"notice\":\"Enable or disable the ability of `minter` to mint tokens\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata\"},\"symbol()\":{\"notice\":\"Return the symbol of the token contract\"},\"tokenURI(uint256)\":{\"notice\":\"Return the URI of a specific token\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses\"},\"transferQuad(address,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\"},\"width()\":{\"notice\":\"total width of the map\"}}}},\"settings\":{\"compilationTarget\":{\"src/solc_0.5/LandV3.sol\":\"LandV3\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/solc_0.5/Land/erc721/ERC721BaseTokenV2.sol\":{\"content\":\"/* solhint-disable func-order, code-complexity */\\npragma solidity 0.5.9;\\n\\nimport \\\"../../contracts_common/Libraries/AddressUtils.sol\\\";\\nimport \\\"../../contracts_common/Interfaces/ERC721TokenReceiver.sol\\\";\\nimport \\\"../../contracts_common/Interfaces/ERC721Events.sol\\\";\\nimport \\\"../../contracts_common/BaseWithStorage/SuperOperatorsV2.sol\\\";\\nimport \\\"../../contracts_common/BaseWithStorage/MetaTransactionReceiverV2.sol\\\";\\nimport \\\"../../contracts_common/Interfaces/ERC721MandatoryTokenReceiver.sol\\\";\\n\\ncontract ERC721BaseTokenV2 is ERC721Events, SuperOperatorsV2, MetaTransactionReceiverV2 {\\n    using AddressUtils for address;\\n\\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\\n\\n    mapping (address => uint256) public _numNFTPerAddress;\\n    mapping (uint256 => uint256) public _owners;\\n    mapping (address => mapping(address => bool)) public _operatorsForAll;\\n    mapping (uint256 => address) public _operators;\\n\\n    bool internal _initialized;\\n\\n    modifier initializer() {\\n        require(!_initialized, \\\"ERC721BaseToken: Contract already initialized\\\");\\n        _;\\n    }\\n\\n    function initialize (\\n        address metaTransactionContract,\\n        address admin\\n    ) public initializer {\\n        _admin = admin;\\n        _setMetaTransactionProcessor(metaTransactionContract, true);\\n        _initialized = true;\\n    }\\n\\n    function _transferFrom(address from, address to, uint256 id) internal {\\n        _numNFTPerAddress[from]--;\\n        _numNFTPerAddress[to]++;\\n        _owners[id] = uint256(to);\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /**\\n     * @notice Return the number of Land owned by an address\\n     * @param owner The address to look for\\n     * @return The number of Land token owned by the address\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        require(owner != address(0), \\\"owner is zero address\\\");\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n\\n    function _ownerOf(uint256 id) internal view returns (address) {\\n        return address(_owners[id]);\\n    }\\n\\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n        uint256 data = _owners[id];\\n        owner = address(data);\\n        operatorEnabled = (data / 2**255) == 1;\\n    }\\n\\n    /**\\n     * @notice Return the owner of a Land\\n     * @param id The id of the Land\\n     * @return The address of the owner\\n     */\\n    function ownerOf(uint256 id) external view returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n    }\\n\\n    function _approveFor(address owner, address operator, uint256 id) internal {\\n        if(operator == address(0)) {\\n            _owners[id] = uint256(owner); // no need to resset the operator, it will be overriden next time\\n        } else {\\n            _owners[id] = uint256(owner) + 2**255;\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external {\\n        address owner = _ownerOf(id);\\n        require(sender != address(0), \\\"sender is zero address\\\");\\n        require(\\n            msg.sender == sender ||\\n            _metaTransactionContracts[msg.sender] ||\\n            _operatorsForAll[sender][msg.sender] ||\\n            _superOperators[msg.sender],\\n            \\\"not authorized to approve\\\"\\n        );\\n        require(owner == sender, \\\"owner != sender\\\");\\n        _approveFor(owner, operator, id);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approve(address operator, uint256 id) external {\\n        address owner = _ownerOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        require(\\n            owner == msg.sender ||\\n            _operatorsForAll[owner][msg.sender] ||\\n            _superOperators[msg.sender],\\n            \\\"not authorized to approve\\\"\\n        );\\n        _approveFor(owner, operator, id);\\n    }\\n\\n    /**\\n     * @notice Get the approved operator for a specific token\\n     * @param id The id of the token\\n     * @return The address of the operator\\n     */\\n    function getApproved(uint256 id) external view returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkTransfer(address from, address to, uint256 id) internal view returns (bool isMetaTx) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        require(owner == from, \\\"not owner in _checkTransfer\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        isMetaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        if (msg.sender != from && !isMetaTx) {\\n            require(\\n                _operatorsForAll[from][msg.sender] ||\\n                (operatorEnabled && _operators[id] == msg.sender) ||\\n                _superOperators[msg.sender],\\n                \\\"not approved to transfer\\\"\\n            );\\n        }\\n    }\\n\\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success;\\n        bool result;\\n        bytes memory call_data = abi.encodeWithSelector(\\n            ERC165ID,\\n            interfaceId\\n        );\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let call_ptr := add(0x20, call_data)\\n            let call_size := mload(call_data)\\n            let output := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(output, 0x0)\\n            success := staticcall(\\n                10000,\\n                _contract,\\n                call_ptr,\\n                call_size,\\n                output,\\n                0x20\\n            ) // 32 bytes\\n            result := mload(output)\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result;\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n    */\\n    function transferFrom(address from, address to, uint256 id) external {\\n        bool metaTx = _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            require(\\n                _checkOnERC721Received(metaTx ? from : msg.sender, from, to, id, \\\"\\\"),\\n                \\\"erc721 transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     * @param data Additional data\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, bytes memory data) public {\\n        bool metaTx = _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(\\n                _checkOnERC721Received(metaTx ? from : msg.sender, from, to, id, data),\\n                \\\"ERC721: transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The send of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id) external {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Transfer many tokens between 2 addresses\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param ids The ids of the tokens\\n     * @param data additional data\\n    */\\n    function batchTransferFrom(address from, address to, uint256[] calldata ids, bytes calldata data) external {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    function _batchTransferFrom(address from, address to, uint256[] memory ids, bytes memory data, bool safe) internal {\\n        bool metaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        bool authorized = msg.sender == from ||\\n            metaTx ||\\n            _operatorsForAll[from][msg.sender] ||\\n            _superOperators[msg.sender];\\n\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n\\n        uint256 numTokens = ids.length;\\n        for(uint256 i = 0; i < numTokens; i ++) {\\n            uint256 id = ids[i];\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n            require(owner == from, \\\"not owner in batchTransferFrom\\\");\\n            require(authorized || (operatorEnabled && _operators[id] == msg.sender), \\\"not authorized\\\");\\n            _owners[id] = uint256(to);\\n            emit Transfer(from, to, id);\\n        }\\n        if (from != to) {\\n            _numNFTPerAddress[from] -= numTokens;\\n            _numNFTPerAddress[to] += numTokens;\\n        }\\n\\n        if (to.isContract()) {\\n            if (_checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n                require(\\n                    _checkOnERC721BatchReceived(metaTx ? from : msg.sender, from, to, ids, data),\\n                    \\\"erc721 batch transfer rejected by to\\\"\\n                );\\n            } else if (safe) {\\n                for (uint256 i = 0; i < numTokens; i ++) {\\n                    require(\\n                        _checkOnERC721Received(metaTx ? from : msg.sender, from, to, ids[i], \\\"\\\"),\\n                        \\\"erc721 transfer rejected by to\\\"\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer many tokens between 2 addresses ensuring the receiving contract has a receiver method\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param ids The ids of the tokens\\n     * @param data additional data\\n    */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, bytes calldata data) external {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) external pure returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        require(\\n            msg.sender == sender ||\\n            _metaTransactionContracts[msg.sender] ||\\n            _superOperators[msg.sender],\\n            \\\"not authorized to approve for all\\\"\\n        );\\n\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAll(address operator, bool approved) external {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(\\n            !_superOperators[operator],\\n            \\\"super operator can't have their approvalForAll changed\\\"\\n        );\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @notice Check if the sender approved the operator\\n     * @param owner The address of the owner\\n     * @param operator The address of the operator\\n     * @return The status of the approval\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool isOperator)\\n    {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    function _burn(address from, address owner, uint256 id) internal {\\n        require(from == owner, \\\"not owner\\\");\\n        _owners[id] = 2**160; // cannot mint it again\\n        _numNFTPerAddress[from]--;\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    /// @notice Burns token `id`.\\n    /// @param id token which will be burnt.\\n    function burn(uint256 id) external {\\n        _burn(msg.sender, _ownerOf(id), id);\\n    }\\n\\n    /// @notice Burn token`id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id token which will be burnt.\\n    function burnFrom(address from, uint256 id) external {\\n        require(from != address(0), \\\"Invalid sender address\\\");\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(\\n            msg.sender == from ||\\n            _metaTransactionContracts[msg.sender] ||\\n            (operatorEnabled && _operators[id] == msg.sender) ||\\n            _operatorsForAll[from][msg.sender] ||\\n            _superOperators[msg.sender],\\n            \\\"not authorized to burn\\\"\\n        );\\n        _burn(from, owner, id);\\n    }\\n\\n    function _checkOnERC721Received(address operator, address from, address to, uint256 tokenId, bytes memory _data)\\n        internal returns (bool)\\n    {\\n        bytes4 retval = ERC721TokenReceiver(to).onERC721Received(operator, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _checkOnERC721BatchReceived(address operator, address from, address to, uint256[] memory ids, bytes memory _data)\\n        internal returns (bool)\\n    {\\n        bytes4 retval = ERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\\n        return (retval == _ERC721_BATCH_RECEIVED);\\n    }\\n\\n    // Empty storage space in contracts for future enhancements\\n    // ref: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/issues/13)\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa440571ade6d41ae691fe8f8d840aa35768b60ef0d04901a038d709baf4625ce\"},\"src/solc_0.5/Land/erc721/LandBaseTokenV3.sol\":{\"content\":\"/* solhint-disable func-order, code-complexity */\\npragma solidity 0.5.9;\\n\\nimport \\\"./ERC721BaseTokenV2.sol\\\";\\n\\ncontract LandBaseTokenV3 is ERC721BaseTokenV2 {\\n    // Our grid is 408 x 408 lands\\n    uint256 internal constant GRID_SIZE = 408;\\n\\n    uint256 internal constant LAYER = 0xFF00000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_1x1 = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_3x3 = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_6x6 = 0x0200000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_12x12 = 0x0300000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_24x24 = 0x0400000000000000000000000000000000000000000000000000000000000000;\\n\\n    mapping(address => bool) internal _minters;\\n    event Minter(address superOperator, bool enabled);\\n\\n    struct Land {\\n        uint256 x;\\n        uint256 y;\\n        uint256 size;\\n    }\\n\\n    /**\\n     * @notice Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external {\\n        require(to != address(0), \\\"to is zero address\\\");\\n        require(isMinter(msg.sender), \\\"Only a minter can mint\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n\\n        (uint256 layer, , ) = _getQuadLayer(size);\\n        uint256 quadId = _getQuadId(layer, x, y);\\n\\n        _checkOwner(size, x, y, 24);\\n        for (uint256 i = 0; i < size * size; i++) {\\n            uint256 _id = _idInPath(i, size, x, y);\\n            require(_owners[_id] == 0, \\\"Already minted\\\");\\n            emit Transfer(address(0), to, _id);\\n        }\\n\\n        _owners[quadId] = uint256(to);\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(msg.sender, address(0), to, size, x, y, data);\\n    }\\n\\n    /**\\n     * @notice Checks if a parent quad has child quads already minted.\\n     *  Then mints the rest child quads and transfers the parent quad.\\n     *  Should only be called by the tunnel.\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintAndTransferQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external {\\n        if (exists(size, x, y) == true) {\\n            _transferQuad(msg.sender, to, size, x, y);\\n            _numNFTPerAddress[msg.sender] -= size * size;\\n            _numNFTPerAddress[to] += size * size;\\n            _checkBatchReceiverAcceptQuad(msg.sender, msg.sender, to, size, x, y, data);\\n        } else {\\n            _mintAndTransferQuad(to, size, x, y, data);\\n        }\\n    }\\n\\n    /// @notice transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size size of the quad\\n    /// @param x The top left x coordinate of the quad\\n    /// @param y The top left y coordinate of the quad\\n    /// @param data additional data\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        bool metaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        if (msg.sender != from && !metaTx) {\\n            require(\\n                _operatorsForAll[from][msg.sender] || _superOperators[msg.sender],\\n                \\\"not authorized to transferQuad\\\"\\n            );\\n        }\\n        _transferQuad(from, to, size, x, y);\\n        _numNFTPerAddress[from] -= size * size;\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(metaTx ? from : msg.sender, from, to, size, x, y, data);\\n    }\\n\\n    /// @notice transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param sizes list of sizes for each quad\\n    /// @param xs list of top left x coordinates for each quad\\n    /// @param ys list of top left y coordinates for each quad\\n    /// @param data additional data\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        require(sizes.length == xs.length && xs.length == ys.length, \\\"invalid data\\\");\\n        bool metaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        if (msg.sender != from && !metaTx) {\\n            require(\\n                _operatorsForAll[from][msg.sender] || _superOperators[msg.sender],\\n                \\\"not authorized to transferMultiQuads\\\"\\n            );\\n        }\\n        uint256 numTokensTransfered = 0;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            uint256 size = sizes[i];\\n            _transferQuad(from, to, size, xs[i], ys[i]);\\n            numTokensTransfered += size * size;\\n        }\\n        _numNFTPerAddress[from] -= numTokensTransfered;\\n        _numNFTPerAddress[to] += numTokensTransfered;\\n\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](numTokensTransfered);\\n            uint256 counter = 0;\\n            for (uint256 j = 0; j < sizes.length; j++) {\\n                uint256 size = sizes[j];\\n                for (uint256 i = 0; i < size * size; i++) {\\n                    ids[counter] = _idInPath(i, size, xs[j], ys[j]);\\n                    counter++;\\n                }\\n            }\\n            require(\\n                _checkOnERC721BatchReceived(metaTx ? from : msg.sender, from, to, ids, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Enable or disable the ability of `minter` to mint tokens\\n    /// @param minter address that will be given/removed minter right.\\n    /// @param enabled set whether the minter is enabled or disabled.\\n    function setMinter(address minter, bool enabled) external onlyAdmin {\\n        require(minter != address(0), \\\"address 0 is not allowed as minter\\\");\\n        require(enabled != _minters[minter], \\\"the status should be different than the current one\\\");\\n        _minters[minter] = enabled;\\n        emit Minter(minter, enabled);\\n    }\\n\\n    /// @notice total width of the map\\n    /// @return width\\n    function width() external pure returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice total height of the map\\n    /// @return height\\n    function height() external pure returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice x coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the x coordinates\\n    function getX(uint256 id) external pure returns (uint256) {\\n        return _getX(id);\\n    }\\n\\n    /// @notice y coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the y coordinates\\n    function getY(uint256 id) external pure returns (uint256) {\\n        return _getY(id);\\n    }\\n\\n    /// @notice check whether address `who` is given minter rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minter rights.\\n    function isMinter(address who) public view returns (bool) {\\n        return _minters[who];\\n    }\\n\\n    /// @notice checks if Land has been minted or not\\n    /// @param size size of the\\n    /// @param x x coordinate of the quad\\n    /// @param y y coordinate of the quad\\n    /// @return bool for if Land has been minted or not\\n    function exists(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) public view returns (bool) {\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n        return _ownerOfQuad(size, x, y) != address(0);\\n    }\\n\\n    function _mintAndTransferQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        require(to != address(0), \\\"to is zero address\\\");\\n        require(isMinter(msg.sender), \\\"Only a minter can mint\\\");\\n\\n        (uint256 layer, , ) = _getQuadLayer(size);\\n        uint256 quadId = _getQuadId(layer, x, y);\\n\\n        // Length of array is equal to number of 3x3 child quad a 24x24 quad can have\\n        Land[] memory quadMinted = new Land[](64);\\n        uint256 index;\\n        uint256 landMinted;\\n\\n        if (size > 3) {\\n            (index, landMinted) = _checkAndClearOwner(\\n                Land({x: x, y: y, size: size}),\\n                quadMinted,\\n                landMinted,\\n                index,\\n                size / 2\\n            );\\n        }\\n\\n        {\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 _id = _idInPath(i, size, x, y);\\n                bool isAlreadyMinted = _isQuadMinted(quadMinted, Land({x: _getX(_id), y: _getY(_id), size: 1}), index);\\n                if (isAlreadyMinted) {\\n                    emit Transfer(msg.sender, to, _id);\\n                } else {\\n                    if (_owners[_id] == uint256(msg.sender)) {\\n                        landMinted += 1;\\n                        emit Transfer(msg.sender, to, _id);\\n                    } else {\\n                        require(_owners[_id] == 0, \\\"Already minted\\\");\\n\\n                        emit Transfer(address(0), to, _id);\\n                    }\\n                }\\n            }\\n        }\\n\\n        _checkBatchReceiverAcceptQuadAndClearOwner(quadMinted, index, landMinted, to, size, x, y, data);\\n\\n        _owners[quadId] = uint256(to);\\n        _numNFTPerAddress[to] += size * size;\\n        _numNFTPerAddress[msg.sender] -= landMinted;\\n    }\\n\\n    function _checkBatchReceiverAcceptQuad(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](size * size);\\n            for (uint256 i = 0; i < size * size; i++) {\\n                ids[i] = _idInPath(i, size, x, y);\\n            }\\n            require(_checkOnERC721BatchReceived(operator, from, to, ids, data), \\\"erc721 batch transfer rejected by to\\\");\\n        }\\n    }\\n\\n    function _checkBatchReceiverAcceptQuadAndClearOwner(\\n        Land[] memory quadMinted,\\n        uint256 index,\\n        uint256 landMinted,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory idsToTransfer = new uint256[](landMinted);\\n            uint256 transferIndex;\\n            uint256[] memory idsToMint = new uint256[]((size * size) - landMinted);\\n            uint256 mintIndex;\\n\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 id = _idInPath(i, size, x, y);\\n\\n                if (_isQuadMinted(quadMinted, Land({x: _getX(id), y: _getY(id), size: 1}), index)) {\\n                    idsToTransfer[transferIndex] = id;\\n                    transferIndex++;\\n                } else if (_owners[id] == uint256(msg.sender)) {\\n                    _owners[id] = 0;\\n                    idsToTransfer[transferIndex] = id;\\n                    transferIndex++;\\n                } else {\\n                    idsToMint[mintIndex] = id;\\n                    mintIndex++;\\n                }\\n            }\\n            require(\\n                _checkOnERC721BatchReceived(msg.sender, address(0), to, idsToMint, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n            require(\\n                _checkOnERC721BatchReceived(msg.sender, msg.sender, to, idsToTransfer, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        } else {\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 id = _idInPath(i, size, x, y);\\n                if (_owners[id] == uint256(msg.sender)) _owners[id] = 0;\\n            }\\n        }\\n    }\\n\\n    function _transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal {\\n        if (size == 1) {\\n            uint256 id1x1 = _getQuadId(LAYER_1x1, x, y);\\n            address owner = _ownerOf(id1x1);\\n            require(owner != address(0), \\\"token does not exist\\\");\\n            require(owner == from, \\\"not owner in _transferQuad\\\");\\n            _owners[id1x1] = uint256(to);\\n        } else {\\n            _regroup(from, to, size, x, y);\\n        }\\n        for (uint256 i = 0; i < size * size; i++) {\\n            emit Transfer(from, to, _idInPath(i, size, x, y));\\n        }\\n    }\\n\\n    function _checkOwner(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        uint256 quadCompareSize\\n    ) internal view {\\n        (uint256 layer, , ) = _getQuadLayer(quadCompareSize);\\n\\n        if (size <= quadCompareSize) {\\n            // when the size of the quad is smaller than the quadCompareSize(size to be compared with),\\n            // then it is checked if the bigger quad which encapsulates the quad to be minted\\n            // of with size equals the quadCompareSize has been minted or not\\n            require(\\n                _owners[\\n                    _getQuadId(layer, (x / quadCompareSize) * quadCompareSize, (y / quadCompareSize) * quadCompareSize)\\n                ] == 0,\\n                \\\"Already minted\\\"\\n            );\\n        } else {\\n            // when the size is smaller than the quadCompare size the owner of all the smaller quads with size\\n            // quadCompare size in the quad to be minted are checked if they are minted or not\\n            uint256 toX = x + size;\\n            uint256 toY = y + size;\\n            for (uint256 xi = x; xi < toX; xi += quadCompareSize) {\\n                for (uint256 yi = y; yi < toY; yi += quadCompareSize) {\\n                    require(_owners[_getQuadId(layer, xi, yi)] == 0, \\\"Already minted\\\");\\n                }\\n            }\\n        }\\n\\n        quadCompareSize = quadCompareSize / 2;\\n        if (quadCompareSize >= 3) _checkOwner(size, x, y, quadCompareSize);\\n    }\\n\\n    function _checkAndClear(address from, uint256 id) internal returns (bool) {\\n        uint256 owner = _owners[id];\\n        if (owner != 0) {\\n            require(address(owner) == from, \\\"not owner\\\");\\n            _owners[id] = 0;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _regroup(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal {\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n        if (size == 3 || size == 6 || size == 12 || size == 24) {\\n            _regroupQuad(from, to, Land({x: x, y: y, size: size}), true, size / 2);\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n    }\\n\\n    function _checkAndClearOwner(\\n        Land memory land,\\n        Land[] memory quadMinted,\\n        uint256 landMinted,\\n        uint256 index,\\n        uint256 quadCompareSize\\n    ) internal returns (uint256, uint256) {\\n        (uint256 layer, , ) = _getQuadLayer(quadCompareSize);\\n        uint256 toX = land.x + land.size;\\n        uint256 toY = land.y + land.size;\\n\\n        for (uint256 xi = land.x; xi < toX; xi += quadCompareSize) {\\n            for (uint256 yi = land.y; yi < toY; yi += quadCompareSize) {\\n                bool isQuadChecked = _isQuadMinted(quadMinted, Land({x: xi, y: yi, size: quadCompareSize}), index);\\n                if (!isQuadChecked) {\\n                    uint256 id = _getQuadId(layer, xi, yi);\\n                    address owner = address(uint160(_owners[id]));\\n\\n                    if (owner == msg.sender) {\\n                        quadMinted[index] = Land({x: xi, y: yi, size: quadCompareSize});\\n                        index++;\\n                        landMinted += quadCompareSize * quadCompareSize;\\n                        _owners[id] = 0;\\n                    } else {\\n                        require(owner == address(0), \\\"Already minted\\\");\\n                    }\\n                }\\n            }\\n        }\\n\\n        quadCompareSize = quadCompareSize / 2;\\n        if (quadCompareSize >= 3)\\n            (index, landMinted) = _checkAndClearOwner(land, quadMinted, landMinted, index, quadCompareSize);\\n        return (index, landMinted);\\n    }\\n\\n    /// @dev checks if the Land's child quads are owned by the from address and clears all the previous owners\\n    /// if all the child quads are not owned by the \\\"from\\\" address then the owner of parent quad to the land\\n    /// is checked if owned by the \\\"from\\\" address. If from is the owner then land owner is set to \\\"to\\\" address\\n    /// @param from address of the previous owner\\n    /// @param to address of the new owner\\n    /// @param land the quad to be regrouped and transfered\\n    /// @param set for setting the new owner\\n    /// @param childQuadSize  size of the child quad to be checked for owner in the regrouping\\n    function _regroupQuad(\\n        address from,\\n        address to,\\n        Land memory land,\\n        bool set,\\n        uint256 childQuadSize\\n    ) internal returns (bool) {\\n        (uint256 layer, , uint256 childLayer) = _getQuadLayer(land.size);\\n        uint256 quadId = _getQuadId(layer, land.x, land.y);\\n        bool ownerOfAll = true;\\n\\n        {\\n            // double for loop itereates and checks owner of all the smaller quads in land\\n            for (uint256 xi = land.x; xi < land.x + land.size; xi += childQuadSize) {\\n                for (uint256 yi = land.y; yi < land.y + land.size; yi += childQuadSize) {\\n                    uint256 ownerChild;\\n                    bool ownAllIndividual;\\n                    if (childQuadSize < 3) {\\n                        // case when the smaller quad is 1x1,\\n                        ownAllIndividual = _checkAndClear(from, _getQuadId(LAYER_1x1, xi, yi)) && ownerOfAll;\\n                    } else {\\n                        // recursively calling the _regroupQuad function to check the owner of child quads.\\n                        ownAllIndividual = _regroupQuad(\\n                            from,\\n                            to,\\n                            Land({x: xi, y: yi, size: childQuadSize}),\\n                            false,\\n                            childQuadSize / 2\\n                        );\\n                        uint256 idChild = _getQuadId(childLayer, xi, yi);\\n                        ownerChild = _owners[idChild];\\n                        if (ownerChild != 0) {\\n                            if (!ownAllIndividual) {\\n                                // checking the owner of child quad\\n                                require(ownerChild == uint256(from), \\\"not owner of child Quad\\\");\\n                            }\\n                            // clearing owner of child quad\\n                            _owners[idChild] = 0;\\n                        }\\n                    }\\n                    // ownerOfAll should be true if \\\"from\\\" is owner of all the child quads ittereated over\\n                    ownerOfAll = (ownAllIndividual || ownerChild != 0) && ownerOfAll;\\n                }\\n            }\\n        }\\n\\n        // if set is true it check if the \\\"from\\\" is owner of all else checks for the owner of parent quad is\\n        // owned by \\\"from\\\" and sets the owner for the id of land to \\\"to\\\" address.\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(_ownerOfQuad(land.size, land.x, land.y) == from, \\\"not owner of all sub quads nor parent quads\\\");\\n            }\\n            _owners[quadId] = uint256(to);\\n            return true;\\n        }\\n\\n        return ownerOfAll;\\n    }\\n\\n    function _idInPath(\\n        uint256 i,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        uint256 row = i / size;\\n        if (row % 2 == 0) {\\n            // allow ids to follow a path in a quad\\n            return _getQuadId(LAYER_1x1, (x + (i % size)), (y + row));\\n        } else {\\n            return _getQuadId(LAYER_1x1, (x + size) - (1 + (i % size)), (y + row));\\n        }\\n    }\\n\\n    function _isQuadMinted(\\n        Land[] memory mintedLand,\\n        Land memory quad,\\n        uint256 index\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < index; i++) {\\n            Land memory land = mintedLand[i];\\n            if (\\n                land.size > quad.size &&\\n                quad.x >= land.x &&\\n                quad.x < land.x + land.size &&\\n                quad.y >= land.y &&\\n                quad.y < land.y + land.size\\n            ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _getX(uint256 id) internal pure returns (uint256) {\\n        return ((id << 8) >> 8) % GRID_SIZE;\\n    }\\n\\n    function _getY(uint256 id) internal pure returns (uint256) {\\n        return ((id << 8) >> 8) / GRID_SIZE;\\n    }\\n\\n    function _getQuadLayer(uint256 size)\\n        internal\\n        pure\\n        returns (\\n            uint256 layer,\\n            uint256 parentSize,\\n            uint256 childLayer\\n        )\\n    {\\n        if (size == 1) {\\n            layer = LAYER_1x1;\\n            parentSize = 3;\\n        } else if (size == 3) {\\n            layer = LAYER_3x3;\\n            parentSize = 6;\\n        } else if (size == 6) {\\n            layer = LAYER_6x6;\\n            parentSize = 12;\\n            childLayer = LAYER_3x3;\\n        } else if (size == 12) {\\n            layer = LAYER_12x12;\\n            parentSize = 24;\\n            childLayer = LAYER_6x6;\\n        } else if (size == 24) {\\n            layer = LAYER_24x24;\\n            childLayer = LAYER_12x12;\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n    }\\n\\n    function _getQuadId(\\n        uint256 layer,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 quadId) {\\n        quadId = layer + x + y * GRID_SIZE;\\n    }\\n\\n    function _ownerOfQuad(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal view returns (address) {\\n        (uint256 layer, uint256 parentSize, ) = _getQuadLayer(size);\\n        address owner = address(_owners[_getQuadId(layer, (x / size) * size, (y / size) * size)]);\\n        if (owner != address(0)) {\\n            return owner;\\n        } else if (size < 24) {\\n            return _ownerOfQuad(parentSize, x, y);\\n        }\\n        return address(0);\\n    }\\n\\n    function _getQuadById(uint256 id)\\n        internal\\n        pure\\n        returns (\\n            uint256 size,\\n            uint256 x,\\n            uint256 y\\n        )\\n    {\\n        x = _getX(id);\\n        y = _getY(id);\\n        uint256 layer = id & LAYER;\\n        if (layer == LAYER_1x1) {\\n            size = 1;\\n        } else if (layer == LAYER_3x3) {\\n            size = 3;\\n        } else if (layer == LAYER_6x6) {\\n            size = 6;\\n        } else if (layer == LAYER_12x12) {\\n            size = 12;\\n        } else if (layer == LAYER_24x24) {\\n            size = 24;\\n        } else {\\n            require(false, \\\"Invalid token id\\\");\\n        }\\n    }\\n\\n    function _ownerOf(uint256 id) internal view returns (address) {\\n        (uint256 size, uint256 x, uint256 y) = _getQuadById(id);\\n        require(x % size == 0 && y % size == 0, \\\"Invalid token id\\\");\\n        return _ownerOfQuad(size, x, y);\\n    }\\n\\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = _getX(id);\\n        uint256 y = _getY(id);\\n        uint256 owner1x1 = _owners[id];\\n\\n        if (owner1x1 != 0) {\\n            owner = address(owner1x1);\\n            operatorEnabled = (owner1x1 / 2**255) == 1;\\n        } else {\\n            owner = _ownerOfQuad(3, (x * 3) / 3, (y * 3) / 3);\\n            operatorEnabled = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3de1d55b2cfa7638c30e8edfacbbe0a63db90c0de04e1bf4c5bf947cec3c526\"},\"src/solc_0.5/LandV3.sol\":{\"content\":\"/* solhint-disable no-empty-blocks */\\n\\npragma solidity 0.5.9;\\n\\nimport \\\"./Land/erc721/LandBaseTokenV3.sol\\\";\\n\\ncontract LandV3 is LandBaseTokenV3 {\\n    /**\\n     * @notice Return the name of the token contract\\n     * @return The name of the token contract\\n     */\\n    function name() external pure returns (string memory) {\\n        return \\\"Sandbox's LANDs\\\";\\n    }\\n\\n    /**\\n     * @notice Return the symbol of the token contract\\n     * @return The symbol of the token contract\\n     */\\n    function symbol() external pure returns (string memory) {\\n        return \\\"LAND\\\";\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function uint2str(uint _i) internal pure returns (string memory) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = byte(uint8(48 + _i % 10));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /**\\n     * @notice Return the URI of a specific token\\n     * @param id The id of the token\\n     * @return The URI of the token\\n     */\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n        require(_ownerOf(id) != address(0), \\\"Id does not exist\\\");\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"https://api.sandbox.game/lands/\\\",\\n                    uint2str(id),\\n                    \\\"/metadata.json\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * 0x5b5e139f is ERC-721 metadata\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) external pure returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n}\\n\",\"keccak256\":\"0xca4fcc0a9ff11b6c94b9d3c82f028248d2a3a25bd7df73d0c567ac229584ef9c\"},\"src/solc_0.5/contracts_common/BaseWithStorage/AdminV2.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\ncontract AdminV2 {\\n\\n    address internal _admin;\\n\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    /// @notice gives the current administrator of this contract.\\n    /// @return the current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @notice change the administrator to be `newAdmin`.\\n    /// @param newAdmin address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        address admin = _admin;\\n        require(msg.sender == admin, \\\"only admin can change admin\\\");\\n        require(newAdmin != admin, \\\"it can be only changed to a new admin\\\");\\n        emit AdminChanged(admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require (msg.sender == _admin, \\\"only admin allowed\\\");\\n        _;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb209accdc816ab4eadc81d6b14e5b218353c7c0e90866c59625f69ee6ba74575\"},\"src/solc_0.5/contracts_common/BaseWithStorage/MetaTransactionReceiverV2.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport \\\"./AdminV2.sol\\\";\\nimport \\\"../../contracts_common/Libraries/AddressUtils.sol\\\";\\n\\ncontract MetaTransactionReceiverV2 is AdminV2 {\\n    using AddressUtils for address;\\n\\n    mapping(address => bool) internal _metaTransactionContracts;\\n    event MetaTransactionProcessor(address metaTransactionProcessor, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    function setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) public onlyAdmin {\\n        require(\\n            metaTransactionProcessor.isContract(),\\n            \\\"only contracts can be meta transaction processor\\\"\\n        );\\n        _setMetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    function _setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) internal {\\n        _metaTransactionContracts[metaTransactionProcessor] = enabled;\\n        emit MetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given meta-transaction execution rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has meta-transaction execution rights.\\n    function isMetaTransactionProcessor(address who) external view returns(bool) {\\n        return _metaTransactionContracts[who];\\n    }\\n}\\n\",\"keccak256\":\"0x72640ea5298b5abf5b3abe136cb5aa4032fa54f861df6c297d21f62b95dffa3a\"},\"src/solc_0.5/contracts_common/BaseWithStorage/SuperOperatorsV2.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport \\\"./AdminV2.sol\\\";\\n\\ncontract SuperOperatorsV2 is AdminV2 {\\n\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external onlyAdmin {\\n        require(\\n            superOperator != address(0),\\n            \\\"address 0 is not allowed as super operator\\\"\\n        );\\n        require(\\n            enabled != _superOperators[superOperator],\\n            \\\"the status should be different than the current one\\\"\\n        );\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0x6108d6cdf0ee9c276ee60b2e894bc382780d8d703a0317a7bbe2411c12bc157e\"},\"src/solc_0.5/contracts_common/Interfaces/ERC721Events.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface ERC721Events {\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _tokenId\\n    );\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _approved,\\n        uint256 indexed _tokenId\\n    );\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n}\\n\",\"keccak256\":\"0x4e501d6f4c603c6ee704782e51c06fd339ac52c3894c12d03ae482dc92e3dd98\"},\"src/solc_0.5/contracts_common/Interfaces/ERC721MandatoryTokenReceiver.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\n/**\\n    Note: The ERC-165 identifier for this interface is 0x5e8bf644.\\n*/\\ninterface ERC721MandatoryTokenReceiver {\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n}\\n\",\"keccak256\":\"0xc394b6d1f8d6587d7cdc8de1bf9d2286ce8ff9d8b3252576d5119e86be1554c7\"},\"src/solc_0.5/contracts_common/Interfaces/ERC721TokenReceiver.sol\":{\"content\":\"/* This Source Code Form is subject to the terms of the Mozilla Public\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\\n *\\n * This code has not been reviewed.\\n * Do not use or deploy this code before reviewing it personally first.\\n */\\n// solhint-disable-next-line compiler-fixed\\npragma solidity 0.5.9;\\n\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x5c8433ead82be7c65620246f9f8baa686ecf7c5702c091a41b5243edf46259c9\"},\"src/solc_0.5/contracts_common/Libraries/AddressUtils.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nlibrary AddressUtils {\\n\\n    function toPayable(address _address) internal pure returns (address payable _payable) {\\n        return address(uint160(_address));\\n    }\\n\\n    function isContract(address addr) internal view returns (bool) {\\n        // for accounts without code, i.e. `keccak256('')`:\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n        bytes32 codehash;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n}\\n\",\"keccak256\":\"0xdab32da611ddf9f10c9d866e8d5b7293507001b57041461ebd3af4dc0cf43c98\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d35760003560e01c806379cc679011610186578063a22cb465116100e3578063c87b56dd11610097578063e985e9c511610071578063e985e9c514610c15578063eaa5e06714610c43578063eeb5a5d114610dc2576102d3565b8063c87b56dd14610ba4578063cf456ae714610bc1578063dc5074af14610bef576102d3565b8063ac9fe421116100c8578063ac9fe42114610a93578063b88d4fde14610ac1578063b9b710e914610b87576102d3565b8063a22cb46514610a3f578063aa271e1a14610a6d576102d3565b80638f2839701161013a578063992924a61161011f578063992924a6146109f45780639d786bbc14610a115780639ededf77146103f7576102d3565b80638f283970146109c657806395d89b41146109ec576102d3565b8063878267641161016b57806387826764146109555780638a04af6a1461097b5780638e5cb5f6146109a9576102d3565b806379cc67901461090c578063845a469714610938576102d3565b806342842e0e116102345780636352211e116101e85780636e1e3bbf116101cd5780636e1e3bbf1461084d5780636e9960c3146108de57806370a08231146108e6576102d3565b80636352211e1461080a578063654b748a14610827576102d3565b8063485cc95511610219578063485cc955146107225780634e6a0f441461075057806355064d85146107e1576102d3565b806342842e0e146106cf57806342966c6814610705576102d3565b806315ddc5351161028b57806328cfbd461161027057806328cfbd46146105225780632b991746146105fd57806338bb305a14610633576102d3565b806315ddc5351461041157806323b872dd146104ec576102d3565b8063081812fc116102bc578063081812fc14610390578063095ea7b3146103c95780630ef26743146103f7576102d3565b806301ffc9a7146102d857806306fdde0314610313575b600080fd5b6102ff600480360360208110156102ee57600080fd5b50356001600160e01b031916610dfa565b604080519115158252519081900360200190f35b61031b610e99565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561035557818101518382015260200161033d565b50505050905090810190601f1680156103825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ad600480360360208110156103a657600080fd5b5035610ed0565b604080516001600160a01b039092168252519081900360200190f35b6103f5600480360360408110156103df57600080fd5b506001600160a01b038135169060200135610f6f565b005b6103ff61108c565b60408051918252519081900360200190f35b6103f56004803603608081101561042757600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561045b57600080fd5b82018360208201111561046d57600080fd5b8035906020019184602083028401116401000000008311171561048f57600080fd5b9193909290916020810190356401000000008111156104ad57600080fd5b8201836020820111156104bf57600080fd5b803590602001918460018302840111640100000000831117156104e157600080fd5b509092509050611092565b6103f56004803603606081101561050257600080fd5b506001600160a01b0381358116916020810135909116906040013561110c565b6103f56004803603608081101561053857600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561056c57600080fd5b82018360208201111561057e57600080fd5b803590602001918460208302840111640100000000831117156105a057600080fd5b9193909290916020810190356401000000008111156105be57600080fd5b8201836020820111156105d057600080fd5b803590602001918460018302840111640100000000831117156105f257600080fd5b5090925090506111d4565b6103f56004803603606081101561061357600080fd5b506001600160a01b03813581169160208101359091169060400135611249565b6103f5600480360360c081101561064957600080fd5b6001600160a01b0382358116926020810135909116916040820135916060810135916080820135919081019060c0810160a082013564010000000081111561069057600080fd5b8201836020820111156106a257600080fd5b803590602001918460018302840111640100000000831117156106c457600080fd5b5090925090506113e1565b6103f5600480360360608110156106e557600080fd5b506001600160a01b0381358116916020810135909116906040013561160d565b6103f56004803603602081101561071b57600080fd5b5035611628565b6103f56004803603604081101561073857600080fd5b506001600160a01b038135811691602001351661163e565b6103f5600480360360a081101561076657600080fd5b6001600160a01b038235169160208101359160408201359160608101359181019060a0810160808201356401000000008111156107a257600080fd5b8201836020820111156107b457600080fd5b803590602001918460018302840111640100000000831117156107d657600080fd5b5090925090506116c4565b6102ff600480360360608110156107f757600080fd5b50803590602081013590604001356117a8565b6103ad6004803603602081101561082057600080fd5b50356118a4565b6102ff6004803603602081101561083d57600080fd5b50356001600160a01b031661190c565b6103f5600480360360a081101561086357600080fd5b6001600160a01b038235169160208101359160408201359160608101359181019060a08101608082013564010000000081111561089f57600080fd5b8201836020820111156108b157600080fd5b803590602001918460018302840111640100000000831117156108d357600080fd5b50909250905061192a565b6103ad611c0a565b6103ff600480360360208110156108fc57600080fd5b50356001600160a01b0316611c19565b6103f56004803603604081101561092257600080fd5b506001600160a01b038135169060200135611c92565b6103ff6004803603602081101561094e57600080fd5b5035611df1565b6103ff6004803603602081101561096b57600080fd5b50356001600160a01b0316611dfc565b6103f56004803603604081101561099157600080fd5b506001600160a01b0381351690602001351515611e0e565b6103ff600480360360208110156109bf57600080fd5b5035611ec8565b6103f5600480360360208110156109dc57600080fd5b50356001600160a01b0316611ed3565b61031b611ff9565b6103ff60048036036020811015610a0a57600080fd5b5035612030565b6102ff60048036036040811015610a2757600080fd5b506001600160a01b0381358116916020013516612042565b6103f560048036036040811015610a5557600080fd5b506001600160a01b0381351690602001351515612062565b6102ff60048036036020811015610a8357600080fd5b50356001600160a01b031661206d565b6103f560048036036040811015610aa957600080fd5b506001600160a01b038135169060200135151561208b565b6103f560048036036080811015610ad757600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135640100000000811115610b1257600080fd5b820183602082011115610b2457600080fd5b80359060200191846001830284011164010000000083111715610b4657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506121f1945050505050565b6103ad60048036036020811015610b9d57600080fd5b5035612293565b61031b60048036036020811015610bba57600080fd5b50356122ae565b6103f560048036036040811015610bd757600080fd5b506001600160a01b0381351690602001351515612417565b6102ff60048036036020811015610c0557600080fd5b50356001600160a01b031661257d565b6102ff60048036036040811015610c2b57600080fd5b506001600160a01b038135811691602001351661259b565b6103f5600480360360c0811015610c5957600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135640100000000811115610c8d57600080fd5b820183602082011115610c9f57600080fd5b80359060200191846020830284011164010000000083111715610cc157600080fd5b919390929091602081019035640100000000811115610cdf57600080fd5b820183602082011115610cf157600080fd5b80359060200191846020830284011164010000000083111715610d1357600080fd5b919390929091602081019035640100000000811115610d3157600080fd5b820183602082011115610d4357600080fd5b80359060200191846020830284011164010000000083111715610d6557600080fd5b919390929091602081019035640100000000811115610d8357600080fd5b820183602082011115610d9557600080fd5b80359060200191846001830284011164010000000083111715610db757600080fd5b5090925090506125f2565b6103f560048036036060811015610dd857600080fd5b506001600160a01b0381358116916020810135909116906040013515156129e0565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161480610e5d57507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b80610e9157507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60408051808201909152600f81527f53616e64626f782773204c414e44730000000000000000000000000000000000602082015290565b6000806000610ede84612ac1565b90925090506001600160a01b038216610f3e576040805162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b8015610f64575050506000818152600660205260409020546001600160a01b0316610e94565b600092505050610e94565b6000610f7a82612bbd565b90506001600160a01b038116610fd7576040805162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03811633148061101157506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b8061102b57503360009081526001602052604090205460ff165b61107c576040805162461bcd60e51b815260206004820152601960248201527f6e6f7420617574686f72697a656420746f20617070726f766500000000000000604482015290519081900360640190fd5b611087818484612c55565b505050565b61019890565b611104868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201829052509250612d34915050565b505050505050565b6000611119848484613177565b90506111268484846133b0565b611138836001600160a01b0316613420565b80156111505750611150836317a2fd9160e21b61345c565b156111ce5761117d816111635733611165565b845b8585856040518060200160405280600081525061350f565b6111ce576040805162461bcd60e51b815260206004820152601e60248201527f657263373231207472616e736665722072656a656374656420627920746f0000604482015290519081900360640190fd5b50505050565b611104868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201919091525060019250612d34915050565b600061125482612bbd565b90506001600160a01b0384166112b1576040805162461bcd60e51b815260206004820152601660248201527f73656e646572206973207a65726f206164647265737300000000000000000000604482015290519081900360640190fd5b336001600160a01b03851614806112d757503360009081526002602052604090205460ff165b8061130557506001600160a01b038416600090815260056020908152604080832033845290915290205460ff165b8061131f57503360009081526001602052604090205460ff165b611370576040805162461bcd60e51b815260206004820152601960248201527f6e6f7420617574686f72697a656420746f20617070726f766500000000000000604482015290519081900360640190fd5b836001600160a01b0316816001600160a01b0316146113d6576040805162461bcd60e51b815260206004820152600f60248201527f6f776e657220213d2073656e6465720000000000000000000000000000000000604482015290519081900360640190fd5b6111ce818484612c55565b6001600160a01b03871661143c576040805162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f2061646472657373000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038616611497576040805162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015290519081900360640190fd5b6000336001600160a01b038916148015906114c157503360009081526002602052604090205460ff165b9050336001600160a01b038916148015906114da575080155b15611571576001600160a01b038816600090815260056020908152604080832033845290915290205460ff168061152057503360009081526001602052604090205460ff165b611571576040805162461bcd60e51b815260206004820152601e60248201527f6e6f7420617574686f72697a656420746f207472616e73666572517561640000604482015290519081900360640190fd5b61157e888888888861365a565b6001600160a01b0380891660009081526003602052604080822080548a800290819003909155928a168252902080549091019055611603816115c057336115c2565b885b898989898989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506137cf92505050565b5050505050505050565b611087838383604051806020016040528060008152506121f1565b61163b3361163583612bbd565b836138b9565b50565b60075460ff16156116805760405162461bcd60e51b815260040180806020018281038252602d815260200180614d97602d913960400191505060405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556116b3826001613994565b50506007805460ff19166001179055565b6116cf8585856117a8565b151560011415611765576116e6338787878761365a565b33600081815260036020908152604080832080548a8002908190039091556001600160a01b038b1684529281902080549093019092558151601f8501829004820281018201909252838252611760929182918a918a918a918a918a908a90819084018382808284376000920191909152506137cf92505050565b611104565b6111048686868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506139f892505050565b60008383816117b357fe5b061580156117c857508382816117c557fe5b06155b611819576040805162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e6174657300000000000000000000000000604482015290519081900360640190fd5b83610198038311158015611831575083610198038211155b611882576040805162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e647300000000000000000000000000000000000000604482015290519081900360640190fd5b600061188f858585613d2b565b6001600160a01b0316141590505b9392505050565b60006118af82612bbd565b90506001600160a01b038116610e94576040805162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b6001600160a01b031660009081526001602052604090205460ff1690565b6001600160a01b038616611985576040805162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f20616464726573730000000000000000000000000000604482015290519081900360640190fd5b61198e3361206d565b6119df576040805162461bcd60e51b815260206004820152601660248201527f4f6e6c792061206d696e7465722063616e206d696e7400000000000000000000604482015290519081900360640190fd5b8484816119e857fe5b061580156119fd57508483816119fa57fe5b06155b611a4e576040805162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e6174657300000000000000000000000000604482015290519081900360640190fd5b84610198038411158015611a66575084610198038311155b611ab7576040805162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e647300000000000000000000000000000000000000604482015290519081900360640190fd5b6000611ac286613dbc565b505090506000611ad3828787613eb9565b9050611ae28787876018613ec3565b60005b878802811015611b93576000611afd828a8a8a613ffa565b60008181526004602052604090205490915015611b52576040805162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015290519081900360640190fd5b60405181906001600160a01b038c16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450600101611ae5565b5060008181526004602090815260408083206001600160a01b038c169081905583526003825280832080548b80020190558051601f870183900483028101830190915285815261160392339290918c918c918c918c91908c908c90819084018382808284376000920191909152506137cf92505050565b6000546001600160a01b031690565b60006001600160a01b038216611c76576040805162461bcd60e51b815260206004820152601560248201527f6f776e6572206973207a65726f20616464726573730000000000000000000000604482015290519081900360640190fd5b506001600160a01b031660009081526003602052604090205490565b6001600160a01b038216611ced576040805162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e646572206164647265737300000000000000000000604482015290519081900360640190fd5b600080611cf983612ac1565b9092509050336001600160a01b0385161480611d2457503360009081526002602052604090205460ff165b80611d4d5750808015611d4d57506000838152600660205260409020546001600160a01b031633145b80611d7b57506001600160a01b038416600090815260056020908152604080832033845290915290205460ff165b80611d9557503360009081526001602052604090205460ff165b611de6576040805162461bcd60e51b815260206004820152601660248201527f6e6f7420617574686f72697a656420746f206275726e00000000000000000000604482015290519081900360640190fd5b6111ce8483856138b9565b6000610e9182614050565b60036020526000908152604090205481565b6000546001600160a01b03163314611e6d576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b611e7f826001600160a01b0316613420565b611eba5760405162461bcd60e51b8152600401808060200182810382526030815260200180614e676030913960400191505060405180910390fd5b611ec48282613994565b5050565b6000610e918261407b565b6000546001600160a01b0316338114611f33576040805162461bcd60e51b815260206004820152601b60248201527f6f6e6c792061646d696e2063616e206368616e67652061646d696e0000000000604482015290519081900360640190fd5b806001600160a01b0316826001600160a01b03161415611f845760405162461bcd60e51b8152600401808060200182810382526025815260200180614ef16025913960400191505060405180910390fd5b604080516001600160a01b0380841682528416602082015281517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f929181900390910190a1506000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60408051808201909152600481527f4c414e4400000000000000000000000000000000000000000000000000000000602082015290565b60046020526000908152604090205481565b600560209081526000928352604080842090915290825290205460ff1681565b611ec43383836140a6565b6001600160a01b031660009081526039602052604090205460ff1690565b6000546001600160a01b031633146120ea576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821661212f5760405162461bcd60e51b815260040180806020018281038252602a815260200180614dc4602a913960400191505060405180910390fd5b6001600160a01b03821660009081526001602052604090205460ff161515811515141561218d5760405162461bcd60e51b8152600401808060200182810382526033815260200180614dee6033913960400191505060405180910390fd5b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915582519384529083015280517f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d89281900390910190a15050565b60006121fe858585613177565b905061220b8585856133b0565b61221d846001600160a01b0316613420565b1561228c5761223b816122305733612232565b855b8686868661350f565b61228c576040805162461bcd60e51b815260206004820152601f60248201527f4552433732313a207472616e736665722072656a656374656420627920746f00604482015290519081900360640190fd5b5050505050565b6006602052600090815260409020546001600160a01b031681565b606060006122bb83612bbd565b6001600160a01b03161415612317576040805162461bcd60e51b815260206004820152601160248201527f496420646f6573206e6f74206578697374000000000000000000000000000000604482015290519081900360640190fd5b6123208261416c565b60405160200180807f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f00815250601f0182805190602001908083835b6020831061239857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161235b565b5181516020939093036101000a60001901801990911692169190911790527f2f6d657461646174612e6a736f6e000000000000000000000000000000000000920191825250604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee018152600e9092019052949350505050565b6000546001600160a01b03163314612476576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0382166124bb5760405162461bcd60e51b8152600401808060200182810382526022815260200180614e456022913960400191505060405180910390fd5b6001600160a01b03821660009081526039602052604090205460ff16151581151514156125195760405162461bcd60e51b8152600401808060200182810382526033815260200180614dee6033913960400191505060405180910390fd5b6001600160a01b038216600081815260396020908152604091829020805460ff191685151590811790915582519384529083015280517fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb609281900390910190a15050565b6001600160a01b031660009081526002602052604090205460ff1690565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff16806125e957506001600160a01b03821660009081526001602052604090205460ff165b90505b92915050565b6001600160a01b038a1661264d576040805162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f2061646472657373000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0389166126a8576040805162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015290519081900360640190fd5b86851480156126b657508483145b612707576040805162461bcd60e51b815260206004820152600c60248201527f696e76616c696420646174610000000000000000000000000000000000000000604482015290519081900360640190fd5b6000336001600160a01b038c161480159061273157503360009081526002602052604090205460ff165b9050336001600160a01b038c161480159061274a575080155b156127cb576001600160a01b038b16600090815260056020908152604080832033845290915290205460ff168061279057503360009081526001602052604090205460ff165b6127cb5760405162461bcd60e51b8152600401808060200182810382526024815260200180614ecd6024913960400191505060405180910390fd5b6000805b8981101561282e5760008b8b838181106127e557fe5b90506020020135905061281f8e8e838d8d8781811061280057fe5b905060200201358c8c8881811061281357fe5b9050602002013561365a565b800291909101906001016127cf565b506001600160a01b03808d1660009081526003602052604080822080548590039055918d1680825291902080548301905561286890613420565b801561288057506128808b6317a2fd9160e21b61345c565b156129d2576060816040519080825280602002602001820160405280156128b1578160200160208202803883390190505b5090506000805b8b8110156129445760008d8d838181106128ce57fe5b90506020020135905060008090505b81820281101561293a5761291781838f8f878181106128f857fe5b905060200201358e8e8881811061290b57fe5b90506020020135613ffa565b85858151811061292357fe5b6020908102919091010152600193840193016128dd565b50506001016128b8565b50612994846129535733612955565b8e5b8f8f858a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061426192505050565b6129cf5760405162461bcd60e51b8152600401808060200182810382526024815260200180614e216024913960400191505060405180910390fd5b50505b505050505050505050505050565b6001600160a01b038316612a3b576040805162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e646572206164647265737300000000000000000000604482015290519081900360640190fd5b336001600160a01b0384161480612a6157503360009081526002602052604090205460ff165b80612a7b57503360009081526001602052604090205460ff165b612ab65760405162461bcd60e51b8152600401808060200182810382526021815260200180614f166021913960400191505060405180910390fd5b6110878383836140a6565b6000807fff00000000000000000000000000000000000000000000000000000000000000831615612b39576040805162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015290519081900360640190fd5b6000612b448461407b565b90506000612b5185614050565b6000868152600460205260409020549091508015612b99579350837f800000000000000000000000000000000000000000000000000000000000000081046001149350612bb5565b612bae60038085810204600385810204613d2b565b9450600093505b505050915091565b600080600080612bcc856143ea565b925092509250828281612bdb57fe5b06158015612bf05750828181612bed57fe5b06155b612c41576040805162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015290519081900360640190fd5b612c4c838383613d2b565b95945050505050565b6001600160a01b038216612c825760008181526004602052604090206001600160a01b0384169055612cee565b60008181526004602090815260408083206001600160a01b038781167f8000000000000000000000000000000000000000000000000000000000000000019091556006909252909120805473ffffffffffffffffffffffffffffffffffffffff19169184169190911790555b80826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000336001600160a01b03871614801590612d5e57503360009081526002602052604090205460ff165b90506000336001600160a01b0388161480612d765750815b80612da457506001600160a01b038716600090815260056020908152604080832033845290915290205460ff165b80612dbe57503360009081526001602052604090205460ff165b90506001600160a01b038716612e1b576040805162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f2061646472657373000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038616612e76576040805162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015290519081900360640190fd5b845160005b81811015612ff9576000878281518110612e9157fe5b60200260200101519050600080612ea783612ac1565b915091508b6001600160a01b0316826001600160a01b031614612f11576040805162461bcd60e51b815260206004820152601e60248201527f6e6f74206f776e657220696e2062617463685472616e7366657246726f6d0000604482015290519081900360640190fd5b8580612f3b5750808015612f3b57506000838152600660205260409020546001600160a01b031633145b612f8c576040805162461bcd60e51b815260206004820152600e60248201527f6e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b8a6001600160a01b03166004600085815260200190815260200160002081905550828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050600101612e7b565b50866001600160a01b0316886001600160a01b031614613041576001600160a01b03808916600090815260036020526040808220805485900390559189168152208054820190555b613053876001600160a01b0316613420565b1561160357613069876317a2fd9160e21b61345c565b156130c7576130878361307c573361307e565b885b89898989614261565b6130c25760405162461bcd60e51b8152600401808060200182810382526024815260200180614e216024913960400191505060405180910390fd5b611603565b83156116035760005b8181101561316c57613113846130e657336130e8565b895b8a8a8a85815181106130f657fe5b60200260200101516040518060200160405280600081525061350f565b613164576040805162461bcd60e51b815260206004820152601e60248201527f657263373231207472616e736665722072656a656374656420627920746f0000604482015290519081900360640190fd5b6001016130d0565b505050505050505050565b600080600061318584612ac1565b90925090506001600160a01b0382166131e5576040805162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b856001600160a01b0316826001600160a01b03161461324b576040805162461bcd60e51b815260206004820152601b60248201527f6e6f74206f776e657220696e205f636865636b5472616e736665720000000000604482015290519081900360640190fd5b6001600160a01b0385166132a6576040805162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015290519081900360640190fd5b336001600160a01b038716148015906132ce57503360009081526002602052604090205460ff165b9250336001600160a01b038716148015906132e7575082155b156133a7576001600160a01b038616600090815260056020908152604080832033845290915290205460ff168061333c575080801561333c57506000848152600660205260409020546001600160a01b031633145b8061335657503360009081526001602052604090205460ff165b6133a7576040805162461bcd60e51b815260206004820152601860248201527f6e6f7420617070726f76656420746f207472616e736665720000000000000000604482015290519081900360640190fd5b50509392505050565b6001600160a01b03808416600081815260036020908152604080832080546000190190559386168083528483208054600101905585835260049091528382208190559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470823f80158015906134545750818114155b949350505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602081810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a116134fb57fe5b8280156135055750815b9695505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156135a757818101518382015260200161358f565b50505050905090810190601f1680156135d45780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156135f657600080fd5b505af115801561360a573d6000803e3d6000fd5b505050506040513d602081101561362057600080fd5b50516001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b826001141561376157600061367160008484613eb9565b9050600061367e82612bbd565b90506001600160a01b0381166136db576040805162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b866001600160a01b0316816001600160a01b031614613741576040805162461bcd60e51b815260206004820152601a60248201527f6e6f74206f776e657220696e205f7472616e7366657251756164000000000000604482015290519081900360640190fd5b5060009081526004602052604090206001600160a01b038516905561376e565b61376e85858585856144fb565b60005b8384028110156111045761378781858585613ffa565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4600101613771565b6137e1856001600160a01b0316613420565b80156137f957506137f9856317a2fd9160e21b61345c565b156138b057606084850260405190808252806020026020018201604052801561382c578160200160208202803883390190505b50905060005b8586028110156138675761384881878787613ffa565b82828151811061385457fe5b6020908102919091010152600101613832565b506138758888888486614261565b6116035760405162461bcd60e51b8152600401808060200182810382526024815260200180614e216024913960400191505060405180910390fd5b50505050505050565b816001600160a01b0316836001600160a01b03161461391f576040805162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008181526004602090815260408083207401000000000000000000000000000000000000000090556001600160a01b0386168084526003909252808320805460001901905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505050565b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915582519384529083015280517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9281900390910190a15050565b6001600160a01b038516613a53576040805162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f20616464726573730000000000000000000000000000604482015290519081900360640190fd5b613a5c3361206d565b613aad576040805162461bcd60e51b815260206004820152601660248201527f4f6e6c792061206d696e7465722063616e206d696e7400000000000000000000604482015290519081900360640190fd5b6000613ab885613dbc565b505090506000613ac9828686613eb9565b604080518181526108208101825291925060609190816020015b613aeb614d75565b815260200190600190039081613ae35790505090506000806003891115613b4357613b3d60405180606001604052808a81526020018981526020018b81525084838560028e81613b3757fe5b04614635565b90925090505b60005b898a02811015613ccc576000613b5e828c8c8c613ffa565b90506000613b98866040518060600160405280613b7a8661407b565b8152602001613b8886614050565b81526020016001815250876147ba565b90508015613bdd5760405182906001600160a01b038f169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a4613cc2565b600082815260046020526040902054331415613c37576040516001949094019382906001600160a01b038f169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a4613cc2565b60008281526004602052604090205415613c89576040805162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015290519081900360640190fd5b60405182906001600160a01b038f16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45b5050600101613b46565b50613cdd8383838d8d8d8d8d614862565b60009384526004602090815260408086206001600160a01b03909c169b8c90559a85526003905289842080549980029990990190985550503381529590952080549490940390935550505050565b6000806000613d3986613dbc565b5091509150600060046000613d65858a8b8b81613d5257fe5b04028b8c8b81613d5e57fe5b0402613eb9565b815260208101919091526040016000205490506001600160a01b03811615613d9157925061189d915050565b6018871015613daf57613da5828787613d2b565b935050505061189d565b5060009695505050505050565b60008060008360011415613dd7576000925060039150613eb2565b8360031415613df057600160f81b925060069150613eb2565b8360061415613e0f5750600160f91b9150600c9050600160f81b613eb2565b83600c1415613e2e5750600360f81b915060189050600160f91b613eb2565b8360181415613e6557507f04000000000000000000000000000000000000000000000000000000000000009150600360f81b613eb2565b6040805162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a650000000000000000000000000000000000000000604482015290519081900360640190fd5b9193909250565b6101980291010190565b6000613ece82613dbc565b50509050818511613f505760046000613ef78385868981613eeb57fe5b040286878981613d5e57fe5b815260200190815260200160002054600014613f4b576040805162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015290519081900360640190fd5b613fe0565b838501838601855b82811015613fdc57855b82811015613fd45760046000613f79878585613eb9565b815260200190815260200160002054600014613fcd576040805162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015290519081900360640190fd5b8501613f62565b508401613f58565b5050505b6002820491506003821061228c5761228c85858585613ec3565b60008084868161400657fe5b049050600281066140325761402a600086888161401f57fe5b068601838601613eb9565b915050613454565b61402a600086888161404057fe5b0660010187870103838601613eb9565b6101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff919091160490565b6101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff919091160690565b6001600160a01b03821660009081526001602052604090205460ff16156140fe5760405162461bcd60e51b8152600401808060200182810382526036815260200180614e976036913960400191505060405180910390fd5b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff1916861515908117909155825190815291517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319281900390910190a3505050565b6060816141ad575060408051808201909152600181527f30000000000000000000000000000000000000000000000000000000000000006020820152610e94565b8160005b81156141c557600101600a820491506141b1565b6060816040519080825280601f01601f1916602001820160405280156141f2576020820181803883390190505b50905060001982015b851561425857600a860660300160f81b8282806001900393508151811061421e57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a860495506141fb565b50949350505050565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b031681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156142fa5781810151838201526020016142e2565b50505050905001838103825284818151815260200191508051906020019080838360005b8381101561433657818101518382015260200161431e565b50505050905090810190601f1680156143635780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b15801561438657600080fd5b505af115801561439a573d6000803e3d6000fd5b505050506040513d60208110156143b057600080fd5b50516001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b60008060006143f88461407b565b915061440384614050565b90507fff0000000000000000000000000000000000000000000000000000000000000084168061443657600193506144f3565b600160f81b81141561444b57600393506144f3565b600160f91b81141561446057600693506144f3565b600360f81b81141561447557600c93506144f3565b7f04000000000000000000000000000000000000000000000000000000000000008114156144a657601893506144f3565b6040805162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015290519081900360640190fd5b509193909250565b82828161450457fe5b06158015614519575082818161451657fe5b06155b61456a576040805162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e6174657300000000000000000000000000604482015290519081900360640190fd5b82610198038211158015614582575082610198038111155b6145d3576040805162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e647300000000000000000000000000000000000000604482015290519081900360640190fd5b82600314806145e25750826006145b806145ed575082600c145b806145f85750826018145b15613e655761462f858560405180606001604052808681526020018581526020018781525060016002888161462957fe5b04614ab6565b5061228c565b600080600061464384613dbc565b50506040890151895160208b015192935080820192909101905b828110156147895760208b01515b8281101561478157600061469a8c60405180606001604052808681526020018581526020018c8152508c6147ba565b9050806147795760006146ae878585613eb9565b6000818152600460205260409020549091506001600160a01b0381163314156147295760405180606001604052808681526020018581526020018c8152508e8d815181106146f857fe5b6020908102919091018101919091526000838152600490915260408120558a80029c909c019b6001909b019a614776565b6001600160a01b03811615614776576040805162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015290519081900360640190fd5b50505b50870161466b565b50860161465d565b50600286049550600386106147aa576147a58a8a8a8a8a614635565b985096505b5094989597509495505050505050565b6000805b82811015614857576147ce614d75565b8582815181106147da57fe5b60200260200101519050846040015181604001511180156147fd57508051855110155b801561481157506040810151815186519101115b801561482557508060200151856020015110155b801561483e575080604001518160200151018560200151105b1561484e5760019250505061189d565b506001016147be565b506000949350505050565b614874856001600160a01b0316613420565b801561488c575061488c856317a2fd9160e21b61345c565b15614a69576060866040519080825280602002602001820160405280156148bd578160200160208202803883390190505b5090506000606088878802036040519080825280602002602001820160405280156148f2578160200160208202803883390190505b5090506000805b8889028110156149ce576000614911828b8b8b613ffa565b90506149498e604051806060016040528061492b8561407b565b815260200161493985614050565b815260200160018152508f6147ba565b15614971578086868151811061495b57fe5b60209081029190910101526001909401936149c5565b6000818152600460205260409020543314156149a6576000818152600460205260408120558551819087908790811061495b57fe5b808484815181106149b357fe5b60209081029190910101526001909201915b506001016148f9565b506149dd3360008b8589614261565b614a185760405162461bcd60e51b8152600401808060200182810382526024815260200180614e216024913960400191505060405180910390fd5b614a2533338b8789614261565b614a605760405162461bcd60e51b8152600401808060200182810382526024815260200180614e216024913960400191505060405180910390fd5b50505050611603565b60005b84850281101561316c576000614a8482878787613ffa565b600081815260046020526040902054909150331415614aad576000818152600460205260408120555b50600101614a6c565b6000806000614ac88660400151613dbc565b92505091506000614ae28388600001518960200151613eb9565b87519091506001905b6040890151895101811015614c325760208901515b89604001518a6020015101811015614c2a5760008060038a1015614b4357614b338e614b2e60008787613eb9565b614cd8565b8015614b3c5750845b9050614c0b565b614b6f8e8e60405180606001604052808881526020018781526020018e815250600060028f8161462957fe5b90506000614b7e888686613eb9565b600081815260046020526040902054935090508215614c095781614bf9578e6001600160a01b03168314614bf9576040805162461bcd60e51b815260206004820152601760248201527f6e6f74206f776e6572206f66206368696c642051756164000000000000000000604482015290519081900360640190fd5b6000818152600460205260408120555b505b8080614c1657508115155b8015614c1f5750845b945050508701614b00565b508601614aeb565b508615614ccb5780614ca457896001600160a01b0316614c5f89604001518a600001518b60200151613d2b565b6001600160a01b031614614ca45760405162461bcd60e51b815260040180806020018281038252602b815260200180614f37602b913960400191505060405180910390fd5b5060009081526004602052604090206001600160a01b03881690555060019150612c4c9050565b9998505050505050505050565b6000818152600460205260408120548015614d6b57836001600160a01b0316816001600160a01b031614614d53576040805162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b505060008181526004602052604081205560016125ec565b5060009392505050565b6040518060600160405280600081526020016000815260200160008152509056fe45524337323142617365546f6b656e3a20436f6e747261637420616c726561647920696e697469616c697a6564616464726573732030206973206e6f7420616c6c6f776564206173207375706572206f70657261746f72746865207374617475732073686f756c6420626520646966666572656e74207468616e207468652063757272656e74206f6e65657263373231206261746368207472616e736665722072656a656374656420627920746f616464726573732030206973206e6f7420616c6c6f776564206173206d696e7465726f6e6c7920636f6e7472616374732063616e206265206d657461207472616e73616374696f6e2070726f636573736f727375706572206f70657261746f722063616e2774206861766520746865697220617070726f76616c466f72416c6c206368616e6765646e6f7420617574686f72697a656420746f207472616e736665724d756c7469517561647369742063616e206265206f6e6c79206368616e67656420746f2061206e65772061646d696e6e6f7420617574686f72697a656420746f20617070726f766520666f7220616c6c6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f7220706172656e74207175616473a265627a7a7230582044a706739221f67e0a1cd9e1b91e7af5e664f6b799aeafde57f00a9cd5598a4064736f6c63430005090032",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "id": "The id of the token",
          "operator": "The address receiving the approval"
        }
      },
      "approveFor(address,address,uint256)": {
        "params": {
          "id": "The id of the token",
          "operator": "The address receiving the approval",
          "sender": "The address giving the approval"
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for"
        },
        "return": "The number of Land token owned by the address"
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "additional data",
          "from": "The sender of the token",
          "ids": "The ids of the tokens",
          "to": "The recipient of the token"
        }
      },
      "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": {
        "params": {
          "data": "additional data",
          "from": "current owner of the quad",
          "sizes": "list of sizes for each quad",
          "to": "destination",
          "xs": "list of top left x coordinates for each quad",
          "ys": "list of top left y coordinates for each quad"
        }
      },
      "burn(uint256)": {
        "params": {
          "id": "token which will be burnt."
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "from": "address whose token is to be burnt.",
          "id": "token which will be burnt."
        }
      },
      "changeAdmin(address)": {
        "params": {
          "newAdmin": "address of the new administrator."
        }
      },
      "exists(uint256,uint256,uint256)": {
        "params": {
          "size": "size of the",
          "x": "x coordinate of the quad",
          "y": "y coordinate of the quad"
        },
        "return": "bool for if Land has been minted or not"
      },
      "getAdmin()": {
        "return": "the current administrator of this contract."
      },
      "getApproved(uint256)": {
        "params": {
          "id": "The id of the token"
        },
        "return": "The address of the operator"
      },
      "getX(uint256)": {
        "params": {
          "id": "tokenId"
        },
        "return": "the x coordinates"
      },
      "getY(uint256)": {
        "params": {
          "id": "tokenId"
        },
        "return": "the y coordinates"
      },
      "height()": {
        "return": "height"
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator",
          "owner": "The address of the owner"
        },
        "return": "The status of the approval"
      },
      "isMetaTransactionProcessor(address)": {
        "params": {
          "who": "The address to query."
        },
        "return": "whether the address has meta-transaction execution rights."
      },
      "isMinter(address)": {
        "params": {
          "who": "The address to query."
        },
        "return": "whether the address has minter rights."
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "return": "whether the address has superOperator rights."
      },
      "mintAndTransferQuad(address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "extra data to pass to the transfer",
          "size": "The size of the new quad",
          "to": "The recipient of the new quad",
          "x": "The top left x coordinate of the new quad",
          "y": "The top left y coordinate of the new quad"
        }
      },
      "mintQuad(address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "extra data to pass to the transfer",
          "size": "The size of the new quad",
          "to": "The recipient of the new quad",
          "x": "The top left x coordinate of the new quad",
          "y": "The top left y coordinate of the new quad"
        }
      },
      "name()": {
        "return": "The name of the token contract"
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "The id of the Land"
        },
        "return": "The address of the owner"
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "additional data",
          "from": "The sender of the token",
          "ids": "The ids of the tokens",
          "to": "The recipient of the token"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token",
          "id": "The id of the token",
          "to": "The recipient of the token"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data",
          "from": "The sender of the token",
          "id": "The id of the token",
          "to": "The recipient of the token"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval",
          "operator": "The address receiving the approval"
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "params": {
          "approved": "The determination of the approval",
          "operator": "The address receiving the approval",
          "sender": "The address giving the approval"
        }
      },
      "setMetaTransactionProcessor(address,bool)": {
        "params": {
          "enabled": "set whether the metaTransactionProcessor is enabled or disabled.",
          "metaTransactionProcessor": "address that will be given/removed metaTransactionProcessor rights."
        }
      },
      "setMinter(address,bool)": {
        "params": {
          "enabled": "set whether the minter is enabled or disabled.",
          "minter": "address that will be given/removed minter right."
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "The id of the interface"
        },
        "return": "True if the interface is supported"
      },
      "symbol()": {
        "return": "The symbol of the token contract"
      },
      "tokenURI(uint256)": {
        "params": {
          "id": "The id of the token"
        },
        "return": "The URI of the token"
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token",
          "id": "The id of the token",
          "to": "The recipient of the token"
        }
      },
      "transferQuad(address,address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "additional data",
          "from": "current owner of the quad",
          "size": "size of the quad",
          "to": "destination",
          "x": "The top left x coordinate of the quad",
          "y": "The top left y coordinate of the quad"
        }
      },
      "width()": {
        "return": "width"
      }
    }
  },
  "userdoc": {
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf"
      },
      "approveFor(address,address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf"
      },
      "balanceOf(address)": {
        "notice": "Return the number of Land owned by an address"
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses"
      },
      "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": {
        "notice": "transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)"
      },
      "burn(uint256)": {
        "notice": "Burns token `id`."
      },
      "burnFrom(address,uint256)": {
        "notice": "Burn token`id` from `from`."
      },
      "changeAdmin(address)": {
        "notice": "change the administrator to be `newAdmin`."
      },
      "exists(uint256,uint256,uint256)": {
        "notice": "checks if Land has been minted or not"
      },
      "getAdmin()": {
        "notice": "gives the current administrator of this contract."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token"
      },
      "getX(uint256)": {
        "notice": "x coordinate of Land token"
      },
      "getY(uint256)": {
        "notice": "y coordinate of Land token"
      },
      "height()": {
        "notice": "total height of the map"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator"
      },
      "isMetaTransactionProcessor(address)": {
        "notice": "check whether address `who` is given meta-transaction execution rights."
      },
      "isMinter(address)": {
        "notice": "check whether address `who` is given minter rights."
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "mintAndTransferQuad(address,uint256,uint256,uint256,bytes)": {
        "notice": "Checks if a parent quad has child quads already minted. Then mints the rest child quads and transfers the parent quad. Should only be called by the tunnel."
      },
      "mintQuad(address,uint256,uint256,uint256,bytes)": {
        "notice": "Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)"
      },
      "name()": {
        "notice": "Return the name of the token contract"
      },
      "ownerOf(uint256)": {
        "notice": "Return the owner of a Land"
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses ensuring the receiving contract has a receiver method"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender"
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender"
      },
      "setMetaTransactionProcessor(address,bool)": {
        "notice": "Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights)."
      },
      "setMinter(address,bool)": {
        "notice": "Enable or disable the ability of `minter` to mint tokens"
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata"
      },
      "symbol()": {
        "notice": "Return the symbol of the token contract"
      },
      "tokenURI(uint256)": {
        "notice": "Return the URI of a specific token"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses"
      },
      "transferQuad(address,address,uint256,uint256,uint256,bytes)": {
        "notice": "transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)"
      },
      "width()": {
        "notice": "total width of the map"
      }
    }
  }
}