{
  "address": "0xAa24caE605aca7f87406385185B17d4eCCe4b15f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rootToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferQuadToL2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8340a43362d6151fd789167e5c5f3b9569e25883089c037a32dafd2cdc68922a",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0xAa24caE605aca7f87406385185B17d4eCCe4b15f",
    "transactionIndex": 18,
    "gasUsed": "2156279",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0c809b498eb094b813b0fc1fcaead7fdfccc2d5753c0b1a57f3cf94804274dab",
    "transactionHash": "0x8340a43362d6151fd789167e5c5f3b9569e25883089c037a32dafd2cdc68922a",
    "logs": [],
    "blockNumber": 5979948,
    "cumulativeGasUsed": "3075840",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA",
    "0x85F817921665fF27b5F3265b3B0b1B19402ed270"
  ],
  "solcInputHash": "e72eda044dc41ed93cee6a087b5e1eaf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rootToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferQuadToL2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/root/land/LandTunnel.sol\":\"LandTunnel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"fx-portal/contracts/lib/ExitPayloadReader.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { RLPReader } from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n  using RLPReader for bytes;\\n  using RLPReader for RLPReader.RLPItem;\\n\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct ExitPayload {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  struct Receipt {\\n    RLPReader.RLPItem[] data;\\n    bytes raw;\\n    uint256 logIndex;\\n  }\\n\\n  struct Log {\\n    RLPReader.RLPItem data;\\n    RLPReader.RLPItem[] list;\\n  }\\n\\n  struct LogTopics {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n  function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n  function toExitPayload(bytes memory data)\\n        internal\\n        pure\\n        returns (ExitPayload memory)\\n    {\\n        RLPReader.RLPItem[] memory payloadData = data\\n            .toRlpItem()\\n            .toList();\\n\\n        return ExitPayload(payloadData);\\n    }\\n\\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[0].toUint();\\n    }\\n\\n    function getBlockProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[1].toBytes();\\n    }\\n\\n    function getBlockNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[2].toUint();\\n    }\\n\\n    function getBlockTime(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[3].toUint();\\n    }\\n\\n    function getTxRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[4].toUint());\\n    }\\n\\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[5].toUint());\\n    }\\n\\n    function getReceipt(ExitPayload memory payload) internal pure returns(Receipt memory receipt) {\\n      receipt.raw = payload.data[6].toBytes();\\n      RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n      if (receiptItem.isList()) {\\n          // legacy tx\\n          receipt.data = receiptItem.toList();\\n      } else {\\n          // pop first byte before parsting receipt\\n          bytes memory typedBytes = receipt.raw;\\n          bytes memory result = new bytes(typedBytes.length - 1);\\n          uint256 srcPtr;\\n          uint256 destPtr;\\n          assembly {\\n              srcPtr := add(33, typedBytes)\\n              destPtr := add(0x20, result)\\n          }\\n\\n          copy(srcPtr, destPtr, result.length);\\n          receipt.data = result.toRlpItem().toList();\\n      }\\n\\n      receipt.logIndex = getReceiptLogIndex(payload);\\n      return receipt;\\n    }\\n\\n    function getReceiptProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[7].toBytes();\\n    }\\n\\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[8].toBytes();\\n    }\\n\\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[8].toUint();\\n    }\\n\\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[9].toUint();\\n    }\\n    \\n    // Receipt methods\\n    function toBytes(Receipt memory receipt) internal pure returns(bytes memory) {\\n        return receipt.raw;\\n    }\\n\\n    function getLog(Receipt memory receipt) internal pure returns(Log memory) {\\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n        return Log(logData, logData.toList());\\n    }\\n\\n    // Log methods\\n    function getEmitter(Log memory log) internal pure returns(address) {\\n      return RLPReader.toAddress(log.list[0]);\\n    }\\n\\n    function getTopics(Log memory log) internal pure returns(LogTopics memory) {\\n        return LogTopics(log.list[1].toList());\\n    }\\n\\n    function getData(Log memory log) internal pure returns(bytes memory) {\\n        return log.list[2].toBytes();\\n    }\\n\\n    function toRlpBytes(Log memory log) internal pure returns(bytes memory) {\\n      return log.data.toRlpBytes();\\n    }\\n\\n    // LogTopics methods\\n    function getField(LogTopics memory topics, uint256 index) internal pure returns(RLPReader.RLPItem memory) {\\n      return topics.data[index];\\n    }\\n}\\n\",\"keccak256\":\"0xdb3cbd2e895069e17db4cdb8a7fcde127bf598f1c8b3c6f272d0e89727af3aca\"},\"fx-portal/contracts/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x20a3e580bfbdf11e27fba2b2cef7e2a4533c694b2d5b47d0107fc9bc716a37e9\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\",\"keccak256\":\"0xdfbc8f6ea9a4c2b46bd902bbbfae049a2b8afe839fc8634257c9551ab6f74d66\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/RLPReader.sol\":{\"content\":\"/*\\n* @author Hamdi Allam hamdi.allam97@gmail.com\\n* Please reach out with any questions or concerns\\n*/\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START  = 0xb8;\\n    uint8 constant LIST_SHORT_START   = 0xc0;\\n    uint8 constant LIST_LONG_START    = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint len;\\n        uint memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item;   // Item that's being iterated over.\\n        uint nextPtr;   // Position of the next item in the list.\\n    }\\n\\n    /*\\n    * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n    * @param self The iterator.\\n    * @return The next element in the iteration.\\n    */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint ptr = self.nextPtr;\\n        uint itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n    * @dev Returns true if the iteration has more elements.\\n    * @param self The iterator.\\n    * @return true if the iteration has more elements.\\n    */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n    * @dev Create an iterator. Reverts if item is not a list.\\n    * @param self The RLP item.\\n    * @return An 'Iterator' over the item.\\n    */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded list in bytes\\n    */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr); \\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START)\\n            return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint memPtr = item.memPtr + offset;\\n        uint len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint memPtr, uint len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n        \\n        uint ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint result;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset;\\n\\n        uint result;\\n        uint memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint result;\\n        uint memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n    * Private Helpers\\n    */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint) {\\n        if (item.len == 0) return 0;\\n\\n        uint count = 0;\\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n           count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint memPtr) private pure returns (uint) {\\n        uint itemLen;\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START)\\n            itemLen = 1;\\n        \\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } \\n\\n        else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) \\n            return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\\n            return 1;\\n        else if (byte0 < LIST_SHORT_START)  // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n    * @param src Pointer to source\\n    * @param dest Pointer to destination\\n    * @param len Amount of memory to copy from the source\\n    */\\n    function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len == 0) return;\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x606985ec75fb803aae741a9890b635a5bcf60ba6df1921fdb1aaaaea80cec904\"},\"fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\nimport \\\"../lib/ExitPayloadReader.sol\\\";\\n\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using ExitPayloadReader for bytes;\\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n    using ExitPayloadReader for ExitPayloadReader.Log;\\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages \\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\n\\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n        uint256 blockNumber = payload.getBlockNumber();\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                blockNumber,\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n                payload.getReceiptLogIndex()\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n        ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n        // check child tunnel\\n        require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        bytes32 receiptRoot = payload.getReceiptRoot();\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                receipt.toBytes(), \\n                branchMaskBytes, \\n                payload.getReceiptProof(), \\n                receiptRoot\\n            ),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            blockNumber,\\n            payload.getBlockTime(),\\n            payload.getTxRoot(),\\n            receiptRoot,\\n            payload.getHeaderNumber(),\\n            payload.getBlockProof()\\n        );\\n\\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n        require(\\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        (bytes memory message) = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n                .checkMembership(\\n                blockNumber-startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0x0cd588c3f7c6bb2a450e094e92b899db8c3ea3f5cfedd132efd1eccbddacbe82\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/* This Source Code Form is subject to the terms of the Mozilla Public\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\\n *\\n * This code has not been reviewed.\\n * Do not use or deploy this code before reviewing it personally first.\\n */\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xdfe12ae6fa987baf12119768e002a9f74acc434022f8dc367e66b27e6ce3eefc\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/ILandToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface LandToken {\\n    // @review - shouldn't this be ILandToken?\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external;\\n\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x748007857ec3d6afe778e535f231d3f6050928b575b73c77fdf4ab3d6723dc9a\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/root/land/LandTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\\\";\\nimport \\\"../../../common/interfaces/ILandToken.sol\\\";\\nimport \\\"../../../common/interfaces/IERC721TokenReceiver.sol\\\";\\n\\n// @todo - natspec comments\\n\\ncontract LandTunnel is FxBaseRootTunnel, IERC721TokenReceiver {\\n    address public rootToken;\\n\\n    event Deposit(address user, uint256 size, uint256 x, uint256 y, bytes data);\\n    event Withdraw(address user, uint256 size, uint256 x, uint256 y, bytes data);\\n\\n    constructor(\\n        address _checkpointManager,\\n        address _fxRoot,\\n        address _rootToken\\n    ) FxBaseRootTunnel(_checkpointManager, _fxRoot) {\\n        rootToken = _rootToken;\\n    }\\n\\n    function onERC721Received(\\n        address, /* operator */\\n        address, /* from */\\n        uint256, /* tokenId */\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function transferQuadToL2(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) public {\\n        LandToken(rootToken).transferQuad(msg.sender, address(this), size, x, y, data);\\n        bytes memory message = abi.encode(to, size, x, y, data);\\n        _sendMessageToChild(message);\\n        emit Deposit(to, size, x, y, data);\\n    }\\n\\n    function _processMessageFromChild(bytes memory message) internal override {\\n        (address to, uint256 size, uint256 x, uint256 y, bytes memory data) =\\n            abi.decode(message, (address, uint256, uint256, uint256, bytes));\\n        LandToken(rootToken).transferQuad(address(this), to, size, x, y, data);\\n        emit Withdraw(to, size, x, y, data);\\n    }\\n}\\n\",\"keccak256\":\"0x8a75adea86cbd887176ec23adfae5be6fc0c2aa91a676949cb2e4d8ffafbd676\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620025c7380380620025c7833981016040819052620000349162000094565b600180546001600160a01b039485166001600160a01b031991821617909155600080549385169382169390931790925560048054919093169116179055620000dd565b80516001600160a01b03811681146200008f57600080fd5b919050565b600080600060608486031215620000a9578283fd5b620000b48462000077565b9250620000c46020850162000077565b9150620000d46040850162000077565b90509250925092565b6124da80620000ed6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063972c492811610076578063c0857ba01161005b578063c0857ba0146101ff578063de9b771f14610212578063f953cec714610225576100be565b8063972c4928146101d9578063aea4e49e146101ec576100be565b80631f2d0065116100a75780631f2d006514610166578063607f2d421461019157806385b6f1bf146101c4576100be565b80630e387de6146100c3578063150b7a02146100fd575b600080fd5b6100ea7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6040519081526020015b60405180910390f35b61013561010b366004611eef565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100f4565b600454610179906001600160a01b031681565b6040516001600160a01b0390911681526020016100f4565b6101b461019f366004611fe7565b60036020526000908152604090205460ff1681565b60405190151581526020016100f4565b6101d76101d2366004611f89565b610238565b005b600254610179906001600160a01b031681565b6101d76101fa366004611e66565b610338565b600154610179906001600160a01b031681565b600054610179906001600160a01b031681565b6101d761023336600461204b565b6103f6565b600480546040517f38bb305a0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116916338bb305a9161028a91339130918a918a918a918a910161210a565b600060405180830381600087803b1580156102a457600080fd5b505af11580156102b8573d6000803e3d6000fd5b50505050600085858585856040516020016102d7959493929190612176565b60405160208183030381529060405290506102f181610410565b7f86beac9ed9e1aa4efb77b948567a4c352c177bb58b134f4c9d0d92c2c8ffbfb18686868686604051610328959493929190612176565b60405180910390a1505050505050565b6002546001600160a01b0316156103bc5760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201527f4c52454144595f5345540000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600061040182610494565b905061040c816107e5565b5050565b6000546002546040517fb47204770000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263b47204779261045f929116908590600401612154565b600060405180830381600087803b15801561047957600080fd5b505af115801561048d573d6000803e3d6000fd5b5050505050565b606060006104a1836108ca565b905060006104ae82610929565b905060006104bb83610966565b90506000816104c98461099d565b6104d286610bc3565b6040516020016104e4939291906120dd565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff16156105815760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201527f535345440000000000000000000000000000000000000000000000000000000060648201526084016103b3565b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556105c185610bed565b905060006105ce82610d53565b90506105d981610dff565b6002546001600160a01b0390811691161461065c5760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460448201527f554e4e454c00000000000000000000000000000000000000000000000000000060648201526084016103b3565b600061066787610e36565b9050610687610677846020015190565b876106818a610e60565b84610e8a565b6106f95760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201527f4f4f46000000000000000000000000000000000000000000000000000000000060648201526084016103b3565b61072785610706896111b1565b61070f8a6111db565b846107198c611205565b6107228d61122f565b611259565b506000610733836113a7565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0366107696107648360006113f1565b611437565b146107b65760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e41545552450060448201526064016103b3565b60006107c1846114b2565b8060200190518101906107d4919061207e565b99505050505050505050505b919050565b6000806000806000858060200190518101906108019190611e82565b600480546040517f38bb305a000000000000000000000000000000000000000000000000000000008152969b5094995092975090955093506001600160a01b03909116916338bb305a916108619130918a918a918a918a918a910161210a565b600060405180830381600087803b15801561087b57600080fd5b505af115801561088f573d6000803e3d6000fd5b505050507f91ee42a3ae048785d7370790775b6bf02c58c5d7bfb5de80f6d7cb27e46a207e8585858585604051610328959493929190612176565b604080516020810190915260608152600061091461090f8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6114dc565b60408051602081019091529081529392505050565b6060610960826000015160088151811061095357634e487b7160e01b600052603260045260246000fd5b602002602001015161160e565b92915050565b6000610960826000015160028151811061099057634e487b7160e01b600052603260045260246000fd5b6020026020010151611437565b60408051602081019091526000815281516060919015610960576000806109c56000866116b9565b60f81c905060018114806109dc57508060ff166003145b15610ab8576001855160026109f19190612370565b6109fb919061238f565b67ffffffffffffffff811115610a2157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610a4b576020820181803683370190505b5092506000610a5b6001876116b9565b90508084600081518110610a7f57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001925050610b2a565b600285516002610ac89190612370565b610ad2919061238f565b67ffffffffffffffff811115610af857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610b22576020820181803683370190505b509250600091505b60ff82165b8351811015610bba57610b59610b4860ff85168361238f565b610b5390600261220e565b876116b9565b848281518110610b7957634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080610bb2816123f9565b915050610b2f565b50505092915050565b6000610960826000015160098151811061099057634e487b7160e01b600052603260045260246000fd5b610c1160405180606001604052806060815260200160608152602001600081525090565b610c39826000015160068151811061095357634e487b7160e01b600052603260045260246000fd5b602082810182905260408051808201825260008082529083015280518082019091528251815291810190820152610c6f81611756565b15610c8457610c7d816114dc565b8252610d3f565b60208201518051600090610c9a9060019061238f565b67ffffffffffffffff811115610cc057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610cea576020820181803683370190505b509050600080836021019150826020019050610d0882828551611790565b604080518082018252600080825260209182015281518083019092528451825280850190820152610d389061090f565b8652505050505b610d4883610bc3565b604083015250919050565b604080516080810182526000918101828152606080830193909352815260208101919091526000610daf8360000151600381518110610da257634e487b7160e01b600052603260045260246000fd5b60200260200101516114dc565b836040015181518110610dd257634e487b7160e01b600052603260045260246000fd5b602002602001015190506040518060400160405280828152602001610df6836114dc565b90529392505050565b60006109608260200151600081518110610e2957634e487b7160e01b600052603260045260246000fd5b602002602001015161180a565b6000610960826000015160058151811061099057634e487b7160e01b600052603260045260246000fd5b6060610960826000015160078151811061095357634e487b7160e01b600052603260045260246000fd5b600080610ebe8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b90506000610ecb826114dc565b905060608085600080610edd8b61099d565b9050805160001415610ef95760009750505050505050506111a9565b60005b86518110156111a0578151831115610f1f576000985050505050505050506111a9565b610f4f878281518110610f4257634e487b7160e01b600052603260045260246000fd5b6020026020010151611824565b955085805190602001208414610f70576000985050505050505050506111a9565b610f93878281518110610da257634e487b7160e01b600052603260045260246000fd5b9450845160111415611092578151831415611003578c80519060200120610fd48660108151811061095357634e487b7160e01b600052603260045260246000fd5b805190602001201415610ff2576001985050505050505050506111a9565b6000985050505050505050506111a9565b600082848151811061102557634e487b7160e01b600052603260045260246000fd5b016020015160f81c9050601081111561104a57600099505050505050505050506111a9565b61107d868260ff168151811061107057634e487b7160e01b600052603260045260246000fd5b60200260200101516118b3565b945061108a60018561220e565b93505061118e565b845160021415610ff25760006110cc6110c58760008151811061095357634e487b7160e01b600052603260045260246000fd5b84866118e1565b83519091506110db828661220e565b141561113e578d8051906020012061110d8760018151811061095357634e487b7160e01b600052603260045260246000fd5b80519060200120141561112c57600199505050505050505050506111a9565b600099505050505050505050506111a9565b8061115557600099505050505050505050506111a9565b61115f818561220e565b93506111858660018151811061107057634e487b7160e01b600052603260045260246000fd5b945061118e9050565b80611198816123f9565b915050610efc565b50505050505050505b949350505050565b6000610960826000015160038151811061099057634e487b7160e01b600052603260045260246000fd5b6000610960826000015160048151811061099057634e487b7160e01b600052603260045260246000fd5b6000610960826000015160008151811061099057634e487b7160e01b600052603260045260246000fd5b6060610960826000015160018151811061095357634e487b7160e01b600052603260045260246000fd5b6001546040517f41539d4a000000000000000000000000000000000000000000000000000000008152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a06040518083038186803b1580156112bf57600080fd5b505afa1580156112d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f79190611fff565b509350509250925061134e828b61130e919061238f565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588611a46565b61139a5760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f4845414445520000000060448201526064016103b3565b9998505050505050505050565b60408051602081019091526060815260405180602001604052806113e98460200151600181518110610da257634e487b7160e01b600052603260045260246000fd5b905292915050565b6040805180820190915260008082526020820152825180518390811061142757634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b80516000901580159061144c57508151602110155b61145557600080fd5b60006114648360200151611bbc565b90506000818460000151611478919061238f565b905060008083866020015161148d919061220e565b90508051915060208310156114a957826020036101000a820491505b50949350505050565b6060610960826020015160028151811061095357634e487b7160e01b600052603260045260246000fd5b60606114e782611756565b6114f057600080fd5b60006114fb83611c41565b905060008167ffffffffffffffff81111561152657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561156b57816020015b60408051808201909152600080825260208201528152602001906001900390816115445790505b509050600061157d8560200151611bbc565b856020015161158c919061220e565b90506000805b84811015611603576115a383611cc4565b91506040518060400160405280838152602001848152508482815181106115da57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526115ef828461220e565b9250806115fb816123f9565b915050611592565b509195945050505050565b805160609061161c57600080fd5b600061162b8360200151611bbc565b9050600081846000015161163f919061238f565b905060008167ffffffffffffffff81111561166a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611694576020820181803683370190505b50905060008160200190506114a98487602001516116b2919061220e565b8285611d86565b60006116c6600284612414565b1561170e576010826116d9600286612226565b815181106116f757634e487b7160e01b600052603260045260246000fd5b0160200151611709919060f81c612428565b61174c565b60108261171c600286612226565b8151811061173a57634e487b7160e01b600052603260045260246000fd5b016020015161174c919060f81c61223a565b60f81b9392505050565b8051600090611767575060006107e0565b6020820151805160001a9060c0821015611786576000925050506107e0565b5060019392505050565b8061179a57611805565b602081106117d257825182526117b160208461220e565b92506117be60208361220e565b91506117cb60208261238f565b905061179a565b600060016117e183602061238f565b6117ed906101006122a2565b6117f7919061238f565b845184518216911916178352505b505050565b805160009060151461181b57600080fd5b61096082611437565b60606000826000015167ffffffffffffffff81111561185357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561187d576020820181803683370190505b5090508051600014156118915790506107e0565b60008160200190506118ac8460200151828660000151611d86565b5092915050565b80516000906021146118c457600080fd5b600080836020015160016118d8919061220e565b51949350505050565b600080806118ee8661099d565b90506000815167ffffffffffffffff81111561191a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611944576020820181803683370190505b509050845b8251611955908761220e565b811015611a1457600087828151811061197e57634e487b7160e01b600052603260045260246000fd5b01602001517fff0000000000000000000000000000000000000000000000000000000000000016905080836119b3898561238f565b815181106119d157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350508080611a0c906123f9565b915050611949565b50808051906020012082805190602001201415611a345781519250611a39565b600092505b50909150505b9392505050565b600060208251611a569190612414565b15611aa35760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e67746800000000000000000000000060448201526064016103b3565b600060208351611ab39190612226565b9050611ac08160026122a2565b8510611b0e5760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f20626967000000000000000000000060448201526064016103b3565b60008660205b85518111611bae57858101519250611b2d600289612414565b611b62576040805160208101849052908101849052606001604051602081830303815290604052805190602001209150611b8f565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b611b9a600289612226565b9750611ba760208261220e565b9050611b14565b509094149695505050505050565b8051600090811a6080811015611bd65760009150506107e0565b60b8811080611bf1575060c08110801590611bf1575060f881105b15611c005760019150506107e0565b60c0811015611c3557611c15600160b86123a6565b611c229060ff168261238f565b611c2d90600161220e565b9150506107e0565b611c15600160f86123a6565b8051600090611c52575060006107e0565b600080611c628460200151611bbc565b8460200151611c71919061220e565b9050600084600001518560200151611c89919061220e565b90505b80821015611cbb57611c9d82611cc4565b611ca7908361220e565b915082611cb3816123f9565b935050611c8c565b50909392505050565b80516000908190811a6080811015611cdf57600191506118ac565b60b8811015611d0557611cf360808261238f565b611cfe90600161220e565b91506118ac565b60c0811015611d325760b78103600185019450806020036101000a855104600182018101935050506118ac565b60f8811015611d4657611cf360c08261238f565b60019390930151602084900360f7016101000a90049092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0192915050565b80611d9057611805565b60208110611dc85782518252611da760208461220e565b9250611db460208361220e565b9150611dc160208261238f565b9050611d90565b806117d257611805565b600082601f830112611de2578081fd5b8135611df5611df0826121e6565b6121b5565b818152846020838601011115611e09578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611e33578081fd5b8151611e41611df0826121e6565b818152846020838601011115611e55578283fd5b6111a98260208301602087016123c9565b600060208284031215611e77578081fd5b8135611a3f8161248c565b600080600080600060a08688031215611e99578081fd5b8551611ea48161248c565b80955050602086015193506040860151925060608601519150608086015167ffffffffffffffff811115611ed6578182fd5b611ee288828901611e23565b9150509295509295909350565b600080600080600060808688031215611f06578081fd5b8535611f118161248c565b94506020860135611f218161248c565b935060408601359250606086013567ffffffffffffffff80821115611f44578283fd5b818801915088601f830112611f57578283fd5b813581811115611f65578384fd5b896020828501011115611f76578384fd5b9699959850939650602001949392505050565b600080600080600060a08688031215611fa0578081fd5b8535611fab8161248c565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115611fdb578182fd5b611ee288828901611dd2565b600060208284031215611ff8578081fd5b5035919050565b600080600080600060a08688031215612016578081fd5b85519450602086015193506040860151925060608601519150608086015161203d8161248c565b809150509295509295909350565b60006020828403121561205c578081fd5b813567ffffffffffffffff811115612072578182fd5b6111a984828501611dd2565b60006020828403121561208f578081fd5b815167ffffffffffffffff8111156120a5578182fd5b6111a984828501611e23565b600081518084526120c98160208601602086016123c9565b601f01601f19169290920160200192915050565b600084825283516120f58160208501602088016123c9565b60209201918201929092526040019392505050565b60006001600160a01b03808916835280881660208401525085604083015284606083015283608083015260c060a083015261214860c08301846120b1565b98975050505050505050565b60006001600160a01b0384168252604060208301526111a960408301846120b1565b60006001600160a01b038716825285602083015284604083015283606083015260a060808301526121aa60a08301846120b1565b979650505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156121de576121de612476565b604052919050565b600067ffffffffffffffff82111561220057612200612476565b50601f01601f191660200190565b600082198211156122215761222161244a565b500190565b60008261223557612235612460565b500490565b600060ff83168061224d5761224d612460565b8060ff84160491505092915050565b80825b600180861161226e5750612299565b8187048211156122805761228061244a565b8086161561228d57918102915b9490941c93800261225f565b94509492505050565b6000611a3f60001984846000826122bb57506001611a3f565b816122c857506000611a3f565b81600181146122de57600281146122e857612315565b6001915050611a3f565b60ff8411156122f9576122f961244a565b6001841b91508482111561230f5761230f61244a565b50611a3f565b5060208310610133831016604e8410600b8410161715612348575081810a838111156123435761234361244a565b611a3f565b612355848484600161225c565b8086048211156123675761236761244a565b02949350505050565b600081600019048311821515161561238a5761238a61244a565b500290565b6000828210156123a1576123a161244a565b500390565b600060ff821660ff8416808210156123c0576123c061244a565b90039392505050565b60005b838110156123e45781810151838201526020016123cc565b838111156123f3576000848401525b50505050565b600060001982141561240d5761240d61244a565b5060010190565b60008261242357612423612460565b500690565b600060ff83168061243b5761243b612460565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146124a157600080fd5b5056fea2646970667358221220d90f1c287b3c4c9964b02c9055ec72aac20d46e62120d8e46343a2774d1816d564736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c8063972c492811610076578063c0857ba01161005b578063c0857ba0146101ff578063de9b771f14610212578063f953cec714610225576100be565b8063972c4928146101d9578063aea4e49e146101ec576100be565b80631f2d0065116100a75780631f2d006514610166578063607f2d421461019157806385b6f1bf146101c4576100be565b80630e387de6146100c3578063150b7a02146100fd575b600080fd5b6100ea7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6040519081526020015b60405180910390f35b61013561010b366004611eef565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100f4565b600454610179906001600160a01b031681565b6040516001600160a01b0390911681526020016100f4565b6101b461019f366004611fe7565b60036020526000908152604090205460ff1681565b60405190151581526020016100f4565b6101d76101d2366004611f89565b610238565b005b600254610179906001600160a01b031681565b6101d76101fa366004611e66565b610338565b600154610179906001600160a01b031681565b600054610179906001600160a01b031681565b6101d761023336600461204b565b6103f6565b600480546040517f38bb305a0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116916338bb305a9161028a91339130918a918a918a918a910161210a565b600060405180830381600087803b1580156102a457600080fd5b505af11580156102b8573d6000803e3d6000fd5b50505050600085858585856040516020016102d7959493929190612176565b60405160208183030381529060405290506102f181610410565b7f86beac9ed9e1aa4efb77b948567a4c352c177bb58b134f4c9d0d92c2c8ffbfb18686868686604051610328959493929190612176565b60405180910390a1505050505050565b6002546001600160a01b0316156103bc5760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201527f4c52454144595f5345540000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600061040182610494565b905061040c816107e5565b5050565b6000546002546040517fb47204770000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263b47204779261045f929116908590600401612154565b600060405180830381600087803b15801561047957600080fd5b505af115801561048d573d6000803e3d6000fd5b5050505050565b606060006104a1836108ca565b905060006104ae82610929565b905060006104bb83610966565b90506000816104c98461099d565b6104d286610bc3565b6040516020016104e4939291906120dd565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff16156105815760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201527f535345440000000000000000000000000000000000000000000000000000000060648201526084016103b3565b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556105c185610bed565b905060006105ce82610d53565b90506105d981610dff565b6002546001600160a01b0390811691161461065c5760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460448201527f554e4e454c00000000000000000000000000000000000000000000000000000060648201526084016103b3565b600061066787610e36565b9050610687610677846020015190565b876106818a610e60565b84610e8a565b6106f95760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201527f4f4f46000000000000000000000000000000000000000000000000000000000060648201526084016103b3565b61072785610706896111b1565b61070f8a6111db565b846107198c611205565b6107228d61122f565b611259565b506000610733836113a7565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0366107696107648360006113f1565b611437565b146107b65760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e41545552450060448201526064016103b3565b60006107c1846114b2565b8060200190518101906107d4919061207e565b99505050505050505050505b919050565b6000806000806000858060200190518101906108019190611e82565b600480546040517f38bb305a000000000000000000000000000000000000000000000000000000008152969b5094995092975090955093506001600160a01b03909116916338bb305a916108619130918a918a918a918a918a910161210a565b600060405180830381600087803b15801561087b57600080fd5b505af115801561088f573d6000803e3d6000fd5b505050507f91ee42a3ae048785d7370790775b6bf02c58c5d7bfb5de80f6d7cb27e46a207e8585858585604051610328959493929190612176565b604080516020810190915260608152600061091461090f8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6114dc565b60408051602081019091529081529392505050565b6060610960826000015160088151811061095357634e487b7160e01b600052603260045260246000fd5b602002602001015161160e565b92915050565b6000610960826000015160028151811061099057634e487b7160e01b600052603260045260246000fd5b6020026020010151611437565b60408051602081019091526000815281516060919015610960576000806109c56000866116b9565b60f81c905060018114806109dc57508060ff166003145b15610ab8576001855160026109f19190612370565b6109fb919061238f565b67ffffffffffffffff811115610a2157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610a4b576020820181803683370190505b5092506000610a5b6001876116b9565b90508084600081518110610a7f57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001925050610b2a565b600285516002610ac89190612370565b610ad2919061238f565b67ffffffffffffffff811115610af857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610b22576020820181803683370190505b509250600091505b60ff82165b8351811015610bba57610b59610b4860ff85168361238f565b610b5390600261220e565b876116b9565b848281518110610b7957634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080610bb2816123f9565b915050610b2f565b50505092915050565b6000610960826000015160098151811061099057634e487b7160e01b600052603260045260246000fd5b610c1160405180606001604052806060815260200160608152602001600081525090565b610c39826000015160068151811061095357634e487b7160e01b600052603260045260246000fd5b602082810182905260408051808201825260008082529083015280518082019091528251815291810190820152610c6f81611756565b15610c8457610c7d816114dc565b8252610d3f565b60208201518051600090610c9a9060019061238f565b67ffffffffffffffff811115610cc057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610cea576020820181803683370190505b509050600080836021019150826020019050610d0882828551611790565b604080518082018252600080825260209182015281518083019092528451825280850190820152610d389061090f565b8652505050505b610d4883610bc3565b604083015250919050565b604080516080810182526000918101828152606080830193909352815260208101919091526000610daf8360000151600381518110610da257634e487b7160e01b600052603260045260246000fd5b60200260200101516114dc565b836040015181518110610dd257634e487b7160e01b600052603260045260246000fd5b602002602001015190506040518060400160405280828152602001610df6836114dc565b90529392505050565b60006109608260200151600081518110610e2957634e487b7160e01b600052603260045260246000fd5b602002602001015161180a565b6000610960826000015160058151811061099057634e487b7160e01b600052603260045260246000fd5b6060610960826000015160078151811061095357634e487b7160e01b600052603260045260246000fd5b600080610ebe8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b90506000610ecb826114dc565b905060608085600080610edd8b61099d565b9050805160001415610ef95760009750505050505050506111a9565b60005b86518110156111a0578151831115610f1f576000985050505050505050506111a9565b610f4f878281518110610f4257634e487b7160e01b600052603260045260246000fd5b6020026020010151611824565b955085805190602001208414610f70576000985050505050505050506111a9565b610f93878281518110610da257634e487b7160e01b600052603260045260246000fd5b9450845160111415611092578151831415611003578c80519060200120610fd48660108151811061095357634e487b7160e01b600052603260045260246000fd5b805190602001201415610ff2576001985050505050505050506111a9565b6000985050505050505050506111a9565b600082848151811061102557634e487b7160e01b600052603260045260246000fd5b016020015160f81c9050601081111561104a57600099505050505050505050506111a9565b61107d868260ff168151811061107057634e487b7160e01b600052603260045260246000fd5b60200260200101516118b3565b945061108a60018561220e565b93505061118e565b845160021415610ff25760006110cc6110c58760008151811061095357634e487b7160e01b600052603260045260246000fd5b84866118e1565b83519091506110db828661220e565b141561113e578d8051906020012061110d8760018151811061095357634e487b7160e01b600052603260045260246000fd5b80519060200120141561112c57600199505050505050505050506111a9565b600099505050505050505050506111a9565b8061115557600099505050505050505050506111a9565b61115f818561220e565b93506111858660018151811061107057634e487b7160e01b600052603260045260246000fd5b945061118e9050565b80611198816123f9565b915050610efc565b50505050505050505b949350505050565b6000610960826000015160038151811061099057634e487b7160e01b600052603260045260246000fd5b6000610960826000015160048151811061099057634e487b7160e01b600052603260045260246000fd5b6000610960826000015160008151811061099057634e487b7160e01b600052603260045260246000fd5b6060610960826000015160018151811061095357634e487b7160e01b600052603260045260246000fd5b6001546040517f41539d4a000000000000000000000000000000000000000000000000000000008152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a06040518083038186803b1580156112bf57600080fd5b505afa1580156112d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f79190611fff565b509350509250925061134e828b61130e919061238f565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588611a46565b61139a5760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f4845414445520000000060448201526064016103b3565b9998505050505050505050565b60408051602081019091526060815260405180602001604052806113e98460200151600181518110610da257634e487b7160e01b600052603260045260246000fd5b905292915050565b6040805180820190915260008082526020820152825180518390811061142757634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b80516000901580159061144c57508151602110155b61145557600080fd5b60006114648360200151611bbc565b90506000818460000151611478919061238f565b905060008083866020015161148d919061220e565b90508051915060208310156114a957826020036101000a820491505b50949350505050565b6060610960826020015160028151811061095357634e487b7160e01b600052603260045260246000fd5b60606114e782611756565b6114f057600080fd5b60006114fb83611c41565b905060008167ffffffffffffffff81111561152657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561156b57816020015b60408051808201909152600080825260208201528152602001906001900390816115445790505b509050600061157d8560200151611bbc565b856020015161158c919061220e565b90506000805b84811015611603576115a383611cc4565b91506040518060400160405280838152602001848152508482815181106115da57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526115ef828461220e565b9250806115fb816123f9565b915050611592565b509195945050505050565b805160609061161c57600080fd5b600061162b8360200151611bbc565b9050600081846000015161163f919061238f565b905060008167ffffffffffffffff81111561166a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611694576020820181803683370190505b50905060008160200190506114a98487602001516116b2919061220e565b8285611d86565b60006116c6600284612414565b1561170e576010826116d9600286612226565b815181106116f757634e487b7160e01b600052603260045260246000fd5b0160200151611709919060f81c612428565b61174c565b60108261171c600286612226565b8151811061173a57634e487b7160e01b600052603260045260246000fd5b016020015161174c919060f81c61223a565b60f81b9392505050565b8051600090611767575060006107e0565b6020820151805160001a9060c0821015611786576000925050506107e0565b5060019392505050565b8061179a57611805565b602081106117d257825182526117b160208461220e565b92506117be60208361220e565b91506117cb60208261238f565b905061179a565b600060016117e183602061238f565b6117ed906101006122a2565b6117f7919061238f565b845184518216911916178352505b505050565b805160009060151461181b57600080fd5b61096082611437565b60606000826000015167ffffffffffffffff81111561185357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561187d576020820181803683370190505b5090508051600014156118915790506107e0565b60008160200190506118ac8460200151828660000151611d86565b5092915050565b80516000906021146118c457600080fd5b600080836020015160016118d8919061220e565b51949350505050565b600080806118ee8661099d565b90506000815167ffffffffffffffff81111561191a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611944576020820181803683370190505b509050845b8251611955908761220e565b811015611a1457600087828151811061197e57634e487b7160e01b600052603260045260246000fd5b01602001517fff0000000000000000000000000000000000000000000000000000000000000016905080836119b3898561238f565b815181106119d157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350508080611a0c906123f9565b915050611949565b50808051906020012082805190602001201415611a345781519250611a39565b600092505b50909150505b9392505050565b600060208251611a569190612414565b15611aa35760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e67746800000000000000000000000060448201526064016103b3565b600060208351611ab39190612226565b9050611ac08160026122a2565b8510611b0e5760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f20626967000000000000000000000060448201526064016103b3565b60008660205b85518111611bae57858101519250611b2d600289612414565b611b62576040805160208101849052908101849052606001604051602081830303815290604052805190602001209150611b8f565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b611b9a600289612226565b9750611ba760208261220e565b9050611b14565b509094149695505050505050565b8051600090811a6080811015611bd65760009150506107e0565b60b8811080611bf1575060c08110801590611bf1575060f881105b15611c005760019150506107e0565b60c0811015611c3557611c15600160b86123a6565b611c229060ff168261238f565b611c2d90600161220e565b9150506107e0565b611c15600160f86123a6565b8051600090611c52575060006107e0565b600080611c628460200151611bbc565b8460200151611c71919061220e565b9050600084600001518560200151611c89919061220e565b90505b80821015611cbb57611c9d82611cc4565b611ca7908361220e565b915082611cb3816123f9565b935050611c8c565b50909392505050565b80516000908190811a6080811015611cdf57600191506118ac565b60b8811015611d0557611cf360808261238f565b611cfe90600161220e565b91506118ac565b60c0811015611d325760b78103600185019450806020036101000a855104600182018101935050506118ac565b60f8811015611d4657611cf360c08261238f565b60019390930151602084900360f7016101000a90049092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0192915050565b80611d9057611805565b60208110611dc85782518252611da760208461220e565b9250611db460208361220e565b9150611dc160208261238f565b9050611d90565b806117d257611805565b600082601f830112611de2578081fd5b8135611df5611df0826121e6565b6121b5565b818152846020838601011115611e09578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611e33578081fd5b8151611e41611df0826121e6565b818152846020838601011115611e55578283fd5b6111a98260208301602087016123c9565b600060208284031215611e77578081fd5b8135611a3f8161248c565b600080600080600060a08688031215611e99578081fd5b8551611ea48161248c565b80955050602086015193506040860151925060608601519150608086015167ffffffffffffffff811115611ed6578182fd5b611ee288828901611e23565b9150509295509295909350565b600080600080600060808688031215611f06578081fd5b8535611f118161248c565b94506020860135611f218161248c565b935060408601359250606086013567ffffffffffffffff80821115611f44578283fd5b818801915088601f830112611f57578283fd5b813581811115611f65578384fd5b896020828501011115611f76578384fd5b9699959850939650602001949392505050565b600080600080600060a08688031215611fa0578081fd5b8535611fab8161248c565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115611fdb578182fd5b611ee288828901611dd2565b600060208284031215611ff8578081fd5b5035919050565b600080600080600060a08688031215612016578081fd5b85519450602086015193506040860151925060608601519150608086015161203d8161248c565b809150509295509295909350565b60006020828403121561205c578081fd5b813567ffffffffffffffff811115612072578182fd5b6111a984828501611dd2565b60006020828403121561208f578081fd5b815167ffffffffffffffff8111156120a5578182fd5b6111a984828501611e23565b600081518084526120c98160208601602086016123c9565b601f01601f19169290920160200192915050565b600084825283516120f58160208501602088016123c9565b60209201918201929092526040019392505050565b60006001600160a01b03808916835280881660208401525085604083015284606083015283608083015260c060a083015261214860c08301846120b1565b98975050505050505050565b60006001600160a01b0384168252604060208301526111a960408301846120b1565b60006001600160a01b038716825285602083015284604083015283606083015260a060808301526121aa60a08301846120b1565b979650505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156121de576121de612476565b604052919050565b600067ffffffffffffffff82111561220057612200612476565b50601f01601f191660200190565b600082198211156122215761222161244a565b500190565b60008261223557612235612460565b500490565b600060ff83168061224d5761224d612460565b8060ff84160491505092915050565b80825b600180861161226e5750612299565b8187048211156122805761228061244a565b8086161561228d57918102915b9490941c93800261225f565b94509492505050565b6000611a3f60001984846000826122bb57506001611a3f565b816122c857506000611a3f565b81600181146122de57600281146122e857612315565b6001915050611a3f565b60ff8411156122f9576122f961244a565b6001841b91508482111561230f5761230f61244a565b50611a3f565b5060208310610133831016604e8410600b8410161715612348575081810a838111156123435761234361244a565b611a3f565b612355848484600161225c565b8086048211156123675761236761244a565b02949350505050565b600081600019048311821515161561238a5761238a61244a565b500290565b6000828210156123a1576123a161244a565b500390565b600060ff821660ff8416808210156123c0576123c061244a565b90039392505050565b60005b838110156123e45781810151838201526020016123cc565b838111156123f3576000848401525b50505050565b600060001982141561240d5761240d61244a565b5060010190565b60008261242357612423612460565b500690565b600060ff83168061243b5761243b612460565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146124a157600080fd5b5056fea2646970667358221220d90f1c287b3c4c9964b02c9055ec72aac20d46e62120d8e46343a2774d1816d564736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3901,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "fxRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFxStateSender)3851"
      },
      {
        "astId": 3904,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICheckpointManager)3869"
      },
      {
        "astId": 3906,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3910,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "processedExits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 34910,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "rootToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)3869": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)3851": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}