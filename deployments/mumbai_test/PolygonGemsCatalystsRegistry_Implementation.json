{
  "address": "0x666130920AE768709788dE552779893Fad980257",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUPER_OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IGem[]",
          "name": "gems",
          "type": "address[]"
        },
        {
          "internalType": "contract ICatalyst[]",
          "name": "catalysts",
          "type": "address[]"
        }
      ],
      "name": "addGemsAndCatalysts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint16[]",
          "name": "catalystIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchBurnCatalysts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchBurnGems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnCatalyst",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint16[]",
          "name": "catalystIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnDifferentCatalysts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnDifferentGems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "gemId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnGem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        }
      ],
      "name": "doesCatalystExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "gemId",
          "type": "uint16"
        }
      ],
      "name": "doesGemExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16[]",
              "name": "gemIds",
              "type": "uint16[]"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IAssetAttributesRegistry.GemEvent[]",
          "name": "events",
          "type": "tuple[]"
        }
      ],
      "name": "getAttributes",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "values",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        }
      ],
      "name": "getMaxGems",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfCatalystContracts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfGemContracts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "initV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeGemsandCatalystsMaxAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setGemsAndCatalystsMaxAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa45d5851ca5659f597c3ccbb646762cb636165473524baa058d461f20df596bb",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x666130920AE768709788dE552779893Fad980257",
    "transactionIndex": 1,
    "gasUsed": "2149850",
    "logsBloom": "0x
    "blockHash": "0x29c1bea106e8eb516f93e22d772ddb5b65405219ecbbd9183e88302c0c9fdb7e",
    "transactionHash": "0xa45d5851ca5659f597c3ccbb646762cb636165473524baa058d461f20df596bb",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 26212471,
        "transactionHash": "0xa45d5851ca5659f597c3ccbb646762cb636165473524baa058d461f20df596bb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002fbc7b7eb7fe9c8000000000000000000000000000000000000000000000000173af6351eb97acb0000000000000000000000000000000000000000000014e8aede853a75a91b16000000000000000000000000000000000000000000000000143f2e7d333991030000000000000000000000000000000000000000000014e8b1da4cf2612904de",
        "logIndex": 3,
        "blockHash": "0x29c1bea106e8eb516f93e22d772ddb5b65405219ecbbd9183e88302c0c9fdb7e"
      }
    ],
    "blockNumber": 26212471,
    "cumulativeGasUsed": "2741847",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3ac99781400346b5ef1247840c0f0d75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPER_OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGem[]\",\"name\":\"gems\",\"type\":\"address[]\"},{\"internalType\":\"contract ICatalyst[]\",\"name\":\"catalysts\",\"type\":\"address[]\"}],\"name\":\"addGemsAndCatalysts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"catalystIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnCatalysts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnGems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnCatalyst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"catalystIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnDifferentCatalysts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnDifferentGems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"gemId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"}],\"name\":\"doesCatalystExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"gemId\",\"type\":\"uint16\"}],\"name\":\"doesGemExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IAssetAttributesRegistry.GemEvent[]\",\"name\":\"events\",\"type\":\"tuple[]\"}],\"name\":\"getAttributes\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"values\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"}],\"name\":\"getMaxGems\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfCatalystContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfGemContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeGemsandCatalystsMaxAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setGemsAndCatalystsMaxAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addGemsAndCatalysts(address[],address[])\":{\"params\":{\"catalysts\":\"array of catalysts to be added\",\"gems\":\"array of gems to be added\"}},\"batchBurnCatalysts(address,uint16[],uint256[])\":{\"params\":{\"amounts\":\"list of amounts of units to burn\",\"catalystIds\":\"list of catalysts to burn catalyst units from each\",\"from\":\"address of the beneficiary to burn on behalf of\"}},\"batchBurnGems(address,uint16[],uint256[])\":{\"params\":{\"amounts\":\"list of amounts of units to burn\",\"from\":\"address of the beneficiary to burn on behalf of\",\"gemIds\":\"list of gems to burn gem units from each\"}},\"burnCatalyst(address,uint16,uint256)\":{\"params\":{\"amount\":\"The number of catalyst tokens to burn.\",\"catalystId\":\"The id of the catalyst to burn.\",\"from\":\"The signing address for the tx.\"}},\"burnDifferentCatalysts(address,uint16[],uint256)\":{\"params\":{\"amount\":\"amount to burn\",\"catalystIds\":\"list of catalysts to burn one catalyst from each\",\"from\":\"address of the beneficiary to burn on behalf of\"}},\"burnDifferentGems(address,uint16[],uint256)\":{\"params\":{\"amount\":\"amount units to burn\",\"from\":\"address of the beneficiary to burn on behalf of\",\"gemIds\":\"list of gems to burn one gem from each\"}},\"burnGem(address,uint16,uint256)\":{\"params\":{\"amount\":\"The number of gem tokens to burn.\",\"from\":\"The signing address for the tx.\",\"gemId\":\"The id of the gem to burn.\"}},\"doesCatalystExist(uint16)\":{\"params\":{\"catalystId\":\"The catalyst being queried.\"},\"returns\":{\"_0\":\"Whether the catalyst exists.\"}},\"doesGemExist(uint16)\":{\"params\":{\"gemId\":\"The gem being queried.\"},\"returns\":{\"_0\":\"Whether the gem exists.\"}},\"getAttributes(uint16,uint256,(uint16[],bytes32)[])\":{\"params\":{\"assetId\":\"The asset tokenId.\",\"catalystId\":\"The catalyst identifier.\",\"events\":\"An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect.\"},\"returns\":{\"values\":\"An array of values for each gem present in the asset.\"}},\"getMaxGems(uint16)\":{\"params\":{\"catalystId\":\"catalyst identifier\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGemsAndCatalysts(address[],address[])\":{\"notice\":\"Adds both arrays of gems and catalysts to registry\"},\"batchBurnCatalysts(address,uint16[],uint256[])\":{\"notice\":\"Burns few catalyst units from each catalyst id on behalf of a beneficiary\"},\"batchBurnGems(address,uint16[],uint256[])\":{\"notice\":\"Burns few gem units from each gem id on behalf of a beneficiary\"},\"burnCatalyst(address,uint16,uint256)\":{\"notice\":\"Burn a catalyst.\"},\"burnDifferentCatalysts(address,uint16[],uint256)\":{\"notice\":\"Burns one catalyst unit from each catalyst id on behalf of a beneficiary\"},\"burnDifferentGems(address,uint16[],uint256)\":{\"notice\":\"Burns one gem unit from each gem id on behalf of a beneficiary\"},\"burnGem(address,uint16,uint256)\":{\"notice\":\"Burn a gem.\"},\"doesCatalystExist(uint16)\":{\"notice\":\"Query whether a giving catalyst exists.\"},\"doesGemExist(uint16)\":{\"notice\":\"Query whether a given gem exists.\"},\"getAttributes(uint16,uint256,(uint16[],bytes32)[])\":{\"notice\":\"Returns the values for each gem included in a given asset.\"},\"getMaxGems(uint16)\":{\"notice\":\"Returns the maximum number of gems for a given catalyst\"}},\"notice\":\"Contract managing the Gems and Catalysts Each Gems and Catalyst must be registered here. Each new Gem get assigned a new id (starting at 1) Each new Catalyst get assigned a new id (starting at 1)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/catalyst/GemsCatalystsRegistry.sol\":\"GemsCatalystsRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/GemsCatalystsRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IGem.sol\\\";\\nimport \\\"./interfaces/ICatalyst.sol\\\";\\nimport \\\"../common/interfaces/IERC20Extended.sol\\\";\\nimport \\\"./interfaces/IGemsCatalystsRegistry.sol\\\";\\nimport \\\"../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/// @notice Contract managing the Gems and Catalysts\\n/// Each Gems and Catalyst must be registered here.\\n/// Each new Gem get assigned a new id (starting at 1)\\n/// Each new Catalyst get assigned a new id (starting at 1)\\ncontract GemsCatalystsRegistry is ERC2771Handler, IGemsCatalystsRegistry, OwnableUpgradeable, AccessControlUpgradeable {\\n    uint256 private constant MAX_GEMS_AND_CATALYSTS = 256;\\n    uint256 internal constant MAX_UINT256 = ~uint256(0);\\n    bytes32 public constant SUPER_OPERATOR_ROLE = keccak256(\\\"SUPER_OPERATOR_ROLE\\\");\\n\\n    IGem[] internal _gems;\\n    ICatalyst[] internal _catalysts;\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n\\n    function initV1(address trustedForwarder, address admin) public initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        __ERC2771Handler_initialize(trustedForwarder);\\n        __Ownable_init();\\n    }\\n\\n    /// @notice Returns the values for each gem included in a given asset.\\n    /// @param catalystId The catalyst identifier.\\n    /// @param assetId The asset tokenId.\\n    /// @param events An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect.\\n    /// @return values An array of values for each gem present in the asset.\\n    function getAttributes(\\n        uint16 catalystId,\\n        uint256 assetId,\\n        IAssetAttributesRegistry.GemEvent[] calldata events\\n    ) external view override returns (uint32[] memory values) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getAttributes(assetId, events);\\n    }\\n\\n    /// @notice Returns the maximum number of gems for a given catalyst\\n    /// @param catalystId catalyst identifier\\n    function getMaxGems(uint16 catalystId) external view override returns (uint8) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getMaxGems();\\n    }\\n\\n    /// @notice Burns one gem unit from each gem id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param gemIds list of gems to burn one gem from each\\n    /// @param amount amount units to burn\\n    function burnDifferentGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256 amount\\n    ) external override {\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            burnGem(from, gemIds[i], amount);\\n        }\\n    }\\n\\n    /// @notice Burns one catalyst unit from each catalyst id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param catalystIds list of catalysts to burn one catalyst from each\\n    /// @param amount amount to burn\\n    function burnDifferentCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256 amount\\n    ) external override {\\n        for (uint256 i = 0; i < catalystIds.length; i++) {\\n            burnCatalyst(from, catalystIds[i], amount);\\n        }\\n    }\\n\\n    /// @notice Burns few gem units from each gem id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param gemIds list of gems to burn gem units from each\\n    /// @param amounts list of amounts of units to burn\\n    function batchBurnGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) public override {\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            if (gemIds[i] != 0 && amounts[i] != 0) {\\n                burnGem(from, gemIds[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns few catalyst units from each catalyst id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param catalystIds list of catalysts to burn catalyst units from each\\n    /// @param amounts list of amounts of units to burn\\n    function batchBurnCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) public override {\\n        for (uint256 i = 0; i < catalystIds.length; i++) {\\n            if (catalystIds[i] != 0 && amounts[i] != 0) {\\n                burnCatalyst(from, catalystIds[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Adds both arrays of gems and catalysts to registry\\n    /// @param gems array of gems to be added\\n    /// @param catalysts array of catalysts to be added\\n    function addGemsAndCatalysts(IGem[] calldata gems, ICatalyst[] calldata catalysts)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            uint256(_gems.length + _catalysts.length + gems.length + catalysts.length) < MAX_GEMS_AND_CATALYSTS,\\n            \\\"GemsCatalystsRegistry: Too many gem and catalyst contracts\\\"\\n        );\\n\\n        for (uint256 i = 0; i < gems.length; i++) {\\n            IGem gem = gems[i];\\n            uint16 gemId = gem.gemId();\\n            require(gemId == _gems.length + 1, \\\"GEM_ID_NOT_IN_ORDER\\\");\\n            _gems.push(gem);\\n        }\\n\\n        for (uint256 i = 0; i < catalysts.length; i++) {\\n            ICatalyst catalyst = catalysts[i];\\n            uint16 catalystId = catalyst.catalystId();\\n            require(catalystId == _catalysts.length + 1, \\\"CATALYST_ID_NOT_IN_ORDER\\\");\\n            _catalysts.push(catalyst);\\n        }\\n    }\\n\\n    /// @notice Query whether a given gem exists.\\n    /// @param gemId The gem being queried.\\n    /// @return Whether the gem exists.\\n    function doesGemExist(uint16 gemId) external view override returns (bool) {\\n        return getGem(gemId) != IGem(address(0));\\n    }\\n\\n    /// @notice Query whether a giving catalyst exists.\\n    /// @param catalystId The catalyst being queried.\\n    /// @return Whether the catalyst exists.\\n    function doesCatalystExist(uint16 catalystId) external view returns (bool) {\\n        return getCatalyst(catalystId) != ICatalyst(address(0));\\n    }\\n\\n    /// @notice Burn a catalyst.\\n    /// @param from The signing address for the tx.\\n    /// @param catalystId The id of the catalyst to burn.\\n    /// @param amount The number of catalyst tokens to burn.\\n    function burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint256 amount\\n    ) public override checkAuthorization(from) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        catalyst.burnFor(from, amount);\\n    }\\n\\n    /// @notice Burn a gem.\\n    /// @param from The signing address for the tx.\\n    /// @param gemId The id of the gem to burn.\\n    /// @param amount The number of gem tokens to burn.\\n    function burnGem(\\n        address from,\\n        uint16 gemId,\\n        uint256 amount\\n    ) public override checkAuthorization(from) {\\n        IGem gem = getGem(gemId);\\n        require(gem != IGem(address(0)), \\\"GEM_DOES_NOT_EXIST\\\");\\n        gem.burnFor(from, amount);\\n    }\\n\\n    function getNumberOfCatalystContracts() external view returns (uint256 number) {\\n        number = _catalysts.length;\\n    }\\n\\n    function getNumberOfGemContracts() external view returns (uint256 number) {\\n        number = _gems.length;\\n    }\\n\\n    function revokeGemsandCatalystsMaxAllowance() external {\\n        _setGemsAndCatalystsAllowance(0);\\n    }\\n\\n    function setGemsAndCatalystsMaxAllowance() external {\\n        _setGemsAndCatalystsAllowance(MAX_UINT256);\\n    }\\n\\n    // //////////////////// INTERNALS ////////////////////\\n\\n    function _setGemsAndCatalystsAllowance(uint256 allowanceValue) internal {\\n        for (uint256 i = 0; i < _gems.length; i++) {\\n            _gems[i].approveFor(_msgSender(), address(this), allowanceValue);\\n        }\\n\\n        for (uint256 i = 0; i < _catalysts.length; i++) {\\n            _catalysts[i].approveFor(_msgSender(), address(this), allowanceValue);\\n        }\\n    }\\n\\n    /// @dev Get the catalyst contract corresponding to the id.\\n    /// @param catalystId The catalyst id to use to retrieve the contract.\\n    /// @return The requested Catalyst contract.\\n    function getCatalyst(uint16 catalystId) internal view returns (ICatalyst) {\\n        if (catalystId > 0 && catalystId <= _catalysts.length) {\\n            return _catalysts[catalystId - 1];\\n        } else {\\n            return ICatalyst(address(0));\\n        }\\n    }\\n\\n    /// @dev Get the gem contract corresponding to the id.\\n    /// @param gemId The gem id to use to retrieve the contract.\\n    /// @return The requested Gem contract.\\n    function getGem(uint16 gemId) internal view returns (IGem) {\\n        if (gemId > 0 && gemId <= _gems.length) {\\n            return _gems[gemId - 1];\\n        } else {\\n            return IGem(address(0));\\n        }\\n    }\\n\\n    /// @dev verify that the caller is authorized for this function call.\\n    /// @param from The original signer of the transaction.\\n    modifier checkAuthorization(address from) {\\n        require(_msgSender() == from || hasRole(SUPER_OPERATOR_ROLE, _msgSender()), \\\"AUTH_ACCESS_DENIED\\\");\\n        _;\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n\\n        emit TrustedForwarderChanged(trustedForwarder);\\n    }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xf768bf6c30bc49b32833906245788b76b0a0f900b22f97cef6f69454bb322833\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/ICatalyst.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IAssetAttributesRegistry.sol\\\";\\nimport \\\"../../common/interfaces/IAttributes.sol\\\";\\nimport \\\"../../common/interfaces/IERC20Extended.sol\\\";\\n\\ninterface ICatalyst is IERC20Extended, IAttributes {\\n    function catalystId() external returns (uint16);\\n\\n    function changeAttributes(IAttributes attributes) external;\\n\\n    function getMaxGems() external view returns (uint8);\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool success);\\n}\\n\",\"keccak256\":\"0x39265e2e430c414c0ed053d9a2d2fc4ae6a31fc37ef9de996d91053562575a0a\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/IGem.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IERC20Extended.sol\\\";\\n\\ninterface IGem is IERC20Extended {\\n    function gemId() external returns (uint16);\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool success);\\n}\\n\",\"keccak256\":\"0x840fa5de2970496d33627df1d728d145a70c9b277fe188a4deac8b8b6607bc86\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/IGemsCatalystsRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IAssetAttributesRegistry.sol\\\";\\nimport \\\"./IGem.sol\\\";\\nimport \\\"./ICatalyst.sol\\\";\\n\\ninterface IGemsCatalystsRegistry {\\n    function getAttributes(\\n        uint16 catalystId,\\n        uint256 assetId,\\n        IAssetAttributesRegistry.GemEvent[] calldata events\\n    ) external view returns (uint32[] memory values);\\n\\n    function getMaxGems(uint16 catalystId) external view returns (uint8);\\n\\n    function burnDifferentGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256 amount\\n    ) external;\\n\\n    function burnDifferentCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256 amount\\n    ) external;\\n\\n    function batchBurnGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function batchBurnCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function addGemsAndCatalysts(IGem[] calldata gems, ICatalyst[] calldata catalysts) external;\\n\\n    function doesGemExist(uint16 gemId) external view returns (bool);\\n\\n    function burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint256 amount\\n    ) external;\\n\\n    function burnGem(\\n        address from,\\n        uint16 gemId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xac7b5d8cd61271b01181b5f81858478e2c9d7ded071bdedf84cf42796dfef7c2\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetAttributesRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAssetAttributesRegistry {\\n    struct GemEvent {\\n        uint16[] gemIds;\\n        bytes32 blockHash;\\n    }\\n\\n    struct AssetGemsCatalystData {\\n        uint256 assetId;\\n        uint16 catalystContractId;\\n        uint16[] gemContractIds;\\n    }\\n\\n    function getRecord(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            bool exists,\\n            uint16 catalystId,\\n            uint16[] memory gemIds\\n        );\\n\\n    function getAttributes(uint256 assetId, GemEvent[] calldata events) external view returns (uint32[] memory values);\\n\\n    function setCatalyst(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWhenDepositOnOtherLayer(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWithBlockNumber(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint64 blockNumber\\n    ) external;\\n\\n    function addGems(uint256 assetId, uint16[] calldata gemIds) external;\\n\\n    function setMigrationContract(address _migrationContract) external;\\n\\n    function getCatalystRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7f12fa565160d7598f702dcae0e511943be9c6eaa4dc338f3439a36f0a6086c9\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAttributes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IAssetAttributesRegistry.sol\\\";\\n\\ninterface IAttributes {\\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\\n        external\\n        view\\n        returns (uint32[] memory values);\\n}\\n\",\"keccak256\":\"0x4cbdba9ad3fae8334fe614ae28fb3136454eada28f13f911ffce9c8c701c56a7\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\n/// @dev see https://eips.ethereum.org/EIPS/eip-20\\ninterface IERC20 {\\n    /// @notice emitted when tokens are transfered from one address to another.\\n    /// @param from address from which the token are transfered from (zero means tokens are minted).\\n    /// @param to destination address which the token are transfered to (zero means tokens are burnt).\\n    /// @param value amount of tokens transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice emitted when owner grant transfer rights to another address\\n    /// @param owner address allowing its token to be transferred.\\n    /// @param spender address allowed to spend on behalf of `owner`\\n    /// @param value amount of tokens allowed.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice return the current total amount of tokens owned by all holders.\\n    /// @return supply total number of tokens held.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice return the number of tokens held by a particular address.\\n    /// @param who address being queried.\\n    /// @return balance number of token held by that address.\\n    function balanceOf(address who) external view returns (uint256 balance);\\n\\n    /// @notice transfer tokens to a specific address.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transfer(address to, uint256 value) external returns (bool success);\\n\\n    /// @notice transfer tokens from one address to another.\\n    /// @param from address tokens will be sent from.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool success);\\n\\n    /// @notice approve an address to spend on your behalf.\\n    /// @param spender address entitled to transfer on your behalf.\\n    /// @param value amount allowed to be transfered.\\n    /// @param success whether the approval succeeded.\\n    function approve(address spender, uint256 value) external returns (bool success);\\n\\n    /// @notice return the current allowance for a particular owner/spender pair.\\n    /// @param owner address allowing spender.\\n    /// @param spender address allowed to spend.\\n    /// @return amount number of tokens `spender` can spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x9fe745d44fdcd7987682221d68b7a66d0784fbd81ae1d4e43a6c766347733a96\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n    function burnFor(address from, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xf02074902aff81db019aac8808c524d2ab77e1cb216f5327992ed7db95fee919\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061260d806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063715018a611610104578063a9aff9c1116100a2578063d0807d3111610071578063d0807d3114610433578063d547741f14610446578063da74222814610459578063f2fde38b1461046c576101da565b8063a9aff9c1146103f4578063aeb845d114610407578063c05697581461040f578063ce1b815f14610422576101da565b80638c4d91ed116100de5780638c4d91ed1461038b5780638da5cb5b1461039357806391d14854146103b3578063a217fddf146103ec576101da565b8063715018a61461033e57806378bc8a19146103465780637e8ee42f1461036b576101da565b8063362e7e8c1161017c578063572b6c051161014b578063572b6c05146102ee578063590d0dce14610310578063645c5f9e146103235780636d9168391461032b576101da565b8063362e7e8c146102a257806336568abe146102b557806352eea030146102c8578063550d629c146102db576101da565b8063184dfff5116101b8578063184dfff514610224578063248a9ca3146102595780632a6a64511461027c5780632f2ff15d1461028f576101da565b806301ffc9a7146101df578063141376f914610207578063181896531461021a575b600080fd5b6101f26101ed366004612195565b61047f565b60405190151581526020015b60405180910390f35b6101f26102153660046121d5565b61051a565b610222610537565b005b61024b7fe43cbdacb5a27491c5b15dcd2ddf377fcc3cf337bd999d6a7acb8c882b5554cb81565b6040519081526020016101fe565b61024b610267366004612159565b60009081526097602052604090206001015490565b61022261028a366004611fca565b610544565b61022261029d366004612171565b6106c9565b6102226102b0366004611ef0565b6106fb565b6102226102c3366004612171565b6107f8565b6102226102d6366004611ef0565b610894565b6102226102e936600461200a565b610989565b6101f26102fc366004611e9c565b6000546001600160a01b0390811691161490565b61022261031e366004611fca565b610d4e565b60ca5461024b565b610222610339366004611f70565b610e4c565b610222610eaf565b6103596103543660046121d5565b610f28565b60405160ff90911681526020016101fe565b61037e61037936600461220d565b611004565b6040516101fe91906122fd565b60c95461024b565b61039b611110565b6040516001600160a01b0390911681526020016101fe565b6101f26103c1366004612171565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61024b600081565b610222610402366004611f70565b611120565b61022261117c565b6101f261041d3660046121d5565b611186565b6000546001600160a01b031661039b565b610222610441366004611eb8565b611192565b610222610454366004612171565b611329565b610222610467366004611e9c565b611351565b61022261047a366004611e9c565b611415565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061051257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b6000806105268361150c565b6001600160a01b0316141592915050565b61054260001961157f565b565b82806001600160a01b0316610557611782565b6001600160a01b0316148061059357506105937fe43cbdacb5a27491c5b15dcd2ddf377fcc3cf337bd999d6a7acb8c882b5554cb6103c1611782565b6105e45760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e494544000000000000000000000000000060448201526064015b60405180910390fd5b60006105ef84611791565b90506001600160a01b0381166106475760405162461bcd60e51b815260206004820152601760248201527f434154414c5953545f444f45535f4e4f545f455849535400000000000000000060448201526064016105db565b6040517f1dd319cb0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201859052821690631dd319cb90604401600060405180830381600087803b1580156106aa57600080fd5b505af11580156106be573d6000803e3d6000fd5b505050505050505050565b6000828152609760205260409020600101546106ec816106e7611782565b6117be565b6106f6838361183e565b505050565b60005b838110156107f05784848281811061072657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061073b91906121d5565b61ffff1615801590610774575082828281811061076857634e487b7160e01b600052603260045260246000fd5b90506020020135600014155b156107de576107de8686868481811061079d57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107b291906121d5565b8585858181106107d257634e487b7160e01b600052603260045260246000fd5b90506020020135610d4e565b806107e88161256b565b9150506106fe565b505050505050565b610800611782565b6001600160a01b0316816001600160a01b0316146108865760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016105db565b61089082826118e1565b5050565b60005b838110156107f0578484828181106108bf57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108d491906121d5565b61ffff161580159061090d575082828281811061090157634e487b7160e01b600052603260045260246000fd5b90506020020135600014155b15610977576109778686868481811061093657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061094b91906121d5565b85858581811061096b57634e487b7160e01b600052603260045260246000fd5b90506020020135610544565b806109818161256b565b915050610897565b6000610997816106e7611782565b60ca5460c95461010091849187916109ae916124ca565b6109b891906124ca565b6109c291906124ca565b10610a355760405162461bcd60e51b815260206004820152603a60248201527f47656d73436174616c7973747352656769737472793a20546f6f206d616e792060448201527f67656d20616e6420636174616c79737420636f6e74726163747300000000000060648201526084016105db565b60005b84811015610bc1576000868683818110610a6257634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610a779190611e9c565b90506000816001600160a01b031663caafdcff6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ab657600080fd5b505af1158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee91906121f1565b60c954909150610aff9060016124ca565b8161ffff1614610b515760405162461bcd60e51b815260206004820152601360248201527f47454d5f49445f4e4f545f494e5f4f524445520000000000000000000000000060448201526064016105db565b5060c980546001810182556000919091527f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2801805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905580610bb98161256b565b915050610a38565b5060005b828110156107f0576000848483818110610bef57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c049190611e9c565b90506000816001600160a01b031663c7165bbb6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610c4357600080fd5b505af1158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b91906121f1565b60ca54909150610c8c9060016124ca565b8161ffff1614610cde5760405162461bcd60e51b815260206004820152601860248201527f434154414c5953545f49445f4e4f545f494e5f4f52444552000000000000000060448201526064016105db565b5060ca80546001810182556000919091527f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905580610d468161256b565b915050610bc5565b82806001600160a01b0316610d61611782565b6001600160a01b03161480610d9d5750610d9d7fe43cbdacb5a27491c5b15dcd2ddf377fcc3cf337bd999d6a7acb8c882b5554cb6103c1611782565b610de95760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e494544000000000000000000000000000060448201526064016105db565b6000610df48461150c565b90506001600160a01b0381166106475760405162461bcd60e51b815260206004820152601260248201527f47454d5f444f45535f4e4f545f4558495354000000000000000000000000000060448201526064016105db565b60005b82811015610ea857610e9685858584818110610e7b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610e9091906121d5565b84610d4e565b80610ea08161256b565b915050610e4f565b5050505050565b610eb7611782565b6001600160a01b0316610ec8611110565b6001600160a01b031614610f1e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105db565b6105426000611982565b600080610f3483611791565b90506001600160a01b038116610f8c5760405162461bcd60e51b815260206004820152601760248201527f434154414c5953545f444f45535f4e4f545f455849535400000000000000000060448201526064016105db565b806001600160a01b03166309cba36b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc557600080fd5b505afa158015610fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffd919061225b565b9392505050565b6060600061101186611791565b90506001600160a01b0381166110695760405162461bcd60e51b815260206004820152601760248201527f434154414c5953545f444f45535f4e4f545f455849535400000000000000000060448201526064016105db565b6040517f74903c860000000000000000000000000000000000000000000000000000000081526001600160a01b038216906374903c86906110b29088908890889060040161237a565b60006040518083038186803b1580156110ca57600080fd5b505afa1580156110de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111069190810190612073565b9695505050505050565b6033546001600160a01b03165b90565b60005b82811015610ea85761116a8585858481811061114f57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061116491906121d5565b84610544565b806111748161256b565b915050611123565b610542600061157f565b60008061052683611791565b600054600160a81b900460ff166111c75760005474010000000000000000000000000000000000000000900460ff16156111cb565b303b155b61123d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105db565b600054600160a81b900460ff161580156112bb57600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909116600160a81b1716740100000000000000000000000000000000000000001790555b6112c66000836119e1565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790556112f66119eb565b80156106f657600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff169055505050565b600082815260976020526040902060010154611347816106e7611782565b6106f683836118e1565b611359611782565b6001600160a01b031661136a611110565b6001600160a01b0316146113c05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105db565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117825560405190917f871264f4293af7d2865ae7eae628b228f4991c57cb45b39c99f0b774ebe2901891a250565b61141d611782565b6001600160a01b031661142e611110565b6001600160a01b0316146114845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105db565b6001600160a01b0381166115005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105db565b61150981611982565b50565b6000808261ffff16118015611527575060c95461ffff831611155b156115775760c9611539600184612501565b61ffff168154811061155b57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169050610515565b506000610515565b60005b60c9548110156116805760c981815481106115ad57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316632b9917466115cf611782565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015230602482015260448101859052606401602060405180830381600087803b15801561163557600080fd5b505af1158015611649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166d9190612139565b50806116788161256b565b915050611582565b5060005b60ca548110156108905760ca81815481106116af57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316632b9917466116d1611782565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015230602482015260448101859052606401602060405180830381600087803b15801561173757600080fd5b505af115801561174b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176f9190612139565b508061177a8161256b565b915050611684565b600061178c611a7a565b905090565b6000808261ffff161180156117ac575060ca5461ffff831611155b156115775760ca611539600184612501565b60008281526097602090815260408083206001600160a01b038516845290915290205460ff16610890576117fc816001600160a01b03166014611ac2565b611807836020611ac2565b60405160200161181892919061227c565b60408051601f198184030181529082905262461bcd60e51b82526105db91600401612347565b60008281526097602090815260408083206001600160a01b038516845290915290205460ff166108905760008281526097602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561189d611782565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526097602090815260408083206001600160a01b038516845290915290205460ff16156108905760008281526097602090815260408083206001600160a01b03851684529091529020805460ff1916905561193e611782565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610890828261183e565b600054600160a81b900460ff16611a6a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105db565b611a72611d31565b610542611db0565b600080546001600160a01b0316331415611abb57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c61111d565b503361111d565b60606000611ad18360026124e2565b611adc9060026124ca565b67ffffffffffffffff811115611b0257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611b2c576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611b7157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611be257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611c1e8460026124e2565b611c299060016124ca565b90505b6001811115611ce2577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611c7857634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611c9c57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611cdb81612554565b9050611c2c565b508315610ffd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105db565b600054600160a81b900460ff166105425760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105db565b600054600160a81b900460ff16611e2f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105db565b610542611e3a611782565b611982565b60008083601f840112611e50578081fd5b50813567ffffffffffffffff811115611e67578182fd5b6020830191508360208083028501011115611e8157600080fd5b9250929050565b805163ffffffff8116811461051557600080fd5b600060208284031215611ead578081fd5b8135610ffd816125b2565b60008060408385031215611eca578081fd5b8235611ed5816125b2565b91506020830135611ee5816125b2565b809150509250929050565b600080600080600060608688031215611f07578081fd5b8535611f12816125b2565b9450602086013567ffffffffffffffff80821115611f2e578283fd5b611f3a89838a01611e3f565b90965094506040880135915080821115611f52578283fd5b50611f5f88828901611e3f565b969995985093965092949392505050565b60008060008060608587031215611f85578384fd5b8435611f90816125b2565b9350602085013567ffffffffffffffff811115611fab578384fd5b611fb787828801611e3f565b9598909750949560400135949350505050565b600080600060608486031215611fde578283fd5b8335611fe9816125b2565b92506020840135611ff9816125c7565b929592945050506040919091013590565b6000806000806040858703121561201f578384fd5b843567ffffffffffffffff80821115612036578586fd5b61204288838901611e3f565b9096509450602087013591508082111561205a578384fd5b5061206787828801611e3f565b95989497509550505050565b60006020808385031215612085578182fd5b825167ffffffffffffffff8082111561209c578384fd5b818501915085601f8301126120af578384fd5b8151818111156120c1576120c161259c565b838102604051601f19603f830116810181811085821117156120e5576120e561259c565b604052828152858101935084860182860187018a1015612103578788fd5b8795505b8386101561212c5761211881611e88565b855260019590950194938601938601612107565b5098975050505050505050565b60006020828403121561214a578081fd5b81518015158114610ffd578182fd5b60006020828403121561216a578081fd5b5035919050565b60008060408385031215612183578182fd5b823591506020830135611ee5816125b2565b6000602082840312156121a6578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ffd578182fd5b6000602082840312156121e6578081fd5b8135610ffd816125c7565b600060208284031215612202578081fd5b8151610ffd816125c7565b60008060008060608587031215612222578182fd5b843561222d816125c7565b935060208501359250604085013567ffffffffffffffff81111561224f578283fd5b61206787828801611e3f565b60006020828403121561226c578081fd5b815160ff81168114610ffd578182fd5b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516122b4816017850160208801612524565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516122f1816028840160208801612524565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561233b57835163ffffffff1683529284019291840191600101612319565b50909695505050505050565b6000602082528251806020840152612366816040850160208701612524565b601f01601f19169190910160400192915050565b83815260406020808301829052828201849052600091906060908185018682028601830188865b898110156124ba577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa089840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18c3603018112612401578889fd5b8b018388018135368390037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1018112612438578a8bfd5b8201803567ffffffffffffffff811115612450578b8cfd5b8881023603841315612460578b8cfd5b8a8752918290528701908a908987015b8183101561249b578335612483816125c7565b61ffff16815292890192600192909201918901612470565b93890135968901969096525050938501939250908401906001016123a1565b50909a9950505050505050505050565b600082198211156124dd576124dd612586565b500190565b60008160001904831182151516156124fc576124fc612586565b500290565b600061ffff8381169083168181101561251c5761251c612586565b039392505050565b60005b8381101561253f578181015183820152602001612527565b8381111561254e576000848401525b50505050565b60008161256357612563612586565b506000190190565b600060001982141561257f5761257f612586565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461150957600080fd5b61ffff8116811461150957600080fdfea264697066735822122000ff132a77c9e65837d7afc59e18947f9a500ee4e16fce3c904dab754cc3d19f64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063715018a611610104578063a9aff9c1116100a2578063d0807d3111610071578063d0807d3114610433578063d547741f14610446578063da74222814610459578063f2fde38b1461046c576101da565b8063a9aff9c1146103f4578063aeb845d114610407578063c05697581461040f578063ce1b815f14610422576101da565b80638c4d91ed116100de5780638c4d91ed1461038b5780638da5cb5b1461039357806391d14854146103b3578063a217fddf146103ec576101da565b8063715018a61461033e57806378bc8a19146103465780637e8ee42f1461036b576101da565b8063362e7e8c1161017c578063572b6c051161014b578063572b6c05146102ee578063590d0dce14610310578063645c5f9e146103235780636d9168391461032b576101da565b8063362e7e8c146102a257806336568abe146102b557806352eea030146102c8578063550d629c146102db576101da565b8063184dfff5116101b8578063184dfff514610224578063248a9ca3146102595780632a6a64511461027c5780632f2ff15d1461028f576101da565b806301ffc9a7146101df578063141376f914610207578063181896531461021a575b600080fd5b6101f26101ed366004612195565b61047f565b60405190151581526020015b60405180910390f35b6101f26102153660046121d5565b61051a565b610222610537565b005b61024b7fe43cbdacb5a27491c5b15dcd2ddf377fcc3cf337bd999d6a7acb8c882b5554cb81565b6040519081526020016101fe565b61024b610267366004612159565b60009081526097602052604090206001015490565b61022261028a366004611fca565b610544565b61022261029d366004612171565b6106c9565b6102226102b0366004611ef0565b6106fb565b6102226102c3366004612171565b6107f8565b6102226102d6366004611ef0565b610894565b6102226102e936600461200a565b610989565b6101f26102fc366004611e9c565b6000546001600160a01b0390811691161490565b61022261031e366004611fca565b610d4e565b60ca5461024b565b610222610339366004611f70565b610e4c565b610222610eaf565b6103596103543660046121d5565b610f28565b60405160ff90911681526020016101fe565b61037e61037936600461220d565b611004565b6040516101fe91906122fd565b60c95461024b565b61039b611110565b6040516001600160a01b0390911681526020016101fe565b6101f26103c1366004612171565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61024b600081565b610222610402366004611f70565b611120565b61022261117c565b6101f261041d3660046121d5565b611186565b6000546001600160a01b031661039b565b610222610441366004611eb8565b611192565b610222610454366004612171565b611329565b610222610467366004611e9c565b611351565b61022261047a366004611e9c565b611415565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061051257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b6000806105268361150c565b6001600160a01b0316141592915050565b61054260001961157f565b565b82806001600160a01b0316610557611782565b6001600160a01b0316148061059357506105937fe43cbdacb5a27491c5b15dcd2ddf377fcc3cf337bd999d6a7acb8c882b5554cb6103c1611782565b6105e45760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e494544000000000000000000000000000060448201526064015b60405180910390fd5b60006105ef84611791565b90506001600160a01b0381166106475760405162461bcd60e51b815260206004820152601760248201527f434154414c5953545f444f45535f4e4f545f455849535400000000000000000060448201526064016105db565b6040517f1dd319cb0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201859052821690631dd319cb90604401600060405180830381600087803b1580156106aa57600080fd5b505af11580156106be573d6000803e3d6000fd5b505050505050505050565b6000828152609760205260409020600101546106ec816106e7611782565b6117be565b6106f6838361183e565b505050565b60005b838110156107f05784848281811061072657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061073b91906121d5565b61ffff1615801590610774575082828281811061076857634e487b7160e01b600052603260045260246000fd5b90506020020135600014155b156107de576107de8686868481811061079d57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107b291906121d5565b8585858181106107d257634e487b7160e01b600052603260045260246000fd5b90506020020135610d4e565b806107e88161256b565b9150506106fe565b505050505050565b610800611782565b6001600160a01b0316816001600160a01b0316146108865760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016105db565b61089082826118e1565b5050565b60005b838110156107f0578484828181106108bf57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108d491906121d5565b61ffff161580159061090d575082828281811061090157634e487b7160e01b600052603260045260246000fd5b90506020020135600014155b15610977576109778686868481811061093657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061094b91906121d5565b85858581811061096b57634e487b7160e01b600052603260045260246000fd5b90506020020135610544565b806109818161256b565b915050610897565b6000610997816106e7611782565b60ca5460c95461010091849187916109ae916124ca565b6109b891906124ca565b6109c291906124ca565b10610a355760405162461bcd60e51b815260206004820152603a60248201527f47656d73436174616c7973747352656769737472793a20546f6f206d616e792060448201527f67656d20616e6420636174616c79737420636f6e74726163747300000000000060648201526084016105db565b60005b84811015610bc1576000868683818110610a6257634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610a779190611e9c565b90506000816001600160a01b031663caafdcff6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ab657600080fd5b505af1158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee91906121f1565b60c954909150610aff9060016124ca565b8161ffff1614610b515760405162461bcd60e51b815260206004820152601360248201527f47454d5f49445f4e4f545f494e5f4f524445520000000000000000000000000060448201526064016105db565b5060c980546001810182556000919091527f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2801805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905580610bb98161256b565b915050610a38565b5060005b828110156107f0576000848483818110610bef57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c049190611e9c565b90506000816001600160a01b031663c7165bbb6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610c4357600080fd5b505af1158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b91906121f1565b60ca54909150610c8c9060016124ca565b8161ffff1614610cde5760405162461bcd60e51b815260206004820152601860248201527f434154414c5953545f49445f4e4f545f494e5f4f52444552000000000000000060448201526064016105db565b5060ca80546001810182556000919091527f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905580610d468161256b565b915050610bc5565b82806001600160a01b0316610d61611782565b6001600160a01b03161480610d9d5750610d9d7fe43cbdacb5a27491c5b15dcd2ddf377fcc3cf337bd999d6a7acb8c882b5554cb6103c1611782565b610de95760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e494544000000000000000000000000000060448201526064016105db565b6000610df48461150c565b90506001600160a01b0381166106475760405162461bcd60e51b815260206004820152601260248201527f47454d5f444f45535f4e4f545f4558495354000000000000000000000000000060448201526064016105db565b60005b82811015610ea857610e9685858584818110610e7b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610e9091906121d5565b84610d4e565b80610ea08161256b565b915050610e4f565b5050505050565b610eb7611782565b6001600160a01b0316610ec8611110565b6001600160a01b031614610f1e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105db565b6105426000611982565b600080610f3483611791565b90506001600160a01b038116610f8c5760405162461bcd60e51b815260206004820152601760248201527f434154414c5953545f444f45535f4e4f545f455849535400000000000000000060448201526064016105db565b806001600160a01b03166309cba36b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc557600080fd5b505afa158015610fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffd919061225b565b9392505050565b6060600061101186611791565b90506001600160a01b0381166110695760405162461bcd60e51b815260206004820152601760248201527f434154414c5953545f444f45535f4e4f545f455849535400000000000000000060448201526064016105db565b6040517f74903c860000000000000000000000000000000000000000000000000000000081526001600160a01b038216906374903c86906110b29088908890889060040161237a565b60006040518083038186803b1580156110ca57600080fd5b505afa1580156110de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111069190810190612073565b9695505050505050565b6033546001600160a01b03165b90565b60005b82811015610ea85761116a8585858481811061114f57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061116491906121d5565b84610544565b806111748161256b565b915050611123565b610542600061157f565b60008061052683611791565b600054600160a81b900460ff166111c75760005474010000000000000000000000000000000000000000900460ff16156111cb565b303b155b61123d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105db565b600054600160a81b900460ff161580156112bb57600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909116600160a81b1716740100000000000000000000000000000000000000001790555b6112c66000836119e1565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790556112f66119eb565b80156106f657600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff169055505050565b600082815260976020526040902060010154611347816106e7611782565b6106f683836118e1565b611359611782565b6001600160a01b031661136a611110565b6001600160a01b0316146113c05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105db565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117825560405190917f871264f4293af7d2865ae7eae628b228f4991c57cb45b39c99f0b774ebe2901891a250565b61141d611782565b6001600160a01b031661142e611110565b6001600160a01b0316146114845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105db565b6001600160a01b0381166115005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105db565b61150981611982565b50565b6000808261ffff16118015611527575060c95461ffff831611155b156115775760c9611539600184612501565b61ffff168154811061155b57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169050610515565b506000610515565b60005b60c9548110156116805760c981815481106115ad57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316632b9917466115cf611782565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015230602482015260448101859052606401602060405180830381600087803b15801561163557600080fd5b505af1158015611649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166d9190612139565b50806116788161256b565b915050611582565b5060005b60ca548110156108905760ca81815481106116af57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316632b9917466116d1611782565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015230602482015260448101859052606401602060405180830381600087803b15801561173757600080fd5b505af115801561174b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176f9190612139565b508061177a8161256b565b915050611684565b600061178c611a7a565b905090565b6000808261ffff161180156117ac575060ca5461ffff831611155b156115775760ca611539600184612501565b60008281526097602090815260408083206001600160a01b038516845290915290205460ff16610890576117fc816001600160a01b03166014611ac2565b611807836020611ac2565b60405160200161181892919061227c565b60408051601f198184030181529082905262461bcd60e51b82526105db91600401612347565b60008281526097602090815260408083206001600160a01b038516845290915290205460ff166108905760008281526097602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561189d611782565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526097602090815260408083206001600160a01b038516845290915290205460ff16156108905760008281526097602090815260408083206001600160a01b03851684529091529020805460ff1916905561193e611782565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610890828261183e565b600054600160a81b900460ff16611a6a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105db565b611a72611d31565b610542611db0565b600080546001600160a01b0316331415611abb57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c61111d565b503361111d565b60606000611ad18360026124e2565b611adc9060026124ca565b67ffffffffffffffff811115611b0257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611b2c576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611b7157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611be257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611c1e8460026124e2565b611c299060016124ca565b90505b6001811115611ce2577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611c7857634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611c9c57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611cdb81612554565b9050611c2c565b508315610ffd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105db565b600054600160a81b900460ff166105425760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105db565b600054600160a81b900460ff16611e2f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105db565b610542611e3a611782565b611982565b60008083601f840112611e50578081fd5b50813567ffffffffffffffff811115611e67578182fd5b6020830191508360208083028501011115611e8157600080fd5b9250929050565b805163ffffffff8116811461051557600080fd5b600060208284031215611ead578081fd5b8135610ffd816125b2565b60008060408385031215611eca578081fd5b8235611ed5816125b2565b91506020830135611ee5816125b2565b809150509250929050565b600080600080600060608688031215611f07578081fd5b8535611f12816125b2565b9450602086013567ffffffffffffffff80821115611f2e578283fd5b611f3a89838a01611e3f565b90965094506040880135915080821115611f52578283fd5b50611f5f88828901611e3f565b969995985093965092949392505050565b60008060008060608587031215611f85578384fd5b8435611f90816125b2565b9350602085013567ffffffffffffffff811115611fab578384fd5b611fb787828801611e3f565b9598909750949560400135949350505050565b600080600060608486031215611fde578283fd5b8335611fe9816125b2565b92506020840135611ff9816125c7565b929592945050506040919091013590565b6000806000806040858703121561201f578384fd5b843567ffffffffffffffff80821115612036578586fd5b61204288838901611e3f565b9096509450602087013591508082111561205a578384fd5b5061206787828801611e3f565b95989497509550505050565b60006020808385031215612085578182fd5b825167ffffffffffffffff8082111561209c578384fd5b818501915085601f8301126120af578384fd5b8151818111156120c1576120c161259c565b838102604051601f19603f830116810181811085821117156120e5576120e561259c565b604052828152858101935084860182860187018a1015612103578788fd5b8795505b8386101561212c5761211881611e88565b855260019590950194938601938601612107565b5098975050505050505050565b60006020828403121561214a578081fd5b81518015158114610ffd578182fd5b60006020828403121561216a578081fd5b5035919050565b60008060408385031215612183578182fd5b823591506020830135611ee5816125b2565b6000602082840312156121a6578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ffd578182fd5b6000602082840312156121e6578081fd5b8135610ffd816125c7565b600060208284031215612202578081fd5b8151610ffd816125c7565b60008060008060608587031215612222578182fd5b843561222d816125c7565b935060208501359250604085013567ffffffffffffffff81111561224f578283fd5b61206787828801611e3f565b60006020828403121561226c578081fd5b815160ff81168114610ffd578182fd5b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516122b4816017850160208801612524565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516122f1816028840160208801612524565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561233b57835163ffffffff1683529284019291840191600101612319565b50909695505050505050565b6000602082528251806020840152612366816040850160208701612524565b601f01601f19169190910160400192915050565b83815260406020808301829052828201849052600091906060908185018682028601830188865b898110156124ba577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa089840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18c3603018112612401578889fd5b8b018388018135368390037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1018112612438578a8bfd5b8201803567ffffffffffffffff811115612450578b8cfd5b8881023603841315612460578b8cfd5b8a8752918290528701908a908987015b8183101561249b578335612483816125c7565b61ffff16815292890192600192909201918901612470565b93890135968901969096525050938501939250908401906001016123a1565b50909a9950505050505050505050565b600082198211156124dd576124dd612586565b500190565b60008160001904831182151516156124fc576124fc612586565b500290565b600061ffff8381169083168181101561251c5761251c612586565b039392505050565b60005b8381101561253f578181015183820152602001612527565b8381111561254e576000848401525b50505050565b60008161256357612563612586565b506000190190565b600060001982141561257f5761257f612586565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461150957600080fd5b61ffff8116811461150957600080fdfea264697066735822122000ff132a77c9e65837d7afc59e18947f9a500ee4e16fce3c904dab754cc3d19f64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addGemsAndCatalysts(address[],address[])": {
        "params": {
          "catalysts": "array of catalysts to be added",
          "gems": "array of gems to be added"
        }
      },
      "batchBurnCatalysts(address,uint16[],uint256[])": {
        "params": {
          "amounts": "list of amounts of units to burn",
          "catalystIds": "list of catalysts to burn catalyst units from each",
          "from": "address of the beneficiary to burn on behalf of"
        }
      },
      "batchBurnGems(address,uint16[],uint256[])": {
        "params": {
          "amounts": "list of amounts of units to burn",
          "from": "address of the beneficiary to burn on behalf of",
          "gemIds": "list of gems to burn gem units from each"
        }
      },
      "burnCatalyst(address,uint16,uint256)": {
        "params": {
          "amount": "The number of catalyst tokens to burn.",
          "catalystId": "The id of the catalyst to burn.",
          "from": "The signing address for the tx."
        }
      },
      "burnDifferentCatalysts(address,uint16[],uint256)": {
        "params": {
          "amount": "amount to burn",
          "catalystIds": "list of catalysts to burn one catalyst from each",
          "from": "address of the beneficiary to burn on behalf of"
        }
      },
      "burnDifferentGems(address,uint16[],uint256)": {
        "params": {
          "amount": "amount units to burn",
          "from": "address of the beneficiary to burn on behalf of",
          "gemIds": "list of gems to burn one gem from each"
        }
      },
      "burnGem(address,uint16,uint256)": {
        "params": {
          "amount": "The number of gem tokens to burn.",
          "from": "The signing address for the tx.",
          "gemId": "The id of the gem to burn."
        }
      },
      "doesCatalystExist(uint16)": {
        "params": {
          "catalystId": "The catalyst being queried."
        },
        "returns": {
          "_0": "Whether the catalyst exists."
        }
      },
      "doesGemExist(uint16)": {
        "params": {
          "gemId": "The gem being queried."
        },
        "returns": {
          "_0": "Whether the gem exists."
        }
      },
      "getAttributes(uint16,uint256,(uint16[],bytes32)[])": {
        "params": {
          "assetId": "The asset tokenId.",
          "catalystId": "The catalyst identifier.",
          "events": "An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect."
        },
        "returns": {
          "values": "An array of values for each gem present in the asset."
        }
      },
      "getMaxGems(uint16)": {
        "params": {
          "catalystId": "catalyst identifier"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addGemsAndCatalysts(address[],address[])": {
        "notice": "Adds both arrays of gems and catalysts to registry"
      },
      "batchBurnCatalysts(address,uint16[],uint256[])": {
        "notice": "Burns few catalyst units from each catalyst id on behalf of a beneficiary"
      },
      "batchBurnGems(address,uint16[],uint256[])": {
        "notice": "Burns few gem units from each gem id on behalf of a beneficiary"
      },
      "burnCatalyst(address,uint16,uint256)": {
        "notice": "Burn a catalyst."
      },
      "burnDifferentCatalysts(address,uint16[],uint256)": {
        "notice": "Burns one catalyst unit from each catalyst id on behalf of a beneficiary"
      },
      "burnDifferentGems(address,uint16[],uint256)": {
        "notice": "Burns one gem unit from each gem id on behalf of a beneficiary"
      },
      "burnGem(address,uint16,uint256)": {
        "notice": "Burn a gem."
      },
      "doesCatalystExist(uint16)": {
        "notice": "Query whether a giving catalyst exists."
      },
      "doesGemExist(uint16)": {
        "notice": "Query whether a given gem exists."
      },
      "getAttributes(uint16,uint256,(uint16[],bytes32)[])": {
        "notice": "Returns the values for each gem included in a given asset."
      },
      "getMaxGems(uint16)": {
        "notice": "Returns the maximum number of gems for a given catalyst"
      }
    },
    "notice": "Contract managing the Gems and Catalysts Each Gems and Catalyst must be registered here. Each new Gem get assigned a new id (starting at 1) Each new Catalyst get assigned a new id (starting at 1)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29171,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5077,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5080,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6681,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4854,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 4968,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7543,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4482,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4477_storage)"
      },
      {
        "astId": 4769,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 24881,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "_gems",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_contract(IGem)25707)dyn_storage"
      },
      {
        "astId": 24885,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "_catalysts",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_contract(ICatalyst)25665)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(ICatalyst)25665)dyn_storage": {
        "base": "t_contract(ICatalyst)25665",
        "encoding": "dynamic_array",
        "label": "contract ICatalyst[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IGem)25707)dyn_storage": {
        "base": "t_contract(IGem)25707",
        "encoding": "dynamic_array",
        "label": "contract IGem[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICatalyst)25665": {
        "encoding": "inplace",
        "label": "contract ICatalyst",
        "numberOfBytes": "20"
      },
      "t_contract(IGem)25707": {
        "encoding": "inplace",
        "label": "contract IGem",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4477_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4477_storage"
      },
      "t_struct(RoleData)4477_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 4474,
            "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4476,
            "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}