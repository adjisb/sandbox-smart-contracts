{
  "address": "0x2E290c5B85b07E9f2E757C5d3e6b26Aba3B24f63",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAssetAttributesRegistry",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "contract IERC721Token",
          "name": "assetERC721",
          "type": "address"
        },
        {
          "internalType": "contract IPolygonAssetERC1155",
          "name": "assetERC1155",
          "type": "address"
        },
        {
          "internalType": "contract GemsCatalystsRegistry",
          "name": "gemsCatalystsRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "quantitiesByCatalystId_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantitiesByAssetTypeId_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addressModified",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isAddressCustomMintingAllowed",
          "type": "bool"
        }
      ],
      "name": "CustomMintingAllowanceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "index1Based",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "newQuantity",
          "type": "uint256"
        }
      ],
      "name": "addOrReplaceAssetTypeQuantity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "newQuantity",
          "type": "uint256"
        }
      ],
      "name": "addOrReplaceQuantityByCatalystId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "catalystsFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "customMinterAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gemsFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "packId",
              "type": "uint40"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAssetMinter.MintData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "mintCustomNumberWithCatalyst",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "packId",
              "type": "uint40"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAssetMinter.MintData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16[]",
              "name": "gemIds",
              "type": "uint16[]"
            },
            {
              "internalType": "uint16",
              "name": "catalystId",
              "type": "uint16"
            }
          ],
          "internalType": "struct IAssetMinter.AssetData[]",
          "name": "assets",
          "type": "tuple[]"
        }
      ],
      "name": "mintMultipleWithCatalyst",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "assetIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "packId",
              "type": "uint40"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAssetMinter.MintData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        }
      ],
      "name": "mintWithCatalyst",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "packId",
              "type": "uint40"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAssetMinter.MintData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "internalType": "uint16",
          "name": "typeAsset1Based",
          "type": "uint16"
        }
      ],
      "name": "mintWithoutCatalyst",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfCatalystBurnPerAsset",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfGemsBurnPerAsset",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "quantitiesByAssetTypeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "quantitiesByCatalystId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newQuantity",
          "type": "uint256"
        }
      ],
      "name": "setCatalystsFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addressToModify",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAddressAllowed",
          "type": "bool"
        }
      ],
      "name": "setCustomMintingAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newQuantity",
          "type": "uint256"
        }
      ],
      "name": "setGemsFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newQuantity",
          "type": "uint32"
        }
      ],
      "name": "setNumberOfCatalystsBurnPerAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newQuantity",
          "type": "uint32"
        }
      ],
      "name": "setNumberOfGemsBurnPerAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa72954a7439473bd6b499784b61701eec6ea30e4b41b0b5f87cb68e98fc22726",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x2E290c5B85b07E9f2E757C5d3e6b26Aba3B24f63",
    "transactionIndex": 25,
    "gasUsed": "2675792",
    "logsBloom": "0x
    "blockHash": "0xd57d5bb350bdfc1eb8d96021275894a5b610e5b8800e696b9004ad58ccb94e3d",
    "transactionHash": "0xa72954a7439473bd6b499784b61701eec6ea30e4b41b0b5f87cb68e98fc22726",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 26214082,
        "transactionHash": "0xa72954a7439473bd6b499784b61701eec6ea30e4b41b0b5f87cb68e98fc22726",
        "address": "0x2E290c5B85b07E9f2E757C5d3e6b26Aba3B24f63",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02"
        ],
        "data": "0x",
        "logIndex": 173,
        "blockHash": "0xd57d5bb350bdfc1eb8d96021275894a5b610e5b8800e696b9004ad58ccb94e3d"
      },
      {
        "transactionIndex": 25,
        "blockNumber": 26214082,
        "transactionHash": "0xa72954a7439473bd6b499784b61701eec6ea30e4b41b0b5f87cb68e98fc22726",
        "address": "0x2E290c5B85b07E9f2E757C5d3e6b26Aba3B24f63",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x00000000000000000000000049c4d4c94829b9c44052c5f5cb164fc612181165"
        ],
        "data": "0x",
        "logIndex": 174,
        "blockHash": "0xd57d5bb350bdfc1eb8d96021275894a5b610e5b8800e696b9004ad58ccb94e3d"
      },
      {
        "transactionIndex": 25,
        "blockNumber": 26214082,
        "transactionHash": "0xa72954a7439473bd6b499784b61701eec6ea30e4b41b0b5f87cb68e98fc22726",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000e426d8f7ab0000000000000000000000000000000000000000000000000000a8cb3918249f6170000000000000000000000000000000000000000000014ed2c2d92c98d5efba20000000000000000000000000000000000000000000000000a7e7123f2cf46170000000000000000000000000000000000000000000014ed2c3bd5371cd9aba2",
        "logIndex": 175,
        "blockHash": "0xd57d5bb350bdfc1eb8d96021275894a5b610e5b8800e696b9004ad58ccb94e3d"
      }
    ],
    "blockNumber": 26214082,
    "cumulativeGasUsed": "12655940",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5470DA6B72F3f28D73363B9A06f06c241F6EdF2A",
    "0xE7b17A255D68DeC30e07Ca8F890E111901b6CfCd",
    "0x931EbF3AC1b9C0A6d0f91c1b00605a10C2Ac0B8f",
    "0x9aa741D196465869fA8E44Eede2a5Ed68D4ED13a",
    "0x49c4D4C94829B9c44052C5f5Cb164Fc612181165",
    "0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b",
    [
      1000,
      100,
      10,
      1
    ],
    [
      1,
      10000
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "3ac99781400346b5ef1247840c0f0d75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAssetAttributesRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Token\",\"name\":\"assetERC721\",\"type\":\"address\"},{\"internalType\":\"contract IPolygonAssetERC1155\",\"name\":\"assetERC1155\",\"type\":\"address\"},{\"internalType\":\"contract GemsCatalystsRegistry\",\"name\":\"gemsCatalystsRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"quantitiesByCatalystId_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantitiesByAssetTypeId_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressModified\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isAddressCustomMintingAllowed\",\"type\":\"bool\"}],\"name\":\"CustomMintingAllowanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"index1Based\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"newQuantity\",\"type\":\"uint256\"}],\"name\":\"addOrReplaceAssetTypeQuantity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"newQuantity\",\"type\":\"uint256\"}],\"name\":\"addOrReplaceQuantityByCatalystId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"catalystsFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customMinterAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemsFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetMinter.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintCustomNumberWithCatalyst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetMinter.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"}],\"internalType\":\"struct IAssetMinter.AssetData[]\",\"name\":\"assets\",\"type\":\"tuple[]\"}],\"name\":\"mintMultipleWithCatalyst\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetMinter.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"}],\"name\":\"mintWithCatalyst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetMinter.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"typeAsset1Based\",\"type\":\"uint16\"}],\"name\":\"mintWithoutCatalyst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfCatalystBurnPerAsset\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfGemsBurnPerAsset\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"quantitiesByAssetTypeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"quantitiesByCatalystId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuantity\",\"type\":\"uint256\"}],\"name\":\"setCatalystsFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToModify\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAddressAllowed\",\"type\":\"bool\"}],\"name\":\"setCustomMintingAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuantity\",\"type\":\"uint256\"}],\"name\":\"setGemsFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newQuantity\",\"type\":\"uint32\"}],\"name\":\"setNumberOfCatalystsBurnPerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newQuantity\",\"type\":\"uint32\"}],\"name\":\"setNumberOfGemsBurnPerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"assetERC1155\":\": Asset ERC1155 Token Contract\",\"assetERC721\":\": Asset ERC721 Token Contract\",\"gemsCatalystsRegistry\":\": that track the canonical catalyst and gems and provide batch burning facility\",\"registry\":\": AssetAttributesRegistry for recording catalyst and gems used\",\"trustedForwarder\":\": address of the trusted forwarder (used for metaTX)\"}},\"mintCustomNumberWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[],uint256)\":{\"params\":{\"catalystId\":\"Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).\",\"gemIds\":\"list of gem ids to burn in the catalyst.\",\"mintData\":\"(-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)\",\"quantity\":\"number of token to mint\"},\"returns\":{\"assetId\":\"The new token Id.\"}},\"mintMultipleWithCatalyst((address,address,uint40,bytes32,bytes),(uint16[],uint16)[])\":{\"params\":{\"assets\":\"data (gems and catalyst data)\",\"mintData\":\"contains (-from address creating the Asset, need to be the tx sender or meta tx signer -packId unused packId that will let you predict the resulting tokenId -metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata)\"}},\"mintWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[])\":{\"params\":{\"catalystId\":\"Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).\",\"gemIds\":\"list of gem ids to burn in the catalyst.\",\"mintData\":\": (-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)\"},\"returns\":{\"assetId\":\"The new token Id.\"}},\"mintWithoutCatalyst((address,address,uint40,bytes32,bytes),uint16)\":{\"params\":{\"mintData\":\": (-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)\",\"typeAsset1Based\":\"(art, prop...) decide how many asset will be minted (start at 1)\"},\"returns\":{\"assetId\":\"The new token Id.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"AssetMinter depends on\"},\"mintCustomNumberWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[],uint256)\":{\"notice\":\"mint \\\"quantity\\\" number of Asset token using one catalyst.\"},\"mintMultipleWithCatalyst((address,address,uint40,bytes32,bytes),(uint16[],uint16)[])\":{\"notice\":\"mint multiple Asset tokens.\"},\"mintWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[])\":{\"notice\":\"mint multiple Asset tokens using one catalyst.\"},\"mintWithoutCatalyst((address,address,uint40,bytes32,bytes),uint16)\":{\"notice\":\"mint one Asset token with no catalyst.\"}},\"notice\":\"Allow to mint Asset with Catalyst, Gems and Sand, giving the assets attributes through AssetAttributeRegistry\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/asset/AssetMinter.sol\":\"AssetMinter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/solc_0.8/asset/AssetMinter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport \\\"../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport \\\"../common/interfaces/IAssetMinter.sol\\\";\\nimport \\\"../catalyst/GemsCatalystsRegistry.sol\\\";\\nimport \\\"../common/interfaces/IPolygonAssetERC1155.sol\\\";\\nimport \\\"../common/interfaces/IERC721Token.sol\\\";\\n\\n/// @notice Allow to mint Asset with Catalyst, Gems and Sand, giving the assets attributes through AssetAttributeRegistry\\ncontract AssetMinter is ERC2771Handler, IAssetMinter, Ownable {\\n    uint256 private constant NFT_SUPPLY = 1;\\n\\n    uint32 public numberOfGemsBurnPerAsset = 1;\\n    uint32 public numberOfCatalystBurnPerAsset = 1;\\n    uint256 public gemsFactor = 1000000000000000000;\\n    uint256 public catalystsFactor = 1000000000000000000;\\n\\n    IAssetAttributesRegistry internal immutable _registry;\\n    IPolygonAssetERC1155 internal immutable _assetERC1155;\\n    IERC721Token internal immutable _assetERC721;\\n    GemsCatalystsRegistry internal immutable _gemsCatalystsRegistry;\\n\\n    mapping(uint16 => uint256) public quantitiesByCatalystId;\\n    mapping(uint16 => uint256) public quantitiesByAssetTypeId; // quantities for asset that don't use catalyst to burn (art, prop...)\\n    mapping(address => bool) public customMinterAllowance;\\n\\n    event CustomMintingAllowanceChanged(address indexed addressModified, bool indexed isAddressCustomMintingAllowed);\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n\\n    /// @notice AssetMinter depends on\\n    /// @param registry: AssetAttributesRegistry for recording catalyst and gems used\\n    /// @param assetERC721: Asset ERC721 Token Contract\\n    /// @param assetERC1155: Asset ERC1155 Token Contract\\n    /// @param gemsCatalystsRegistry: that track the canonical catalyst and gems and provide batch burning facility\\n    /// @param trustedForwarder: address of the trusted forwarder (used for metaTX)\\n    constructor(\\n        IAssetAttributesRegistry registry,\\n        IERC721Token assetERC721,\\n        IPolygonAssetERC1155 assetERC1155,\\n        GemsCatalystsRegistry gemsCatalystsRegistry,\\n        address admin,\\n        address trustedForwarder,\\n        uint256[] memory quantitiesByCatalystId_,\\n        uint256[] memory quantitiesByAssetTypeId_\\n    ) {\\n        _registry = registry;\\n        _assetERC721 = assetERC721;\\n        _assetERC1155 = assetERC1155;\\n        _gemsCatalystsRegistry = gemsCatalystsRegistry;\\n        transferOwnership(admin);\\n        __ERC2771Handler_initialize(trustedForwarder);\\n\\n        require(quantitiesByCatalystId_.length > 0, \\\"AssetMinter: quantitiesByCatalystID length cannot be 0\\\");\\n        require(quantitiesByAssetTypeId_.length > 0, \\\"AssetMinter: quantitiesByAssetTypeId length cannot be 0\\\");\\n\\n        for (uint16 i = 0; i < quantitiesByCatalystId_.length; i++) {\\n            quantitiesByCatalystId[i + 1] = quantitiesByCatalystId_[i];\\n        }\\n\\n        for (uint16 i = 0; i < quantitiesByAssetTypeId_.length; i++) {\\n            quantitiesByAssetTypeId[i + 1] = quantitiesByAssetTypeId_[i];\\n        }\\n    }\\n\\n    function addOrReplaceQuantityByCatalystId(uint16 catalystId, uint256 newQuantity) external override onlyOwner {\\n        quantitiesByCatalystId[catalystId] = newQuantity;\\n    }\\n\\n    function addOrReplaceAssetTypeQuantity(uint16 index1Based, uint256 newQuantity) external override onlyOwner {\\n        quantitiesByAssetTypeId[index1Based] = newQuantity;\\n    }\\n\\n    function setNumberOfGemsBurnPerAsset(uint32 newQuantity) external override onlyOwner {\\n        numberOfGemsBurnPerAsset = newQuantity;\\n    }\\n\\n    function setNumberOfCatalystsBurnPerAsset(uint32 newQuantity) external override onlyOwner {\\n        numberOfCatalystBurnPerAsset = newQuantity;\\n    }\\n\\n    function setGemsFactor(uint256 newQuantity) external override onlyOwner {\\n        gemsFactor = newQuantity;\\n    }\\n\\n    function setCatalystsFactor(uint256 newQuantity) external override onlyOwner {\\n        catalystsFactor = newQuantity;\\n    }\\n\\n    function setCustomMintingAllowance(address addressToModify, bool isAddressAllowed) external override onlyOwner {\\n        customMinterAllowance[addressToModify] = isAddressAllowed;\\n\\n        emit CustomMintingAllowanceChanged(addressToModify, isAddressAllowed);\\n    }\\n\\n    /// @notice mint \\\"quantity\\\" number of Asset token using one catalyst.\\n    /// @param mintData (-from address creating the Asset, need to be the tx sender or meta tx signer.\\n    ///  -packId unused packId that will let you predict the resulting tokenId.\\n    /// - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata.\\n    /// - to destination address receiving the minted tokens.\\n    /// - data extra data)\\n    /// @param catalystId Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).\\n    /// @param gemIds list of gem ids to burn in the catalyst.\\n    /// @param quantity number of token to mint\\n    /// @return assetId The new token Id.\\n    function mintCustomNumberWithCatalyst(\\n        MintData calldata mintData,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint256 quantity\\n    ) external override returns (uint256 assetId) {\\n        require(\\n            customMinterAllowance[_msgSender()] == true || _msgSender() == owner(),\\n            \\\"AssetMinter: custom minting unauthorized\\\"\\n        );\\n        assetId = _burnAndMint(\\n            mintData.from,\\n            mintData.packId,\\n            mintData.metadataHash,\\n            catalystId,\\n            gemIds,\\n            quantity,\\n            mintData.to,\\n            mintData.data\\n        );\\n    }\\n\\n    /// @notice mint one Asset token with no catalyst.\\n    /// @param mintData : (-from address creating the Asset, need to be the tx sender or meta tx signer.\\n    ///  -packId unused packId that will let you predict the resulting tokenId.\\n    /// - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata.\\n    /// - to destination address receiving the minted tokens.\\n    /// - data extra data)\\n    /// @param typeAsset1Based (art, prop...) decide how many asset will be minted (start at 1)\\n    /// @return assetId The new token Id.\\n    function mintWithoutCatalyst(MintData calldata mintData, uint16 typeAsset1Based)\\n        external\\n        override\\n        returns (uint256 assetId)\\n    {\\n        uint256 quantity = quantitiesByAssetTypeId[typeAsset1Based];\\n\\n        _mintRequirements(mintData.from, quantity, mintData.to);\\n        assetId = _assetERC1155.mint(\\n            mintData.from,\\n            mintData.packId,\\n            mintData.metadataHash,\\n            quantity,\\n            mintData.to,\\n            mintData.data\\n        );\\n    }\\n\\n    /// @notice mint multiple Asset tokens using one catalyst.\\n    /// @param mintData : (-from address creating the Asset, need to be the tx sender or meta tx signer.\\n    ///  -packId unused packId that will let you predict the resulting tokenId.\\n    /// - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata.\\n    /// - to destination address receiving the minted tokens.\\n    /// - data extra data)\\n    /// @param catalystId Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).\\n    /// @param gemIds list of gem ids to burn in the catalyst.\\n    /// @return assetId The new token Id.\\n    function mintWithCatalyst(\\n        MintData calldata mintData,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external override returns (uint256 assetId) {\\n        uint256 quantity = quantitiesByCatalystId[catalystId];\\n\\n        assetId = _burnAndMint(\\n            mintData.from,\\n            mintData.packId,\\n            mintData.metadataHash,\\n            catalystId,\\n            gemIds,\\n            quantity,\\n            mintData.to,\\n            mintData.data\\n        );\\n    }\\n\\n    /// @notice mint multiple Asset tokens.\\n    /// @param mintData contains (-from address creating the Asset, need to be the tx sender or meta tx signer\\n    /// -packId unused packId that will let you predict the resulting tokenId\\n    /// -metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata)\\n    /// @param assets data (gems and catalyst data)\\n    function mintMultipleWithCatalyst(MintData calldata mintData, AssetData[] memory assets)\\n        external\\n        override\\n        returns (uint256[] memory assetIds)\\n    {\\n        require(assets.length != 0, \\\"INVALID_0_ASSETS\\\");\\n        require(mintData.to != address(0), \\\"INVALID_TO_ZERO_ADDRESS\\\");\\n\\n        require(_msgSender() == mintData.from, \\\"AUTH_ACCESS_DENIED\\\");\\n\\n        uint256[] memory supplies = _handleMultipleAssetRequirements(mintData.from, assets);\\n        assetIds = _assetERC1155.mintMultiple(\\n            mintData.from,\\n            mintData.packId,\\n            mintData.metadataHash,\\n            supplies,\\n            \\\"\\\",\\n            mintData.to,\\n            mintData.data\\n        );\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            require(assets[i].catalystId != 0, \\\"AssetMinter: catalystID can't be 0\\\");\\n            _registry.setCatalyst(assetIds[i], assets[i].catalystId, assets[i].gemIds);\\n        }\\n        return assetIds;\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n\\n        emit TrustedForwarderChanged(trustedForwarder);\\n    }\\n\\n    /// @dev Handler for dealing with assets when minting multiple at once.\\n    /// @param from The original address that signed the transaction.\\n    /// @param assets An array of AssetData structs to define how the total gems and catalysts are to be allocated.\\n    /// @return supplies An array of the quantities for each asset being minted.\\n    function _handleMultipleAssetRequirements(address from, AssetData[] memory assets)\\n        internal\\n        returns (uint256[] memory supplies)\\n    {\\n        supplies = new uint256[](assets.length);\\n        uint256[] memory catalystsToBurn = new uint256[](_gemsCatalystsRegistry.getNumberOfCatalystContracts());\\n        uint256[] memory gemsToBurn = new uint256[](_gemsCatalystsRegistry.getNumberOfGemContracts());\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            require(\\n                assets[i].catalystId > 0 && assets[i].catalystId <= catalystsToBurn.length,\\n                \\\"AssetMinter: catalystID out of bound\\\"\\n            );\\n            catalystsToBurn[assets[i].catalystId - 1]++;\\n            for (uint256 j = 0; j < assets[i].gemIds.length; j++) {\\n                require(\\n                    assets[i].gemIds[j] > 0 && assets[i].gemIds[j] <= gemsToBurn.length,\\n                    \\\"AssetMinter: gemId out of bound\\\"\\n                );\\n                gemsToBurn[assets[i].gemIds[j] - 1]++;\\n            }\\n\\n            uint16 maxGems = _gemsCatalystsRegistry.getMaxGems(assets[i].catalystId);\\n            require(assets[i].gemIds.length <= maxGems, \\\"AssetMinter: too many gems\\\");\\n            supplies[i] = quantitiesByCatalystId[assets[i].catalystId];\\n        }\\n        _batchBurnCatalysts(from, catalystsToBurn);\\n        _batchBurnGems(from, gemsToBurn);\\n    }\\n\\n    /// @dev Burn a batch of catalysts in one tx.\\n    /// @param from The original address that signed the tx.\\n    /// @param catalystsQuantities An array of quantities for each type of catalyst to burn.\\n    function _batchBurnCatalysts(address from, uint256[] memory catalystsQuantities) internal {\\n        uint16[] memory ids = new uint16[](catalystsQuantities.length);\\n        for (uint16 i = 0; i < ids.length; i++) {\\n            ids[i] = i + 1;\\n        }\\n        _gemsCatalystsRegistry.batchBurnCatalysts(from, ids, _scaleCatalystQuantities(catalystsQuantities));\\n    }\\n\\n    /// @dev Burn a batch of gems in one tx.\\n    /// @param from The original address that signed the tx.\\n    /// @param gemsQuantities An array of quantities for each type of gems to burn.\\n    function _batchBurnGems(address from, uint256[] memory gemsQuantities) internal {\\n        uint16[] memory ids = new uint16[](gemsQuantities.length);\\n        for (uint16 i = 0; i < ids.length; i++) {\\n            ids[i] = i + 1;\\n        }\\n        _gemsCatalystsRegistry.batchBurnGems(from, ids, _scaleGemQuantities(gemsQuantities));\\n    }\\n\\n    /// @dev Burn an array of gems.\\n    /// @param from The original signer of the tx.\\n    /// @param gemIds The array of gems to burn.\\n    /// @param numTimes Amount of gems to burn.\\n    function _burnGems(\\n        address from,\\n        uint16[] memory gemIds,\\n        uint32 numTimes\\n    ) internal {\\n        _gemsCatalystsRegistry.burnDifferentGems(from, gemIds, numTimes * gemsFactor);\\n    }\\n\\n    /// @dev Burn a single type of catalyst.\\n    /// @param from The original signer of the tx.\\n    /// @param catalystId The type of catalyst to burn.\\n    /// @param numTimes Amount of catalysts of this type to burn.\\n    function _burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint32 numTimes\\n    ) internal {\\n        _gemsCatalystsRegistry.burnCatalyst(from, catalystId, numTimes * catalystsFactor);\\n    }\\n\\n    /// @dev Scale up each number in an array of quantities by a factor of gemsUnits.\\n    /// @param quantities The array of numbers to scale.\\n    /// @return scaledQuantities The scaled-up values.\\n    function _scaleGemQuantities(uint256[] memory quantities)\\n        internal\\n        view\\n        returns (uint256[] memory scaledQuantities)\\n    {\\n        scaledQuantities = new uint256[](quantities.length);\\n        for (uint256 i = 0; i < quantities.length; i++) {\\n            scaledQuantities[i] = quantities[i] * gemsFactor * numberOfGemsBurnPerAsset;\\n        }\\n    }\\n\\n    /// @dev Scale up each number in an array of quantities by a factor of gemsUnits.\\n    /// @param quantities The array of numbers to scale.\\n    /// @return scaledQuantities The scaled-up values.\\n    function _scaleCatalystQuantities(uint256[] memory quantities)\\n        internal\\n        view\\n        returns (uint256[] memory scaledQuantities)\\n    {\\n        scaledQuantities = new uint256[](quantities.length);\\n        for (uint256 i = 0; i < quantities.length; i++) {\\n            scaledQuantities[i] = quantities[i] * catalystsFactor * numberOfCatalystBurnPerAsset;\\n        }\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n\\n    function _mintRequirements(\\n        address from,\\n        uint256 quantity,\\n        address to\\n    ) internal view {\\n        require(to != address(0), \\\"INVALID_TO_ZERO_ADDRESS\\\");\\n        require(_msgSender() == from, \\\"AUTH_ACCESS_DENIED\\\");\\n        require(quantity != 0, \\\"AssetMinter: quantity cannot be 0\\\");\\n    }\\n\\n    function _burnAndMint(\\n        address from,\\n        uint40 packId,\\n        bytes32 metadataHash,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint256 quantity,\\n        address to,\\n        bytes calldata data\\n    ) internal returns (uint256 assetId) {\\n        _mintRequirements(from, quantity, to);\\n\\n        _burnCatalyst(from, catalystId, numberOfCatalystBurnPerAsset);\\n        _burnGems(from, gemIds, numberOfGemsBurnPerAsset);\\n\\n        assetId = _assetERC1155.mint(from, packId, metadataHash, quantity, to, data);\\n        _registry.setCatalyst(assetId, catalystId, gemIds);\\n    }\\n}\\n\",\"keccak256\":\"0x5ad3ad85047573e628acf51642ff2d61e58dc01969051d4122a75aa7527061dd\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/GemsCatalystsRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IGem.sol\\\";\\nimport \\\"./interfaces/ICatalyst.sol\\\";\\nimport \\\"../common/interfaces/IERC20Extended.sol\\\";\\nimport \\\"./interfaces/IGemsCatalystsRegistry.sol\\\";\\nimport \\\"../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/// @notice Contract managing the Gems and Catalysts\\n/// Each Gems and Catalyst must be registered here.\\n/// Each new Gem get assigned a new id (starting at 1)\\n/// Each new Catalyst get assigned a new id (starting at 1)\\ncontract GemsCatalystsRegistry is ERC2771Handler, IGemsCatalystsRegistry, OwnableUpgradeable, AccessControlUpgradeable {\\n    uint256 private constant MAX_GEMS_AND_CATALYSTS = 256;\\n    uint256 internal constant MAX_UINT256 = ~uint256(0);\\n    bytes32 public constant SUPER_OPERATOR_ROLE = keccak256(\\\"SUPER_OPERATOR_ROLE\\\");\\n\\n    IGem[] internal _gems;\\n    ICatalyst[] internal _catalysts;\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n\\n    function initV1(address trustedForwarder, address admin) public initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        __ERC2771Handler_initialize(trustedForwarder);\\n        __Ownable_init();\\n    }\\n\\n    /// @notice Returns the values for each gem included in a given asset.\\n    /// @param catalystId The catalyst identifier.\\n    /// @param assetId The asset tokenId.\\n    /// @param events An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect.\\n    /// @return values An array of values for each gem present in the asset.\\n    function getAttributes(\\n        uint16 catalystId,\\n        uint256 assetId,\\n        IAssetAttributesRegistry.GemEvent[] calldata events\\n    ) external view override returns (uint32[] memory values) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getAttributes(assetId, events);\\n    }\\n\\n    /// @notice Returns the maximum number of gems for a given catalyst\\n    /// @param catalystId catalyst identifier\\n    function getMaxGems(uint16 catalystId) external view override returns (uint8) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getMaxGems();\\n    }\\n\\n    /// @notice Burns one gem unit from each gem id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param gemIds list of gems to burn one gem from each\\n    /// @param amount amount units to burn\\n    function burnDifferentGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256 amount\\n    ) external override {\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            burnGem(from, gemIds[i], amount);\\n        }\\n    }\\n\\n    /// @notice Burns one catalyst unit from each catalyst id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param catalystIds list of catalysts to burn one catalyst from each\\n    /// @param amount amount to burn\\n    function burnDifferentCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256 amount\\n    ) external override {\\n        for (uint256 i = 0; i < catalystIds.length; i++) {\\n            burnCatalyst(from, catalystIds[i], amount);\\n        }\\n    }\\n\\n    /// @notice Burns few gem units from each gem id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param gemIds list of gems to burn gem units from each\\n    /// @param amounts list of amounts of units to burn\\n    function batchBurnGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) public override {\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            if (gemIds[i] != 0 && amounts[i] != 0) {\\n                burnGem(from, gemIds[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns few catalyst units from each catalyst id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param catalystIds list of catalysts to burn catalyst units from each\\n    /// @param amounts list of amounts of units to burn\\n    function batchBurnCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) public override {\\n        for (uint256 i = 0; i < catalystIds.length; i++) {\\n            if (catalystIds[i] != 0 && amounts[i] != 0) {\\n                burnCatalyst(from, catalystIds[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Adds both arrays of gems and catalysts to registry\\n    /// @param gems array of gems to be added\\n    /// @param catalysts array of catalysts to be added\\n    function addGemsAndCatalysts(IGem[] calldata gems, ICatalyst[] calldata catalysts)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            uint256(_gems.length + _catalysts.length + gems.length + catalysts.length) < MAX_GEMS_AND_CATALYSTS,\\n            \\\"GemsCatalystsRegistry: Too many gem and catalyst contracts\\\"\\n        );\\n\\n        for (uint256 i = 0; i < gems.length; i++) {\\n            IGem gem = gems[i];\\n            uint16 gemId = gem.gemId();\\n            require(gemId == _gems.length + 1, \\\"GEM_ID_NOT_IN_ORDER\\\");\\n            _gems.push(gem);\\n        }\\n\\n        for (uint256 i = 0; i < catalysts.length; i++) {\\n            ICatalyst catalyst = catalysts[i];\\n            uint16 catalystId = catalyst.catalystId();\\n            require(catalystId == _catalysts.length + 1, \\\"CATALYST_ID_NOT_IN_ORDER\\\");\\n            _catalysts.push(catalyst);\\n        }\\n    }\\n\\n    /// @notice Query whether a given gem exists.\\n    /// @param gemId The gem being queried.\\n    /// @return Whether the gem exists.\\n    function doesGemExist(uint16 gemId) external view override returns (bool) {\\n        return getGem(gemId) != IGem(address(0));\\n    }\\n\\n    /// @notice Query whether a giving catalyst exists.\\n    /// @param catalystId The catalyst being queried.\\n    /// @return Whether the catalyst exists.\\n    function doesCatalystExist(uint16 catalystId) external view returns (bool) {\\n        return getCatalyst(catalystId) != ICatalyst(address(0));\\n    }\\n\\n    /// @notice Burn a catalyst.\\n    /// @param from The signing address for the tx.\\n    /// @param catalystId The id of the catalyst to burn.\\n    /// @param amount The number of catalyst tokens to burn.\\n    function burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint256 amount\\n    ) public override checkAuthorization(from) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        catalyst.burnFor(from, amount);\\n    }\\n\\n    /// @notice Burn a gem.\\n    /// @param from The signing address for the tx.\\n    /// @param gemId The id of the gem to burn.\\n    /// @param amount The number of gem tokens to burn.\\n    function burnGem(\\n        address from,\\n        uint16 gemId,\\n        uint256 amount\\n    ) public override checkAuthorization(from) {\\n        IGem gem = getGem(gemId);\\n        require(gem != IGem(address(0)), \\\"GEM_DOES_NOT_EXIST\\\");\\n        gem.burnFor(from, amount);\\n    }\\n\\n    function getNumberOfCatalystContracts() external view returns (uint256 number) {\\n        number = _catalysts.length;\\n    }\\n\\n    function getNumberOfGemContracts() external view returns (uint256 number) {\\n        number = _gems.length;\\n    }\\n\\n    function revokeGemsandCatalystsMaxAllowance() external {\\n        _setGemsAndCatalystsAllowance(0);\\n    }\\n\\n    function setGemsAndCatalystsMaxAllowance() external {\\n        _setGemsAndCatalystsAllowance(MAX_UINT256);\\n    }\\n\\n    // //////////////////// INTERNALS ////////////////////\\n\\n    function _setGemsAndCatalystsAllowance(uint256 allowanceValue) internal {\\n        for (uint256 i = 0; i < _gems.length; i++) {\\n            _gems[i].approveFor(_msgSender(), address(this), allowanceValue);\\n        }\\n\\n        for (uint256 i = 0; i < _catalysts.length; i++) {\\n            _catalysts[i].approveFor(_msgSender(), address(this), allowanceValue);\\n        }\\n    }\\n\\n    /// @dev Get the catalyst contract corresponding to the id.\\n    /// @param catalystId The catalyst id to use to retrieve the contract.\\n    /// @return The requested Catalyst contract.\\n    function getCatalyst(uint16 catalystId) internal view returns (ICatalyst) {\\n        if (catalystId > 0 && catalystId <= _catalysts.length) {\\n            return _catalysts[catalystId - 1];\\n        } else {\\n            return ICatalyst(address(0));\\n        }\\n    }\\n\\n    /// @dev Get the gem contract corresponding to the id.\\n    /// @param gemId The gem id to use to retrieve the contract.\\n    /// @return The requested Gem contract.\\n    function getGem(uint16 gemId) internal view returns (IGem) {\\n        if (gemId > 0 && gemId <= _gems.length) {\\n            return _gems[gemId - 1];\\n        } else {\\n            return IGem(address(0));\\n        }\\n    }\\n\\n    /// @dev verify that the caller is authorized for this function call.\\n    /// @param from The original signer of the transaction.\\n    modifier checkAuthorization(address from) {\\n        require(_msgSender() == from || hasRole(SUPER_OPERATOR_ROLE, _msgSender()), \\\"AUTH_ACCESS_DENIED\\\");\\n        _;\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n\\n        emit TrustedForwarderChanged(trustedForwarder);\\n    }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xf768bf6c30bc49b32833906245788b76b0a0f900b22f97cef6f69454bb322833\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/ICatalyst.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IAssetAttributesRegistry.sol\\\";\\nimport \\\"../../common/interfaces/IAttributes.sol\\\";\\nimport \\\"../../common/interfaces/IERC20Extended.sol\\\";\\n\\ninterface ICatalyst is IERC20Extended, IAttributes {\\n    function catalystId() external returns (uint16);\\n\\n    function changeAttributes(IAttributes attributes) external;\\n\\n    function getMaxGems() external view returns (uint8);\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool success);\\n}\\n\",\"keccak256\":\"0x39265e2e430c414c0ed053d9a2d2fc4ae6a31fc37ef9de996d91053562575a0a\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/IGem.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IERC20Extended.sol\\\";\\n\\ninterface IGem is IERC20Extended {\\n    function gemId() external returns (uint16);\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool success);\\n}\\n\",\"keccak256\":\"0x840fa5de2970496d33627df1d728d145a70c9b277fe188a4deac8b8b6607bc86\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/IGemsCatalystsRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IAssetAttributesRegistry.sol\\\";\\nimport \\\"./IGem.sol\\\";\\nimport \\\"./ICatalyst.sol\\\";\\n\\ninterface IGemsCatalystsRegistry {\\n    function getAttributes(\\n        uint16 catalystId,\\n        uint256 assetId,\\n        IAssetAttributesRegistry.GemEvent[] calldata events\\n    ) external view returns (uint32[] memory values);\\n\\n    function getMaxGems(uint16 catalystId) external view returns (uint8);\\n\\n    function burnDifferentGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256 amount\\n    ) external;\\n\\n    function burnDifferentCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256 amount\\n    ) external;\\n\\n    function batchBurnGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function batchBurnCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function addGemsAndCatalysts(IGem[] calldata gems, ICatalyst[] calldata catalysts) external;\\n\\n    function doesGemExist(uint16 gemId) external view returns (bool);\\n\\n    function burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint256 amount\\n    ) external;\\n\\n    function burnGem(\\n        address from,\\n        uint16 gemId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xac7b5d8cd61271b01181b5f81858478e2c9d7ded071bdedf84cf42796dfef7c2\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetAttributesRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAssetAttributesRegistry {\\n    struct GemEvent {\\n        uint16[] gemIds;\\n        bytes32 blockHash;\\n    }\\n\\n    struct AssetGemsCatalystData {\\n        uint256 assetId;\\n        uint16 catalystContractId;\\n        uint16[] gemContractIds;\\n    }\\n\\n    function getRecord(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            bool exists,\\n            uint16 catalystId,\\n            uint16[] memory gemIds\\n        );\\n\\n    function getAttributes(uint256 assetId, GemEvent[] calldata events) external view returns (uint32[] memory values);\\n\\n    function setCatalyst(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWhenDepositOnOtherLayer(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWithBlockNumber(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint64 blockNumber\\n    ) external;\\n\\n    function addGems(uint256 assetId, uint16[] calldata gemIds) external;\\n\\n    function setMigrationContract(address _migrationContract) external;\\n\\n    function getCatalystRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7f12fa565160d7598f702dcae0e511943be9c6eaa4dc338f3439a36f0a6086c9\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetERC721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Base} from \\\"./IERC721Base.sol\\\";\\n\\ninterface IAssetERC721 is IERC721Base {\\n    function mint(address to, uint256 id) external override;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) external override;\\n\\n    function setTokenURI(uint256 id, string memory uri) external;\\n\\n    function tokenURI(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3b9a9a153b67f1b525a777be5daf2bef73bd9a2f1f883128258105f313e28de9\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetMinter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAssetMinter {\\n    struct AssetData {\\n        uint16[] gemIds;\\n        uint16 catalystId;\\n    }\\n\\n    // use only to fix stack too deep\\n    struct MintData {\\n        address from;\\n        address to;\\n        uint40 packId;\\n        bytes32 metadataHash;\\n        bytes data;\\n    }\\n\\n    function mintWithoutCatalyst(MintData calldata mintData, uint16 typeAsset1Based) external returns (uint256 assetId);\\n\\n    function mintWithCatalyst(\\n        MintData calldata mintData,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external returns (uint256 assetId);\\n\\n    function mintMultipleWithCatalyst(MintData calldata mintData, AssetData[] memory assets)\\n        external\\n        returns (uint256[] memory assetIds);\\n\\n    function mintCustomNumberWithCatalyst(\\n        MintData calldata mintData,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint256 quantity\\n    ) external returns (uint256 assetId);\\n\\n    function addOrReplaceQuantityByCatalystId(uint16 catalystId, uint256 newQuantity) external;\\n\\n    function addOrReplaceAssetTypeQuantity(uint16 index1Based, uint256 newQuantity) external;\\n\\n    function setNumberOfGemsBurnPerAsset(uint32 newQuantity) external;\\n\\n    function setNumberOfCatalystsBurnPerAsset(uint32 newQuantity) external;\\n\\n    function setGemsFactor(uint256 newQuantity) external;\\n\\n    function setCatalystsFactor(uint256 newQuantity) external;\\n\\n    function setCustomMintingAllowance(address addressToModify, bool isAddressAllowed) external;\\n}\\n\",\"keccak256\":\"0xf8fa6e756804e516ab1cd4bf41e1444431d958f8f8ea93f17b2d3a4ddbde01b5\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAttributes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IAssetAttributesRegistry.sol\\\";\\n\\ninterface IAttributes {\\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\\n        external\\n        view\\n        returns (uint32[] memory values);\\n}\\n\",\"keccak256\":\"0x4cbdba9ad3fae8334fe614ae28fb3136454eada28f13f911ffce9c8c701c56a7\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\n/// @dev see https://eips.ethereum.org/EIPS/eip-20\\ninterface IERC20 {\\n    /// @notice emitted when tokens are transfered from one address to another.\\n    /// @param from address from which the token are transfered from (zero means tokens are minted).\\n    /// @param to destination address which the token are transfered to (zero means tokens are burnt).\\n    /// @param value amount of tokens transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice emitted when owner grant transfer rights to another address\\n    /// @param owner address allowing its token to be transferred.\\n    /// @param spender address allowed to spend on behalf of `owner`\\n    /// @param value amount of tokens allowed.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice return the current total amount of tokens owned by all holders.\\n    /// @return supply total number of tokens held.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice return the number of tokens held by a particular address.\\n    /// @param who address being queried.\\n    /// @return balance number of token held by that address.\\n    function balanceOf(address who) external view returns (uint256 balance);\\n\\n    /// @notice transfer tokens to a specific address.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transfer(address to, uint256 value) external returns (bool success);\\n\\n    /// @notice transfer tokens from one address to another.\\n    /// @param from address tokens will be sent from.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool success);\\n\\n    /// @notice approve an address to spend on your behalf.\\n    /// @param spender address entitled to transfer on your behalf.\\n    /// @param value amount allowed to be transfered.\\n    /// @param success whether the approval succeeded.\\n    function approve(address spender, uint256 value) external returns (bool success);\\n\\n    /// @notice return the current allowance for a particular owner/spender pair.\\n    /// @param owner address allowing spender.\\n    /// @param spender address allowed to spend.\\n    /// @return amount number of tokens `spender` can spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x9fe745d44fdcd7987682221d68b7a66d0784fbd81ae1d4e43a6c766347733a96\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n    function burnFor(address from, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xf02074902aff81db019aac8808c524d2ab77e1cb216f5327992ed7db95fee919\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC721ExtendedToken} from \\\"./IERC721ExtendedToken.sol\\\";\\n\\ninterface IERC721Base is IERC721Upgradeable {\\n    function mint(address to, uint256 id) external;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata metaData\\n    ) external;\\n\\n    function approveFor(\\n        address from,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address from,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function supportsInterface(bytes4 id) external view override returns (bool);\\n\\n    function setTrustedForwarder(address trustedForwarder) external;\\n\\n    function isTrustedForwarder(address forwarder) external returns (bool);\\n\\n    function getTrustedForwarder() external returns (address trustedForwarder);\\n}\\n\",\"keccak256\":\"0x515a9d8e988c63547108b16b7efd4942ab15887529a98861a522dea6dbb0437d\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721ExtendedToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IERC721ExtendedToken {\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n}\\n\",\"keccak256\":\"0xe574d923fe66e20909df0d06b73478d2922e4865d85c578db60bda34f6273d45\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Token.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ninterface IERC721Token {\\n    function mint(address to, uint256 id) external;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata metaData\\n    ) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x43820ca0dea912810ce62790d8d3e561c96560052c675f324339f606b591e063\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IPolygonAssetERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IAssetERC721} from \\\"./IAssetERC721.sol\\\";\\n\\ninterface IPolygonAssetERC1155 {\\n    function changeBouncerAdmin(address newBouncerAdmin) external;\\n\\n    function setBouncer(address bouncer, bool enabled) external;\\n\\n    function setPredicate(address predicate) external;\\n\\n    function mint(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256 supply,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256 id);\\n\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintMultiple(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256[] calldata supplies,\\n        bytes calldata rarityPack,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256[] memory ids);\\n\\n    // fails on non-NFT or nft who do not have collection (was a mistake)\\n    function collectionOf(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n\\n    // return true for Non-NFT ERC1155 tokens which exists\\n    function isCollection(uint256 id) external view returns (bool);\\n\\n    function collectionIndexOf(uint256 id) external view returns (uint256);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n\\n    function burnFrom(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function getBouncerAdmin() external view returns (address);\\n\\n    function extractERC721From(\\n        address sender,\\n        uint256 id,\\n        address to\\n    ) external returns (uint256 newId);\\n\\n    function isBouncer(address who) external view returns (bool);\\n\\n    function creatorOf(uint256 id) external view returns (address);\\n\\n    function wasEverMinted(uint256 id) external view returns (bool);\\n\\n    function isSuperOperator(address who) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool isOperator);\\n\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external returns (uint256[] memory);\\n\\n    function name() external returns (string memory _name);\\n\\n    function symbol() external returns (string memory _symbol);\\n\\n    function supportsInterface(bytes4 id) external returns (bool);\\n\\n    function tokenURI(uint256 id) external returns (string memory);\\n\\n    function setAssetERC721(IAssetERC721 assetERC721) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function setTrustedForwarder(address trustedForwarder) external;\\n\\n    function isTrustedForwarder(address forwarder) external returns (bool);\\n\\n    function getTrustedForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x1ba5f7f4c416fecd04530cc9213d4df46812a43079c33cc667173bb4d5e18855\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040526001805463ffffffff60c01b1963ffffffff60a01b19909116600160a01b1716600160c01b179055670de0b6b3a764000060028190556003553480156200004b57600080fd5b5060405162003200380380620032008339810160408190526200006e9162000525565b620000826200007c620002ce565b620002eb565b6001600160601b0319606089811b821660805288811b821660c05287811b821660a05286901b1660e052620000b7846200033d565b600080546001600160a01b0319166001600160a01b03851617905560008251116200014f5760405162461bcd60e51b815260206004820152603660248201527f41737365744d696e7465723a207175616e7469746965734279436174616c797360448201527f744944206c656e6774682063616e6e6f7420626520300000000000000000000060648201526084015b60405180910390fd5b6000815111620001c85760405162461bcd60e51b815260206004820152603760248201527f41737365744d696e7465723a207175616e74697469657342794173736574547960448201527f70654964206c656e6774682063616e6e6f742062652030000000000000000000606482015260840162000146565b60005b82518161ffff1610156200024357828161ffff1681518110620001fe57634e487b7160e01b600052603260045260246000fd5b6020026020010151600460008360016200021991906200060b565b61ffff168152602081019190915260400160002055806200023a8162000634565b915050620001cb565b5060005b81518161ffff161015620002bf57818161ffff16815181106200027a57634e487b7160e01b600052603260045260246000fd5b6020026020010151600560008360016200029591906200060b565b61ffff16815260208101919091526040016000205580620002b68162000634565b91505062000247565b5050505050505050506200069b565b6000620002e56200043060201b620011541760201c565b90505b90565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b62000347620002ce565b6001600160a01b0316620003636001546001600160a01b031690565b6001600160a01b031614620003bb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000146565b6001600160a01b038116620004225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000146565b6200042d81620002eb565b50565b60006200043d336200045b565b1562000453575060131936013560601c620002e8565b5033620002e8565b6000546001600160a01b038281169116145b919050565b80516200046d8162000685565b600082601f83011262000490578081fd5b815160206001600160401b0380831115620004af57620004af6200066f565b818302604051601f19603f83011681018181108482111715620004d657620004d66200066f565b60405284815283810192508684018288018501891015620004f5578687fd5b8692505b8583101562000519578051845292840192600192909201918401620004f9565b50979650505050505050565b600080600080600080600080610100898b03121562000542578384fd5b88516200054f8162000685565b60208a0151909850620005628162000685565b60408a0151909750620005758162000685565b60608a0151909650620005888162000685565b60808a01519095506200059b8162000685565b9350620005ab60a08a0162000472565b60c08a01519093506001600160401b0380821115620005c8578384fd5b620005d68c838d016200047f565b935060e08b0151915080821115620005ec578283fd5b50620005fb8b828c016200047f565b9150509295985092959890939650565b600061ffff8083168185168083038211156200062b576200062b62000659565b01949350505050565b600061ffff808316818114156200064f576200064f62000659565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200042d57600080fd5b60805160601c60a05160601c60c05160601c60e05160601c612ae36200071d600039600081816113a101528181611486015281816118b701528181611d5c01528181611ea601528181611ee00152611f790152600050506000818161066d015281816108a30152611b5e015260008181610a360152611c240152612ae36000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c8063a22d5ef6116100e3578063d04213a31161008c578063ef03d96e11610066578063ef03d96e146103c1578063f2fde38b146103d4578063f8efa8d0146103e757610198565b8063d04213a314610378578063d49d1b981461039b578063da742228146103ae57610198565b8063b7215597116100bd578063b721559714610341578063bfb87f0a14610354578063ce1b815f1461036757610198565b8063a22d5ef614610308578063a8338df11461031b578063b50aae1a1461032e57610198565b80635a1dce1f116101455780637f2e18141161011f5780637f2e1814146102b557806384c4fb3a146102c85780638da5cb5b146102e857610198565b80635a1dce1f14610278578063715018a6146102a457806375968809146102ac57610198565b806337a694461161017657806337a69446146101f85780633a91fda914610235578063572b6c051461025557610198565b8063048b33be1461019d57806307b7810c146101b25780630854f447146101c5575b600080fd5b6101b06101ab36600461265c565b6103f0565b005b6101b06101c0366004612272565b6104b3565b6101e56101d33660046125e9565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b6001546102209074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020016101ef565b6101e56102433660046125e9565b60056020526000908152604090205481565b610268610263366004612251565b610594565b60405190151581526020016101ef565b600154610220907801000000000000000000000000000000000000000000000000900463ffffffff1681565b6101b06105ab565b6101e560025481565b6101e56102c33660046124ad565b610626565b6102db6102d6366004612341565b61074e565b6040516101ef9190612887565b6102f0610b4e565b6040516001600160a01b0390911681526020016101ef565b6101b0610316366004612603565b610b5e565b6101b061032936600461265c565b610be4565b6101e561033c36600461256d565b610ca6565b6101b061034f36600461262c565b610dcd565b6101e56103623660046124f9565b610e41565b6000546001600160a01b03166102f0565b610268610386366004612251565b60066020526000908152604090205460ff1681565b6101b06103a9366004612603565b610e94565b6101b06103bc366004612251565b610f1a565b6101b06103cf36600461262c565b610fe9565b6101b06103e2366004612251565b61105d565b6101e560035481565b6103f8611198565b6001600160a01b0316610409610b4e565b6001600160a01b0316146104645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001805463ffffffff90921674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6104bb611198565b6001600160a01b03166104cc610b4e565b6001600160a01b0316146105225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6001600160a01b03821660008181526006602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917fb14c967f784f0ac8e6e62b391fbd48f1be9e9d64871ca240b416da9bbb9a9fb491a35050565b6000546001600160a01b038281169116145b919050565b6105b3611198565b6001600160a01b03166105c4610b4e565b6001600160a01b03161461061a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b61062460006111a7565b565b61ffff81166000908152600560209081526040822054906106639061064d90860186612251565b8261065e6040880160208901612251565b611211565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166398fbde6461069f6020870187612251565b6106af6060880160408901612680565b6060880135856106c560408b0160208c01612251565b6106d260808c018c612924565b6040518863ffffffff1660e01b81526004016106f49796959493929190612834565b602060405180830381600087803b15801561070e57600080fd5b505af1158015610722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107469190612644565b949350505050565b60608151600014156107a25760405162461bcd60e51b815260206004820152601060248201527f494e56414c49445f305f41535345545300000000000000000000000000000000604482015260640161045b565b60006107b46040850160208601612251565b6001600160a01b0316141561080b5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f41444452455353000000000000000000604482015260640161045b565b6108186020840184612251565b6001600160a01b0316610829611198565b6001600160a01b03161461087f5760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e4945440000000000000000000000000000604482015260640161045b565b60006108976108916020860186612251565b84611347565b90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f0bc00d86108d56020870187612251565b6108e56060880160408901612680565b6060880135856108fb60408b0160208c01612251565b61090860808c018c612924565b6040518863ffffffff1660e01b815260040161092a97969594939291906127c3565b600060405180830381600087803b15801561094457600080fd5b505af1158015610958573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261098091908101906122ac565b915060005b8251811015610b46578381815181106109ae57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1660001415610a345760405162461bcd60e51b815260206004820152602260248201527f41737365744d696e7465723a20636174616c79737449442063616e277420626560448201527f2030000000000000000000000000000000000000000000000000000000000000606482015260840161045b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663676181bf848381518110610a8357634e487b7160e01b600052603260045260246000fd5b6020026020010151868481518110610aab57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151878581518110610ad757634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516040518463ffffffff1660e01b8152600401610b01939291906128f8565b600060405180830381600087803b158015610b1b57600080fd5b505af1158015610b2f573d6000803e3d6000fd5b505050508080610b3e90612a66565b915050610985565b505092915050565b6001546001600160a01b03165b90565b610b66611198565b6001600160a01b0316610b77610b4e565b6001600160a01b031614610bcd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b61ffff909116600090815260046020526040902055565b610bec611198565b6001600160a01b0316610bfd610b4e565b6001600160a01b031614610c535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6001805463ffffffff9092167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b600060066000610cb4611198565b6001600160a01b0316815260208101919091526040016000205460ff16151560011480610d005750610ce4610b4e565b6001600160a01b0316610cf5611198565b6001600160a01b0316145b610d725760405162461bcd60e51b815260206004820152602860248201527f41737365744d696e7465723a20637573746f6d206d696e74696e6720756e617560448201527f74686f72697a6564000000000000000000000000000000000000000000000000606482015260840161045b565b610dc3610d826020880188612251565b610d926060890160408a01612680565b8860600135888888888d6020016020810190610dae9190612251565b8e8060800190610dbe9190612924565b611aa5565b9695505050505050565b610dd5611198565b6001600160a01b0316610de6610b4e565b6001600160a01b031614610e3c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b600355565b61ffff8316600090815260046020908152604082205490610dc390610e6890880188612251565b610e786060890160408a01612680565b8860600135888888878d6020016020810190610dae9190612251565b610e9c611198565b6001600160a01b0316610ead610b4e565b6001600160a01b031614610f035760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b61ffff909116600090815260056020526040902055565b610f22611198565b6001600160a01b0316610f33610b4e565b6001600160a01b031614610f895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117825560405190917f871264f4293af7d2865ae7eae628b228f4991c57cb45b39c99f0b774ebe2901891a250565b610ff1611198565b6001600160a01b0316611002610b4e565b6001600160a01b0316146110585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b600255565b611065611198565b6001600160a01b0316611076610b4e565b6001600160a01b0316146110cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6001600160a01b0381166111485760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161045b565b611151816111a7565b50565b600061115f33610594565b1561119157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610b5b565b5033610b5b565b60006111a2611154565b905090565b600180546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381166112675760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f41444452455353000000000000000000604482015260640161045b565b826001600160a01b0316611279611198565b6001600160a01b0316146112cf5760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e4945440000000000000000000000000000604482015260640161045b565b816113425760405162461bcd60e51b815260206004820152602160248201527f41737365744d696e7465723a207175616e746974792063616e6e6f742062652060448201527f3000000000000000000000000000000000000000000000000000000000000000606482015260840161045b565b505050565b6060815167ffffffffffffffff81111561137157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561139a578160200160208202803683370190505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663645c5f9e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113f857600080fd5b505afa15801561140c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114309190612644565b67ffffffffffffffff81111561145657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561147f578160200160208202803683370190505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c4d91ed6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114dd57600080fd5b505afa1580156114f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115159190612644565b67ffffffffffffffff81111561153b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611564578160200160208202803683370190505b50905060005b8451811015611a9057600085828151811061159557634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff161180156115e2575082518582815181106115cf57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1611155b6116535760405162461bcd60e51b8152602060048201526024808201527f41737365744d696e7465723a20636174616c7973744944206f7574206f66206260448201527f6f756e6400000000000000000000000000000000000000000000000000000000606482015260840161045b565b82600186838151811061167657634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161168c9190612a21565b61ffff16815181106116ae57634e487b7160e01b600052603260045260246000fd5b6020026020010180518091906116c390612a66565b90525060005b8582815181106116e957634e487b7160e01b600052603260045260246000fd5b602002602001015160000151518110156118b257600086838151811061171f57634e487b7160e01b600052603260045260246000fd5b602002602001015160000151828151811061174a57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff161180156117ba5750825186838151811061178057634e487b7160e01b600052603260045260246000fd5b60200260200101516000015182815181106117ab57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1611155b6118065760405162461bcd60e51b815260206004820152601f60248201527f41737365744d696e7465723a2067656d4964206f7574206f6620626f756e6400604482015260640161045b565b82600187848151811061182957634e487b7160e01b600052603260045260246000fd5b602002602001015160000151838151811061185457634e487b7160e01b600052603260045260246000fd5b60200260200101516118669190612a21565b61ffff168151811061188857634e487b7160e01b600052603260045260246000fd5b60200260200101805180919061189d90612a66565b905250806118aa81612a66565b9150506116c9565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166378bc8a1987848151811061190457634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040518263ffffffff1660e01b8152600401611936919061ffff91909116815260200190565b60206040518083038186803b15801561194e57600080fd5b505afa158015611962573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198691906126a5565b60ff1690508061ffff168683815181106119b057634e487b7160e01b600052603260045260246000fd5b602002602001015160000151511115611a0b5760405162461bcd60e51b815260206004820152601a60248201527f41737365744d696e7465723a20746f6f206d616e792067656d73000000000000604482015260640161045b565b60046000878481518110611a2f57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1661ffff16815260200190815260200160002054858381518110611a7257634e487b7160e01b600052603260045260246000fd5b60209081029190910101525080611a8881612a66565b91505061156a565b50611a9b8583611c9f565b610b468582611de9565b6000611ab28b8686611211565b611acf8b89600160189054906101000a900463ffffffff16611ede565b611b2e8b8888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060015474010000000000000000000000000000000000000000900463ffffffff169150611f779050565b6040517f98fbde640000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906398fbde6490611b9f908e908e908e908b908b908b908b90600401612834565b602060405180830381600087803b158015611bb957600080fd5b505af1158015611bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf19190612644565b6040517f676181bf0000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063676181bf90611c5f9084908c908c908c9060040161289a565b600060405180830381600087803b158015611c7957600080fd5b505af1158015611c8d573d6000803e3d6000fd5b505050509a9950505050505050505050565b6000815167ffffffffffffffff811115611cc957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611cf2578160200160208202803683370190505b50905060005b81518161ffff161015611d5957611d108160016129dc565b828261ffff1681518110611d3457634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280611d5181612a44565b915050611cf8565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352eea0308483611d9486611fda565b6040518463ffffffff1660e01b8152600401611db29392919061275d565b600060405180830381600087803b158015611dcc57600080fd5b505af1158015611de0573d6000803e3d6000fd5b50505050505050565b6000815167ffffffffffffffff811115611e1357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e3c578160200160208202803683370190505b50905060005b81518161ffff161015611ea357611e5a8160016129dc565b828261ffff1681518110611e7e57634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280611e9b81612a44565b915050611e42565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663362e7e8c8483611d94866120d7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632a6a645184846003548563ffffffff16611f239190612a02565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015261ffff90911660248301526044820152606401611db2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636d91683984846002548563ffffffff16611fbc9190612a02565b6040518463ffffffff1660e01b8152600401611db293929190612791565b6060815167ffffffffffffffff81111561200457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561202d578160200160208202803683370190505b50905060005b82518110156120d157600160189054906101000a900463ffffffff1663ffffffff1660035484838151811061207857634e487b7160e01b600052603260045260246000fd5b602002602001015161208a9190612a02565b6120949190612a02565b8282815181106120b457634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806120c981612a66565b915050612033565b50919050565b6060815167ffffffffffffffff81111561210157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561212a578160200160208202803683370190505b50905060005b82518110156120d157600160149054906101000a900463ffffffff1663ffffffff1660025484838151811061217557634e487b7160e01b600052603260045260246000fd5b60200260200101516121879190612a02565b6121919190612a02565b8282815181106121b157634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806121c681612a66565b915050612130565b80356001600160a01b03811681146105a657600080fd5b60008083601f8401126121f6578182fd5b50813567ffffffffffffffff81111561220d578182fd5b602083019150836020808302850101111561222757600080fd5b9250929050565b600060a082840312156120d1578081fd5b803561ffff811681146105a657600080fd5b600060208284031215612262578081fd5b61226b826121ce565b9392505050565b60008060408385031215612284578081fd5b61228d836121ce565b9150602083013580151581146122a1578182fd5b809150509250929050565b600060208083850312156122be578182fd5b825167ffffffffffffffff8111156122d4578283fd5b8301601f810185136122e4578283fd5b80516122f76122f2826129b8565b612987565b8181528381019083850185840285018601891015612313578687fd5b8694505b83851015612335578051835260019490940193918501918501612317565b50979650505050505050565b60008060408385031215612353578182fd5b67ffffffffffffffff8084351115612369578283fd5b612376858535860161222e565b92508060208501351115612388578182fd5b6020840135840185601f82011261239d578283fd5b6123aa6122f282356129b8565b81358152602080820191908301855b843581101561249e57813585016040601f19828d030112156123d9578788fd5b6123e36040612987565b87602083013511156123f3578889fd5b602082013582018c603f82011261240857898afd5b6124186122f260208301356129b8565b8060208301358252602082019150604083018f6040602080870135028601011115612441578c8dfd5b8c5b602085013581101561246d576124588261223f565b84526020938401939190910190600101612443565b505083525061248090506040830161223f565b602082810191909152908652948501949290920191506001016123b9565b50959890975095505050505050565b600080604083850312156124bf578182fd5b823567ffffffffffffffff8111156124d5578283fd5b6124e18582860161222e565b9250506124f06020840161223f565b90509250929050565b6000806000806060858703121561250e578182fd5b843567ffffffffffffffff80821115612525578384fd5b6125318883890161222e565b955061253f6020880161223f565b94506040870135915080821115612554578384fd5b50612561878288016121e5565b95989497509550505050565b600080600080600060808688031215612584578081fd5b853567ffffffffffffffff8082111561259b578283fd5b6125a789838a0161222e565b96506125b56020890161223f565b955060408801359150808211156125ca578283fd5b506125d7888289016121e5565b96999598509660600135949350505050565b6000602082840312156125fa578081fd5b61226b8261223f565b60008060408385031215612615578182fd5b61261e8361223f565b946020939093013593505050565b60006020828403121561263d578081fd5b5035919050565b600060208284031215612655578081fd5b5051919050565b60006020828403121561266d578081fd5b813563ffffffff8116811461226b578182fd5b600060208284031215612691578081fd5b813564ffffffffff8116811461226b578182fd5b6000602082840312156126b6578081fd5b815160ff8116811461226b578182fd5b6000815180845260208085019450808401835b838110156126f957815161ffff16875295820195908201906001016126d9565b509495945050505050565b6000815180845260208085019450808401835b838110156126f957815187529582019590820190600101612717565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60006001600160a01b03851682526060602083015261277f60608301856126c6565b8281036040840152610dc38185612704565b60006001600160a01b0385168252606060208301526127b360608301856126c6565b9050826040830152949350505050565b60006001600160a01b03808a16835264ffffffffff8916602084015287604084015260e060608401526127f960e0840188612704565b83810380608086015283825282881660a08601526020810160c086015250612825602082018688612733565b9b9a5050505050505050505050565b60006001600160a01b03808a16835264ffffffffff8916602084015287604084015286606084015280861660808401525060c060a083015261287a60c083018486612733565b9998505050505050505050565b60006020825261226b6020830184612704565b600060608201868352602061ffff808816828601526060604086015282868452608086019050879350845b878110156128ea57826128d78661223f565b16825293830193908301906001016128c5565b509998505050505050505050565b600084825261ffff841660208301526060604083015261291b60608301846126c6565b95945050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612958578283fd5b83018035915067ffffffffffffffff821115612972578283fd5b60200191503681900382131561222757600080fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156129b0576129b0612a97565b604052919050565b600067ffffffffffffffff8211156129d2576129d2612a97565b5060209081020190565b600061ffff8083168185168083038211156129f9576129f9612a81565b01949350505050565b6000816000190483118215151615612a1c57612a1c612a81565b500290565b600061ffff83811690831681811015612a3c57612a3c612a81565b039392505050565b600061ffff80831681811415612a5c57612a5c612a81565b6001019392505050565b6000600019821415612a7a57612a7a612a81565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122026f36132769056189f7552f11c9ba263d7e2203aa98e3d5b66365a7af9609ed964736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c8063a22d5ef6116100e3578063d04213a31161008c578063ef03d96e11610066578063ef03d96e146103c1578063f2fde38b146103d4578063f8efa8d0146103e757610198565b8063d04213a314610378578063d49d1b981461039b578063da742228146103ae57610198565b8063b7215597116100bd578063b721559714610341578063bfb87f0a14610354578063ce1b815f1461036757610198565b8063a22d5ef614610308578063a8338df11461031b578063b50aae1a1461032e57610198565b80635a1dce1f116101455780637f2e18141161011f5780637f2e1814146102b557806384c4fb3a146102c85780638da5cb5b146102e857610198565b80635a1dce1f14610278578063715018a6146102a457806375968809146102ac57610198565b806337a694461161017657806337a69446146101f85780633a91fda914610235578063572b6c051461025557610198565b8063048b33be1461019d57806307b7810c146101b25780630854f447146101c5575b600080fd5b6101b06101ab36600461265c565b6103f0565b005b6101b06101c0366004612272565b6104b3565b6101e56101d33660046125e9565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b6001546102209074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020016101ef565b6101e56102433660046125e9565b60056020526000908152604090205481565b610268610263366004612251565b610594565b60405190151581526020016101ef565b600154610220907801000000000000000000000000000000000000000000000000900463ffffffff1681565b6101b06105ab565b6101e560025481565b6101e56102c33660046124ad565b610626565b6102db6102d6366004612341565b61074e565b6040516101ef9190612887565b6102f0610b4e565b6040516001600160a01b0390911681526020016101ef565b6101b0610316366004612603565b610b5e565b6101b061032936600461265c565b610be4565b6101e561033c36600461256d565b610ca6565b6101b061034f36600461262c565b610dcd565b6101e56103623660046124f9565b610e41565b6000546001600160a01b03166102f0565b610268610386366004612251565b60066020526000908152604090205460ff1681565b6101b06103a9366004612603565b610e94565b6101b06103bc366004612251565b610f1a565b6101b06103cf36600461262c565b610fe9565b6101b06103e2366004612251565b61105d565b6101e560035481565b6103f8611198565b6001600160a01b0316610409610b4e565b6001600160a01b0316146104645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001805463ffffffff90921674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6104bb611198565b6001600160a01b03166104cc610b4e565b6001600160a01b0316146105225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6001600160a01b03821660008181526006602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917fb14c967f784f0ac8e6e62b391fbd48f1be9e9d64871ca240b416da9bbb9a9fb491a35050565b6000546001600160a01b038281169116145b919050565b6105b3611198565b6001600160a01b03166105c4610b4e565b6001600160a01b03161461061a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b61062460006111a7565b565b61ffff81166000908152600560209081526040822054906106639061064d90860186612251565b8261065e6040880160208901612251565b611211565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166398fbde6461069f6020870187612251565b6106af6060880160408901612680565b6060880135856106c560408b0160208c01612251565b6106d260808c018c612924565b6040518863ffffffff1660e01b81526004016106f49796959493929190612834565b602060405180830381600087803b15801561070e57600080fd5b505af1158015610722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107469190612644565b949350505050565b60608151600014156107a25760405162461bcd60e51b815260206004820152601060248201527f494e56414c49445f305f41535345545300000000000000000000000000000000604482015260640161045b565b60006107b46040850160208601612251565b6001600160a01b0316141561080b5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f41444452455353000000000000000000604482015260640161045b565b6108186020840184612251565b6001600160a01b0316610829611198565b6001600160a01b03161461087f5760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e4945440000000000000000000000000000604482015260640161045b565b60006108976108916020860186612251565b84611347565b90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f0bc00d86108d56020870187612251565b6108e56060880160408901612680565b6060880135856108fb60408b0160208c01612251565b61090860808c018c612924565b6040518863ffffffff1660e01b815260040161092a97969594939291906127c3565b600060405180830381600087803b15801561094457600080fd5b505af1158015610958573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261098091908101906122ac565b915060005b8251811015610b46578381815181106109ae57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1660001415610a345760405162461bcd60e51b815260206004820152602260248201527f41737365744d696e7465723a20636174616c79737449442063616e277420626560448201527f2030000000000000000000000000000000000000000000000000000000000000606482015260840161045b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663676181bf848381518110610a8357634e487b7160e01b600052603260045260246000fd5b6020026020010151868481518110610aab57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151878581518110610ad757634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516040518463ffffffff1660e01b8152600401610b01939291906128f8565b600060405180830381600087803b158015610b1b57600080fd5b505af1158015610b2f573d6000803e3d6000fd5b505050508080610b3e90612a66565b915050610985565b505092915050565b6001546001600160a01b03165b90565b610b66611198565b6001600160a01b0316610b77610b4e565b6001600160a01b031614610bcd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b61ffff909116600090815260046020526040902055565b610bec611198565b6001600160a01b0316610bfd610b4e565b6001600160a01b031614610c535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6001805463ffffffff9092167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b600060066000610cb4611198565b6001600160a01b0316815260208101919091526040016000205460ff16151560011480610d005750610ce4610b4e565b6001600160a01b0316610cf5611198565b6001600160a01b0316145b610d725760405162461bcd60e51b815260206004820152602860248201527f41737365744d696e7465723a20637573746f6d206d696e74696e6720756e617560448201527f74686f72697a6564000000000000000000000000000000000000000000000000606482015260840161045b565b610dc3610d826020880188612251565b610d926060890160408a01612680565b8860600135888888888d6020016020810190610dae9190612251565b8e8060800190610dbe9190612924565b611aa5565b9695505050505050565b610dd5611198565b6001600160a01b0316610de6610b4e565b6001600160a01b031614610e3c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b600355565b61ffff8316600090815260046020908152604082205490610dc390610e6890880188612251565b610e786060890160408a01612680565b8860600135888888878d6020016020810190610dae9190612251565b610e9c611198565b6001600160a01b0316610ead610b4e565b6001600160a01b031614610f035760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b61ffff909116600090815260056020526040902055565b610f22611198565b6001600160a01b0316610f33610b4e565b6001600160a01b031614610f895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117825560405190917f871264f4293af7d2865ae7eae628b228f4991c57cb45b39c99f0b774ebe2901891a250565b610ff1611198565b6001600160a01b0316611002610b4e565b6001600160a01b0316146110585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b600255565b611065611198565b6001600160a01b0316611076610b4e565b6001600160a01b0316146110cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6001600160a01b0381166111485760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161045b565b611151816111a7565b50565b600061115f33610594565b1561119157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610b5b565b5033610b5b565b60006111a2611154565b905090565b600180546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381166112675760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f41444452455353000000000000000000604482015260640161045b565b826001600160a01b0316611279611198565b6001600160a01b0316146112cf5760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e4945440000000000000000000000000000604482015260640161045b565b816113425760405162461bcd60e51b815260206004820152602160248201527f41737365744d696e7465723a207175616e746974792063616e6e6f742062652060448201527f3000000000000000000000000000000000000000000000000000000000000000606482015260840161045b565b505050565b6060815167ffffffffffffffff81111561137157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561139a578160200160208202803683370190505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663645c5f9e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113f857600080fd5b505afa15801561140c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114309190612644565b67ffffffffffffffff81111561145657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561147f578160200160208202803683370190505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c4d91ed6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114dd57600080fd5b505afa1580156114f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115159190612644565b67ffffffffffffffff81111561153b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611564578160200160208202803683370190505b50905060005b8451811015611a9057600085828151811061159557634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff161180156115e2575082518582815181106115cf57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1611155b6116535760405162461bcd60e51b8152602060048201526024808201527f41737365744d696e7465723a20636174616c7973744944206f7574206f66206260448201527f6f756e6400000000000000000000000000000000000000000000000000000000606482015260840161045b565b82600186838151811061167657634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161168c9190612a21565b61ffff16815181106116ae57634e487b7160e01b600052603260045260246000fd5b6020026020010180518091906116c390612a66565b90525060005b8582815181106116e957634e487b7160e01b600052603260045260246000fd5b602002602001015160000151518110156118b257600086838151811061171f57634e487b7160e01b600052603260045260246000fd5b602002602001015160000151828151811061174a57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff161180156117ba5750825186838151811061178057634e487b7160e01b600052603260045260246000fd5b60200260200101516000015182815181106117ab57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1611155b6118065760405162461bcd60e51b815260206004820152601f60248201527f41737365744d696e7465723a2067656d4964206f7574206f6620626f756e6400604482015260640161045b565b82600187848151811061182957634e487b7160e01b600052603260045260246000fd5b602002602001015160000151838151811061185457634e487b7160e01b600052603260045260246000fd5b60200260200101516118669190612a21565b61ffff168151811061188857634e487b7160e01b600052603260045260246000fd5b60200260200101805180919061189d90612a66565b905250806118aa81612a66565b9150506116c9565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166378bc8a1987848151811061190457634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040518263ffffffff1660e01b8152600401611936919061ffff91909116815260200190565b60206040518083038186803b15801561194e57600080fd5b505afa158015611962573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198691906126a5565b60ff1690508061ffff168683815181106119b057634e487b7160e01b600052603260045260246000fd5b602002602001015160000151511115611a0b5760405162461bcd60e51b815260206004820152601a60248201527f41737365744d696e7465723a20746f6f206d616e792067656d73000000000000604482015260640161045b565b60046000878481518110611a2f57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1661ffff16815260200190815260200160002054858381518110611a7257634e487b7160e01b600052603260045260246000fd5b60209081029190910101525080611a8881612a66565b91505061156a565b50611a9b8583611c9f565b610b468582611de9565b6000611ab28b8686611211565b611acf8b89600160189054906101000a900463ffffffff16611ede565b611b2e8b8888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060015474010000000000000000000000000000000000000000900463ffffffff169150611f779050565b6040517f98fbde640000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906398fbde6490611b9f908e908e908e908b908b908b908b90600401612834565b602060405180830381600087803b158015611bb957600080fd5b505af1158015611bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf19190612644565b6040517f676181bf0000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063676181bf90611c5f9084908c908c908c9060040161289a565b600060405180830381600087803b158015611c7957600080fd5b505af1158015611c8d573d6000803e3d6000fd5b505050509a9950505050505050505050565b6000815167ffffffffffffffff811115611cc957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611cf2578160200160208202803683370190505b50905060005b81518161ffff161015611d5957611d108160016129dc565b828261ffff1681518110611d3457634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280611d5181612a44565b915050611cf8565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352eea0308483611d9486611fda565b6040518463ffffffff1660e01b8152600401611db29392919061275d565b600060405180830381600087803b158015611dcc57600080fd5b505af1158015611de0573d6000803e3d6000fd5b50505050505050565b6000815167ffffffffffffffff811115611e1357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e3c578160200160208202803683370190505b50905060005b81518161ffff161015611ea357611e5a8160016129dc565b828261ffff1681518110611e7e57634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280611e9b81612a44565b915050611e42565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663362e7e8c8483611d94866120d7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632a6a645184846003548563ffffffff16611f239190612a02565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015261ffff90911660248301526044820152606401611db2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636d91683984846002548563ffffffff16611fbc9190612a02565b6040518463ffffffff1660e01b8152600401611db293929190612791565b6060815167ffffffffffffffff81111561200457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561202d578160200160208202803683370190505b50905060005b82518110156120d157600160189054906101000a900463ffffffff1663ffffffff1660035484838151811061207857634e487b7160e01b600052603260045260246000fd5b602002602001015161208a9190612a02565b6120949190612a02565b8282815181106120b457634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806120c981612a66565b915050612033565b50919050565b6060815167ffffffffffffffff81111561210157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561212a578160200160208202803683370190505b50905060005b82518110156120d157600160149054906101000a900463ffffffff1663ffffffff1660025484838151811061217557634e487b7160e01b600052603260045260246000fd5b60200260200101516121879190612a02565b6121919190612a02565b8282815181106121b157634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806121c681612a66565b915050612130565b80356001600160a01b03811681146105a657600080fd5b60008083601f8401126121f6578182fd5b50813567ffffffffffffffff81111561220d578182fd5b602083019150836020808302850101111561222757600080fd5b9250929050565b600060a082840312156120d1578081fd5b803561ffff811681146105a657600080fd5b600060208284031215612262578081fd5b61226b826121ce565b9392505050565b60008060408385031215612284578081fd5b61228d836121ce565b9150602083013580151581146122a1578182fd5b809150509250929050565b600060208083850312156122be578182fd5b825167ffffffffffffffff8111156122d4578283fd5b8301601f810185136122e4578283fd5b80516122f76122f2826129b8565b612987565b8181528381019083850185840285018601891015612313578687fd5b8694505b83851015612335578051835260019490940193918501918501612317565b50979650505050505050565b60008060408385031215612353578182fd5b67ffffffffffffffff8084351115612369578283fd5b612376858535860161222e565b92508060208501351115612388578182fd5b6020840135840185601f82011261239d578283fd5b6123aa6122f282356129b8565b81358152602080820191908301855b843581101561249e57813585016040601f19828d030112156123d9578788fd5b6123e36040612987565b87602083013511156123f3578889fd5b602082013582018c603f82011261240857898afd5b6124186122f260208301356129b8565b8060208301358252602082019150604083018f6040602080870135028601011115612441578c8dfd5b8c5b602085013581101561246d576124588261223f565b84526020938401939190910190600101612443565b505083525061248090506040830161223f565b602082810191909152908652948501949290920191506001016123b9565b50959890975095505050505050565b600080604083850312156124bf578182fd5b823567ffffffffffffffff8111156124d5578283fd5b6124e18582860161222e565b9250506124f06020840161223f565b90509250929050565b6000806000806060858703121561250e578182fd5b843567ffffffffffffffff80821115612525578384fd5b6125318883890161222e565b955061253f6020880161223f565b94506040870135915080821115612554578384fd5b50612561878288016121e5565b95989497509550505050565b600080600080600060808688031215612584578081fd5b853567ffffffffffffffff8082111561259b578283fd5b6125a789838a0161222e565b96506125b56020890161223f565b955060408801359150808211156125ca578283fd5b506125d7888289016121e5565b96999598509660600135949350505050565b6000602082840312156125fa578081fd5b61226b8261223f565b60008060408385031215612615578182fd5b61261e8361223f565b946020939093013593505050565b60006020828403121561263d578081fd5b5035919050565b600060208284031215612655578081fd5b5051919050565b60006020828403121561266d578081fd5b813563ffffffff8116811461226b578182fd5b600060208284031215612691578081fd5b813564ffffffffff8116811461226b578182fd5b6000602082840312156126b6578081fd5b815160ff8116811461226b578182fd5b6000815180845260208085019450808401835b838110156126f957815161ffff16875295820195908201906001016126d9565b509495945050505050565b6000815180845260208085019450808401835b838110156126f957815187529582019590820190600101612717565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60006001600160a01b03851682526060602083015261277f60608301856126c6565b8281036040840152610dc38185612704565b60006001600160a01b0385168252606060208301526127b360608301856126c6565b9050826040830152949350505050565b60006001600160a01b03808a16835264ffffffffff8916602084015287604084015260e060608401526127f960e0840188612704565b83810380608086015283825282881660a08601526020810160c086015250612825602082018688612733565b9b9a5050505050505050505050565b60006001600160a01b03808a16835264ffffffffff8916602084015287604084015286606084015280861660808401525060c060a083015261287a60c083018486612733565b9998505050505050505050565b60006020825261226b6020830184612704565b600060608201868352602061ffff808816828601526060604086015282868452608086019050879350845b878110156128ea57826128d78661223f565b16825293830193908301906001016128c5565b509998505050505050505050565b600084825261ffff841660208301526060604083015261291b60608301846126c6565b95945050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612958578283fd5b83018035915067ffffffffffffffff821115612972578283fd5b60200191503681900382131561222757600080fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156129b0576129b0612a97565b604052919050565b600067ffffffffffffffff8211156129d2576129d2612a97565b5060209081020190565b600061ffff8083168185168083038211156129f9576129f9612a81565b01949350505050565b6000816000190483118215151615612a1c57612a1c612a81565b500290565b600061ffff83811690831681811015612a3c57612a3c612a81565b039392505050565b600061ffff80831681811415612a5c57612a5c612a81565b6001019392505050565b6000600019821415612a7a57612a7a612a81565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122026f36132769056189f7552f11c9ba263d7e2203aa98e3d5b66365a7af9609ed964736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "assetERC1155": ": Asset ERC1155 Token Contract",
          "assetERC721": ": Asset ERC721 Token Contract",
          "gemsCatalystsRegistry": ": that track the canonical catalyst and gems and provide batch burning facility",
          "registry": ": AssetAttributesRegistry for recording catalyst and gems used",
          "trustedForwarder": ": address of the trusted forwarder (used for metaTX)"
        }
      },
      "mintCustomNumberWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[],uint256)": {
        "params": {
          "catalystId": "Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).",
          "gemIds": "list of gem ids to burn in the catalyst.",
          "mintData": "(-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)",
          "quantity": "number of token to mint"
        },
        "returns": {
          "assetId": "The new token Id."
        }
      },
      "mintMultipleWithCatalyst((address,address,uint40,bytes32,bytes),(uint16[],uint16)[])": {
        "params": {
          "assets": "data (gems and catalyst data)",
          "mintData": "contains (-from address creating the Asset, need to be the tx sender or meta tx signer -packId unused packId that will let you predict the resulting tokenId -metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata)"
        }
      },
      "mintWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[])": {
        "params": {
          "catalystId": "Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).",
          "gemIds": "list of gem ids to burn in the catalyst.",
          "mintData": ": (-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)"
        },
        "returns": {
          "assetId": "The new token Id."
        }
      },
      "mintWithoutCatalyst((address,address,uint40,bytes32,bytes),uint16)": {
        "params": {
          "mintData": ": (-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)",
          "typeAsset1Based": "(art, prop...) decide how many asset will be minted (start at 1)"
        },
        "returns": {
          "assetId": "The new token Id."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "AssetMinter depends on"
      },
      "mintCustomNumberWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[],uint256)": {
        "notice": "mint \"quantity\" number of Asset token using one catalyst."
      },
      "mintMultipleWithCatalyst((address,address,uint40,bytes32,bytes),(uint16[],uint16)[])": {
        "notice": "mint multiple Asset tokens."
      },
      "mintWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[])": {
        "notice": "mint multiple Asset tokens using one catalyst."
      },
      "mintWithoutCatalyst((address,address,uint40,bytes32,bytes),uint16)": {
        "notice": "mint one Asset token with no catalyst."
      }
    },
    "notice": "Allow to mint Asset with Catalyst, Gems and Sand, giving the assets attributes through AssetAttributeRegistry",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29171,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 389,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12992,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "numberOfGemsBurnPerAsset",
        "offset": 20,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 12995,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "numberOfCatalystBurnPerAsset",
        "offset": 24,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 12998,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "gemsFactor",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 13001,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "catalystsFactor",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 13017,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "quantitiesByCatalystId",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 13021,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "quantitiesByAssetTypeId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 13025,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "customMinterAllowance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}