{
  "address": "0x916fDC27dB08E9f18B3f93BB19CaEf871C330841",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAssetAttributesRegistry",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "contract IERC721Token",
          "name": "assetERC721",
          "type": "address"
        },
        {
          "internalType": "contract IPolygonAssetERC1155",
          "name": "assetERC1155",
          "type": "address"
        },
        {
          "internalType": "contract GemsCatalystsRegistry",
          "name": "gemsCatalystsRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "quantitiesByCatalystId_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantitiesByAssetTypeId_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addressModified",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isAddressCustomMintingAllowed",
          "type": "bool"
        }
      ],
      "name": "CustomMintingAllowanceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "index1Based",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "newQuantity",
          "type": "uint256"
        }
      ],
      "name": "addOrReplaceAssetTypeQuantity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "newQuantity",
          "type": "uint256"
        }
      ],
      "name": "addOrReplaceQuantityByCatalystId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "customMinterAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "packId",
              "type": "uint40"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAssetMinter.MintData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "mintCustomNumberWithCatalyst",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "packId",
              "type": "uint40"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAssetMinter.MintData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "mintCustomNumberWithoutCatalyst",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "packId",
              "type": "uint40"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAssetMinter.MintData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16[]",
              "name": "gemIds",
              "type": "uint16[]"
            },
            {
              "internalType": "uint16",
              "name": "catalystId",
              "type": "uint16"
            }
          ],
          "internalType": "struct IAssetMinter.AssetData[]",
          "name": "assets",
          "type": "tuple[]"
        }
      ],
      "name": "mintMultipleWithCatalyst",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "assetIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "packId",
              "type": "uint40"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAssetMinter.MintData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        }
      ],
      "name": "mintWithCatalyst",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "packId",
              "type": "uint40"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAssetMinter.MintData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "internalType": "uint16",
          "name": "typeAsset1Based",
          "type": "uint16"
        }
      ],
      "name": "mintWithoutCatalyst",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfCatalystBurnPerAsset",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfGemsBurnPerAsset",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "quantitiesByAssetTypeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "quantitiesByCatalystId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addressToModify",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAddressAllowed",
          "type": "bool"
        }
      ],
      "name": "setCustomMintingAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newQuantity",
          "type": "uint32"
        }
      ],
      "name": "setNumberOfCatalystsBurnPerAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newQuantity",
          "type": "uint32"
        }
      ],
      "name": "setNumberOfGemsBurnPerAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x268fd6437093888173a744da0117a32566e3613d751518776459aef042b94b94",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x916fDC27dB08E9f18B3f93BB19CaEf871C330841",
    "transactionIndex": 40,
    "gasUsed": "2950227",
    "logsBloom": "0x
    "blockHash": "0x69c0da37aeb9e6aab872cb1da70d7643a4d6b5fe7a5996a951bfcfaae2d1a9f1",
    "transactionHash": "0x268fd6437093888173a744da0117a32566e3613d751518776459aef042b94b94",
    "logs": [
      {
        "transactionIndex": 40,
        "blockNumber": 26277009,
        "transactionHash": "0x268fd6437093888173a744da0117a32566e3613d751518776459aef042b94b94",
        "address": "0x916fDC27dB08E9f18B3f93BB19CaEf871C330841",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02"
        ],
        "data": "0x",
        "logIndex": 591,
        "blockHash": "0x69c0da37aeb9e6aab872cb1da70d7643a4d6b5fe7a5996a951bfcfaae2d1a9f1"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 26277009,
        "transactionHash": "0x268fd6437093888173a744da0117a32566e3613d751518776459aef042b94b94",
        "address": "0x916fDC27dB08E9f18B3f93BB19CaEf871C330841",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x00000000000000000000000049c4d4c94829b9c44052c5f5cb164fc612181165"
        ],
        "data": "0x",
        "logIndex": 592,
        "blockHash": "0x69c0da37aeb9e6aab872cb1da70d7643a4d6b5fe7a5996a951bfcfaae2d1a9f1"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 26277009,
        "transactionHash": "0x268fd6437093888173a744da0117a32566e3613d751518776459aef042b94b94",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001a340a2080b25a00000000000000000000000000000000000000000000000002aa482eefbe3e200000000000000000000000000000000000000000000000e0413c425fb1489c2900000000000000000000000000000000000000000000000002901424cf3d8bc60000000000000000000000000000000000000000000000e041567669d1c94e83",
        "logIndex": 593,
        "blockHash": "0x69c0da37aeb9e6aab872cb1da70d7643a4d6b5fe7a5996a951bfcfaae2d1a9f1"
      }
    ],
    "blockNumber": 26277009,
    "cumulativeGasUsed": "19525553",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x393bE0833eeB9210ec77ecF392FEe15fE76B2D22",
    "0xF06aA9a72Ef97126Ed1c2F3499A59C0D4C812eD9",
    "0x3ecb161b2A0501568a0b9d4e887534f3A9425B25",
    "0x2d98A2c0AFaD4f3a82E2eC17E078Bc6d04943bbE",
    "0x49c4D4C94829B9c44052C5f5Cb164Fc612181165",
    "0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b",
    [
      1000,
      100,
      10,
      1
    ],
    [
      1,
      10000
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "137c7b4ebde5b4d1a76867a36614815e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAssetAttributesRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Token\",\"name\":\"assetERC721\",\"type\":\"address\"},{\"internalType\":\"contract IPolygonAssetERC1155\",\"name\":\"assetERC1155\",\"type\":\"address\"},{\"internalType\":\"contract GemsCatalystsRegistry\",\"name\":\"gemsCatalystsRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"quantitiesByCatalystId_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantitiesByAssetTypeId_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressModified\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isAddressCustomMintingAllowed\",\"type\":\"bool\"}],\"name\":\"CustomMintingAllowanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"index1Based\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"newQuantity\",\"type\":\"uint256\"}],\"name\":\"addOrReplaceAssetTypeQuantity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"newQuantity\",\"type\":\"uint256\"}],\"name\":\"addOrReplaceQuantityByCatalystId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customMinterAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetMinter.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintCustomNumberWithCatalyst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetMinter.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintCustomNumberWithoutCatalyst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetMinter.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"}],\"internalType\":\"struct IAssetMinter.AssetData[]\",\"name\":\"assets\",\"type\":\"tuple[]\"}],\"name\":\"mintMultipleWithCatalyst\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetMinter.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"}],\"name\":\"mintWithCatalyst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetMinter.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"typeAsset1Based\",\"type\":\"uint16\"}],\"name\":\"mintWithoutCatalyst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfCatalystBurnPerAsset\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfGemsBurnPerAsset\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"quantitiesByAssetTypeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"quantitiesByCatalystId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToModify\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAddressAllowed\",\"type\":\"bool\"}],\"name\":\"setCustomMintingAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newQuantity\",\"type\":\"uint32\"}],\"name\":\"setNumberOfCatalystsBurnPerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newQuantity\",\"type\":\"uint32\"}],\"name\":\"setNumberOfGemsBurnPerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"assetERC1155\":\": Asset ERC1155 Token Contract\",\"assetERC721\":\": Asset ERC721 Token Contract\",\"gemsCatalystsRegistry\":\": that track the canonical catalyst and gems and provide batch burning facility\",\"registry\":\": AssetAttributesRegistry for recording catalyst and gems used\",\"trustedForwarder\":\": address of the trusted forwarder (used for metaTX)\"}},\"mintCustomNumberWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[],uint256)\":{\"params\":{\"catalystId\":\"Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).\",\"gemIds\":\"list of gem ids to burn in the catalyst.\",\"mintData\":\"(-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)\",\"quantity\":\"number of token to mint\"},\"returns\":{\"assetId\":\"The new token Id.\"}},\"mintCustomNumberWithoutCatalyst((address,address,uint40,bytes32,bytes),uint256)\":{\"params\":{\"mintData\":\"(-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)\",\"quantity\":\"number of token to mint\"},\"returns\":{\"assetId\":\"The new token Id.\"}},\"mintMultipleWithCatalyst((address,address,uint40,bytes32,bytes),(uint16[],uint16)[])\":{\"params\":{\"assets\":\"data (gems and catalyst data)\",\"mintData\":\"contains (-from address creating the Asset, need to be the tx sender or meta tx signer -packId unused packId that will let you predict the resulting tokenId -metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata)\"}},\"mintWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[])\":{\"params\":{\"catalystId\":\"Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).\",\"gemIds\":\"list of gem ids to burn in the catalyst.\",\"mintData\":\": (-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)\"},\"returns\":{\"assetId\":\"The new token Id.\"}},\"mintWithoutCatalyst((address,address,uint40,bytes32,bytes),uint16)\":{\"params\":{\"mintData\":\": (-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)\",\"typeAsset1Based\":\"(art, prop...) decide how many asset will be minted (start at 1)\"},\"returns\":{\"assetId\":\"The new token Id.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"AssetMinter depends on\"},\"mintCustomNumberWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[],uint256)\":{\"notice\":\"mint \\\"quantity\\\" number of Asset token using one catalyst.\"},\"mintCustomNumberWithoutCatalyst((address,address,uint40,bytes32,bytes),uint256)\":{\"notice\":\"mint \\\"quantity\\\" number of Asset token without using a catalyst.\"},\"mintMultipleWithCatalyst((address,address,uint40,bytes32,bytes),(uint16[],uint16)[])\":{\"notice\":\"mint multiple Asset tokens.\"},\"mintWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[])\":{\"notice\":\"mint multiple Asset tokens using one catalyst.\"},\"mintWithoutCatalyst((address,address,uint40,bytes32,bytes),uint16)\":{\"notice\":\"mint one Asset token with no catalyst.\"}},\"notice\":\"Allow to mint Asset with Catalyst, Gems and Sand, giving the assets attributes through AssetAttributeRegistry\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/asset/AssetMinter.sol\":\"AssetMinter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/solc_0.8/asset/AssetMinter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport \\\"../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport \\\"../common/interfaces/IAssetMinter.sol\\\";\\nimport \\\"../catalyst/GemsCatalystsRegistry.sol\\\";\\nimport \\\"../common/interfaces/IPolygonAssetERC1155.sol\\\";\\nimport \\\"../common/interfaces/IERC721Token.sol\\\";\\n\\n/// @notice Allow to mint Asset with Catalyst, Gems and Sand, giving the assets attributes through AssetAttributeRegistry\\ncontract AssetMinter is ERC2771Handler, IAssetMinter, Ownable {\\n    uint256 private constant NFT_SUPPLY = 1;\\n\\n    uint32 public numberOfGemsBurnPerAsset = 1;\\n    uint32 public numberOfCatalystBurnPerAsset = 1;\\n\\n    IAssetAttributesRegistry internal immutable _registry;\\n    IPolygonAssetERC1155 internal immutable _assetERC1155;\\n    IERC721Token internal immutable _assetERC721;\\n    GemsCatalystsRegistry internal immutable _gemsCatalystsRegistry;\\n\\n    mapping(uint16 => uint256) public quantitiesByCatalystId;\\n    mapping(uint16 => uint256) public quantitiesByAssetTypeId; // quantities for asset that don't use catalyst to burn (art, prop...)\\n    mapping(address => bool) public customMinterAllowance;\\n\\n    event CustomMintingAllowanceChanged(address indexed addressModified, bool indexed isAddressCustomMintingAllowed);\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n\\n    /// @notice AssetMinter depends on\\n    /// @param registry: AssetAttributesRegistry for recording catalyst and gems used\\n    /// @param assetERC721: Asset ERC721 Token Contract\\n    /// @param assetERC1155: Asset ERC1155 Token Contract\\n    /// @param gemsCatalystsRegistry: that track the canonical catalyst and gems and provide batch burning facility\\n    /// @param trustedForwarder: address of the trusted forwarder (used for metaTX)\\n    constructor(\\n        IAssetAttributesRegistry registry,\\n        IERC721Token assetERC721,\\n        IPolygonAssetERC1155 assetERC1155,\\n        GemsCatalystsRegistry gemsCatalystsRegistry,\\n        address admin,\\n        address trustedForwarder,\\n        uint256[] memory quantitiesByCatalystId_,\\n        uint256[] memory quantitiesByAssetTypeId_\\n    ) {\\n        _registry = registry;\\n        _assetERC721 = assetERC721;\\n        _assetERC1155 = assetERC1155;\\n        _gemsCatalystsRegistry = gemsCatalystsRegistry;\\n        transferOwnership(admin);\\n        __ERC2771Handler_initialize(trustedForwarder);\\n\\n        require(quantitiesByCatalystId_.length > 0, \\\"AssetMinter: quantitiesByCatalystID length cannot be 0\\\");\\n        require(quantitiesByAssetTypeId_.length > 0, \\\"AssetMinter: quantitiesByAssetTypeId length cannot be 0\\\");\\n\\n        for (uint16 i = 0; i < quantitiesByCatalystId_.length; i++) {\\n            quantitiesByCatalystId[i + 1] = quantitiesByCatalystId_[i];\\n        }\\n\\n        for (uint16 i = 0; i < quantitiesByAssetTypeId_.length; i++) {\\n            quantitiesByAssetTypeId[i + 1] = quantitiesByAssetTypeId_[i];\\n        }\\n    }\\n\\n    function addOrReplaceQuantityByCatalystId(uint16 catalystId, uint256 newQuantity) external override onlyOwner {\\n        quantitiesByCatalystId[catalystId] = newQuantity;\\n    }\\n\\n    function addOrReplaceAssetTypeQuantity(uint16 index1Based, uint256 newQuantity) external override onlyOwner {\\n        quantitiesByAssetTypeId[index1Based] = newQuantity;\\n    }\\n\\n    function setNumberOfGemsBurnPerAsset(uint32 newQuantity) external override onlyOwner {\\n        numberOfGemsBurnPerAsset = newQuantity;\\n    }\\n\\n    function setNumberOfCatalystsBurnPerAsset(uint32 newQuantity) external override onlyOwner {\\n        numberOfCatalystBurnPerAsset = newQuantity;\\n    }\\n\\n    function setCustomMintingAllowance(address addressToModify, bool isAddressAllowed) external override onlyOwner {\\n        customMinterAllowance[addressToModify] = isAddressAllowed;\\n\\n        emit CustomMintingAllowanceChanged(addressToModify, isAddressAllowed);\\n    }\\n\\n    /// @notice mint \\\"quantity\\\" number of Asset token using one catalyst.\\n    /// @param mintData (-from address creating the Asset, need to be the tx sender or meta tx signer.\\n    ///  -packId unused packId that will let you predict the resulting tokenId.\\n    /// - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata.\\n    /// - to destination address receiving the minted tokens.\\n    /// - data extra data)\\n    /// @param catalystId Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).\\n    /// @param gemIds list of gem ids to burn in the catalyst.\\n    /// @param quantity number of token to mint\\n    /// @return assetId The new token Id.\\n    function mintCustomNumberWithCatalyst(\\n        MintData calldata mintData,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint256 quantity\\n    ) external override returns (uint256 assetId) {\\n        require(\\n            customMinterAllowance[_msgSender()] == true || _msgSender() == owner(),\\n            \\\"AssetMinter: custom minting unauthorized\\\"\\n        );\\n        assetId = _burnAndMint(\\n            mintData.from,\\n            mintData.packId,\\n            mintData.metadataHash,\\n            catalystId,\\n            gemIds,\\n            quantity,\\n            mintData.to,\\n            mintData.data\\n        );\\n    }\\n\\n    /// @notice mint \\\"quantity\\\" number of Asset token without using a catalyst.\\n    /// @param mintData (-from address creating the Asset, need to be the tx sender or meta tx signer.\\n    ///  -packId unused packId that will let you predict the resulting tokenId.\\n    /// - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata.\\n    /// - to destination address receiving the minted tokens.\\n    /// - data extra data)\\n    /// @param quantity number of token to mint\\n    /// @return assetId The new token Id.\\n    function mintCustomNumberWithoutCatalyst(MintData calldata mintData, uint256 quantity)\\n        external\\n        override\\n        returns (uint256 assetId)\\n    {\\n        require(\\n            customMinterAllowance[_msgSender()] == true || _msgSender() == owner(),\\n            \\\"AssetMinter: custom minting unauthorized\\\"\\n        );\\n        _mintRequirements(mintData.from, quantity, mintData.to);\\n        assetId = _assetERC1155.mint(\\n            mintData.from,\\n            mintData.packId,\\n            mintData.metadataHash,\\n            quantity,\\n            mintData.to,\\n            mintData.data\\n        );\\n    }\\n\\n    /// @notice mint one Asset token with no catalyst.\\n    /// @param mintData : (-from address creating the Asset, need to be the tx sender or meta tx signer.\\n    ///  -packId unused packId that will let you predict the resulting tokenId.\\n    /// - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata.\\n    /// - to destination address receiving the minted tokens.\\n    /// - data extra data)\\n    /// @param typeAsset1Based (art, prop...) decide how many asset will be minted (start at 1)\\n    /// @return assetId The new token Id.\\n    function mintWithoutCatalyst(MintData calldata mintData, uint16 typeAsset1Based)\\n        external\\n        override\\n        returns (uint256 assetId)\\n    {\\n        uint256 quantity = quantitiesByAssetTypeId[typeAsset1Based];\\n\\n        _mintRequirements(mintData.from, quantity, mintData.to);\\n        assetId = _assetERC1155.mint(\\n            mintData.from,\\n            mintData.packId,\\n            mintData.metadataHash,\\n            quantity,\\n            mintData.to,\\n            mintData.data\\n        );\\n    }\\n\\n    /// @notice mint multiple Asset tokens using one catalyst.\\n    /// @param mintData : (-from address creating the Asset, need to be the tx sender or meta tx signer.\\n    ///  -packId unused packId that will let you predict the resulting tokenId.\\n    /// - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata.\\n    /// - to destination address receiving the minted tokens.\\n    /// - data extra data)\\n    /// @param catalystId Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).\\n    /// @param gemIds list of gem ids to burn in the catalyst.\\n    /// @return assetId The new token Id.\\n    function mintWithCatalyst(\\n        MintData calldata mintData,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external override returns (uint256 assetId) {\\n        uint256 quantity = quantitiesByCatalystId[catalystId];\\n\\n        assetId = _burnAndMint(\\n            mintData.from,\\n            mintData.packId,\\n            mintData.metadataHash,\\n            catalystId,\\n            gemIds,\\n            quantity,\\n            mintData.to,\\n            mintData.data\\n        );\\n    }\\n\\n    /// @notice mint multiple Asset tokens.\\n    /// @param mintData contains (-from address creating the Asset, need to be the tx sender or meta tx signer\\n    /// -packId unused packId that will let you predict the resulting tokenId\\n    /// -metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata)\\n    /// @param assets data (gems and catalyst data)\\n    function mintMultipleWithCatalyst(MintData calldata mintData, AssetData[] memory assets)\\n        external\\n        override\\n        returns (uint256[] memory assetIds)\\n    {\\n        require(assets.length != 0, \\\"INVALID_0_ASSETS\\\");\\n        require(mintData.to != address(0), \\\"INVALID_TO_ZERO_ADDRESS\\\");\\n\\n        require(_msgSender() == mintData.from, \\\"AUTH_ACCESS_DENIED\\\");\\n\\n        uint256[] memory supplies = _handleMultipleAssetRequirements(mintData.from, assets);\\n        assetIds = _assetERC1155.mintMultiple(\\n            mintData.from,\\n            mintData.packId,\\n            mintData.metadataHash,\\n            supplies,\\n            \\\"\\\",\\n            mintData.to,\\n            mintData.data\\n        );\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            require(assets[i].catalystId != 0, \\\"AssetMinter: catalystID can't be 0\\\");\\n            _registry.setCatalyst(assetIds[i], assets[i].catalystId, assets[i].gemIds);\\n        }\\n        return assetIds;\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n\\n        emit TrustedForwarderChanged(trustedForwarder);\\n    }\\n\\n    /// @dev Handler for dealing with assets when minting multiple at once.\\n    /// @param from The original address that signed the transaction.\\n    /// @param assets An array of AssetData structs to define how the total gems and catalysts are to be allocated.\\n    /// @return supplies An array of the quantities for each asset being minted.\\n    function _handleMultipleAssetRequirements(address from, AssetData[] memory assets)\\n        internal\\n        returns (uint256[] memory supplies)\\n    {\\n        supplies = new uint256[](assets.length);\\n        uint256[] memory catalystsToBurn = new uint256[](_gemsCatalystsRegistry.getNumberOfCatalystContracts());\\n        uint256[] memory gemsToBurn = new uint256[](_gemsCatalystsRegistry.getNumberOfGemContracts());\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            require(\\n                assets[i].catalystId > 0 && assets[i].catalystId <= catalystsToBurn.length,\\n                \\\"AssetMinter: catalystID out of bound\\\"\\n            );\\n            catalystsToBurn[assets[i].catalystId - 1]++;\\n            for (uint256 j = 0; j < assets[i].gemIds.length; j++) {\\n                require(\\n                    assets[i].gemIds[j] > 0 && assets[i].gemIds[j] <= gemsToBurn.length,\\n                    \\\"AssetMinter: gemId out of bound\\\"\\n                );\\n                gemsToBurn[assets[i].gemIds[j] - 1]++;\\n            }\\n\\n            uint16 maxGems = _gemsCatalystsRegistry.getMaxGems(assets[i].catalystId);\\n            require(assets[i].gemIds.length <= maxGems, \\\"AssetMinter: too many gems\\\");\\n            supplies[i] = quantitiesByCatalystId[assets[i].catalystId];\\n        }\\n        _batchBurnCatalysts(from, catalystsToBurn);\\n        _batchBurnGems(from, gemsToBurn);\\n    }\\n\\n    /// @dev Burn a batch of catalysts in one tx.\\n    /// @param from The original address that signed the tx.\\n    /// @param catalystsQuantities An array of quantities for each type of catalyst to burn.\\n    function _batchBurnCatalysts(address from, uint256[] memory catalystsQuantities) internal {\\n        uint16[] memory ids = new uint16[](catalystsQuantities.length);\\n        for (uint16 i = 0; i < ids.length; i++) {\\n            ids[i] = i + 1;\\n        }\\n        _gemsCatalystsRegistry.batchBurnCatalysts(from, ids, _scaleCatalystQuantities(catalystsQuantities));\\n    }\\n\\n    /// @dev Burn a batch of gems in one tx.\\n    /// @param from The original address that signed the tx.\\n    /// @param gemsQuantities An array of quantities for each type of gems to burn.\\n    function _batchBurnGems(address from, uint256[] memory gemsQuantities) internal {\\n        uint16[] memory ids = new uint16[](gemsQuantities.length);\\n        for (uint16 i = 0; i < ids.length; i++) {\\n            ids[i] = i + 1;\\n        }\\n        _gemsCatalystsRegistry.batchBurnGems(from, ids, _scaleGemQuantities(gemsQuantities));\\n    }\\n\\n    /// @dev Burn an array of gems.\\n    /// @param from The original signer of the tx.\\n    /// @param gemIds The array of gems to burn.\\n    /// @param numTimes Amount of gems to burn.\\n    function _burnGems(\\n        address from,\\n        uint16[] memory gemIds,\\n        uint32 numTimes\\n    ) internal {\\n        uint256[] memory gemFactors = new uint256[](gemIds.length);\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            gemFactors[i] = 10**(_gemsCatalystsRegistry.getGemDecimals(gemIds[i])) * numTimes;\\n        }\\n        _gemsCatalystsRegistry.burnDifferentGems(from, gemIds, gemFactors);\\n    }\\n\\n    /// @dev Burn a single type of catalyst.\\n    /// @param from The original signer of the tx.\\n    /// @param catalystId The type of catalyst to burn.\\n    /// @param numTimes Amount of catalysts of this type to burn.\\n    function _burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint32 numTimes\\n    ) internal {\\n        _gemsCatalystsRegistry.burnCatalyst(\\n            from,\\n            catalystId,\\n            numTimes * 10**(_gemsCatalystsRegistry.getCatalystDecimals(catalystId))\\n        );\\n    }\\n\\n    /// @dev Scale up each number in an array of quantities by a factor of gemsUnits.\\n    /// @param quantities The array of numbers to scale.\\n    /// @return scaledQuantities The scaled-up values.\\n    function _scaleGemQuantities(uint256[] memory quantities)\\n        internal\\n        view\\n        returns (uint256[] memory scaledQuantities)\\n    {\\n        scaledQuantities = new uint256[](quantities.length);\\n        for (uint256 i = 0; i < quantities.length; i++) {\\n            uint256 gemFactor = 10**_gemsCatalystsRegistry.getGemDecimals(uint16(i + 1));\\n            scaledQuantities[i] = quantities[i] * gemFactor * numberOfGemsBurnPerAsset;\\n        }\\n    }\\n\\n    /// @dev Scale up each number in an array of quantities by a factor of gemsUnits.\\n    /// @param quantities The array of numbers to scale.\\n    /// @return scaledQuantities The scaled-up values.\\n    function _scaleCatalystQuantities(uint256[] memory quantities)\\n        internal\\n        view\\n        returns (uint256[] memory scaledQuantities)\\n    {\\n        scaledQuantities = new uint256[](quantities.length);\\n        for (uint256 i = 0; i < quantities.length; i++) {\\n            uint256 catalystFactor = 10**_gemsCatalystsRegistry.getCatalystDecimals(uint16(i + 1));\\n            scaledQuantities[i] = quantities[i] * catalystFactor * numberOfCatalystBurnPerAsset;\\n        }\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n\\n    function _mintRequirements(\\n        address from,\\n        uint256 quantity,\\n        address to\\n    ) internal view {\\n        require(to != address(0), \\\"INVALID_TO_ZERO_ADDRESS\\\");\\n        require(_msgSender() == from, \\\"AUTH_ACCESS_DENIED\\\");\\n        require(quantity != 0, \\\"AssetMinter: quantity cannot be 0\\\");\\n    }\\n\\n    function _burnAndMint(\\n        address from,\\n        uint40 packId,\\n        bytes32 metadataHash,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint256 quantity,\\n        address to,\\n        bytes calldata data\\n    ) internal returns (uint256 assetId) {\\n        _mintRequirements(from, quantity, to);\\n\\n        _burnCatalyst(from, catalystId, numberOfCatalystBurnPerAsset);\\n        _burnGems(from, gemIds, numberOfGemsBurnPerAsset);\\n\\n        assetId = _assetERC1155.mint(from, packId, metadataHash, quantity, to, data);\\n        _registry.setCatalyst(assetId, catalystId, gemIds);\\n    }\\n}\\n\",\"keccak256\":\"0xf344f833e078cf92808dec25056f3f38a82a6e80b110b8c009ed54582e42a173\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/GemsCatalystsRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IGem.sol\\\";\\nimport \\\"./interfaces/ICatalyst.sol\\\";\\nimport \\\"../common/interfaces/IERC20Extended.sol\\\";\\nimport \\\"./interfaces/IGemsCatalystsRegistry.sol\\\";\\nimport \\\"../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/// @notice Contract managing the Gems and Catalysts\\n/// Each Gems and Catalyst must be registered here.\\n/// Each new Gem get assigned a new id (starting at 1)\\n/// Each new Catalyst get assigned a new id (starting at 1)\\ncontract GemsCatalystsRegistry is ERC2771Handler, IGemsCatalystsRegistry, OwnableUpgradeable, AccessControlUpgradeable {\\n    uint256 private constant MAX_GEMS_AND_CATALYSTS = 256;\\n    uint256 internal constant MAX_UINT256 = ~uint256(0);\\n    bytes32 public constant SUPER_OPERATOR_ROLE = keccak256(\\\"SUPER_OPERATOR_ROLE\\\");\\n\\n    IGem[] internal _gems;\\n    ICatalyst[] internal _catalysts;\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n\\n    function initV1(address trustedForwarder, address admin) public initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        __ERC2771Handler_initialize(trustedForwarder);\\n        __Ownable_init();\\n    }\\n\\n    /// @notice Returns the values for each gem included in a given asset.\\n    /// @param catalystId The catalyst identifier.\\n    /// @param assetId The asset tokenId.\\n    /// @param events An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect.\\n    /// @return values An array of values for each gem present in the asset.\\n    function getAttributes(\\n        uint16 catalystId,\\n        uint256 assetId,\\n        IAssetAttributesRegistry.GemEvent[] calldata events\\n    ) external view override returns (uint32[] memory values) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getAttributes(assetId, events);\\n    }\\n\\n    /// @notice Returns the maximum number of gems for a given catalyst\\n    /// @param catalystId catalyst identifier\\n    function getMaxGems(uint16 catalystId) external view override returns (uint8) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getMaxGems();\\n    }\\n\\n    /// @notice Returns the decimals for a given catalyst\\n    /// @param catalystId catalyst identifier\\n    function getCatalystDecimals(uint16 catalystId) external view override returns (uint8) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getDecimals();\\n    }\\n\\n    /// @notice Returns the decimals for a given gem\\n    /// @param gemId gem identifier\\n    function getGemDecimals(uint16 gemId) external view override returns (uint8) {\\n        IGem gem = getGem(gemId);\\n        require(gem != IGem(address(0)), \\\"GEM_DOES_NOT_EXIST\\\");\\n        return gem.getDecimals();\\n    }\\n\\n    /// @notice Burns one gem unit from each gem id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param gemIds list of gems to burn one gem from each\\n    /// @param amounts amount units to burn\\n    function burnDifferentGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) external override {\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            burnGem(from, gemIds[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Burns one catalyst unit from each catalyst id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param catalystIds list of catalysts to burn\\n    /// @param amounts amount to burn\\n    function burnDifferentCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) external override {\\n        for (uint256 i = 0; i < catalystIds.length; i++) {\\n            burnCatalyst(from, catalystIds[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Burns few gem units from each gem id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param gemIds list of gems to burn gem units from each\\n    /// @param amounts list of amounts of units to burn\\n    function batchBurnGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) public override {\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            if (gemIds[i] != 0 && amounts[i] != 0) {\\n                burnGem(from, gemIds[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns few catalyst units from each catalyst id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param catalystIds list of catalysts to burn catalyst units from each\\n    /// @param amounts list of amounts of units to burn\\n    function batchBurnCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) public override {\\n        for (uint256 i = 0; i < catalystIds.length; i++) {\\n            if (catalystIds[i] != 0 && amounts[i] != 0) {\\n                burnCatalyst(from, catalystIds[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Adds both arrays of gems and catalysts to registry\\n    /// @param gems array of gems to be added\\n    /// @param catalysts array of catalysts to be added\\n    function addGemsAndCatalysts(IGem[] calldata gems, ICatalyst[] calldata catalysts)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            uint256(_gems.length + _catalysts.length + gems.length + catalysts.length) < MAX_GEMS_AND_CATALYSTS,\\n            \\\"GemsCatalystsRegistry: Too many gem and catalyst contracts\\\"\\n        );\\n\\n        for (uint256 i = 0; i < gems.length; i++) {\\n            IGem gem = gems[i];\\n            uint16 gemId = gem.gemId();\\n            require(gemId == _gems.length + 1, \\\"GEM_ID_NOT_IN_ORDER\\\");\\n            _gems.push(gem);\\n        }\\n\\n        for (uint256 i = 0; i < catalysts.length; i++) {\\n            ICatalyst catalyst = catalysts[i];\\n            uint16 catalystId = catalyst.catalystId();\\n            require(catalystId == _catalysts.length + 1, \\\"CATALYST_ID_NOT_IN_ORDER\\\");\\n            _catalysts.push(catalyst);\\n        }\\n    }\\n\\n    /// @notice Query whether a given gem exists.\\n    /// @param gemId The gem being queried.\\n    /// @return Whether the gem exists.\\n    function doesGemExist(uint16 gemId) external view override returns (bool) {\\n        return getGem(gemId) != IGem(address(0));\\n    }\\n\\n    /// @notice Query whether a giving catalyst exists.\\n    /// @param catalystId The catalyst being queried.\\n    /// @return Whether the catalyst exists.\\n    function doesCatalystExist(uint16 catalystId) external view returns (bool) {\\n        return getCatalyst(catalystId) != ICatalyst(address(0));\\n    }\\n\\n    /// @notice Burn a catalyst.\\n    /// @param from The signing address for the tx.\\n    /// @param catalystId The id of the catalyst to burn.\\n    /// @param amount The number of catalyst tokens to burn.\\n    function burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint256 amount\\n    ) public override checkAuthorization(from) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        catalyst.burnFor(from, amount);\\n    }\\n\\n    /// @notice Burn a gem.\\n    /// @param from The signing address for the tx.\\n    /// @param gemId The id of the gem to burn.\\n    /// @param amount The number of gem tokens to burn.\\n    function burnGem(\\n        address from,\\n        uint16 gemId,\\n        uint256 amount\\n    ) public override checkAuthorization(from) {\\n        IGem gem = getGem(gemId);\\n        require(gem != IGem(address(0)), \\\"GEM_DOES_NOT_EXIST\\\");\\n        gem.burnFor(from, amount);\\n    }\\n\\n    function getNumberOfCatalystContracts() external view returns (uint256 number) {\\n        number = _catalysts.length;\\n    }\\n\\n    function getNumberOfGemContracts() external view returns (uint256 number) {\\n        number = _gems.length;\\n    }\\n\\n    function revokeGemsandCatalystsMaxAllowance() external {\\n        _setGemsAndCatalystsAllowance(0);\\n    }\\n\\n    function setGemsAndCatalystsMaxAllowance() external {\\n        _setGemsAndCatalystsAllowance(MAX_UINT256);\\n    }\\n\\n    // //////////////////// INTERNALS ////////////////////\\n\\n    function _setGemsAndCatalystsAllowance(uint256 allowanceValue) internal {\\n        for (uint256 i = 0; i < _gems.length; i++) {\\n            _gems[i].approveFor(_msgSender(), address(this), allowanceValue);\\n        }\\n\\n        for (uint256 i = 0; i < _catalysts.length; i++) {\\n            _catalysts[i].approveFor(_msgSender(), address(this), allowanceValue);\\n        }\\n    }\\n\\n    /// @dev Get the catalyst contract corresponding to the id.\\n    /// @param catalystId The catalyst id to use to retrieve the contract.\\n    /// @return The requested Catalyst contract.\\n    function getCatalyst(uint16 catalystId) public view returns (ICatalyst) {\\n        if (catalystId > 0 && catalystId <= _catalysts.length) {\\n            return _catalysts[catalystId - 1];\\n        } else {\\n            return ICatalyst(address(0));\\n        }\\n    }\\n\\n    /// @dev Get the gem contract corresponding to the id.\\n    /// @param gemId The gem id to use to retrieve the contract.\\n    /// @return The requested Gem contract.\\n    function getGem(uint16 gemId) public view returns (IGem) {\\n        if (gemId > 0 && gemId <= _gems.length) {\\n            return _gems[gemId - 1];\\n        } else {\\n            return IGem(address(0));\\n        }\\n    }\\n\\n    /// @dev verify that the caller is authorized for this function call.\\n    /// @param from The original signer of the transaction.\\n    modifier checkAuthorization(address from) {\\n        require(_msgSender() == from || hasRole(SUPER_OPERATOR_ROLE, _msgSender()), \\\"AUTH_ACCESS_DENIED\\\");\\n        _;\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n\\n        emit TrustedForwarderChanged(trustedForwarder);\\n    }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x59987cc897577439bd494d5c36ebc2b8315092571091c8edd804a7e970b52f61\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/ICatalyst.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IAssetAttributesRegistry.sol\\\";\\nimport \\\"../../common/interfaces/IAttributes.sol\\\";\\nimport \\\"../../common/interfaces/IERC20Extended.sol\\\";\\n\\ninterface ICatalyst is IERC20Extended, IAttributes {\\n    function catalystId() external returns (uint16);\\n\\n    function changeAttributes(IAttributes attributes) external;\\n\\n    function getMaxGems() external view returns (uint8);\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool success);\\n\\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\\n        external\\n        view\\n        override\\n        returns (uint32[] memory values);\\n\\n    function getDecimals() external pure returns (uint8);\\n}\\n\",\"keccak256\":\"0x0f9415fff82b9c189f2d02680efd61195e1ac7f5ed17a63094143b386fc6b177\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/IGem.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IERC20Extended.sol\\\";\\n\\ninterface IGem is IERC20Extended {\\n    function gemId() external returns (uint16);\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool success);\\n\\n    function getDecimals() external pure returns (uint8);\\n}\\n\",\"keccak256\":\"0x5555669b35669429002d70f48abba62f8b03c47b4a256c56b13644e9b87ac94a\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/IGemsCatalystsRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IAssetAttributesRegistry.sol\\\";\\nimport \\\"./IGem.sol\\\";\\nimport \\\"./ICatalyst.sol\\\";\\n\\ninterface IGemsCatalystsRegistry {\\n    function getAttributes(\\n        uint16 catalystId,\\n        uint256 assetId,\\n        IAssetAttributesRegistry.GemEvent[] calldata events\\n    ) external view returns (uint32[] memory values);\\n\\n    function getMaxGems(uint16 catalystId) external view returns (uint8);\\n\\n    function burnDifferentGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function burnDifferentCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function batchBurnGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function batchBurnCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function addGemsAndCatalysts(IGem[] calldata gems, ICatalyst[] calldata catalysts) external;\\n\\n    function doesGemExist(uint16 gemId) external view returns (bool);\\n\\n    function burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint256 amount\\n    ) external;\\n\\n    function burnGem(\\n        address from,\\n        uint16 gemId,\\n        uint256 amount\\n    ) external;\\n\\n    function getCatalystDecimals(uint16 catalystId) external view returns (uint8);\\n\\n    function getGemDecimals(uint16 gemId) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x77cfb398df07f1c51c46f5c590b9ae09eab649ae5b777abf5a9767f3af418403\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetAttributesRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAssetAttributesRegistry {\\n    struct GemEvent {\\n        uint16[] gemIds;\\n        bytes32 blockHash;\\n    }\\n\\n    struct AssetGemsCatalystData {\\n        uint256 assetId;\\n        uint16 catalystContractId;\\n        uint16[] gemContractIds;\\n    }\\n\\n    function getRecord(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            bool exists,\\n            uint16 catalystId,\\n            uint16[] memory gemIds\\n        );\\n\\n    function getAttributes(uint256 assetId, GemEvent[] calldata events) external view returns (uint32[] memory values);\\n\\n    function setCatalyst(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWhenDepositOnOtherLayer(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWithBlockNumber(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint64 blockNumber\\n    ) external;\\n\\n    function addGems(uint256 assetId, uint16[] calldata gemIds) external;\\n\\n    function setMigrationContract(address _migrationContract) external;\\n\\n    function getCatalystRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7f12fa565160d7598f702dcae0e511943be9c6eaa4dc338f3439a36f0a6086c9\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetERC721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Base} from \\\"./IERC721Base.sol\\\";\\n\\ninterface IAssetERC721 is IERC721Base {\\n    function mint(address to, uint256 id) external override;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) external override;\\n\\n    function setTokenURI(uint256 id, string memory uri) external;\\n\\n    function tokenURI(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3b9a9a153b67f1b525a777be5daf2bef73bd9a2f1f883128258105f313e28de9\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetMinter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAssetMinter {\\n    struct AssetData {\\n        uint16[] gemIds;\\n        uint16 catalystId;\\n    }\\n\\n    // use only to fix stack too deep\\n    struct MintData {\\n        address from;\\n        address to;\\n        uint40 packId;\\n        bytes32 metadataHash;\\n        bytes data;\\n    }\\n\\n    function mintWithoutCatalyst(MintData calldata mintData, uint16 typeAsset1Based) external returns (uint256 assetId);\\n\\n    function mintWithCatalyst(\\n        MintData calldata mintData,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external returns (uint256 assetId);\\n\\n    function mintMultipleWithCatalyst(MintData calldata mintData, AssetData[] memory assets)\\n        external\\n        returns (uint256[] memory assetIds);\\n\\n    function mintCustomNumberWithCatalyst(\\n        MintData calldata mintData,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint256 quantity\\n    ) external returns (uint256 assetId);\\n\\n    function mintCustomNumberWithoutCatalyst(MintData calldata mintData, uint256 quantity)\\n        external\\n        returns (uint256 assetId);\\n\\n    function addOrReplaceQuantityByCatalystId(uint16 catalystId, uint256 newQuantity) external;\\n\\n    function addOrReplaceAssetTypeQuantity(uint16 index1Based, uint256 newQuantity) external;\\n\\n    function setNumberOfGemsBurnPerAsset(uint32 newQuantity) external;\\n\\n    function setNumberOfCatalystsBurnPerAsset(uint32 newQuantity) external;\\n\\n    function setCustomMintingAllowance(address addressToModify, bool isAddressAllowed) external;\\n}\\n\",\"keccak256\":\"0xad8303f63cbedf47ad35f62af2a4c40d772fcd98bc5fb9f2da6ca853b098939a\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAttributes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IAssetAttributesRegistry.sol\\\";\\n\\ninterface IAttributes {\\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\\n        external\\n        view\\n        returns (uint32[] memory values);\\n}\\n\",\"keccak256\":\"0x4cbdba9ad3fae8334fe614ae28fb3136454eada28f13f911ffce9c8c701c56a7\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\n/// @dev see https://eips.ethereum.org/EIPS/eip-20\\ninterface IERC20 {\\n    /// @notice emitted when tokens are transfered from one address to another.\\n    /// @param from address from which the token are transfered from (zero means tokens are minted).\\n    /// @param to destination address which the token are transfered to (zero means tokens are burnt).\\n    /// @param value amount of tokens transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice emitted when owner grant transfer rights to another address\\n    /// @param owner address allowing its token to be transferred.\\n    /// @param spender address allowed to spend on behalf of `owner`\\n    /// @param value amount of tokens allowed.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice return the current total amount of tokens owned by all holders.\\n    /// @return supply total number of tokens held.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice return the number of tokens held by a particular address.\\n    /// @param who address being queried.\\n    /// @return balance number of token held by that address.\\n    function balanceOf(address who) external view returns (uint256 balance);\\n\\n    /// @notice transfer tokens to a specific address.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transfer(address to, uint256 value) external returns (bool success);\\n\\n    /// @notice transfer tokens from one address to another.\\n    /// @param from address tokens will be sent from.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool success);\\n\\n    /// @notice approve an address to spend on your behalf.\\n    /// @param spender address entitled to transfer on your behalf.\\n    /// @param value amount allowed to be transfered.\\n    /// @param success whether the approval succeeded.\\n    function approve(address spender, uint256 value) external returns (bool success);\\n\\n    /// @notice return the current allowance for a particular owner/spender pair.\\n    /// @param owner address allowing spender.\\n    /// @param spender address allowed to spend.\\n    /// @return amount number of tokens `spender` can spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x9fe745d44fdcd7987682221d68b7a66d0784fbd81ae1d4e43a6c766347733a96\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n    function burnFor(address from, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xf02074902aff81db019aac8808c524d2ab77e1cb216f5327992ed7db95fee919\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC721ExtendedToken} from \\\"./IERC721ExtendedToken.sol\\\";\\n\\ninterface IERC721Base is IERC721Upgradeable {\\n    function mint(address to, uint256 id) external;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata metaData\\n    ) external;\\n\\n    function approveFor(\\n        address from,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address from,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function supportsInterface(bytes4 id) external view override returns (bool);\\n\\n    function setTrustedForwarder(address trustedForwarder) external;\\n\\n    function isTrustedForwarder(address forwarder) external returns (bool);\\n\\n    function getTrustedForwarder() external returns (address trustedForwarder);\\n}\\n\",\"keccak256\":\"0x515a9d8e988c63547108b16b7efd4942ab15887529a98861a522dea6dbb0437d\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721ExtendedToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IERC721ExtendedToken {\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n}\\n\",\"keccak256\":\"0xe574d923fe66e20909df0d06b73478d2922e4865d85c578db60bda34f6273d45\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Token.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ninterface IERC721Token {\\n    function mint(address to, uint256 id) external;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata metaData\\n    ) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x43820ca0dea912810ce62790d8d3e561c96560052c675f324339f606b591e063\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IPolygonAssetERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IAssetERC721} from \\\"./IAssetERC721.sol\\\";\\n\\ninterface IPolygonAssetERC1155 {\\n    function changeBouncerAdmin(address newBouncerAdmin) external;\\n\\n    function setBouncer(address bouncer, bool enabled) external;\\n\\n    function setPredicate(address predicate) external;\\n\\n    function mint(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256 supply,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256 id);\\n\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintMultiple(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256[] calldata supplies,\\n        bytes calldata rarityPack,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256[] memory ids);\\n\\n    // fails on non-NFT or nft who do not have collection (was a mistake)\\n    function collectionOf(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n\\n    // return true for Non-NFT ERC1155 tokens which exists\\n    function isCollection(uint256 id) external view returns (bool);\\n\\n    function collectionIndexOf(uint256 id) external view returns (uint256);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n\\n    function burnFrom(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function getBouncerAdmin() external view returns (address);\\n\\n    function extractERC721From(\\n        address sender,\\n        uint256 id,\\n        address to\\n    ) external returns (uint256 newId);\\n\\n    function isBouncer(address who) external view returns (bool);\\n\\n    function creatorOf(uint256 id) external view returns (address);\\n\\n    function wasEverMinted(uint256 id) external view returns (bool);\\n\\n    function isSuperOperator(address who) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool isOperator);\\n\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external returns (uint256[] memory);\\n\\n    function name() external returns (string memory _name);\\n\\n    function symbol() external returns (string memory _symbol);\\n\\n    function supportsInterface(bytes4 id) external returns (bool);\\n\\n    function tokenURI(uint256 id) external returns (string memory);\\n\\n    function setAssetERC721(IAssetERC721 assetERC721) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function setTrustedForwarder(address trustedForwarder) external;\\n\\n    function isTrustedForwarder(address forwarder) external returns (bool);\\n\\n    function getTrustedForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x1ba5f7f4c416fecd04530cc9213d4df46812a43079c33cc667173bb4d5e18855\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040526001805463ffffffff60c01b1963ffffffff60a01b19909116600160a01b1716600160c01b1790553480156200003a57600080fd5b50604051620037dc380380620037dc8339810160408190526200005d9162000514565b620000716200006b620002bd565b620002da565b6001600160601b0319606089811b821660805288811b821660c05287811b821660a05286901b1660e052620000a6846200032c565b600080546001600160a01b0319166001600160a01b03851617905560008251116200013e5760405162461bcd60e51b815260206004820152603660248201527f41737365744d696e7465723a207175616e7469746965734279436174616c797360448201527f744944206c656e6774682063616e6e6f7420626520300000000000000000000060648201526084015b60405180910390fd5b6000815111620001b75760405162461bcd60e51b815260206004820152603760248201527f41737365744d696e7465723a207175616e74697469657342794173736574547960448201527f70654964206c656e6774682063616e6e6f742062652030000000000000000000606482015260840162000135565b60005b82518161ffff1610156200023257828161ffff1681518110620001ed57634e487b7160e01b600052603260045260246000fd5b602002602001015160026000836001620002089190620005fa565b61ffff16815260208101919091526040016000205580620002298162000623565b915050620001ba565b5060005b81518161ffff161015620002ae57818161ffff16815181106200026957634e487b7160e01b600052603260045260246000fd5b602002602001015160036000836001620002849190620005fa565b61ffff16815260208101919091526040016000205580620002a58162000623565b91505062000236565b5050505050505050506200068a565b6000620002d46200041f60201b620011fd1760201c565b90505b90565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b62000336620002bd565b6001600160a01b0316620003526001546001600160a01b031690565b6001600160a01b031614620003aa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000135565b6001600160a01b038116620004115760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000135565b6200041c81620002da565b50565b60006200042c336200044a565b1562000442575060131936013560601c620002d7565b5033620002d7565b6000546001600160a01b038281169116145b919050565b80516200045c8162000674565b600082601f8301126200047f578081fd5b815160206001600160401b03808311156200049e576200049e6200065e565b818302604051601f19603f83011681018181108482111715620004c557620004c56200065e565b60405284815283810192508684018288018501891015620004e4578687fd5b8692505b8583101562000508578051845292840192600192909201918401620004e8565b50979650505050505050565b600080600080600080600080610100898b03121562000531578384fd5b88516200053e8162000674565b60208a0151909850620005518162000674565b60408a0151909750620005648162000674565b60608a0151909650620005778162000674565b60808a01519095506200058a8162000674565b93506200059a60a08a0162000461565b60c08a01519093506001600160401b0380821115620005b7578384fd5b620005c58c838d016200046e565b935060e08b0151915080821115620005db578283fd5b50620005ea8b828c016200046e565b9150509295985092959890939650565b600061ffff8083168185168083038211156200061a576200061a62000648565b01949350505050565b600061ffff808316818114156200063e576200063e62000648565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200041c57600080fd5b60805160601c60a05160601c60c05160601c60e05160601c6130b4620007286000396000818161144a0152818161152f0152818161196001528181611e0501528181611f4f01528181611fc1015281816121210152818161226f0152818161234e015261251d0152600050506000818161064a015281816107fe01528181610a340152611c07015260008181610bc70152611ccd01526130b46000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c806384c4fb3a116100d8578063bfb87f0a1161008c578063d49d1b9811610066578063d49d1b9814610371578063da74222814610384578063f2fde38b1461039757610177565b8063bfb87f0a1461032a578063ce1b815f1461033d578063d04213a31461034e57610177565b8063a22d5ef6116100bd578063a22d5ef6146102f1578063a8338df114610304578063b50aae1a1461031757610177565b806384c4fb3a146102b15780638da5cb5b146102d157610177565b806345c1439d1161012f5780635a1dce1f116101145780635a1dce1f1461026a578063715018a6146102965780637f2e18141461029e57610177565b806345c1439d14610234578063572b6c051461024757610177565b80630854f447116101605780630854f447146101a457806337a69446146101d75780633a91fda91461021457610177565b8063048b33be1461017c57806307b7810c14610191575b600080fd5b61018f61018a366004612b30565b6103aa565b005b61018f61019f366004612715565b61046d565b6101c46101b2366004612ad5565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b6001546101ff9074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020016101ce565b6101c4610222366004612ad5565b60036020526000908152604090205481565b6101c4610242366004612a92565b61054e565b61025a6102553660046126fb565b61072a565b60405190151581526020016101ce565b6001546101ff907801000000000000000000000000000000000000000000000000900463ffffffff1681565b61018f610741565b6101c46102ac366004612956565b6107bc565b6102c46102bf3660046127e4565b6108df565b6040516101ce9190612d29565b6102d9610cdf565b6040516001600160a01b0390911681526020016101ce565b61018f6102ff366004612aef565b610cef565b61018f610312366004612b30565b610d75565b6101c4610325366004612a16565b610e37565b6101c46103383660046129a2565b610f5e565b6000546001600160a01b03166102d9565b61025a61035c3660046126fb565b60046020526000908152604090205460ff1681565b61018f61037f366004612aef565b610fb1565b61018f6103923660046126fb565b611037565b61018f6103a53660046126fb565b611106565b6103b2611241565b6001600160a01b03166103c3610cdf565b6001600160a01b03161461041e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001805463ffffffff90921674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b610475611241565b6001600160a01b0316610486610cdf565b6001600160a01b0316146104dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610415565b6001600160a01b03821660008181526004602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917fb14c967f784f0ac8e6e62b391fbd48f1be9e9d64871ca240b416da9bbb9a9fb491a35050565b60006004600061055c611241565b6001600160a01b0316815260208101919091526040016000205460ff161515600114806105a8575061058c610cdf565b6001600160a01b031661059d611241565b6001600160a01b0316145b61061a5760405162461bcd60e51b815260206004820152602860248201527f41737365744d696e7465723a20637573746f6d206d696e74696e6720756e617560448201527f74686f72697a65640000000000000000000000000000000000000000000000006064820152608401610415565b61064061062a60208501856126fb565b8361063b60408701602088016126fb565b611250565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166398fbde6461067c60208601866126fb565b61068c6060870160408801612b54565b6060870135866106a260408a0160208b016126fb565b6106af60808b018b612dc6565b6040518863ffffffff1660e01b81526004016106d19796959493929190612cd6565b602060405180830381600087803b1580156106eb57600080fd5b505af11580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107239190612b18565b9392505050565b6000546001600160a01b038281169116145b919050565b610749611241565b6001600160a01b031661075a610cdf565b6001600160a01b0316146107b05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610415565b6107ba6000611386565b565b61ffff81166000908152600360209081526040822054906107f4906107e3908601866126fb565b8261063b60408801602089016126fb565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166398fbde6461083060208701876126fb565b6108406060880160408901612b54565b60608801358561085660408b0160208c016126fb565b61086360808c018c612dc6565b6040518863ffffffff1660e01b81526004016108859796959493929190612cd6565b602060405180830381600087803b15801561089f57600080fd5b505af11580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d79190612b18565b949350505050565b60608151600014156109335760405162461bcd60e51b815260206004820152601060248201527f494e56414c49445f305f415353455453000000000000000000000000000000006044820152606401610415565b600061094560408501602086016126fb565b6001600160a01b0316141561099c5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f414444524553530000000000000000006044820152606401610415565b6109a960208401846126fb565b6001600160a01b03166109ba611241565b6001600160a01b031614610a105760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e49454400000000000000000000000000006044820152606401610415565b6000610a28610a2260208601866126fb565b846113f0565b90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f0bc00d8610a6660208701876126fb565b610a766060880160408901612b54565b606088013585610a8c60408b0160208c016126fb565b610a9960808c018c612dc6565b6040518863ffffffff1660e01b8152600401610abb9796959493929190612c65565b600060405180830381600087803b158015610ad557600080fd5b505af1158015610ae9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b11919081019061274f565b915060005b8251811015610cd757838181518110610b3f57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1660001415610bc55760405162461bcd60e51b815260206004820152602260248201527f41737365744d696e7465723a20636174616c79737449442063616e277420626560448201527f20300000000000000000000000000000000000000000000000000000000000006064820152608401610415565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663676181bf848381518110610c1457634e487b7160e01b600052603260045260246000fd5b6020026020010151868481518110610c3c57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151878581518110610c6857634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516040518463ffffffff1660e01b8152600401610c9293929190612d9a565b600060405180830381600087803b158015610cac57600080fd5b505af1158015610cc0573d6000803e3d6000fd5b505050508080610ccf90613037565b915050610b16565b505092915050565b6001546001600160a01b03165b90565b610cf7611241565b6001600160a01b0316610d08610cdf565b6001600160a01b031614610d5e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610415565b61ffff909116600090815260026020526040902055565b610d7d611241565b6001600160a01b0316610d8e610cdf565b6001600160a01b031614610de45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610415565b6001805463ffffffff9092167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b600060046000610e45611241565b6001600160a01b0316815260208101919091526040016000205460ff16151560011480610e915750610e75610cdf565b6001600160a01b0316610e86611241565b6001600160a01b0316145b610f035760405162461bcd60e51b815260206004820152602860248201527f41737365744d696e7465723a20637573746f6d206d696e74696e6720756e617560448201527f74686f72697a65640000000000000000000000000000000000000000000000006064820152608401610415565b610f54610f1360208801886126fb565b610f236060890160408a01612b54565b8860600135888888888d6020016020810190610f3f91906126fb565b8e8060800190610f4f9190612dc6565b611b4e565b9695505050505050565b61ffff8316600090815260026020908152604082205490610f5490610f85908801886126fb565b610f956060890160408a01612b54565b8860600135888888878d6020016020810190610f3f91906126fb565b610fb9611241565b6001600160a01b0316610fca610cdf565b6001600160a01b0316146110205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610415565b61ffff909116600090815260036020526040902055565b61103f611241565b6001600160a01b0316611050610cdf565b6001600160a01b0316146110a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610415565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117825560405190917f871264f4293af7d2865ae7eae628b228f4991c57cb45b39c99f0b774ebe2901891a250565b61110e611241565b6001600160a01b031661111f610cdf565b6001600160a01b0316146111755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610415565b6001600160a01b0381166111f15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610415565b6111fa81611386565b50565b60006112083361072a565b1561123a57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610cec565b5033610cec565b600061124b6111fd565b905090565b6001600160a01b0381166112a65760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f414444524553530000000000000000006044820152606401610415565b826001600160a01b03166112b8611241565b6001600160a01b03161461130e5760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e49454400000000000000000000000000006044820152606401610415565b816113815760405162461bcd60e51b815260206004820152602160248201527f41737365744d696e7465723a207175616e746974792063616e6e6f742062652060448201527f30000000000000000000000000000000000000000000000000000000000000006064820152608401610415565b505050565b600180546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6060815167ffffffffffffffff81111561141a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611443578160200160208202803683370190505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663645c5f9e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a157600080fd5b505afa1580156114b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d99190612b18565b67ffffffffffffffff8111156114ff57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611528578160200160208202803683370190505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c4d91ed6040518163ffffffff1660e01b815260040160206040518083038186803b15801561158657600080fd5b505afa15801561159a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115be9190612b18565b67ffffffffffffffff8111156115e457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561160d578160200160208202803683370190505b50905060005b8451811015611b3957600085828151811061163e57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1611801561168b5750825185828151811061167857634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1611155b6116fc5760405162461bcd60e51b8152602060048201526024808201527f41737365744d696e7465723a20636174616c7973744944206f7574206f66206260448201527f6f756e64000000000000000000000000000000000000000000000000000000006064820152608401610415565b82600186838151811061171f57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516117359190612ff2565b61ffff168151811061175757634e487b7160e01b600052603260045260246000fd5b60200260200101805180919061176c90613037565b90525060005b85828151811061179257634e487b7160e01b600052603260045260246000fd5b6020026020010151600001515181101561195b5760008683815181106117c857634e487b7160e01b600052603260045260246000fd5b60200260200101516000015182815181106117f357634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff161180156118635750825186838151811061182957634e487b7160e01b600052603260045260246000fd5b602002602001015160000151828151811061185457634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1611155b6118af5760405162461bcd60e51b815260206004820152601f60248201527f41737365744d696e7465723a2067656d4964206f7574206f6620626f756e64006044820152606401610415565b8260018784815181106118d257634e487b7160e01b600052603260045260246000fd5b60200260200101516000015183815181106118fd57634e487b7160e01b600052603260045260246000fd5b602002602001015161190f9190612ff2565b61ffff168151811061193157634e487b7160e01b600052603260045260246000fd5b60200260200101805180919061194690613037565b9052508061195381613037565b915050611772565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166378bc8a198784815181106119ad57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040518263ffffffff1660e01b81526004016119df919061ffff91909116815260200190565b60206040518083038186803b1580156119f757600080fd5b505afa158015611a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2f9190612b79565b60ff1690508061ffff16868381518110611a5957634e487b7160e01b600052603260045260246000fd5b602002602001015160000151511115611ab45760405162461bcd60e51b815260206004820152601a60248201527f41737365744d696e7465723a20746f6f206d616e792067656d730000000000006044820152606401610415565b60026000878481518110611ad857634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1661ffff16815260200190815260200160002054858381518110611b1b57634e487b7160e01b600052603260045260246000fd5b60209081029190910101525080611b3181613037565b915050611613565b50611b448583611d48565b610cd78582611e92565b6000611b5b8b8686611250565b611b788b89600160189054906101000a900463ffffffff16611f87565b611bd78b8888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060015474010000000000000000000000000000000000000000900463ffffffff1691506120b69050565b6040517f98fbde640000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906398fbde6490611c48908e908e908e908b908b908b908b90600401612cd6565b602060405180830381600087803b158015611c6257600080fd5b505af1158015611c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9a9190612b18565b6040517f676181bf0000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063676181bf90611d089084908c908c908c90600401612d3c565b600060405180830381600087803b158015611d2257600080fd5b505af1158015611d36573d6000803e3d6000fd5b505050509a9950505050505050505050565b6000815167ffffffffffffffff811115611d7257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d9b578160200160208202803683370190505b50905060005b81518161ffff161015611e0257611db9816001612e7e565b828261ffff1681518110611ddd57634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280611dfa81613015565b915050611da1565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352eea0308483611e3d866122e0565b6040518463ffffffff1660e01b8152600401611e5b93929190612c31565b600060405180830381600087803b158015611e7557600080fd5b505af1158015611e89573d6000803e3d6000fd5b50505050505050565b6000815167ffffffffffffffff811115611ebc57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611ee5578160200160208202803683370190505b50905060005b81518161ffff161015611f4c57611f03816001612e7e565b828261ffff1681518110611f2757634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280611f4481613015565b915050611eeb565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663362e7e8c8483611e3d866124af565b6040517faff5d1fa00000000000000000000000000000000000000000000000000000000815261ffff831660048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632a6a64519085908590849063aff5d1fa9060240160206040518083038186803b15801561200f57600080fd5b505afa158015612023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120479190612b79565b61205290600a612f02565b6120629063ffffffff8716612fd3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015261ffff90911660248301526044820152606401611e5b565b6000825167ffffffffffffffff8111156120e057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612109578160200160208202803683370190505b50905060005b835181101561223e578263ffffffff167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f96080a686848151811061216e57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161219c919061ffff91909116815260200190565b60206040518083038186803b1580156121b457600080fd5b505afa1580156121c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ec9190612b79565b6121f790600a612f02565b6122019190612fd3565b82828151811061222157634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061223681613037565b91505061210f565b506040517f2d0f97e70000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632d0f97e7906122a890879087908690600401612c31565b600060405180830381600087803b1580156122c257600080fd5b505af11580156122d6573d6000803e3d6000fd5b5050505050505050565b6060815167ffffffffffffffff81111561230a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612333578160200160208202803683370190505b50905060005b82518110156124a95760006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663aff5d1fa61237e846001612ea4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261ffff909116600482015260240160206040518083038186803b1580156123d057600080fd5b505afa1580156123e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124089190612b79565b61241390600a612f02565b9050600160189054906101000a900463ffffffff1663ffffffff168185848151811061244f57634e487b7160e01b600052603260045260246000fd5b60200260200101516124619190612fd3565b61246b9190612fd3565b83838151811061248b57634e487b7160e01b600052603260045260246000fd5b602090810291909101015250806124a181613037565b915050612339565b50919050565b6060815167ffffffffffffffff8111156124d957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612502578160200160208202803683370190505b50905060005b82518110156124a95760006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f96080a661254d846001612ea4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261ffff909116600482015260240160206040518083038186803b15801561259f57600080fd5b505afa1580156125b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d79190612b79565b6125e290600a612f02565b9050600160149054906101000a900463ffffffff1663ffffffff168185848151811061261e57634e487b7160e01b600052603260045260246000fd5b60200260200101516126309190612fd3565b61263a9190612fd3565b83838151811061265a57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152508061267081613037565b915050612508565b80356001600160a01b038116811461073c57600080fd5b60008083601f8401126126a0578182fd5b50813567ffffffffffffffff8111156126b7578182fd5b60208301915083602080830285010111156126d157600080fd5b9250929050565b600060a082840312156124a9578081fd5b803561ffff8116811461073c57600080fd5b60006020828403121561270c578081fd5b61072382612678565b60008060408385031215612727578081fd5b61273083612678565b915060208301358015158114612744578182fd5b809150509250929050565b60006020808385031215612761578182fd5b825167ffffffffffffffff811115612777578283fd5b8301601f81018513612787578283fd5b805161279a61279582612e5a565b612e29565b81815283810190838501858402850186018910156127b6578687fd5b8694505b838510156127d85780518352600194909401939185019185016127ba565b50979650505050505050565b600080604083850312156127f6578182fd5b67ffffffffffffffff8335111561280b578182fd5b61281884843585016126d8565b915067ffffffffffffffff60208401351115612832578081fd5b6020830135830184601f820112612847578182fd5b6128546127958235612e5a565b81358152602080820191908301845b843581101561294857813585016040601f19828c03011215612883578687fd5b61288d6040612e29565b67ffffffffffffffff602083013511156128a5578788fd5b602082013582018b603f8201126128ba578889fd5b60208101356128cb61279582612e5a565b80828252602082019150604084018f60406020860287010111156128ed578c8dfd5b8c94505b8385101561291757612902816126e9565b835260019490940193602092830192016128f1565b5084525061292a915050604083016126e9565b60208281019190915290865294850194929092019150600101612863565b509497909650945050505050565b60008060408385031215612968578182fd5b823567ffffffffffffffff81111561297e578283fd5b61298a858286016126d8565b925050612999602084016126e9565b90509250929050565b600080600080606085870312156129b7578182fd5b843567ffffffffffffffff808211156129ce578384fd5b6129da888389016126d8565b95506129e8602088016126e9565b945060408701359150808211156129fd578384fd5b50612a0a8782880161268f565b95989497509550505050565b600080600080600060808688031215612a2d578081fd5b853567ffffffffffffffff80821115612a44578283fd5b612a5089838a016126d8565b9650612a5e602089016126e9565b95506040880135915080821115612a73578283fd5b50612a808882890161268f565b96999598509660600135949350505050565b60008060408385031215612aa4578182fd5b823567ffffffffffffffff811115612aba578283fd5b612ac6858286016126d8565b95602094909401359450505050565b600060208284031215612ae6578081fd5b610723826126e9565b60008060408385031215612b01578182fd5b612b0a836126e9565b946020939093013593505050565b600060208284031215612b29578081fd5b5051919050565b600060208284031215612b41578081fd5b813563ffffffff81168114610723578182fd5b600060208284031215612b65578081fd5b813564ffffffffff81168114610723578182fd5b600060208284031215612b8a578081fd5b815160ff81168114610723578182fd5b6000815180845260208085019450808401835b83811015612bcd57815161ffff1687529582019590820190600101612bad565b509495945050505050565b6000815180845260208085019450808401835b83811015612bcd57815187529582019590820190600101612beb565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60006001600160a01b038516825260606020830152612c536060830185612b9a565b8281036040840152610f548185612bd8565b60006001600160a01b03808a16835264ffffffffff8916602084015287604084015260e06060840152612c9b60e0840188612bd8565b83810380608086015283825282881660a08601526020810160c086015250612cc7602082018688612c07565b9b9a5050505050505050505050565b60006001600160a01b03808a16835264ffffffffff8916602084015287604084015286606084015280861660808401525060c060a0830152612d1c60c083018486612c07565b9998505050505050505050565b6000602082526107236020830184612bd8565b600060608201868352602061ffff808816828601526060604086015282868452608086019050879350845b87811015612d8c5782612d79866126e9565b1682529383019390830190600101612d67565b509998505050505050505050565b600084825261ffff8416602083015260606040830152612dbd6060830184612b9a565b95945050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612dfa578283fd5b83018035915067ffffffffffffffff821115612e14578283fd5b6020019150368190038213156126d157600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612e5257612e52613068565b604052919050565b600067ffffffffffffffff821115612e7457612e74613068565b5060209081020190565b600061ffff808316818516808303821115612e9b57612e9b613052565b01949350505050565b60008219821115612eb757612eb7613052565b500190565b80825b6001808611612ece5750612ef9565b818704821115612ee057612ee0613052565b80861615612eed57918102915b9490941c938002612ebf565b94509492505050565b600061072360001960ff851684600082612f1e57506001610723565b81612f2b57506000610723565b8160018114612f415760028114612f4b57612f78565b6001915050610723565b60ff841115612f5c57612f5c613052565b6001841b915084821115612f7257612f72613052565b50610723565b5060208310610133831016604e8410600b8410161715612fab575081810a83811115612fa657612fa6613052565b610723565b612fb88484846001612ebc565b808604821115612fca57612fca613052565b02949350505050565b6000816000190483118215151615612fed57612fed613052565b500290565b600061ffff8381169083168181101561300d5761300d613052565b039392505050565b600061ffff8083168181141561302d5761302d613052565b6001019392505050565b600060001982141561304b5761304b613052565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212204dfcf9c99985d76e3e16c1c431c7f8980d29d0e4099c32378b37a613433f645764736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c806384c4fb3a116100d8578063bfb87f0a1161008c578063d49d1b9811610066578063d49d1b9814610371578063da74222814610384578063f2fde38b1461039757610177565b8063bfb87f0a1461032a578063ce1b815f1461033d578063d04213a31461034e57610177565b8063a22d5ef6116100bd578063a22d5ef6146102f1578063a8338df114610304578063b50aae1a1461031757610177565b806384c4fb3a146102b15780638da5cb5b146102d157610177565b806345c1439d1161012f5780635a1dce1f116101145780635a1dce1f1461026a578063715018a6146102965780637f2e18141461029e57610177565b806345c1439d14610234578063572b6c051461024757610177565b80630854f447116101605780630854f447146101a457806337a69446146101d75780633a91fda91461021457610177565b8063048b33be1461017c57806307b7810c14610191575b600080fd5b61018f61018a366004612b30565b6103aa565b005b61018f61019f366004612715565b61046d565b6101c46101b2366004612ad5565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b6001546101ff9074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020016101ce565b6101c4610222366004612ad5565b60036020526000908152604090205481565b6101c4610242366004612a92565b61054e565b61025a6102553660046126fb565b61072a565b60405190151581526020016101ce565b6001546101ff907801000000000000000000000000000000000000000000000000900463ffffffff1681565b61018f610741565b6101c46102ac366004612956565b6107bc565b6102c46102bf3660046127e4565b6108df565b6040516101ce9190612d29565b6102d9610cdf565b6040516001600160a01b0390911681526020016101ce565b61018f6102ff366004612aef565b610cef565b61018f610312366004612b30565b610d75565b6101c4610325366004612a16565b610e37565b6101c46103383660046129a2565b610f5e565b6000546001600160a01b03166102d9565b61025a61035c3660046126fb565b60046020526000908152604090205460ff1681565b61018f61037f366004612aef565b610fb1565b61018f6103923660046126fb565b611037565b61018f6103a53660046126fb565b611106565b6103b2611241565b6001600160a01b03166103c3610cdf565b6001600160a01b03161461041e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001805463ffffffff90921674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b610475611241565b6001600160a01b0316610486610cdf565b6001600160a01b0316146104dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610415565b6001600160a01b03821660008181526004602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917fb14c967f784f0ac8e6e62b391fbd48f1be9e9d64871ca240b416da9bbb9a9fb491a35050565b60006004600061055c611241565b6001600160a01b0316815260208101919091526040016000205460ff161515600114806105a8575061058c610cdf565b6001600160a01b031661059d611241565b6001600160a01b0316145b61061a5760405162461bcd60e51b815260206004820152602860248201527f41737365744d696e7465723a20637573746f6d206d696e74696e6720756e617560448201527f74686f72697a65640000000000000000000000000000000000000000000000006064820152608401610415565b61064061062a60208501856126fb565b8361063b60408701602088016126fb565b611250565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166398fbde6461067c60208601866126fb565b61068c6060870160408801612b54565b6060870135866106a260408a0160208b016126fb565b6106af60808b018b612dc6565b6040518863ffffffff1660e01b81526004016106d19796959493929190612cd6565b602060405180830381600087803b1580156106eb57600080fd5b505af11580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107239190612b18565b9392505050565b6000546001600160a01b038281169116145b919050565b610749611241565b6001600160a01b031661075a610cdf565b6001600160a01b0316146107b05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610415565b6107ba6000611386565b565b61ffff81166000908152600360209081526040822054906107f4906107e3908601866126fb565b8261063b60408801602089016126fb565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166398fbde6461083060208701876126fb565b6108406060880160408901612b54565b60608801358561085660408b0160208c016126fb565b61086360808c018c612dc6565b6040518863ffffffff1660e01b81526004016108859796959493929190612cd6565b602060405180830381600087803b15801561089f57600080fd5b505af11580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d79190612b18565b949350505050565b60608151600014156109335760405162461bcd60e51b815260206004820152601060248201527f494e56414c49445f305f415353455453000000000000000000000000000000006044820152606401610415565b600061094560408501602086016126fb565b6001600160a01b0316141561099c5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f414444524553530000000000000000006044820152606401610415565b6109a960208401846126fb565b6001600160a01b03166109ba611241565b6001600160a01b031614610a105760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e49454400000000000000000000000000006044820152606401610415565b6000610a28610a2260208601866126fb565b846113f0565b90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f0bc00d8610a6660208701876126fb565b610a766060880160408901612b54565b606088013585610a8c60408b0160208c016126fb565b610a9960808c018c612dc6565b6040518863ffffffff1660e01b8152600401610abb9796959493929190612c65565b600060405180830381600087803b158015610ad557600080fd5b505af1158015610ae9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b11919081019061274f565b915060005b8251811015610cd757838181518110610b3f57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1660001415610bc55760405162461bcd60e51b815260206004820152602260248201527f41737365744d696e7465723a20636174616c79737449442063616e277420626560448201527f20300000000000000000000000000000000000000000000000000000000000006064820152608401610415565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663676181bf848381518110610c1457634e487b7160e01b600052603260045260246000fd5b6020026020010151868481518110610c3c57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151878581518110610c6857634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516040518463ffffffff1660e01b8152600401610c9293929190612d9a565b600060405180830381600087803b158015610cac57600080fd5b505af1158015610cc0573d6000803e3d6000fd5b505050508080610ccf90613037565b915050610b16565b505092915050565b6001546001600160a01b03165b90565b610cf7611241565b6001600160a01b0316610d08610cdf565b6001600160a01b031614610d5e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610415565b61ffff909116600090815260026020526040902055565b610d7d611241565b6001600160a01b0316610d8e610cdf565b6001600160a01b031614610de45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610415565b6001805463ffffffff9092167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b600060046000610e45611241565b6001600160a01b0316815260208101919091526040016000205460ff16151560011480610e915750610e75610cdf565b6001600160a01b0316610e86611241565b6001600160a01b0316145b610f035760405162461bcd60e51b815260206004820152602860248201527f41737365744d696e7465723a20637573746f6d206d696e74696e6720756e617560448201527f74686f72697a65640000000000000000000000000000000000000000000000006064820152608401610415565b610f54610f1360208801886126fb565b610f236060890160408a01612b54565b8860600135888888888d6020016020810190610f3f91906126fb565b8e8060800190610f4f9190612dc6565b611b4e565b9695505050505050565b61ffff8316600090815260026020908152604082205490610f5490610f85908801886126fb565b610f956060890160408a01612b54565b8860600135888888878d6020016020810190610f3f91906126fb565b610fb9611241565b6001600160a01b0316610fca610cdf565b6001600160a01b0316146110205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610415565b61ffff909116600090815260036020526040902055565b61103f611241565b6001600160a01b0316611050610cdf565b6001600160a01b0316146110a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610415565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117825560405190917f871264f4293af7d2865ae7eae628b228f4991c57cb45b39c99f0b774ebe2901891a250565b61110e611241565b6001600160a01b031661111f610cdf565b6001600160a01b0316146111755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610415565b6001600160a01b0381166111f15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610415565b6111fa81611386565b50565b60006112083361072a565b1561123a57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610cec565b5033610cec565b600061124b6111fd565b905090565b6001600160a01b0381166112a65760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f414444524553530000000000000000006044820152606401610415565b826001600160a01b03166112b8611241565b6001600160a01b03161461130e5760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e49454400000000000000000000000000006044820152606401610415565b816113815760405162461bcd60e51b815260206004820152602160248201527f41737365744d696e7465723a207175616e746974792063616e6e6f742062652060448201527f30000000000000000000000000000000000000000000000000000000000000006064820152608401610415565b505050565b600180546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6060815167ffffffffffffffff81111561141a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611443578160200160208202803683370190505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663645c5f9e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a157600080fd5b505afa1580156114b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d99190612b18565b67ffffffffffffffff8111156114ff57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611528578160200160208202803683370190505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c4d91ed6040518163ffffffff1660e01b815260040160206040518083038186803b15801561158657600080fd5b505afa15801561159a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115be9190612b18565b67ffffffffffffffff8111156115e457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561160d578160200160208202803683370190505b50905060005b8451811015611b3957600085828151811061163e57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1611801561168b5750825185828151811061167857634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1611155b6116fc5760405162461bcd60e51b8152602060048201526024808201527f41737365744d696e7465723a20636174616c7973744944206f7574206f66206260448201527f6f756e64000000000000000000000000000000000000000000000000000000006064820152608401610415565b82600186838151811061171f57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516117359190612ff2565b61ffff168151811061175757634e487b7160e01b600052603260045260246000fd5b60200260200101805180919061176c90613037565b90525060005b85828151811061179257634e487b7160e01b600052603260045260246000fd5b6020026020010151600001515181101561195b5760008683815181106117c857634e487b7160e01b600052603260045260246000fd5b60200260200101516000015182815181106117f357634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff161180156118635750825186838151811061182957634e487b7160e01b600052603260045260246000fd5b602002602001015160000151828151811061185457634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1611155b6118af5760405162461bcd60e51b815260206004820152601f60248201527f41737365744d696e7465723a2067656d4964206f7574206f6620626f756e64006044820152606401610415565b8260018784815181106118d257634e487b7160e01b600052603260045260246000fd5b60200260200101516000015183815181106118fd57634e487b7160e01b600052603260045260246000fd5b602002602001015161190f9190612ff2565b61ffff168151811061193157634e487b7160e01b600052603260045260246000fd5b60200260200101805180919061194690613037565b9052508061195381613037565b915050611772565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166378bc8a198784815181106119ad57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040518263ffffffff1660e01b81526004016119df919061ffff91909116815260200190565b60206040518083038186803b1580156119f757600080fd5b505afa158015611a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2f9190612b79565b60ff1690508061ffff16868381518110611a5957634e487b7160e01b600052603260045260246000fd5b602002602001015160000151511115611ab45760405162461bcd60e51b815260206004820152601a60248201527f41737365744d696e7465723a20746f6f206d616e792067656d730000000000006044820152606401610415565b60026000878481518110611ad857634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1661ffff16815260200190815260200160002054858381518110611b1b57634e487b7160e01b600052603260045260246000fd5b60209081029190910101525080611b3181613037565b915050611613565b50611b448583611d48565b610cd78582611e92565b6000611b5b8b8686611250565b611b788b89600160189054906101000a900463ffffffff16611f87565b611bd78b8888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060015474010000000000000000000000000000000000000000900463ffffffff1691506120b69050565b6040517f98fbde640000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906398fbde6490611c48908e908e908e908b908b908b908b90600401612cd6565b602060405180830381600087803b158015611c6257600080fd5b505af1158015611c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9a9190612b18565b6040517f676181bf0000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063676181bf90611d089084908c908c908c90600401612d3c565b600060405180830381600087803b158015611d2257600080fd5b505af1158015611d36573d6000803e3d6000fd5b505050509a9950505050505050505050565b6000815167ffffffffffffffff811115611d7257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d9b578160200160208202803683370190505b50905060005b81518161ffff161015611e0257611db9816001612e7e565b828261ffff1681518110611ddd57634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280611dfa81613015565b915050611da1565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352eea0308483611e3d866122e0565b6040518463ffffffff1660e01b8152600401611e5b93929190612c31565b600060405180830381600087803b158015611e7557600080fd5b505af1158015611e89573d6000803e3d6000fd5b50505050505050565b6000815167ffffffffffffffff811115611ebc57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611ee5578160200160208202803683370190505b50905060005b81518161ffff161015611f4c57611f03816001612e7e565b828261ffff1681518110611f2757634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280611f4481613015565b915050611eeb565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663362e7e8c8483611e3d866124af565b6040517faff5d1fa00000000000000000000000000000000000000000000000000000000815261ffff831660048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632a6a64519085908590849063aff5d1fa9060240160206040518083038186803b15801561200f57600080fd5b505afa158015612023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120479190612b79565b61205290600a612f02565b6120629063ffffffff8716612fd3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015261ffff90911660248301526044820152606401611e5b565b6000825167ffffffffffffffff8111156120e057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612109578160200160208202803683370190505b50905060005b835181101561223e578263ffffffff167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f96080a686848151811061216e57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161219c919061ffff91909116815260200190565b60206040518083038186803b1580156121b457600080fd5b505afa1580156121c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ec9190612b79565b6121f790600a612f02565b6122019190612fd3565b82828151811061222157634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061223681613037565b91505061210f565b506040517f2d0f97e70000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632d0f97e7906122a890879087908690600401612c31565b600060405180830381600087803b1580156122c257600080fd5b505af11580156122d6573d6000803e3d6000fd5b5050505050505050565b6060815167ffffffffffffffff81111561230a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612333578160200160208202803683370190505b50905060005b82518110156124a95760006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663aff5d1fa61237e846001612ea4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261ffff909116600482015260240160206040518083038186803b1580156123d057600080fd5b505afa1580156123e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124089190612b79565b61241390600a612f02565b9050600160189054906101000a900463ffffffff1663ffffffff168185848151811061244f57634e487b7160e01b600052603260045260246000fd5b60200260200101516124619190612fd3565b61246b9190612fd3565b83838151811061248b57634e487b7160e01b600052603260045260246000fd5b602090810291909101015250806124a181613037565b915050612339565b50919050565b6060815167ffffffffffffffff8111156124d957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612502578160200160208202803683370190505b50905060005b82518110156124a95760006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f96080a661254d846001612ea4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261ffff909116600482015260240160206040518083038186803b15801561259f57600080fd5b505afa1580156125b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d79190612b79565b6125e290600a612f02565b9050600160149054906101000a900463ffffffff1663ffffffff168185848151811061261e57634e487b7160e01b600052603260045260246000fd5b60200260200101516126309190612fd3565b61263a9190612fd3565b83838151811061265a57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152508061267081613037565b915050612508565b80356001600160a01b038116811461073c57600080fd5b60008083601f8401126126a0578182fd5b50813567ffffffffffffffff8111156126b7578182fd5b60208301915083602080830285010111156126d157600080fd5b9250929050565b600060a082840312156124a9578081fd5b803561ffff8116811461073c57600080fd5b60006020828403121561270c578081fd5b61072382612678565b60008060408385031215612727578081fd5b61273083612678565b915060208301358015158114612744578182fd5b809150509250929050565b60006020808385031215612761578182fd5b825167ffffffffffffffff811115612777578283fd5b8301601f81018513612787578283fd5b805161279a61279582612e5a565b612e29565b81815283810190838501858402850186018910156127b6578687fd5b8694505b838510156127d85780518352600194909401939185019185016127ba565b50979650505050505050565b600080604083850312156127f6578182fd5b67ffffffffffffffff8335111561280b578182fd5b61281884843585016126d8565b915067ffffffffffffffff60208401351115612832578081fd5b6020830135830184601f820112612847578182fd5b6128546127958235612e5a565b81358152602080820191908301845b843581101561294857813585016040601f19828c03011215612883578687fd5b61288d6040612e29565b67ffffffffffffffff602083013511156128a5578788fd5b602082013582018b603f8201126128ba578889fd5b60208101356128cb61279582612e5a565b80828252602082019150604084018f60406020860287010111156128ed578c8dfd5b8c94505b8385101561291757612902816126e9565b835260019490940193602092830192016128f1565b5084525061292a915050604083016126e9565b60208281019190915290865294850194929092019150600101612863565b509497909650945050505050565b60008060408385031215612968578182fd5b823567ffffffffffffffff81111561297e578283fd5b61298a858286016126d8565b925050612999602084016126e9565b90509250929050565b600080600080606085870312156129b7578182fd5b843567ffffffffffffffff808211156129ce578384fd5b6129da888389016126d8565b95506129e8602088016126e9565b945060408701359150808211156129fd578384fd5b50612a0a8782880161268f565b95989497509550505050565b600080600080600060808688031215612a2d578081fd5b853567ffffffffffffffff80821115612a44578283fd5b612a5089838a016126d8565b9650612a5e602089016126e9565b95506040880135915080821115612a73578283fd5b50612a808882890161268f565b96999598509660600135949350505050565b60008060408385031215612aa4578182fd5b823567ffffffffffffffff811115612aba578283fd5b612ac6858286016126d8565b95602094909401359450505050565b600060208284031215612ae6578081fd5b610723826126e9565b60008060408385031215612b01578182fd5b612b0a836126e9565b946020939093013593505050565b600060208284031215612b29578081fd5b5051919050565b600060208284031215612b41578081fd5b813563ffffffff81168114610723578182fd5b600060208284031215612b65578081fd5b813564ffffffffff81168114610723578182fd5b600060208284031215612b8a578081fd5b815160ff81168114610723578182fd5b6000815180845260208085019450808401835b83811015612bcd57815161ffff1687529582019590820190600101612bad565b509495945050505050565b6000815180845260208085019450808401835b83811015612bcd57815187529582019590820190600101612beb565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60006001600160a01b038516825260606020830152612c536060830185612b9a565b8281036040840152610f548185612bd8565b60006001600160a01b03808a16835264ffffffffff8916602084015287604084015260e06060840152612c9b60e0840188612bd8565b83810380608086015283825282881660a08601526020810160c086015250612cc7602082018688612c07565b9b9a5050505050505050505050565b60006001600160a01b03808a16835264ffffffffff8916602084015287604084015286606084015280861660808401525060c060a0830152612d1c60c083018486612c07565b9998505050505050505050565b6000602082526107236020830184612bd8565b600060608201868352602061ffff808816828601526060604086015282868452608086019050879350845b87811015612d8c5782612d79866126e9565b1682529383019390830190600101612d67565b509998505050505050505050565b600084825261ffff8416602083015260606040830152612dbd6060830184612b9a565b95945050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612dfa578283fd5b83018035915067ffffffffffffffff821115612e14578283fd5b6020019150368190038213156126d157600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612e5257612e52613068565b604052919050565b600067ffffffffffffffff821115612e7457612e74613068565b5060209081020190565b600061ffff808316818516808303821115612e9b57612e9b613052565b01949350505050565b60008219821115612eb757612eb7613052565b500190565b80825b6001808611612ece5750612ef9565b818704821115612ee057612ee0613052565b80861615612eed57918102915b9490941c938002612ebf565b94509492505050565b600061072360001960ff851684600082612f1e57506001610723565b81612f2b57506000610723565b8160018114612f415760028114612f4b57612f78565b6001915050610723565b60ff841115612f5c57612f5c613052565b6001841b915084821115612f7257612f72613052565b50610723565b5060208310610133831016604e8410600b8410161715612fab575081810a83811115612fa657612fa6613052565b610723565b612fb88484846001612ebc565b808604821115612fca57612fca613052565b02949350505050565b6000816000190483118215151615612fed57612fed613052565b500290565b600061ffff8381169083168181101561300d5761300d613052565b039392505050565b600061ffff8083168181141561302d5761302d613052565b6001019392505050565b600060001982141561304b5761304b613052565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212204dfcf9c99985d76e3e16c1c431c7f8980d29d0e4099c32378b37a613433f645764736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "assetERC1155": ": Asset ERC1155 Token Contract",
          "assetERC721": ": Asset ERC721 Token Contract",
          "gemsCatalystsRegistry": ": that track the canonical catalyst and gems and provide batch burning facility",
          "registry": ": AssetAttributesRegistry for recording catalyst and gems used",
          "trustedForwarder": ": address of the trusted forwarder (used for metaTX)"
        }
      },
      "mintCustomNumberWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[],uint256)": {
        "params": {
          "catalystId": "Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).",
          "gemIds": "list of gem ids to burn in the catalyst.",
          "mintData": "(-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)",
          "quantity": "number of token to mint"
        },
        "returns": {
          "assetId": "The new token Id."
        }
      },
      "mintCustomNumberWithoutCatalyst((address,address,uint40,bytes32,bytes),uint256)": {
        "params": {
          "mintData": "(-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)",
          "quantity": "number of token to mint"
        },
        "returns": {
          "assetId": "The new token Id."
        }
      },
      "mintMultipleWithCatalyst((address,address,uint40,bytes32,bytes),(uint16[],uint16)[])": {
        "params": {
          "assets": "data (gems and catalyst data)",
          "mintData": "contains (-from address creating the Asset, need to be the tx sender or meta tx signer -packId unused packId that will let you predict the resulting tokenId -metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata)"
        }
      },
      "mintWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[])": {
        "params": {
          "catalystId": "Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).",
          "gemIds": "list of gem ids to burn in the catalyst.",
          "mintData": ": (-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)"
        },
        "returns": {
          "assetId": "The new token Id."
        }
      },
      "mintWithoutCatalyst((address,address,uint40,bytes32,bytes),uint16)": {
        "params": {
          "mintData": ": (-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)",
          "typeAsset1Based": "(art, prop...) decide how many asset will be minted (start at 1)"
        },
        "returns": {
          "assetId": "The new token Id."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "AssetMinter depends on"
      },
      "mintCustomNumberWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[],uint256)": {
        "notice": "mint \"quantity\" number of Asset token using one catalyst."
      },
      "mintCustomNumberWithoutCatalyst((address,address,uint40,bytes32,bytes),uint256)": {
        "notice": "mint \"quantity\" number of Asset token without using a catalyst."
      },
      "mintMultipleWithCatalyst((address,address,uint40,bytes32,bytes),(uint16[],uint16)[])": {
        "notice": "mint multiple Asset tokens."
      },
      "mintWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[])": {
        "notice": "mint multiple Asset tokens using one catalyst."
      },
      "mintWithoutCatalyst((address,address,uint40,bytes32,bytes),uint16)": {
        "notice": "mint one Asset token with no catalyst."
      }
    },
    "notice": "Allow to mint Asset with Catalyst, Gems and Sand, giving the assets attributes through AssetAttributeRegistry",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29507,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 389,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12992,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "numberOfGemsBurnPerAsset",
        "offset": 20,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 12995,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "numberOfCatalystBurnPerAsset",
        "offset": 24,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 13011,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "quantitiesByCatalystId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 13015,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "quantitiesByAssetTypeId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 13019,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "customMinterAllowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}