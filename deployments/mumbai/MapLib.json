{
  "address": "0x058661Abb011d3E7C70475a5956856DFd81235C9",
  "abi": [],
  "transactionHash": "0xc3edd50aae6c879bf76974c522e7374c6bda11ba6baa8caa9220aeb50efc1bfb",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x058661Abb011d3E7C70475a5956856DFd81235C9",
    "transactionIndex": 28,
    "gasUsed": "3936689",
    "logsBloom": "0x
    "blockHash": "0x527856d6871616921c338e9fd029fc32e033d6df641af6d7ecfdaefbf91c6668",
    "transactionHash": "0xc3edd50aae6c879bf76974c522e7374c6bda11ba6baa8caa9220aeb50efc1bfb",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 29280816,
        "transactionHash": "0xc3edd50aae6c879bf76974c522e7374c6bda11ba6baa8caa9220aeb50efc1bfb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001486ddc67d780000000000000000000000000000000000000000000000001cd493e25072222bda0000000000000000000000000000000000000000000008ce7a0c77789b81fdeb00000000000000000000000000000000000000000000001cd47f5b72aba4b3da0000000000000000000000000000000000000000000008ce7a20fe5661ff75eb",
        "logIndex": 80,
        "blockHash": "0x527856d6871616921c338e9fd029fc32e033d6df641af6d7ecfdaefbf91c6668"
      }
    ],
    "blockNumber": 29280816,
    "cumulativeGasUsed": "6821809",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4c06a45491642fde82be8c463b1bd17f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"The key of the mapping is a combination of x and y.This library try to reduce the gas consumption and to do that it accesses the internal structure of the Tiles\",\"kind\":\"dev\",\"methods\":{\"assign(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"params\":{\"self\":\"the Map in which the bits are set\",\"tile\":\"the tile that is used to assign the bits inside the map\"}},\"assign(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"params\":{\"self\":\"the Map in which the bits are set\",\"tiles\":\"the list of TileWithCoord\"}},\"at(MapLib.Map storage,uint256)\":{\"details\":\"used to iterate off-chain over the tiles.\",\"params\":{\"index\":\"the index of the tile\",\"self\":\"the Map\"},\"returns\":{\"_0\":\"the tile that is in the position index in the list\"}},\"at(MapLib.Map storage,uint256,uint256)\":{\"details\":\"used to iterate off-chain over the tiles.\",\"params\":{\"limit\":\"amount of tiles to get\",\"offset\":\"initial offset used to paginate\",\"self\":\"the Map\"},\"returns\":{\"_0\":\"the partial list of tiles\"}},\"clear(MapLib.Map storage)\":{\"params\":{\"self\":\"the Map in which the bits are cleared\"}},\"clear(MapLib.Map storage,MapLib.Map storage)\":{\"params\":{\"other\":\"the map that is used as source to clear the bits in the current one\",\"self\":\"the Map in which the bits are cleared\"}},\"clear(MapLib.Map storage,MapLib.TranslateResult)\":{\"params\":{\"s\":\"translation result, the result of a translation of a tile are four tiles.\",\"self\":\"the Map in which the bits are cleared\"}},\"clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"params\":{\"self\":\"the Map, in which the bits will be cleared\",\"tile\":\"the tile that is used to clear the bits inside the map\"},\"returns\":{\"_0\":\"false if the the coordinates are not found so the bits are already cleared\"}},\"clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"params\":{\"self\":\"the Map in which the bits are cleared\",\"tiles\":\"the list of TileWithCoord\"}},\"clear(MapLib.Map storage,uint256,uint256,uint256)\":{\"details\":\"the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\",\"params\":{\"self\":\"the Map, in which the bits will be cleared\",\"size\":\"the size of the square\",\"x\":\"the x coordinate of the square\",\"y\":\"the y coordinate of the square\"},\"returns\":{\"_0\":\"false if the the coordinates are not found so the bits are already cleared\"}},\"contain(MapLib.Map storage,MapLib.Map storage)\":{\"details\":\"self can be huge, but other must be small, we iterate over other values.\",\"params\":{\"other\":\"the Map that must be included\",\"self\":\"the Map that is checked for inclusion\"},\"returns\":{\"_0\":\"true if self contain other Map\"}},\"contain(MapLib.Map storage,MapLib.TranslateResult)\":{\"details\":\"this routine is used to match an experience template after translation\",\"params\":{\"s\":\"the translation result that must be included\",\"self\":\"the bigger Tile that is checked for inclusion\"},\"returns\":{\"_0\":\"true if self contain all the bits in the translation result\"}},\"contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"params\":{\"self\":\"the Map that is checked for inclusion\",\"tile\":\"the TileWithCoord that must be included\"},\"returns\":{\"_0\":\"true if self contain tile TileWithCoord\"}},\"contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"params\":{\"self\":\"the Map that is checked for inclusion\",\"tiles\":\"the TileWithCoord that must be included\"},\"returns\":{\"_0\":\"true if self contain tiles TileWithCoord[]\"}},\"contain(MapLib.Map storage,uint256,uint256)\":{\"params\":{\"self\":\"the Map where the check is done\",\"x\":\"the x coordinate\",\"y\":\"the  coordinate\"},\"returns\":{\"_0\":\"true if the x,y coordinate bit is set or false if it is cleared\"}},\"contain(MapLib.Map storage,uint256,uint256,uint256)\":{\"details\":\"the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\",\"params\":{\"self\":\"the Map where the check is done\",\"size\":\"the size of the square\",\"x\":\"the x coordinate of the square\",\"y\":\"the y coordinate of the square\"},\"returns\":{\"_0\":\"true if al the bits are set or false if at least one bit is cleared\"}},\"floodStep(MapLib.Map storage,TileLib.Tile[])\":{\"params\":{\"current\":\"the current image\",\"self\":\"the map\"},\"returns\":{\"done\":\"true if the current image is the same as the next one so the algorithm is ready to stop flooding.\",\"next\":\"return the image with the extra pixels that correspond to the flooding process\"}},\"get(MapLib.Map storage,uint256,uint256)\":{\"params\":{\"self\":\"the map\",\"x\":\"the x coordinate of the square\",\"y\":\"the y coordinate of the square\"},\"returns\":{\"found\":\"true if the tile inside the map wad found\",\"tile\":\"the tile with coords inside the map\"}},\"getLandCount(MapLib.Map storage)\":{\"params\":{\"self\":\"the map\"},\"returns\":{\"_0\":\"the quantity of lands\"}},\"getLandCount(MapLib.Map storage,uint256,uint256,uint256)\":{\"details\":\"the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\",\"params\":{\"self\":\"the map\",\"size\":\"the size of the square\",\"x\":\"the x coordinate of the square\",\"y\":\"the y coordinate of the square\"},\"returns\":{\"_0\":\"the quantity of lands\"}},\"getMap(MapLib.Map storage)\":{\"details\":\"Use only for testing. This can be problematic if it grows too much !!!\",\"params\":{\"self\":\"the map\"},\"returns\":{\"_0\":\"the list of internal tiles\"}},\"intersect(MapLib.Map storage,MapLib.Map storage)\":{\"details\":\"self can be huge, but other must be small, we iterate over other values.\",\"params\":{\"other\":\"the Map that must be included\",\"self\":\"the Map that is checked for inclusion\"},\"returns\":{\"_0\":\"true if there is at least one bit set in both Maps\"}},\"intersect(MapLib.Map storage,MapLib.TranslateResult)\":{\"params\":{\"s\":\"the four tiles that are the result of a translation\",\"self\":\"the Map to compare\"},\"returns\":{\"_0\":\"true if there is at least one bit set in both the Map and the TranslationResult\"}},\"intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"params\":{\"self\":\"the Map to compare\",\"tile\":\"the TileWithCoord to compare\"},\"returns\":{\"_0\":\"true if there is at least one bit set in both the Map and the TileWithCoord\"}},\"intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"params\":{\"self\":\"the Map that is checked for inclusion\",\"tiles\":\"the TileWithCoord that must be included\"},\"returns\":{\"_0\":\"true if there is at least one bit set in both the Map and the TileWithCoord[]\"}},\"intersect(MapLib.Map storage,uint256,uint256,uint256)\":{\"details\":\"the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\",\"params\":{\"self\":\"the Map where the check is done\",\"size\":\"the size of the square\",\"x\":\"the x coordinate of the square\",\"y\":\"the y coordinate of the square\"},\"returns\":{\"_0\":\"true if there is at least one bit set in both the Map and the square\"}},\"isAdjacent(MapLib.Map storage)\":{\"details\":\"Checks the full map to see if all the pixels are adjacent\",\"params\":{\"self\":\"the map\"},\"returns\":{\"ret\":\"true if all the bits (lands) are adjacent\"}},\"isAdjacent(MapLib.Map storage,uint256,uint256,uint256)\":{\"details\":\"used to add a quad to a map, it is cheaper than isAdjacent(map)\",\"params\":{\"self\":\"the map\",\"size\":\"the size of the square\",\"x\":\"the x coordinate of the square\",\"y\":\"the y coordinate of the square\"},\"returns\":{\"_0\":\"true if the square is 4-connected to the map\"}},\"isEmpty(MapLib.Map storage)\":{\"params\":{\"self\":\"the Map to check\"},\"returns\":{\"_0\":\"true if the map is empty\"}},\"isEqual(MapLib.Map storage,MapLib.Map storage)\":{\"params\":{\"other\":\"the second Map to check\",\"self\":\"the first Map to check\"},\"returns\":{\"_0\":\"true if the two maps are equal\"}},\"isEqual(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"params\":{\"other\":\"the list of TileWithCoord to check\",\"self\":\"the Map to check\"},\"returns\":{\"_0\":\"true if the two are equal\"}},\"length(MapLib.Map storage)\":{\"details\":\"used to iterate off-chain over the tiles.\",\"params\":{\"self\":\"the Map\"},\"returns\":{\"_0\":\"the length of the list\"}},\"set(MapLib.Map storage,MapLib.Map storage)\":{\"params\":{\"other\":\"the map that is used as source to set the bits in the current one\",\"self\":\"the Map in which the bits are set\"}},\"set(MapLib.Map storage,MapLib.TranslateResult)\":{\"params\":{\"s\":\"translation result, the result of a translation of a tile are four tiles.\",\"self\":\"the Map in which the bits are set\"}},\"set(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"params\":{\"self\":\"the Map in which the bits are set\",\"tile\":\"the tile that is used to set the bits inside the map\"}},\"set(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"params\":{\"self\":\"the Map in which the bits are set\",\"tiles\":\"the list of TileWithCoord\"}},\"set(MapLib.Map storage,uint256,uint256,uint256)\":{\"details\":\"the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\",\"params\":{\"self\":\"the Map in which the bits are set\",\"size\":\"the size of the square\",\"x\":\"the x coordinate of the square\",\"y\":\"the y coordinate of the square\"}}},\"title\":\"An iterable mapping of Tiles (24x24 bit set).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assign(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"notice\":\"Given a TileWithCoord set the values of this tile in the map to the given one\"},\"assign(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"notice\":\"Set the values of a list of TileWithCoord in the current one\"},\"at(MapLib.Map storage,uint256)\":{\"notice\":\"get the tile that is in certain position in the internal list of tiles\"},\"at(MapLib.Map storage,uint256,uint256)\":{\"notice\":\"get the internal list of tiles with pagination\"},\"clear(MapLib.Map storage)\":{\"notice\":\"Clear the all the bits in the map\"},\"clear(MapLib.Map storage,MapLib.Map storage)\":{\"notice\":\"Clear the bits of another map in the current one\"},\"clear(MapLib.Map storage,MapLib.TranslateResult)\":{\"notice\":\"Given a translation of a tile the corresponding bits are cleared in the current map\"},\"clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"notice\":\"Given a TileWithCoord (a tile that includes coordinates inside it) clear the corresponding bits in the map\"},\"clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"notice\":\"Clear the bits of a list of TileWithCoord\"},\"clear(MapLib.Map storage,uint256,uint256,uint256)\":{\"notice\":\"Clear the bits inside a square that has size x size in the x,y coordinates in the map\"},\"contain(MapLib.Map storage,MapLib.Map storage)\":{\"notice\":\"Check if a Map includes all the bits that are set in another Map\"},\"contain(MapLib.Map storage,MapLib.TranslateResult)\":{\"notice\":\"Check if a Map includes all the bits that are set in translation result\"},\"contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"notice\":\"Check if a Map includes all the bits that are set in a TileWithCoord\"},\"contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"notice\":\"Check if a Map includes all the bits that are set in a TileWithCoord[]\"},\"contain(MapLib.Map storage,uint256,uint256)\":{\"notice\":\"Check if the bit in certain coordinate are set or not inside the map\"},\"contain(MapLib.Map storage,uint256,uint256,uint256)\":{\"notice\":\"Check if the all the bits of a square inside the Map are set or not\"},\"floodStep(MapLib.Map storage,TileLib.Tile[])\":{\"notice\":\"used to check adjacency. See: https://en.wikipedia.org/wiki/Flood_fill and isAdjacent.\"},\"get(MapLib.Map storage,uint256,uint256)\":{\"notice\":\"return a tile from the Map by his coordinates\"},\"getLandCount(MapLib.Map storage)\":{\"notice\":\"count the amount of bits (lands) set inside a Map\"},\"getLandCount(MapLib.Map storage,uint256,uint256,uint256)\":{\"notice\":\"count the amount of bits (lands) set inside a Map filtered by quad\"},\"getMap(MapLib.Map storage)\":{\"notice\":\"return the internal list of tiles\"},\"intersect(MapLib.Map storage,MapLib.Map storage)\":{\"notice\":\"Check if a Map includes any of the bits that are set in another Map\"},\"intersect(MapLib.Map storage,MapLib.TranslateResult)\":{\"notice\":\"Check if a map has at least one bit in common with some translation result\"},\"intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"notice\":\"Check if a map has at least one bit in common with some TileWithCoord\"},\"intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"notice\":\"Check if a Map has at least one of the bits that are set in a TileWithCoord[]\"},\"intersect(MapLib.Map storage,uint256,uint256,uint256)\":{\"notice\":\"Check if a map has at least one bit in common with a square (x,y,size)\"},\"isAdjacent(MapLib.Map storage)\":{\"notice\":\"check that the map has only one 4-connected component, aka everything is adjacent\"},\"isAdjacent(MapLib.Map storage,uint256,uint256,uint256)\":{\"notice\":\"check if a square is adjacent (4-connected component) to the current map.\"},\"isEmpty(MapLib.Map storage)\":{\"notice\":\"Check if a map is empty (no bits are set)\"},\"isEqual(MapLib.Map storage,MapLib.Map storage)\":{\"notice\":\"Check if two maps are equal\"},\"isEqual(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"notice\":\"Check if a map is equal to an array of TileWithCoord\"},\"length(MapLib.Map storage)\":{\"notice\":\"return the length of the internal list of tiles\"},\"set(MapLib.Map storage,MapLib.Map storage)\":{\"notice\":\"Merge the bits of another map in the current one\"},\"set(MapLib.Map storage,MapLib.TranslateResult)\":{\"notice\":\"Given a translation of a tile the corresponding bits are set in the current map\"},\"set(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"notice\":\"Given a TileWithCoord (a tile that includes coordinates inside it) set the corresponding bits in the map\"},\"set(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"notice\":\"Merge the bits of a list of TileWithCoord in the current one\"},\"set(MapLib.Map storage,uint256,uint256,uint256)\":{\"notice\":\"Set the bits inside a square that has size x size in the x,y coordinates in the map\"}},\"notice\":\"Used to represent a the presence or absence of certain x,y coordinate in a map of lands\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/common/Libraries/MapLib.sol\":\"MapLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/solc_0.8/common/Libraries/MapLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/* solhint-disable code-complexity */\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {TileWithCoordLib} from \\\"./TileWithCoordLib.sol\\\";\\nimport {TileLib} from \\\"./TileLib.sol\\\";\\n\\n/// @title An iterable mapping of Tiles (24x24 bit set).\\n/// @notice Used to represent a the presence or absence of certain x,y coordinate in a map of lands\\n/// @dev The key of the mapping is a combination of x and y.\\n/// @dev This library try to reduce the gas consumption and to do that it accesses the internal structure of the Tiles\\nlibrary MapLib {\\n    using TileWithCoordLib for TileWithCoordLib.TileWithCoord;\\n    using TileLib for TileLib.Tile;\\n\\n    uint256 private constant LEFT_MASK = 0x000001000001000001000001000001000001000001000001;\\n    uint256 private constant LEFT_MASK_NEG = ~LEFT_MASK;\\n    uint256 private constant RIGHT_MASK = 0x800000800000800000800000800000800000800000800000;\\n    uint256 private constant RIGHT_MASK_NEG = ~RIGHT_MASK;\\n    uint256 private constant UP_MASK = 0x000000000000000000000000000000000000000000FFFFFF;\\n    uint256 private constant DOWN_MASK = 0xFFFFFF000000000000000000000000000000000000000000;\\n\\n    struct TranslateResult {\\n        TileWithCoordLib.TileWithCoord topLeft;\\n        TileWithCoordLib.TileWithCoord topRight;\\n        TileWithCoordLib.TileWithCoord bottomLeft;\\n        TileWithCoordLib.TileWithCoord bottomRight;\\n    }\\n\\n    // An iterable mapping of tiles (24x24 bit set).\\n    struct Map {\\n        TileWithCoordLib.TileWithCoord[] values;\\n        // Position of the value in the `values` array, plus 1 because index 0 means that the key is not found.\\n        mapping(uint256 => uint256) indexes;\\n    }\\n\\n    /// @notice Set the bits inside a square that has size x size in the x,y coordinates in the map\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map in which the bits are set\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    function set(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            // Add a new tile\\n            TileWithCoordLib.TileWithCoord memory t = TileWithCoordLib.init(x, y);\\n            self.values.push(t.set(x, y, size));\\n            self.indexes[key] = self.values.length;\\n        } else {\\n            // contains\\n            self.values[idx - 1] = self.values[idx - 1].set(x, y, size);\\n        }\\n    }\\n\\n    /// @notice Given a translation of a tile the corresponding bits are set in the current map\\n    /// @param self the Map in which the bits are set\\n    /// @param s translation result, the result of a translation of a tile are four tiles.\\n    function set(Map storage self, TranslateResult memory s) public {\\n        set(self, s.topLeft);\\n        set(self, s.topRight);\\n        set(self, s.bottomLeft);\\n        set(self, s.bottomRight);\\n    }\\n\\n    /// @notice Given a TileWithCoord (a tile that includes coordinates inside it) set the corresponding bits in the map\\n    /// @param self the Map in which the bits are set\\n    /// @param tile the tile that is used to set the bits inside the map\\n    function set(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public {\\n        if (tile.isEmpty()) {\\n            return;\\n        }\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            // Add a new tile\\n            self.values.push(tile);\\n            self.indexes[key] = self.values.length;\\n        } else {\\n            self.values[idx - 1] = self.values[idx - 1].merge(tile);\\n        }\\n    }\\n\\n    /// @notice Merge the bits of a list of TileWithCoord in the current one\\n    /// @param self the Map in which the bits are set\\n    /// @param tiles the list of TileWithCoord\\n    function set(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            set(self, tiles[i]);\\n        }\\n    }\\n\\n    /// @notice Merge the bits of another map in the current one\\n    /// @param self the Map in which the bits are set\\n    /// @param other the map that is used as source to set the bits in the current one\\n    function set(Map storage self, Map storage other) public {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            set(self, other.values[i]);\\n        }\\n    }\\n\\n    /// @notice Clear the bits inside a square that has size x size in the x,y coordinates in the map\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map, in which the bits will be cleared\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return false if the the coordinates are not found so the bits are already cleared\\n    function clear(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains, nothing to clear\\n            return false;\\n        }\\n        TileWithCoordLib.TileWithCoord memory t = self.values[idx - 1].clear(x, y, size);\\n        if (t.isEmpty()) {\\n            _remove(self, idx, key);\\n        } else {\\n            self.values[idx - 1] = t;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Given a translation of a tile the corresponding bits are cleared in the current map\\n    /// @param self the Map in which the bits are cleared\\n    /// @param s translation result, the result of a translation of a tile are four tiles.\\n    function clear(Map storage self, TranslateResult memory s) public {\\n        clear(self, s.topLeft);\\n        clear(self, s.topRight);\\n        clear(self, s.bottomLeft);\\n        clear(self, s.bottomRight);\\n    }\\n\\n    /// @notice Given a TileWithCoord (a tile that includes coordinates inside it) clear the corresponding bits in the map\\n    /// @param self the Map, in which the bits will be cleared\\n    /// @param tile the tile that is used to clear the bits inside the map\\n    /// @return false if the the coordinates are not found so the bits are already cleared\\n    function clear(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public returns (bool) {\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        TileWithCoordLib.TileWithCoord memory t = self.values[idx - 1].clear(tile);\\n        if (t.isEmpty()) {\\n            _remove(self, idx, key);\\n        } else {\\n            self.values[idx - 1] = t;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Clear the bits of a list of TileWithCoord\\n    /// @param self the Map in which the bits are cleared\\n    /// @param tiles the list of TileWithCoord\\n    function clear(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            clear(self, tiles[i]);\\n        }\\n    }\\n\\n    /// @notice Clear the bits of another map in the current one\\n    /// @param self the Map in which the bits are cleared\\n    /// @param other the map that is used as source to clear the bits in the current one\\n    function clear(Map storage self, Map storage other) public {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            clear(self, other.values[i]);\\n        }\\n    }\\n\\n    /// @notice Clear the all the bits in the map\\n    /// @param self the Map in which the bits are cleared\\n    function clear(Map storage self) public {\\n        for (uint256 i; i < self.values.length; i++) {\\n            delete self.indexes[self.values[i].getKey()];\\n        }\\n        delete self.values;\\n    }\\n\\n    /// @notice Given a TileWithCoord set the values of this tile in the map to the given one\\n    /// @param self the Map in which the bits are set\\n    /// @param tile the tile that is used to assign the bits inside the map\\n    function assign(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public {\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (tile.isEmpty()) {\\n            if (idx == 0) {\\n                // !contains\\n                return;\\n            }\\n            _remove(self, idx, key);\\n            return;\\n        }\\n        if (idx == 0) {\\n            // !contains\\n            // Add a new tile\\n            self.values.push(tile);\\n            self.indexes[key] = self.values.length;\\n        } else {\\n            self.values[idx - 1] = tile;\\n        }\\n    }\\n\\n    /// @notice Set the values of a list of TileWithCoord in the current one\\n    /// @param self the Map in which the bits are set\\n    /// @param tiles the list of TileWithCoord\\n    function assign(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            assign(self, tiles[i]);\\n        }\\n    }\\n\\n    /// @notice given a tile, translate all the bits in the x and y direction\\n    /// @dev the result of the translation are four tiles\\n    /// @param deltaX the x distance to translate\\n    /// @param deltaY the y distance to translate\\n    /// @return four tiles with coords that are the result of the translation\\n    function translate(\\n        TileLib.Tile memory tile,\\n        uint256 deltaX,\\n        uint256 deltaY\\n    ) internal pure returns (TranslateResult memory) {\\n        (uint256[6] memory col1, uint256[6] memory col2) = tile.translate(deltaX % 24, deltaY % 24);\\n        return\\n            TranslateResult({\\n                topLeft: TileWithCoordLib.init(deltaX, deltaY, col1[0], col1[1], col1[2]),\\n                bottomLeft: TileWithCoordLib.init(deltaX, deltaY + 24, col1[3], col1[4], col1[5]),\\n                topRight: TileWithCoordLib.init(deltaX + 24, deltaY, col2[0], col2[1], col2[2]),\\n                bottomRight: TileWithCoordLib.init(deltaX + 24, deltaY + 24, col2[3], col2[4], col2[5])\\n            });\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate are set or not inside the map\\n    /// @param self the Map where the check is done\\n    /// @param x the x coordinate\\n    /// @param y the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function contain(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y\\n    ) public view returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].contain(x, y);\\n    }\\n\\n    /// @notice Check if the all the bits of a square inside the Map are set or not\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if al the bits are set or false if at least one bit is cleared\\n    function contain(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public view returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].contain(x, y, size);\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in a TileWithCoord\\n    /// @param self the Map that is checked for inclusion\\n    /// @param tile the TileWithCoord that must be included\\n    /// @return true if self contain tile TileWithCoord\\n    function contain(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public view returns (bool) {\\n        if (tile.isEmpty()) {\\n            return true;\\n        }\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].tile.contain(tile.tile);\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in a TileWithCoord[]\\n    /// @param self the Map that is checked for inclusion\\n    /// @param tiles the TileWithCoord that must be included\\n    /// @return true if self contain tiles TileWithCoord[]\\n    function contain(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public view returns (bool) {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            if (!contain(self, tiles[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in translation result\\n    /// @dev this routine is used to match an experience template after translation\\n    /// @param self the bigger Tile that is checked for inclusion\\n    /// @param s the translation result that must be included\\n    /// @return true if self contain all the bits in the translation result\\n    function contain(Map storage self, TranslateResult memory s) public view returns (bool) {\\n        return\\n            contain(self, s.topLeft) &&\\n            contain(self, s.topRight) &&\\n            contain(self, s.bottomLeft) &&\\n            contain(self, s.bottomRight);\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in another Map\\n    /// @dev self can be huge, but other must be small, we iterate over other values.\\n    /// @param self the Map that is checked for inclusion\\n    /// @param other the Map that must be included\\n    /// @return true if self contain other Map\\n    function contain(Map storage self, Map storage other) public view returns (bool) {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            if (!contain(self, other.values[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if a map has at least one bit in common with a square (x,y,size)\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if there is at least one bit set in both the Map and the square\\n    function intersect(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public view returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !intersect\\n            return false;\\n        }\\n        return self.values[idx - 1].intersect(x, y, size);\\n    }\\n\\n    /// @notice Check if a map has at least one bit in common with some TileWithCoord\\n    /// @param self the Map to compare\\n    /// @param tile the TileWithCoord to compare\\n    /// @return true if there is at least one bit set in both the Map and the TileWithCoord\\n    function intersect(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public view returns (bool) {\\n        if (tile.isEmpty()) {\\n            return false;\\n        }\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].tile.intersect(tile.tile);\\n    }\\n\\n    /// @notice Check if a Map has at least one of the bits that are set in a TileWithCoord[]\\n    /// @param self the Map that is checked for inclusion\\n    /// @param tiles the TileWithCoord that must be included\\n    /// @return true if there is at least one bit set in both the Map and the TileWithCoord[]\\n    function intersect(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public view returns (bool) {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            if (intersect(self, tiles[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Check if a map has at least one bit in common with some translation result\\n    /// @param self the Map to compare\\n    /// @param s the four tiles that are the result of a translation\\n    /// @return true if there is at least one bit set in both the Map and the TranslationResult\\n    function intersect(Map storage self, TranslateResult memory s) public view returns (bool) {\\n        return\\n            intersect(self, s.topLeft) ||\\n            intersect(self, s.topRight) ||\\n            intersect(self, s.bottomLeft) ||\\n            intersect(self, s.bottomRight);\\n    }\\n\\n    /// @notice Check if a Map includes any of the bits that are set in another Map\\n    /// @dev self can be huge, but other must be small, we iterate over other values.\\n    /// @param self the Map that is checked for inclusion\\n    /// @param other the Map that must be included\\n    /// @return true if there is at least one bit set in both Maps\\n    function intersect(Map storage self, Map storage other) public view returns (bool) {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            if (intersect(self, other.values[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Check if a map is empty (no bits are set)\\n    /// @param self the Map to check\\n    /// @return true if the map is empty\\n    function isEmpty(Map storage self) public view returns (bool) {\\n        // We remove the tiles when they are empty\\n        return self.values.length == 0;\\n    }\\n\\n    /// @notice Check if two maps are equal\\n    /// @param self the first Map to check\\n    /// @param other the second Map to check\\n    /// @return true if the two maps are equal\\n    function isEqual(Map storage self, Map storage other) public view returns (bool) {\\n        return isEqual(self, other.values);\\n    }\\n\\n    /// @notice Check if a map is equal to an array of TileWithCoord\\n    /// @param self the Map to check\\n    /// @param other the list of TileWithCoord to check\\n    /// @return true if the two are equal\\n    function isEqual(Map storage self, TileWithCoordLib.TileWithCoord[] memory other) public view returns (bool) {\\n        if (other.length != self.values.length) {\\n            return false;\\n        }\\n        uint256 cant = other.length;\\n        // Check that self contains the same set of tiles than other and they are equal\\n        for (uint256 i; i < cant; i++) {\\n            uint256 key = other[i].getKey();\\n            uint256 idx = self.indexes[key];\\n            if (idx == 0 || !self.values[idx - 1].isEqual(other[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice return the length of the internal list of tiles\\n    /// @dev used to iterate off-chain over the tiles.\\n    /// @param self the Map\\n    /// @return the length of the list\\n    function length(Map storage self) public view returns (uint256) {\\n        return self.values.length;\\n    }\\n\\n    /// @notice get the tile that is in certain position in the internal list of tiles\\n    /// @dev used to iterate off-chain over the tiles.\\n    /// @param self the Map\\n    /// @param index the index of the tile\\n    /// @return the tile that is in the position index in the list\\n    function at(Map storage self, uint256 index) public view returns (TileWithCoordLib.TileWithCoord memory) {\\n        return self.values[index];\\n    }\\n\\n    /// @notice get the internal list of tiles with pagination\\n    /// @dev used to iterate off-chain over the tiles.\\n    /// @param self the Map\\n    /// @param offset initial offset used to paginate\\n    /// @param limit amount of tiles to get\\n    /// @return the partial list of tiles\\n    function at(\\n        Map storage self,\\n        uint256 offset,\\n        uint256 limit\\n    ) public view returns (TileWithCoordLib.TileWithCoord[] memory) {\\n        TileWithCoordLib.TileWithCoord[] memory ret = new TileWithCoordLib.TileWithCoord[](limit);\\n        for (uint256 i; i < limit; i++) {\\n            ret[i] = self.values[offset + i];\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice return the internal list of tiles\\n    /// @dev Use only for testing. This can be problematic if it grows too much !!!\\n    /// @param self the map\\n    /// @return the list of internal tiles\\n    function getMap(Map storage self) public view returns (TileWithCoordLib.TileWithCoord[] memory) {\\n        return self.values;\\n    }\\n\\n    /// @notice count the amount of bits (lands) set inside a Map\\n    /// @param self the map\\n    /// @return the quantity of lands\\n    function getLandCount(Map storage self) public view returns (uint256) {\\n        uint256 ret;\\n        uint256 len = self.values.length;\\n        for (uint256 i; i < len; i++) {\\n            ret += self.values[i].countBits();\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice count the amount of bits (lands) set inside a Map filtered by quad\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the map\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return the quantity of lands\\n    function getLandCount(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public view returns (uint256) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            return 0;\\n        }\\n        TileLib.Tile memory t;\\n        return t.set(x, y, size).and(self.values[idx - 1].tile).countBits();\\n    }\\n\\n    /// @notice return a tile from the Map by his coordinates\\n    /// @param self the map\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @return found true if the tile inside the map wad found\\n    /// @return tile the tile with coords inside the map\\n    function get(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y\\n    ) public view returns (bool found, TileWithCoordLib.TileWithCoord memory tile) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx != 0) {\\n            tile = self.values[idx - 1];\\n            found = true;\\n        }\\n    }\\n\\n    /// @notice check if a square is adjacent (4-connected component) to the current map.\\n    /// @dev used to add a quad to a map, it is cheaper than isAdjacent(map)\\n    /// @param self the map\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if the square is 4-connected to the map\\n    function isAdjacent(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public view returns (bool) {\\n        if (isEmpty(self)) {\\n            return true;\\n        }\\n\\n        uint256 idx;\\n        TileLib.Tile memory spot;\\n        spot = spot.set(x % 24, y % 24, size);\\n        // left\\n        if (x >= 24) {\\n            idx = _getIdx(self, x - 24, y);\\n            if (idx != 0 && !self.values[idx - 1].tile.and(_growLeft(spot)).isEmpty()) {\\n                return true;\\n            }\\n        }\\n        // up\\n        if (y >= 24) {\\n            idx = _getIdx(self, x, y - 24);\\n            if (idx != 0 && (self.values[idx - 1].tile.data[0] & ((spot.data[0] & UP_MASK) << (24 * 7))) != 0) {\\n                return true;\\n            }\\n        }\\n        // middle\\n        idx = _getIdx(self, x, y);\\n        if (idx != 0 && !self.values[idx - 1].tile.and(_growMiddle(spot)).isEmpty()) {\\n            return true;\\n        }\\n        // down\\n        idx = _getIdx(self, x, y + 24);\\n        if (idx != 0 && (self.values[idx - 1].tile.data[2] & ((spot.data[2] & DOWN_MASK) >> (24 * 7))) != 0) {\\n            return true;\\n        }\\n        // right\\n        idx = _getIdx(self, x + 24, y);\\n        if (idx != 0 && !self.values[idx - 1].tile.and(_growRight(spot)).isEmpty()) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice check that the map has only one 4-connected component, aka everything is adjacent\\n    /// @dev Checks the full map to see if all the pixels are adjacent\\n    /// @param self the map\\n    /// @return ret true if all the bits (lands) are adjacent\\n    function isAdjacent(Map storage self) public view returns (bool ret) {\\n        if (isEmpty(self)) {\\n            // everything is adjacent to an empty map\\n            return true;\\n        }\\n\\n        TileLib.Tile[] memory spot = new TileLib.Tile[](self.values.length);\\n        // We assume that all self.values[] are non empty (we remove them if they are empty).\\n        spot[0] = self.values[0].tile.findAPixel();\\n        bool done;\\n        while (!done) {\\n            (spot, done) = floodStep(self, spot);\\n        }\\n        uint256 len = self.values.length;\\n        uint256 i;\\n        for (; i < len; i++) {\\n            // Check the tile ignoring coordinates\\n            if (!self.values[i].tile.isEqual(spot[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice used to check adjacency. See: https://en.wikipedia.org/wiki/Flood_fill and isAdjacent.\\n    /// @param self the map\\n    /// @param current the current image\\n    /// @return next return the image with the extra pixels that correspond to the flooding process\\n    /// @return done true if the current image is the same as the next one so the algorithm is ready to stop flooding.\\n    function floodStep(Map storage self, TileLib.Tile[] memory current)\\n        public\\n        view\\n        returns (TileLib.Tile[] memory next, bool done)\\n    {\\n        uint256 len = self.values.length;\\n        uint256 i;\\n        uint256 x;\\n        uint256 y;\\n        uint256 idx;\\n        TileLib.Tile memory ci;\\n        next = new TileLib.Tile[](len);\\n        // grow\\n        for (i; i < len; i++) {\\n            ci = current[i];\\n            // isEmpty\\n            if ((ci.data[0] | ci.data[1] | ci.data[2]) == 0) {\\n                continue;\\n            }\\n            x = self.values[i].getX() * 24;\\n            y = self.values[i].getY() * 24;\\n\\n            // middle, always included\\n            next[i].data[0] |= _grow(ci.data[0]) | ((ci.data[1] & UP_MASK) << (24 * 7));\\n            next[i].data[1] |=\\n                _grow(ci.data[1]) |\\n                ((ci.data[2] & UP_MASK) << (24 * 7)) |\\n                ((ci.data[0] & DOWN_MASK) >> (24 * 7));\\n            next[i].data[2] |= _grow(ci.data[2]) | ((ci.data[1] & DOWN_MASK) >> (24 * 7));\\n            // left\\n            if (x >= 24) {\\n                idx = _getIdx(self, x - 24, y);\\n                if (idx != 0) {\\n                    next[idx - 1].data[0] |= (ci.data[0] & LEFT_MASK) << 23;\\n                    next[idx - 1].data[1] |= (ci.data[1] & LEFT_MASK) << 23;\\n                    next[idx - 1].data[2] |= (ci.data[2] & LEFT_MASK) << 23;\\n                }\\n            }\\n            // up\\n            if (y >= 24) {\\n                idx = _getIdx(self, x, y - 24);\\n                if (idx != 0) {\\n                    next[idx - 1].data[2] |= (ci.data[0] & UP_MASK) << (24 * 7);\\n                }\\n            }\\n            // down\\n            idx = _getIdx(self, x, y + 24);\\n            if (idx != 0) {\\n                next[idx - 1].data[0] |= (ci.data[2] & DOWN_MASK) >> (24 * 7);\\n            }\\n            // right\\n            idx = _getIdx(self, x + 24, y);\\n            if (idx != 0) {\\n                next[idx - 1].data[0] |= (ci.data[0] & RIGHT_MASK) >> 23;\\n                next[idx - 1].data[1] |= (ci.data[1] & RIGHT_MASK) >> 23;\\n                next[idx - 1].data[2] |= (ci.data[2] & RIGHT_MASK) >> 23;\\n            }\\n        }\\n        // Mask it.\\n        done = true;\\n        for (i = 0; i < len; i++) {\\n            // next[i] = next[i].and(self.values[i].tile);\\n            // done = done && next[i].isEqual(current[i]);\\n            next[i].data[0] &= self.values[i].tile.data[0];\\n            next[i].data[1] &= self.values[i].tile.data[1];\\n            next[i].data[2] &= self.values[i].tile.data[2];\\n            done =\\n                done &&\\n                next[i].data[0] == current[i].data[0] &&\\n                next[i].data[1] == current[i].data[1] &&\\n                next[i].data[2] == current[i].data[2];\\n        }\\n        return (next, done);\\n    }\\n\\n    /// @notice delete certain tile from the map\\n    /// @param self the Map where the tile is removed\\n    /// @param idx the index of the tile in the internal list\\n    /// @param key the key of the tile (combination of x,y)\\n    function _remove(\\n        Map storage self,\\n        uint256 idx,\\n        uint256 key\\n    ) private {\\n        uint256 toDeleteIndex = idx - 1;\\n        uint256 lastIndex = self.values.length - 1;\\n        if (lastIndex != toDeleteIndex) {\\n            TileWithCoordLib.TileWithCoord memory lastValue = self.values[lastIndex];\\n            self.values[toDeleteIndex] = lastValue;\\n            self.indexes[lastValue.getKey()] = idx;\\n        }\\n        self.values.pop();\\n        delete self.indexes[key];\\n    }\\n\\n    /// @notice given x and y return the index of the tile inside the internal list of tiles\\n    /// @param self the Map where the tile is removed\\n    /// @param x the x coordinate\\n    /// @param y the y coordinate\\n    /// @return the index in the list + 1 or zero if not found\\n    function _getIdx(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y\\n    ) private view returns (uint256) {\\n        return self.indexes[TileWithCoordLib.getKey(x, y)];\\n    }\\n\\n    /// @notice grow (4-connected) the internal word that represent 8 lines of the tile adding pixels\\n    /// @param x the value of the internal work\\n    /// @return the internal work with the extra pixels from growing it\\n    function _grow(uint256 x) private pure returns (uint256) {\\n        return (x | ((x & RIGHT_MASK_NEG) << 1) | ((x & LEFT_MASK_NEG) >> 1) | (x << 24) | (x >> 24));\\n    }\\n\\n    /// @notice grow (4-connected) a tile adding pixels around those that exists\\n    /// @param self the tile to grow\\n    /// @return e the tile that results from adding all the 4-connected pixels\\n    function _growMiddle(TileLib.Tile memory self) internal pure returns (TileLib.Tile memory e) {\\n        e.data[0] = _grow(self.data[0]) | ((self.data[1] & UP_MASK) << (24 * 7));\\n        e.data[1] =\\n            _grow(self.data[1]) |\\n            ((self.data[2] & UP_MASK) << (24 * 7)) |\\n            ((self.data[0] & DOWN_MASK) >> (24 * 7));\\n        e.data[2] = _grow(self.data[2]) | ((self.data[1] & DOWN_MASK) >> (24 * 7));\\n        return e;\\n    }\\n\\n    /// @notice grow (4-connected) a tile adding pixels around those that exists\\n    /// @param self the tile to grow\\n    /// @return e the extra tile to the right that results from adding all the 4-connected pixels\\n    function _growRight(TileLib.Tile memory self) internal pure returns (TileLib.Tile memory e) {\\n        // for loop removed to save some gas.\\n        e.data[0] = (self.data[0] & RIGHT_MASK) >> 23;\\n        e.data[1] = (self.data[1] & RIGHT_MASK) >> 23;\\n        e.data[2] = (self.data[2] & RIGHT_MASK) >> 23;\\n        return e;\\n    }\\n\\n    /// @notice grow (4-connected) a tile adding pixels around those that exists\\n    /// @param self the tile to grow\\n    /// @return e the extra tile to the left that results from adding all the 4-connected pixels\\n    function _growLeft(TileLib.Tile memory self) internal pure returns (TileLib.Tile memory e) {\\n        e.data[0] = (self.data[0] & LEFT_MASK) << 23;\\n        e.data[1] = (self.data[1] & LEFT_MASK) << 23;\\n        e.data[2] = (self.data[2] & LEFT_MASK) << 23;\\n        return e;\\n    }\\n}\\n\",\"keccak256\":\"0x8cbeb83f383e5960af26a4b0982ca6e9fc1bd74a174641ec67c51ce7adcbb674\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/TileLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @title An optimized bitset of 24x24 bits (used to represent maps)\\n/// @notice see: http://\\n/// @dev We store 8 lines of 24 bits in each uint256 and leave some free space.\\nlibrary TileLib {\\n    uint256 public constant PIXEL_MASK = 0x0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 public constant PIXEL_MASK_INV = 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000;\\n\\n    struct Tile {\\n        uint256[3] data;\\n    }\\n\\n    /// @notice init the tile with the internal data directly\\n    /// @return A Tile that has the bit data set\\n    function init(\\n        Tile memory self,\\n        uint256 pixelData1,\\n        uint256 pixelData2,\\n        uint256 pixelData3\\n    ) internal pure returns (Tile memory) {\\n        self.data[0] = pixelData1 & PIXEL_MASK;\\n        self.data[1] = pixelData2 & PIXEL_MASK;\\n        self.data[2] = pixelData3 & PIXEL_MASK;\\n        return self;\\n    }\\n\\n    /// @notice Set the bits inside a square that has size x size in the x,y coordinates\\n    /// @dev can be optimized for the specific case of a 24x24 square\\n    /// @param self the Tile in which the bits are set\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding bits set\\n    function set(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (Tile memory) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            self.data[idx] |= mask << (x + 24 * ((y + i) % 8));\\n        }\\n        return self;\\n    }\\n\\n    /// @notice Clear the bits inside a square that has size x size in the x,y coordinates\\n    /// @dev can be optimized for the specific case of a 24x24 square\\n    /// @param self the Tile in which the bits will be cleared\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding cleared bits\\n    function clear(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (Tile memory) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            self.data[idx] &= ~(mask << (x + 24 * ((y + i) % 8)));\\n        }\\n        return self;\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate inside the Tile is set or not, if not set it.\\n    /// @dev this routine is a combination of contains and set, used to save some gas\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate\\n    /// @param y the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function addIfNotContain(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (bool, Tile memory) {\\n        require(x < 24 && y < 24, \\\"Invalid coordinates\\\");\\n        uint256 idx = y / 8;\\n        uint256 bitMask = 1 << (x + 24 * (y % 8));\\n        if (self.data[idx] & bitMask == bitMask) {\\n            return (false, self);\\n        }\\n        self.data[idx] |= bitMask;\\n        return (true, self);\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate inside the Tile is set or not\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate\\n    /// @param y the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function contain(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (bool) {\\n        require(x < 24 && y < 24, \\\"Invalid coordinates\\\");\\n        uint256 idx = y / 8;\\n        uint256 bitMask = 1 << (x + 24 * (y % 8));\\n        return (self.data[idx] & bitMask == bitMask);\\n    }\\n\\n    /// @notice Check if the all the bits of a square inside the Tile are set or not\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if al the bits are set or false if at least one bit is cleared\\n    function contain(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            uint256 bitMask = mask << (x + 24 * ((y + i) % 8));\\n            if (self.data[idx] & bitMask != bitMask) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if a Tile includes all the bits that are set in another Tile\\n    /// @param self the bigger Tile that is checked for inclusion\\n    /// @param contained the Tile that must be included\\n    /// @return true if self contain contained Tile\\n    function contain(Tile memory self, Tile memory contained) internal pure returns (bool) {\\n        uint256 d0 = contained.data[0] & PIXEL_MASK;\\n        uint256 d1 = contained.data[1] & PIXEL_MASK;\\n        uint256 d2 = contained.data[2] & PIXEL_MASK;\\n        return (self.data[0] & d0 == d0) && (self.data[1] & d1 == d1) && (self.data[2] & d2 == d2);\\n    }\\n\\n    /// @notice Check if the Tile has any bit in common with a square\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if there is at least one bit set in both Tiles\\n    function intersect(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            uint256 bitMask = mask << (x + 24 * ((y + i) % 8));\\n            if (self.data[idx] & bitMask != 0) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Check if two Tiles has any bit in common\\n    /// @param self first Tile to compare\\n    /// @param other second tile to compare\\n    /// @return true if there is at least one bit set in both Tiles\\n    function intersect(Tile memory self, Tile memory other) internal pure returns (bool) {\\n        return\\n            ((self.data[0] & other.data[0]) | (self.data[1] & other.data[1]) | (self.data[2] & other.data[2])) &\\n                PIXEL_MASK !=\\n            0;\\n    }\\n\\n    /// @notice Check if two Tiles has exactly the same bits set\\n    /// @param self first Tile to compare\\n    /// @param other second Tile to compare\\n    /// @return true if the two Tiles has the same bits set\\n    function isEqual(Tile memory self, Tile memory other) internal pure returns (bool) {\\n        return\\n            ((self.data[0] ^ other.data[0]) | (self.data[1] ^ other.data[1]) | (self.data[2] ^ other.data[2])) &\\n                PIXEL_MASK ==\\n            0;\\n    }\\n\\n    /// @notice return a Tile that is the union of two Tiles\\n    /// @dev this function destroys data outside the pixel data (we want to save some gas)\\n    /// @param self first Tile to compare\\n    /// @param other second Tile to compare\\n    /// @return a Tile that is the union of self and other\\n    function or(Tile memory self, Tile memory other) internal pure returns (Tile memory) {\\n        self.data[0] |= other.data[0] & PIXEL_MASK;\\n        self.data[1] |= other.data[1] & PIXEL_MASK;\\n        self.data[2] |= other.data[2] & PIXEL_MASK;\\n        return self;\\n    }\\n\\n    /// @notice return a Tile that is the intersection of two Tiles\\n    /// @dev this function destroys data outside the pixel data (we want to save some gas)\\n    /// @param self first Tile to compare\\n    /// @param other second Tile to compare\\n    /// @return a Tile that is the intersection of self and other\\n    function and(Tile memory self, Tile memory other) internal pure returns (Tile memory) {\\n        self.data[0] &= other.data[0] | PIXEL_MASK_INV;\\n        self.data[1] &= other.data[1] | PIXEL_MASK_INV;\\n        self.data[2] &= other.data[2] | PIXEL_MASK_INV;\\n        return self;\\n    }\\n\\n    /// @notice Calculates the subtraction of two Tile\\n    /// @param self the Tile to subtract from\\n    /// @param value the Tile subtracted\\n    /// @return the self with all the bits set in value cleared\\n    function subtract(Tile memory self, Tile memory value) internal pure returns (Tile memory) {\\n        self.data[0] &= ~(value.data[0] & PIXEL_MASK);\\n        self.data[1] &= ~(value.data[1] & PIXEL_MASK);\\n        self.data[2] &= ~(value.data[2] & PIXEL_MASK);\\n        return self;\\n    }\\n\\n    /// @notice check if a Tile is empty, doesn't have any bit set\\n    /// @param self first Tile to compare\\n    /// @return true if the Tile is empty\\n    function isEmpty(Tile memory self) internal pure returns (bool) {\\n        return (self.data[0] | self.data[1] | self.data[2]) & PIXEL_MASK == 0;\\n    }\\n\\n    /// @notice return a Tile that has only one of the pixels from the original Tile set\\n    /// @param self Tile in which one pixel is searched\\n    /// @return ret a Tile that has only one pixel set\\n    function findAPixel(Tile memory self) internal pure returns (Tile memory ret) {\\n        uint256 target;\\n        uint256 shift;\\n\\n        target = self.data[2] & PIXEL_MASK;\\n        if (target != 0) {\\n            shift = _findAPixel(target);\\n            ret.data[2] = (1 << shift);\\n            return ret;\\n        }\\n\\n        target = self.data[1] & PIXEL_MASK;\\n        if (target != 0) {\\n            shift = _findAPixel(target);\\n            ret.data[1] = (1 << shift);\\n            return ret;\\n        }\\n\\n        target = self.data[0] & PIXEL_MASK;\\n        if (target != 0) {\\n            shift = _findAPixel(target);\\n            ret.data[0] = (1 << shift);\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice given a tile, translate all the bits in the x and y direction\\n    /// @param self the initial Tile to translate\\n    /// @param x the x distance to translate\\n    /// @param y the y distance to translate\\n    /// @return col1 first column that represents the four tiles that are the result of the translation\\n    /// @return col2 second column that represents the four tiles that are the result of the translation\\n    function translate(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256[6] memory col1, uint256[6] memory col2) {\\n        // Move right\\n        uint256 mask = _getTranslateXMask(x);\\n        col1[0] = (self.data[0] & mask) << x;\\n        col1[1] = (self.data[1] & mask) << x;\\n        col1[2] = (self.data[2] & mask) << x;\\n        if (x > 0) {\\n            mask = PIXEL_MASK - mask;\\n            col2[0] = (self.data[0] & mask) >> (24 - x);\\n            col2[1] = (self.data[1] & mask) >> (24 - x);\\n            col2[2] = (self.data[2] & mask) >> (24 - x);\\n        }\\n        // Move down\\n        uint256 rem = 24 * (y % 8);\\n        uint256 div = y / 8;\\n        mask = PIXEL_MASK - (2**(24 * 8 - rem) - 1);\\n        // TODO: optimization, remove the loop, check gas consumption\\n        for (uint256 i = 5; i > div; i--) {\\n            col1[i] = (col1[i - div] << rem) | ((col1[i - div - 1] & mask) >> (24 * 8 - rem));\\n            col2[i] = (col2[i - div] << rem) | ((col2[i - div - 1] & mask) >> (24 * 8 - rem));\\n        }\\n        col1[div] = col1[0] << rem;\\n        col2[div] = col2[0] << rem;\\n        if (div > 0) {\\n            col1[0] = 0;\\n            col2[0] = 0;\\n            if (div > 1) {\\n                col1[1] = 0;\\n                col2[1] = 0;\\n            }\\n        }\\n        return (col1, col2);\\n    }\\n\\n    uint256 private constant QUAD_MASK_1 = 1;\\n    uint256 private constant QUAD_MASK_3 = 2**3 - 1;\\n    uint256 private constant QUAD_MASK_6 = 2**6 - 1;\\n    uint256 private constant QUAD_MASK_12 = 2**12 - 1;\\n    uint256 private constant QUAD_MASK_24 = 2**24 - 1;\\n\\n    /// @notice return a bit mask used to set or clear a square of certain size in the Tile\\n    /// @param size the size of the square\\n    /// @return the bit mask or zero if the size is not supported\\n    function _quadMask(uint256 size) private pure returns (uint256) {\\n        if (size == 1) return 1;\\n        if (size == 3) return QUAD_MASK_3;\\n        if (size == 6) return QUAD_MASK_6;\\n        if (size == 12) return QUAD_MASK_12;\\n        if (size == 24) return QUAD_MASK_24;\\n        return 0;\\n    }\\n\\n    /// @notice count the amount of bits set inside the Tile\\n    /// @param self the Tile in which the bits are counted\\n    /// @return the count of bits that are set\\n    function countBits(Tile memory self) internal pure returns (uint256) {\\n        return _countBits(self.data[0]) + _countBits(self.data[1]) + _countBits(self.data[2]);\\n    }\\n\\n    /// @notice count the amount of bits set inside a word\\n    /// @dev see: https://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer\\n    /// @param x the word in which the bits are counted\\n    /// @return the count of bits that are set\\n    function _countBits(uint256 x) private pure returns (uint256) {\\n        x = x - ((x >> 1) & 0x0000000000000000555555555555555555555555555555555555555555555555);\\n        x =\\n            (x & 0x0000000000000000333333333333333333333333333333333333333333333333) +\\n            ((x >> 2) & 0x0000000000000000333333333333333333333333333333333333333333333333);\\n        x = (x + (x >> 4)) & 0x00000000000000000F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F;\\n        return\\n            ((((x >> 96) * 0x010101010101010101010101) +\\n                ((x & 0x0F0F0F0F0F0F0F0F0F0F0F0F) * 0x010101010101010101010101)) >> (11 * 8)) & 0xFF;\\n    }\\n\\n    /// @notice giving 8 lines of a Tile, find any bit that is set\\n    /// @dev we must search in 8 * 24 bits that correspond to 8 lines, so 2^6 * 3, we split in three and then do a binary search\\n    /// @param target the uint256 that has the 8 lines\\n    /// @return shift the amount of bits shift left so the choose bit is set in the resulting Tile\\n    function _findAPixel(uint256 target) private pure returns (uint256 shift) {\\n        uint256 mask = (2**64 - 1);\\n        // divide in 3 parts, then do a binary search\\n        if ((target & mask) == 0) {\\n            target = target >> 64;\\n            shift = 64;\\n            if ((target & mask) == 0) {\\n                target = target >> 64;\\n                shift = 128;\\n            }\\n        }\\n        for (uint256 i = 32; i > 0; i = i / 2) {\\n            mask = mask >> i;\\n            if ((target & mask) == 0) {\\n                target = target >> i;\\n                shift += i;\\n            }\\n        }\\n        return shift;\\n    }\\n\\n    /// @notice return a bit mask used translate a Tile data in the x direction\\n    /// @param x the x value to translate\\n    /// @return the bit mask\\n    function _getTranslateXMask(uint256 x) private pure returns (uint256) {\\n        uint256 mask = (2**24 - 1) >> x;\\n        mask |= mask << 24;\\n        mask |= mask << (24 * 2);\\n        mask |= mask << (24 * 4);\\n        return mask;\\n    }\\n}\\n\",\"keccak256\":\"0x597571a993575cf7f27e1313fab368b3d362d5539caaea46fb06546ccf883d63\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/TileWithCoordLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {TileLib} from \\\"./TileLib.sol\\\";\\n\\n/// @title A Tile (24x24 map piece) that also stores x,y coordinates and a combination of the two called key\\n/// @dev Using a sparse array of TileWithCoords we build a bigger map covered with Tiles\\nlibrary TileWithCoordLib {\\n    using TileLib for TileLib.Tile;\\n\\n    struct TileWithCoord {\\n        TileLib.Tile tile;\\n    }\\n\\n    /// @notice initialize the TileWithCoord structure\\n    /// @return An empty Tile that has the x,y and corresponding key value set\\n    function init(uint256 x, uint256 y) internal pure returns (TileWithCoord memory) {\\n        TileWithCoord memory ret;\\n        ret.tile.data[1] = (x / 24) << 224;\\n        ret.tile.data[2] = (y / 24) << 224;\\n        return ret;\\n    }\\n\\n    /// @notice initialize the TileWithCoord structure\\n    /// @return An TileWithCoord that has the x,y, key and the Tile bit data set\\n    function init(\\n        uint256 x,\\n        uint256 y,\\n        uint256 pixelData1,\\n        uint256 pixelData2,\\n        uint256 pixelData3\\n    ) internal pure returns (TileWithCoord memory) {\\n        TileWithCoord memory ret;\\n        ret.tile = ret.tile.init(pixelData1, pixelData2, pixelData3);\\n        ret.tile.data[1] |= (x / 24) << 224;\\n        ret.tile.data[2] |= (y / 24) << 224;\\n        return ret;\\n    }\\n\\n    /// @notice Set the bits inside a square that has size x size in the x,y coordinates\\n    /// @param self the TileWithCoord in which the bits are set\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding bits set\\n    function set(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.set(xi % 24, yi % 24, size);\\n        return self;\\n    }\\n\\n    /// @notice Calculates the union/addition of two TileWithCoord\\n    /// @dev to be able to merge the two TileWithCoord must have the same coordinates\\n    /// @param self one of the TileWithCoord to merge\\n    /// @param value the second TileWithCoord to merge\\n    /// @return the merge of the two TileWithCoord\\n    function merge(TileWithCoord memory self, TileWithCoord memory value) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == getX(value) && getY(self) == getY(value), \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.or(value.tile);\\n        return self;\\n    }\\n\\n    /// @notice Clear the bits inside a square that has size x size in the x,y coordinates\\n    /// @param self the TileWithCoord, in which the bits will be cleared\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding cleared bits\\n    function clear(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.clear(xi % 24, yi % 24, size);\\n        return self;\\n    }\\n\\n    /// @notice Calculates the subtraction of two TileWithCoord\\n    /// @dev to be able to subtract them the two TileWithCoord must have the same coordinates\\n    /// @param self the TileWithCoord to subtract from\\n    /// @param value the TileWithCoord subtracted\\n    /// @return the self with all the bits set in value cleared\\n    function clear(TileWithCoord memory self, TileWithCoord memory value) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == getX(value) && getY(self) == getY(value), \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.subtract(value.tile);\\n        return self;\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate are set or not in the TileWithCoord\\n    /// @param self the TileWithCoord where the check is done\\n    /// @param xi the x coordinate\\n    /// @param yi the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function contain(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi\\n    ) internal pure returns (bool) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid coordinates\\\");\\n        return self.tile.contain(xi % 24, yi % 24);\\n    }\\n\\n    /// @notice Check if the all the bits of a square inside the TileWithCoord are set or not\\n    /// @param self the TileWithCoord where the check is done\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if al the bits are set or false if at least one bit is cleared\\n    function contain(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        return self.tile.contain(xi % 24, yi % 24, size);\\n    }\\n\\n    /// @notice Check if the TileWithCoord has any bit in common with a square\\n    /// @param self the TileWithCoord where the check is done\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if there is at least one bit set in the TileWithCoords and the square\\n    function intersect(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        return self.tile.intersect(xi % 24, yi % 24, size);\\n    }\\n\\n    /// @notice return the x coordinate value stored in the TileWithCoord\\n    /// @param self the TileWithCoord to get the x coordinate from\\n    /// @return the x value\\n    function getX(TileWithCoord memory self) internal pure returns (uint256) {\\n        return self.tile.data[1] >> 224;\\n    }\\n\\n    /// @notice return the y coordinate value stored in the TileWithCoord\\n    /// @param self the TileWithCoord to get the y coordinate from\\n    /// @return the y value\\n    function getY(TileWithCoord memory self) internal pure returns (uint256) {\\n        return self.tile.data[2] >> 224;\\n    }\\n\\n    /// @notice return the key value stored in the TileWithCoord\\n    /// @param self the TileWithCoord to get the key from\\n    /// @return the key value\\n    function getKey(TileWithCoord memory self) internal pure returns (uint256) {\\n        return getX(self) | (getY(self) << 16);\\n    }\\n\\n    /// @notice helper to calculate the key value given the x,y coordinates\\n    /// @param x the x coordinate\\n    /// @param y the y coordinate\\n    /// @return the key value\\n    function getKey(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x / 24) | ((y / 24) << 16);\\n    }\\n\\n    /// @notice count the amount of bits set inside the TileWithCoord\\n    /// @param self the TileWithCoord in which the bits are counted\\n    /// @return the count of bits that are set\\n    function countBits(TileWithCoord memory self) internal pure returns (uint256) {\\n        return self.tile.countBits();\\n    }\\n\\n    /// @notice check if a TileWithCoord is empty, none of the bits are set\\n    /// @param self the TileWithCoord to check\\n    /// @return true if none of the bits are set\\n    function isEmpty(TileWithCoord memory self) internal pure returns (bool) {\\n        return self.tile.isEmpty();\\n    }\\n\\n    /// @notice Check if two TileWithCoord has exactly the same coordinates and bits set\\n    /// @param self first TileWithCoord to compare\\n    /// @param other second TileWithCoord to compare\\n    /// @return true if the two TileWithCoord has the same coordinates and bits set\\n    function isEqual(TileWithCoord memory self, TileWithCoord memory other) internal pure returns (bool) {\\n        return\\n            self.tile.data[0] == other.tile.data[0] &&\\n            self.tile.data[1] == other.tile.data[1] &&\\n            self.tile.data[2] == other.tile.data[2];\\n    }\\n}\\n\",\"keccak256\":\"0x73a6af205778745e2b12d381818646e4b7efbca3ef914b776035cc247d62414e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61465161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106102815760003560e01c806374527bfb1161016a578063c853cffe116100e2578063e8485b0711610096578063f5fd439d1161007b578063f5fd439d14610602578063f9b9fec614610615578063fc5b7bdb1461063557610281565b8063e8485b07146105cf578063f4800519146105ef57610281565b8063cca0f3b7116100c7578063cca0f3b71461057c578063d37441171461058f578063dcedd4b0146105af57610281565b8063c853cffe14610549578063ca26a6ad1461055c57610281565b80638c263b7311610139578063a1b4c2bc1161011e578063a1b4c2bc14610504578063ac775cf814610524578063c62137541461053657610281565b80638c263b73146104d15780638f2981d5146104e457610281565b806374527bfb1461046b5780637c2c51481461048b5780637e90ee891461049e5780638addfdc4146104be57610281565b806351500438116101fd5780635a20ec72116101cc5780635f720592116101b15780635f7205921461041757806370b4918c1461043757806372ba78881461045857610281565b80635a20ec72146103e35780635cef23c9146103f657610281565b8063515004381461037d578063552a98a51461039057806357128810146103a3578063590ec2a6146103c357610281565b80632a5fdd38116102545780632f8332fa116102395780632f8332fa146103375780633362c7cd1461035757806336fa62311461036a57610281565b80632a5fdd38146102f45780632b8790ab1461031657610281565b806305a3338614610286578063064acfd9146102ae57806311c7db8e146102c15780631b261f44146102e1575b600080fd5b61029961029436600461417f565b610648565b60405190151581526020015b60405180910390f35b6102996102bc3660046142c4565b6106b6565b6102d46102cf366004614397565b61075c565b6040516102a5919061441f565b6102996102ef3660046142c4565b610891565b81801561030057600080fd5b5061031461030f3660046142e5565b61094c565b005b6103296103243660046143c2565b610a46565b6040519081526020016102a5565b81801561034357600080fd5b5061031461035236600461417f565b610b1f565b610299610365366004614397565b610b70565b6102996103783660046142e5565b610c34565b61029961038b3660046143c2565b610d0a565b61029961039e366004614311565b610dd1565b8180156103af57600080fd5b506103146103be3660046142c4565b610e1d565b8180156103cf57600080fd5b506103146103de366004614167565b610ebb565b6102996103f1366004614167565b610f7f565b610409610404366004614397565b610f88565b6040516102a59291906144c5565b81801561042357600080fd5b5061031461043236600461417f565b611046565b61044a61044536600461422c565b611096565b6040516102a592919061446e565b6102996104663660046143c2565b611a1f565b81801561047757600080fd5b50610314610486366004614311565b611adb565b610329610499366004614167565b611b13565b8180156104aa57600080fd5b506103146104b9366004614311565b611bc9565b6102996104cc3660046143c2565b611c09565b6102996104df36600461417f565b611eb4565b8180156104f057600080fd5b506103146104ff3660046142e5565b611fff565b81801561051057600080fd5b5061031461051f36600461417f565b6120f7565b610329610532366004614167565b5490565b610299610544366004614167565b612147565b6102d4610557366004614167565b612362565b81801561056857600080fd5b506103146105773660046142c4565b6123ff565b61029961058a36600461417f565b61249e565b81801561059b57600080fd5b506102996105aa3660046142e5565b612500565b6105c26105bd3660046142c4565b61263b565b6040516102a591906144e0565b8180156105db57600080fd5b506102996105ea3660046143c2565b6126c0565b6102996105fd3660046142e5565b612803565b610299610610366004614311565b6128d0565b81801561062157600080fd5b506103146106303660046143c2565b61291f565b6102996106433660046142c4565b612a98565b8051600090815b818110156106a9576106888585838151811061067b57634e487b7160e01b600052603260045260246000fd5b6020026020010151610c34565b610697576000925050506106b0565b806106a1816145aa565b91505061064f565b5060019150505b92915050565b60006107558383600001805480602002602001604051908101604052809291908181526020016000905b8282101561074c5760008481526020908190206040805160a081018083529093600387810290940193859391840192859284929086019184919082845b81548152602001906001019080831161071d5750505050508152505081525050815260200190600101906106e0565b50505050611eb4565b9392505050565b606060008267ffffffffffffffff81111561078757634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156107c057816020015b6107ad613fe4565b8152602001906001900390816107a55790505b50905060005b8381101561088857856107d98287614548565b815481106107f757634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b81548152602001906001019080831161082a575050505050815250508152505082828151811061086a57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610880906145aa565b9150506107c6565b50949350505050565b8054600090815b818110156109415761091f858560000183815481106108c757634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b8154815260200190600101908083116108fa5750505050508152505081525050612803565b1561092f576001925050506106b0565b80610939816145aa565b915050610898565b506000949350505050565b600061095782612b47565b600081815260018501602052604090205490915061097483612b66565b156109975780610985575050610a42565b610990848284612b89565b5050610a42565b806109e857835460018101855560008581526020902084518051869360039081029093019283916109ca91839190613ffc565b50508654600086815260018901602052604090205550610a3f915050565b82846109f5600184614593565b81548110610a1357634e487b7160e01b600052603260045260246000fd5b600091825260209091208251805160039384029092019290918391610a39918391613ffc565b50505050505b50505b5050565b600080610a538585612d01565b600081815260018801602052604090205490915080610a7757600092505050610b17565b610a7f61403a565b610b11610b0c89610a91600186614593565b81548110610aaf57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081019182905293600393840290920192849283019184919082845b815481526020019060010190808311610adb575050509190925250610b0691508590508b8b8b612d25565b90612ee1565b612f4f565b93505050505b949350505050565b805160005b81811015610a3f57610b5d84848381518110610b5057634e487b7160e01b600052603260045260246000fd5b6020026020010151612500565b5080610b68816145aa565b915050610b24565b600080610b7d8484612d01565b600081815260018701602052604090205490915080610ba157600092505050610755565b610c2a858588610bb2600186614593565b81548110610bd057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311610c0357505050919092525050509052509190612f93565b9695505050505050565b6000610c3f82612b66565b15610c4c575060016106b0565b6000610c5783612b47565b600081815260018601602052604090205490915080610c7b576000925050506106b0565b8351610d019086610c8d600185614593565b81548110610cab57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081019182905293600393840290920192849283019184919082845b815481526020019060010190808311610cd75750505050508152505061303590919063ffffffff16565b95945050505050565b600080610d178585612d01565b600081815260018801602052604090205490915080610d3b57600092505050610b17565b610dc68686868a610d4d600187614593565b81548110610d6b57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311610d9e575050509190925250505090525092919061308f565b979650505050505050565b6000610de1838360000151612803565b80610df55750610df5838360200151612803565b80610e095750610e09838360400151612803565b806107555750610755838360600151612803565b805460005b81811015610a3f57610ea984846000018381548110610e5157634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311610e845750505050508152505081525050611fff565b80610eb3816145aa565b915050610e22565b60005b8154811015610f7057816001016000610f4b846000018481548110610ef357634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311610f265750505050508152505081525050612b47565b8152602001908152602001600020600090558080610f68906145aa565b915050610ebe565b50610f7c81600061404d565b50565b8054155b919050565b6000610f92613fe4565b6000610f9e8585612d01565b6000818152600188016020526040902054909150801561103c5786610fc4600183614593565b81548110610fe257634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b81548152602001906001019080831161101557505050505081525050815250509250600193505b5050935093915050565b805160005b81811015610a3f576110848484838151811061107757634e487b7160e01b600052603260045260246000fd5b602002602001015161094c565b8061108e816145aa565b91505061104b565b8154606090600090818080806110aa61403a565b8567ffffffffffffffff8111156110d157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561110a57816020015b6110f761403a565b8152602001906001900390816110ef5790505b5097505b8585101561176f5788858151811061113657634e487b7160e01b600052603260045260246000fd5b60200260200101519050806000015160026003811061116557634e487b7160e01b600052603260045260246000fd5b602002015181516001602002015182516000602002015117176111875761175d565b6112058a60000186815481106111ad57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b8154815260200190600101908083116111e05750505050508152505081525050613132565b611210906018614574565b93506112908a600001868154811061123857634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b81548152602001906001019080831161126b575050505050815250508152505061314b565b61129b906018614574565b8151602081015191945060a89190911b62ffffff60a81b16906113169060005b60200201516000601882901c601883901b60017501000001000001000001000001000001000001000001198516901c600177800000800000800000800000800000800000800000800000198616901b85171717179050919050565b1788868151811061133757634e487b7160e01b600052603260045260246000fd5b602090810291909101015151805191909117905280518051604082015162ffffff60a892831c1692911b62ffffff60a81b16906113759060016112bb565b171788868151811061139757634e487b7160e01b600052603260045260246000fd5b60209081029190910181015151810180519290921790915281519081015160a81c62ffffff16906113c99060026112bb565b178886815181106113ea57634e487b7160e01b600052603260045260246000fd5b60209081029190910101515160400180519190911790526018841061154c5761141e8a611418601887614593565b8561315b565b9150811561154c5780515160171b778000008000008000008000008000008000008000008000001688611452600185614593565b8151811061147057634e487b7160e01b600052603260045260246000fd5b602090810291909101810151518051929092179091528151015160171b7780000080000080000080000080000080000080000080000016886114b3600185614593565b815181106114d157634e487b7160e01b600052603260045260246000fd5b6020908102919091018101515101805191909117905280516040015160171b778000008000008000008000008000008000008000008000001688611516600185614593565b8151811061153457634e487b7160e01b600052603260045260246000fd5b60209081029190910101515160400180519190911790525b601883106115c1576115698a85611564601887614593565b61315b565b915081156115c15780515160a81b62ffffff60a81b168861158b600185614593565b815181106115a957634e487b7160e01b600052603260045260246000fd5b60209081029190910101515160400180519190911790525b6115d18a85611564866018614548565b915081156116265780516040015160a81c62ffffff16886115f3600185614593565b8151811061161157634e487b7160e01b600052603260045260246000fd5b60209081029190910101515180519190911790525b6116358a611418866018614548565b9150811561175d5780515160171c75010000010000010000010000010000010000010000011688611667600185614593565b8151811061168557634e487b7160e01b600052603260045260246000fd5b602090810291909101810151518051929092179091528151015160171c750100000100000100000100000100000100000100000116886116c6600185614593565b815181106116e457634e487b7160e01b600052603260045260246000fd5b6020908102919091018101515101805191909117905280516040015160171c75010000010000010000010000010000010000010000011688611727600185614593565b8151811061174557634e487b7160e01b600052603260045260246000fd5b60209081029190910101515160400180519190911790525b84611767816145aa565b95505061110e565b60019650600094505b85851015611a12578960000185815481106117a357634e487b7160e01b600052603260045260246000fd5b60009182526020822060039091020101548886815181106117d457634e487b7160e01b600052603260045260246000fd5b602090810291909101015151805191909116905289548a908690811061180a57634e487b7160e01b600052603260045260246000fd5b600091825260209091206003909102016001015488868151811061183e57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101515101805191909116905289548a908690811061187657634e487b7160e01b600052603260045260246000fd5b60009182526020909120600390910201600201548886815181106118aa57634e487b7160e01b600052603260045260246000fd5b602090810291909101015151604001805191909116905286801561192757508885815181106118e957634e487b7160e01b600052603260045260246000fd5b60209081029190910101515151885189908790811061191857634e487b7160e01b600052603260045260246000fd5b60209081029190910101515151145b8015611992575088858151811061194e57634e487b7160e01b600052603260045260246000fd5b6020908102919091010151516001602002015188868151811061198157634e487b7160e01b600052603260045260246000fd5b602090810291909101810151510151145b80156119fe57508885815181106119b957634e487b7160e01b600052603260045260246000fd5b602090810291909101015151600260200201518886815181106119ec57634e487b7160e01b600052603260045260246000fd5b60209081029190910101515160400151145b965084611a0a816145aa565b955050611778565b5050505050509250929050565b600080611a2c8585612d01565b600081815260018801602052604090205490915080611a5057600092505050610b17565b610dc68686868a611a62600187614593565b81548110611a8057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311611ab35750505091909252505050905250929190613185565b611ae9828260000151611fff565b611af7828260200151611fff565b611b05828260400151611fff565b610a42828260600151611fff565b80546000908190815b81811015611bc057611ba2856000018281548110611b4a57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311611b7d5750505050508152505081525050613228565b611bac9084614548565b925080611bb8816145aa565b915050611b1c565b50909392505050565b611bd7828260000151612500565b50611be6828260200151612500565b50611bf5828260400151612500565b50611c04828260600151612500565b505050565b6000611c1485610f7f565b15611c2157506001610b17565b6000611c2b61403a565b611c4d611c396018886145c5565b611c446018886145c5565b83919087612d25565b905060188610611d3657611c6c87611c66601889614593565b8761315b565b91508115801590611d265750611d24611d07611c8783613237565b89611c93600187614593565b81548110611cb157634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081019182905293600393840290920192849283019184919082845b815481526020019060010190808311611cdd57505050505081525050612ee190919063ffffffff16565b516040810151602082015191516001600160c01b03921717161590565b155b15611d3657600192505050610b17565b60188510611db757611d4e8787611564601889614593565b91508115801590611da7575080515160a81b62ffffff60a81b1687611d74600185614593565b81548110611d9257634e487b7160e01b600052603260045260246000fd5b60009182526020822060039091020101541615155b15611db757600192505050610b17565b611dc287878761315b565b91508115801590611ddf5750611ddd611d07611c8783613292565b155b15611def57600192505050610b17565b611dff8787611564886018614548565b91508115801590611e5b575080516040015160a81c62ffffff1687611e25600185614593565b81548110611e4357634e487b7160e01b600052603260045260246000fd5b60009182526020909120600390910201600201541615155b15611e6b57600192505050610b17565b611e7a87611c66886018614548565b91508115801590611e975750611e95611d07611c8783613347565b155b15611ea757600192505050610b17565b5060009695505050505050565b8154815160009114611ec8575060006106b0565b815160005b818110156106a9576000611f07858381518110611efa57634e487b7160e01b600052603260045260246000fd5b6020026020010151612b47565b6000818152600188016020526040902054909150801580611fd85750611fd6868481518110611f4657634e487b7160e01b600052603260045260246000fd5b602002602001015188600001600184611f5f9190614593565b81548110611f7d57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311611fb057505050919092525050509052509061339a565b155b15611fea5760009450505050506106b0565b50508080611ff7906145aa565b915050611ecd565b61200881612b66565b1561201257610a42565b600061201d82612b47565b60008181526001850160205260409020549091508061206457835460018101855560008581526020902084518051869360039081029093019283916109ca91839190613ffc565b6120eb8385612074600185614593565b8154811061209257634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b8154815260200190600101908083116120c55750505091909252505050905250906133d8565b846109f5600184614593565b805160005b81811015610a3f576121358484838151811061212857634e487b7160e01b600052603260045260246000fd5b6020026020010151611fff565b8061213f816145aa565b9150506120fc565b600061215282610f7f565b1561215f57506001610f83565b815460009067ffffffffffffffff81111561218a57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156121c357816020015b6121b061403a565b8152602001906001900390816121a85790505b50905061223a836000016000815481106121ed57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081019182905293600393840290920192849283019184919082845b81548152602001906001019080831161221957505050505081525050613470565b8160008151811061225b57634e487b7160e01b600052603260045260246000fd5b602002602001018190525060005b80612282576122788483611096565b9092509050612269565b835460005b81811015612356576123338482815181106122b257634e487b7160e01b600052603260045260246000fd5b60200260200101518760000183815481106122dd57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081019182905293600393840290920192849283019184919082845b8154815260200190600101908083116123095750505050508152505061351290919063ffffffff16565b612344576000945050505050610f83565b8061234e816145aa565b915050612287565b50600195945050505050565b606081600001805480602002602001604051908101604052809291908181526020016000905b828210156123f45760008481526020908190206040805160a081018083529093600387810290940193859391840192859284929086019184919082845b8154815260200190600101908083116123c5575050505050815250508152505081526020019060010190612388565b505050509050919050565b805460005b81811015610a3f5761248b8484600001838154811061243357634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b8154815260200190600101908083116124665750505050508152505081525050612500565b5080612496816145aa565b915050612404565b8051600090815b81811015610941576124de858583815181106124d157634e487b7160e01b600052603260045260246000fd5b6020026020010151612803565b156124ee576001925050506106b0565b806124f8816145aa565b9150506124a5565b60008061250c83612b47565b600081815260018601602052604090205490915080612530576000925050506106b0565b60006125b98587612542600186614593565b8154811061256057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311612593575050509190925250505090525090613548565b90506125c481612b66565b156125d9576125d4868385612b89565b612356565b80866125e6600185614593565b8154811061260457634e487b7160e01b600052603260045260246000fd5b60009182526020909120825180516003938402909201929091839161262a918391613ffc565b505050505050600195945050505050565b612643613fe4565b82600001828154811061266657634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b81548152602001906001019080831161269957505050919092525050509052509392505050565b6000806126cd8585612d01565b6000818152600188016020526040902054909150806126f157600092505050610b17565b600061277e8787878b612705600188614593565b8154811061272357634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b81548152602001906001019080831161275657505050919092525050509052509291906135d7565b905061278981612b66565b1561279e57612799888385612b89565b6127f5565b80886127ab600185614593565b815481106127c957634e487b7160e01b600052603260045260246000fd5b6000918252602090912082518051600393840290920192909183916127ef918391613ffc565b50505050505b506001979650505050505050565b600061280e82612b66565b1561281b575060006106b0565b600061282683612b47565b60008181526001860160205260409020549091508061284a576000925050506106b0565b8351610d01908661285c600185614593565b8154811061287a57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081019182905293600393840290920192849283019184919082845b8154815260200190600101908083116128a65750505050508152505061368b90919063ffffffff16565b60006128e0838360000151610c34565b80156128f557506128f5838360200151610c34565b801561290a575061290a838360400151610c34565b80156107555750610755838360600151610c34565b600061292b8484612d01565b6000818152600187016020526040902054909150806129af57600061295086866136c2565b90508661295f82888888613709565b8154600181018355600092835260209092208151805192936003908102909201929091839161299091839190613ffc565b50508954600087815260018c01602052604090205550612a9092505050565b612a3a858585896129c1600187614593565b815481106129df57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311612a125750505091909252505050905250929190613709565b86612a46600184614593565b81548110612a6457634e487b7160e01b600052603260045260246000fd5b600091825260209091208251805160039384029092019290918391612a8a918391613ffc565b50505050505b505050505050565b8054600090815b818110156106a957612b2685856000018381548110612ace57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311612b015750505050508152505081525050610c34565b612b35576000925050506106b0565b80612b3f816145aa565b915050612a9f565b60006010612b548361314b565b901b612b5f83613132565b1792915050565b80515160408101516020820151915160009217176001600160c01b0316156106b0565b6000612b96600184614593565b8454909150600090612baa90600190614593565b9050818114612ca0576000856000018281548110612bd857634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311612c0b5750505050508152505081525050905080866000018481548110612c5157634e487b7160e01b600052603260045260246000fd5b600091825260209091208251805160039384029092019290918391612c77918391613ffc565b50505090505084866001016000612c8d84612b47565b8152602081019190915260400160002055505b8454859080612cbf57634e487b7160e01b600052603160045260246000fd5b60008281526020812060036000199093019283020181815560018101829055600281018290559050915550505060009081526001909201602052506040812055565b60006010612d10601884614560565b901b612d1d601885614560565b179392505050565b612d2d61403a565b601884108015612d3d5750601883105b612d8e5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642074696c6520636f6f7264696e61746573000000000000000060448201526064015b60405180910390fd5b612d9882856145c5565b158015612dac5750612daa82846145c5565b155b612df85760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e61746573000000000000000000000000006044820152606401612d85565b6000612e03836137b2565b905080612e415760405162461bcd60e51b815260206004820152600c60248201526b696e76616c69642073697a6560a01b6044820152606401612d85565b60005b83811015612ed65760006008612e5a8388614548565b612e649190614560565b90506008612e728388614548565b612e7c91906145c5565b612e87906018614574565b612e919088614548565b83901b88600001518260038110612eb857634e487b7160e01b600052603260045260246000fd5b60200201805190911790525080612ece816145aa565b915050612e44565b509495945050505050565b612ee961403a565b815151835180517fffffffffffffffff0000000000000000000000000000000000000000000000009283171690528251602090810151855190910180519183179091169052825160400151845191179060025b6020020180519091169052508192915050565b8051600090612f659060025b6020020151613814565b8251612f72906001612f5b565b8351612f7f906000612f5b565b612f899190614548565b6106b09190614548565b6000612fa0601884614560565b612fa985613132565b148015612fc75750612fbc601883614560565b612fc58561314b565b145b6130135760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e61746573000000000000000000000000006044820152606401612d85565b610b176130216018856145c5565b61302c6018856145c5565b865191906138ee565b8051805160208201516040909201518451516000936001600160c01b03848116949181169381169290911616831480156130755750855160200151821682145b8015610c2a57509451604001518516909414949350505050565b600061309c601885614560565b6130a586613132565b1480156130c357506130b8601884614560565b6130c18661314b565b145b61310f5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642074696c6520636f6f7264696e6174657300000000000000006044820152606401612d85565b610d0161311d6018866145c5565b6131286018866145c5565b87519190856139ba565b80515160009060e09060015b6020020151901c92915050565b80515160009060e090600261313e565b600083600101600061316d8585612d01565b81526020019081526020016000205490509392505050565b6000613192601885614560565b61319b86613132565b1480156131b957506131ae601884614560565b6131b78661314b565b145b6132055760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642074696c6520636f6f7264696e6174657300000000000000006044820152606401612d85565b610d016132136018866145c5565b61321e6018866145c5565b8751919085613b82565b60006106b08260000151612f4f565b61323f61403a565b815151815177800000800000800000800000800000800000800000800000601792831b81169091528351602090810151845190841b83169101528351604001518351921b169060025b6020020152919050565b61329a61403a565b8151602081015160a81b62ffffff60a81b16906132b89060006112bb565b82519117905281518051604082015162ffffff60a892831c1692911b62ffffff60a81b16906132e89060016112bb565b1717816000015160016003811061330f57634e487b7160e01b600052603260045260246000fd5b6020020152815160a89062ffffff60a81b90600160200201518451911690911c9061333b9060026112bb565b82519117906002613288565b61334f61403a565b81515181517501000001000001000001000001000001000001000001601792831c81169091528351602090810151845190841c83169101528351604001518351921c16906002613288565b80515151825151516000911480156133bf575081515160209081015184515190910151145b8015610755575050515160409081015191515101511490565b6133e0613fe4565b6133e982613132565b6133f284613132565b14801561340e57506134038261314b565b61340c8461314b565b145b61345a5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642074696c6520636f6f7264696e6174657300000000000000006044820152606401612d85565b8151835161346791613d3c565b83525090919050565b61347861403a565b8151604001516001600160c01b0316600081156134b25761349882613d8a565b83519091506001821b9060025b602002015250610f839050565b8351602001516001600160c01b0316915081156134e3576134d282613d8a565b8351909150600180831b91906134a5565b8351516001600160c01b03169150811561350b5761350082613d8a565b83516001821b905290505b5050919050565b51604080820151925190810151602080840151908301519351925190921892909118919091179118176001600160c01b03161590565b613550613fe4565b61355982613132565b61356284613132565b14801561357e57506135738261314b565b61357c8461314b565b145b6135ca5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642074696c6520636f6f7264696e6174657300000000000000006044820152606401612d85565b8151835161346791613dee565b6135df613fe4565b6135ea601885614560565b6135f386613132565b1480156136115750613606601884614560565b61360f8661314b565b145b61365d5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642074696c6520636f6f7264696e6174657300000000000000006044820152606401612d85565b61368061366b6018866145c5565b6136766018866145c5565b8751919085613e37565b855250929392505050565b51604080820151925190810151602080840151908301519351925190921692909116919091179116176001600160c01b0316151590565b6136ca613fe4565b6136d2613fe4565b60e06136df601886614560565b825151911b60209091015260e06136f7601885614560565b825151911b6040909101529392505050565b613711613fe4565b61371c601885614560565b61372586613132565b1480156137435750613738601884614560565b6137418661314b565b145b61378f5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642074696c6520636f6f7264696e6174657300000000000000006044820152606401612d85565b61368061379d6018866145c5565b6137a86018866145c5565b8751919085612d25565b600081600114156137c557506001610f83565b81600314156137d657506007610f83565b81600614156137e75750603f610f83565b81600c14156137f95750610fff610f83565b816018141561380c575062ffffff610f83565b506000919050565b600061383e77555555555555555555555555555555555555555555555555600184901c1683614593565b915061386b77333333333333333333333333333333333333333333333333600284901c8116908416614548565b915061387b600483901c83614548565b770f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f1691506058826b0f0f0f0f0f0f0f0f0f0f0f0f166b0101010101010101010101016138bf9190614574565b6138d9606085901c6b010101010101010101010101614574565b6138e39190614548565b60ff911c1692915050565b60006018831080156139005750601882105b61394c5760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e61746573000000000000000000000000006044820152606401612d85565b6000613959600884614560565b905060006139686008856145c5565b613973906018614574565b61397d9086614548565b6001901b90508081876000015184600381106139a957634e487b7160e01b600052603260045260246000fd5b602002015116149695505050505050565b60006018841080156139cc5750601883105b613a185760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642074696c6520636f6f7264696e6174657300000000000000006044820152606401612d85565b613a2282856145c5565b158015613a365750613a3482846145c5565b155b613a825760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e61746573000000000000000000000000006044820152606401612d85565b6000613a8d836137b2565b905080613acb5760405162461bcd60e51b815260206004820152600c60248201526b696e76616c69642073697a6560a01b6044820152606401612d85565b60005b83811015613b755760006008613ae48388614548565b613aee9190614560565b905060006008613afe8489614548565b613b0891906145c5565b613b13906018614574565b613b1d9089614548565b84901b905080818a600001518460038110613b4857634e487b7160e01b600052603260045260246000fd5b60200201511614613b60576000945050505050610b17565b50508080613b6d906145aa565b915050613ace565b5060019695505050505050565b6000601884108015613b945750601883105b613be05760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642074696c6520636f6f7264696e6174657300000000000000006044820152606401612d85565b613bea82856145c5565b158015613bfe5750613bfc82846145c5565b155b613c4a5760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e61746573000000000000000000000000006044820152606401612d85565b6000613c55836137b2565b905080613c935760405162461bcd60e51b815260206004820152600c60248201526b696e76616c69642073697a6560a01b6044820152606401612d85565b60005b83811015611ea75760006008613cac8388614548565b613cb69190614560565b905060006008613cc68489614548565b613cd091906145c5565b613cdb906018614574565b613ce59089614548565b84901b90508089600001518360038110613d0f57634e487b7160e01b600052603260045260246000fd5b60200201511615613d27576001945050505050610b17565b50508080613d34906145aa565b915050613c96565b613d4461403a565b50805151825180516001600160c01b0392831617905281516020908101518451909101805191831690911790529051604090810151835190910180519190921617905290565b600067ffffffffffffffff828116613db757604092831c929150808316613db757604083901c9250608091505b60205b801561350b5790811c90838216613ddc5792831c92613dd98184614548565b92505b613de7600282614560565b9050613dba565b613df661403a565b815151835180516001600160c01b03928316191690528251602090810151855190910180519183161990911690528251604001518451911619906002612f3c565b613e3f61403a565b601884108015613e4f5750601883105b613e9b5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642074696c6520636f6f7264696e6174657300000000000000006044820152606401612d85565b613ea582856145c5565b158015613eb95750613eb782846145c5565b155b613f055760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e61746573000000000000000000000000006044820152606401612d85565b6000613f10836137b2565b905080613f4e5760405162461bcd60e51b815260206004820152600c60248201526b696e76616c69642073697a6560a01b6044820152606401612d85565b60005b83811015612ed65760006008613f678388614548565b613f719190614560565b90506008613f7f8388614548565b613f8991906145c5565b613f94906018614574565b613f9e9088614548565b83901b1988600001518260038110613fc657634e487b7160e01b600052603260045260246000fd5b60200201805190911690525080613fdc816145aa565b915050613f51565b6040518060200160405280613ff761403a565b905290565b826003810192821561402a579160200282015b8281111561402a57825182559160200191906001019061400f565b5061403692915061406e565b5090565b6040518060200160405280613ff7614083565b5080546000825560030290600052602060002090810190610f7c91906140a1565b5b80821115614036576000815560010161406f565b60405180606001604052806003906020820280368337509192915050565b808211156140365760008082556001820181905560028201556003016140a1565b6000606082840312156140d3578081fd5b6140dd60206144f3565b90506140e983836140f1565b815292915050565b600060608284031215614102578081fd5b602061410d816144f3565b915083601f84011261411e57600080fd5b61412860606144f3565b80848660608701111561413a57600080fd5b60005b600381101561415a5781358452928401929084019060010161413d565b5050835250909392505050565b600060208284031215614178578081fd5b5035919050565b60008060408385031215614191578081fd5b8235915060208084013567ffffffffffffffff8111156141af578283fd5b8401601f810186136141bf578283fd5b80356141d26141cd82614524565b6144f3565b818152838101908385016060808502860187018b10156141f0578788fd5b8795505b8486101561421c576142068b836140c2565b84526001959095019492860192908101906141f4565b5096999098509650505050505050565b6000806040838503121561423e578182fd5b8235915060208084013567ffffffffffffffff81111561425c578283fd5b8401601f8101861361426c578283fd5b803561427a6141cd82614524565b818152838101908385016060808502860187018b1015614298578788fd5b8795505b8486101561421c576142ae8b836140f1565b845260019590950194928601929081019061429c565b600080604083850312156142d6578182fd5b50508035926020909101359150565b600080608083850312156142f7578182fd5b8235915061430884602085016140c2565b90509250929050565b6000808284036101a0811215614325578283fd5b83359250610180601f198201121561433b578182fd5b5061434660806144f3565b61435385602086016140c2565b815261436285608086016140c2565b60208201526143748560e086016140c2565b60408201526143878561014086016140c2565b6060820152809150509250929050565b6000806000606084860312156143ab578081fd5b505081359360208301359350604090920135919050565b600080600080608085870312156143d7578081fd5b5050823594602084013594506040840135936060013592509050565b80518260005b60038110156144185782518252602092830192909101906001016143f9565b5050505050565b6020808252825182820181905260009190848201906040850190845b818110156144625761444f838551516143f3565b928401926060929092019160010161443b565b50909695505050505050565b60408082528351908201819052600090606090818401906020808801855b838110156144af5761449f8583516143f3565b938501939082019060010161448c565b5050951515949095019390935250909392505050565b600060808201905083151582526107556020830184516143f3565b60006060820190506106b08284516143f3565b604051601f8201601f1916810167ffffffffffffffff8111828210171561451c5761451c614605565b604052919050565b600067ffffffffffffffff82111561453e5761453e614605565b5060209081020190565b6000821982111561455b5761455b6145d9565b500190565b60008261456f5761456f6145ef565b500490565b600081600019048311821515161561458e5761458e6145d9565b500290565b6000828210156145a5576145a56145d9565b500390565b60006000198214156145be576145be6145d9565b5060010190565b6000826145d4576145d46145ef565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122071e1160b3d415d173af93fc434753525d3cdc48766912a625b2c1fee378aabe464736f6c63430008020033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "The key of the mapping is a combination of x and y.This library try to reduce the gas consumption and to do that it accesses the internal structure of the Tiles",
    "kind": "dev",
    "methods": {
      "assign(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "params": {
          "self": "the Map in which the bits are set",
          "tile": "the tile that is used to assign the bits inside the map"
        }
      },
      "assign(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "params": {
          "self": "the Map in which the bits are set",
          "tiles": "the list of TileWithCoord"
        }
      },
      "at(MapLib.Map storage,uint256)": {
        "details": "used to iterate off-chain over the tiles.",
        "params": {
          "index": "the index of the tile",
          "self": "the Map"
        },
        "returns": {
          "_0": "the tile that is in the position index in the list"
        }
      },
      "at(MapLib.Map storage,uint256,uint256)": {
        "details": "used to iterate off-chain over the tiles.",
        "params": {
          "limit": "amount of tiles to get",
          "offset": "initial offset used to paginate",
          "self": "the Map"
        },
        "returns": {
          "_0": "the partial list of tiles"
        }
      },
      "clear(MapLib.Map storage)": {
        "params": {
          "self": "the Map in which the bits are cleared"
        }
      },
      "clear(MapLib.Map storage,MapLib.Map storage)": {
        "params": {
          "other": "the map that is used as source to clear the bits in the current one",
          "self": "the Map in which the bits are cleared"
        }
      },
      "clear(MapLib.Map storage,MapLib.TranslateResult)": {
        "params": {
          "s": "translation result, the result of a translation of a tile are four tiles.",
          "self": "the Map in which the bits are cleared"
        }
      },
      "clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "params": {
          "self": "the Map, in which the bits will be cleared",
          "tile": "the tile that is used to clear the bits inside the map"
        },
        "returns": {
          "_0": "false if the the coordinates are not found so the bits are already cleared"
        }
      },
      "clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "params": {
          "self": "the Map in which the bits are cleared",
          "tiles": "the list of TileWithCoord"
        }
      },
      "clear(MapLib.Map storage,uint256,uint256,uint256)": {
        "details": "the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract",
        "params": {
          "self": "the Map, in which the bits will be cleared",
          "size": "the size of the square",
          "x": "the x coordinate of the square",
          "y": "the y coordinate of the square"
        },
        "returns": {
          "_0": "false if the the coordinates are not found so the bits are already cleared"
        }
      },
      "contain(MapLib.Map storage,MapLib.Map storage)": {
        "details": "self can be huge, but other must be small, we iterate over other values.",
        "params": {
          "other": "the Map that must be included",
          "self": "the Map that is checked for inclusion"
        },
        "returns": {
          "_0": "true if self contain other Map"
        }
      },
      "contain(MapLib.Map storage,MapLib.TranslateResult)": {
        "details": "this routine is used to match an experience template after translation",
        "params": {
          "s": "the translation result that must be included",
          "self": "the bigger Tile that is checked for inclusion"
        },
        "returns": {
          "_0": "true if self contain all the bits in the translation result"
        }
      },
      "contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "params": {
          "self": "the Map that is checked for inclusion",
          "tile": "the TileWithCoord that must be included"
        },
        "returns": {
          "_0": "true if self contain tile TileWithCoord"
        }
      },
      "contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "params": {
          "self": "the Map that is checked for inclusion",
          "tiles": "the TileWithCoord that must be included"
        },
        "returns": {
          "_0": "true if self contain tiles TileWithCoord[]"
        }
      },
      "contain(MapLib.Map storage,uint256,uint256)": {
        "params": {
          "self": "the Map where the check is done",
          "x": "the x coordinate",
          "y": "the  coordinate"
        },
        "returns": {
          "_0": "true if the x,y coordinate bit is set or false if it is cleared"
        }
      },
      "contain(MapLib.Map storage,uint256,uint256,uint256)": {
        "details": "the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract",
        "params": {
          "self": "the Map where the check is done",
          "size": "the size of the square",
          "x": "the x coordinate of the square",
          "y": "the y coordinate of the square"
        },
        "returns": {
          "_0": "true if al the bits are set or false if at least one bit is cleared"
        }
      },
      "floodStep(MapLib.Map storage,TileLib.Tile[])": {
        "params": {
          "current": "the current image",
          "self": "the map"
        },
        "returns": {
          "done": "true if the current image is the same as the next one so the algorithm is ready to stop flooding.",
          "next": "return the image with the extra pixels that correspond to the flooding process"
        }
      },
      "get(MapLib.Map storage,uint256,uint256)": {
        "params": {
          "self": "the map",
          "x": "the x coordinate of the square",
          "y": "the y coordinate of the square"
        },
        "returns": {
          "found": "true if the tile inside the map wad found",
          "tile": "the tile with coords inside the map"
        }
      },
      "getLandCount(MapLib.Map storage)": {
        "params": {
          "self": "the map"
        },
        "returns": {
          "_0": "the quantity of lands"
        }
      },
      "getLandCount(MapLib.Map storage,uint256,uint256,uint256)": {
        "details": "the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract",
        "params": {
          "self": "the map",
          "size": "the size of the square",
          "x": "the x coordinate of the square",
          "y": "the y coordinate of the square"
        },
        "returns": {
          "_0": "the quantity of lands"
        }
      },
      "getMap(MapLib.Map storage)": {
        "details": "Use only for testing. This can be problematic if it grows too much !!!",
        "params": {
          "self": "the map"
        },
        "returns": {
          "_0": "the list of internal tiles"
        }
      },
      "intersect(MapLib.Map storage,MapLib.Map storage)": {
        "details": "self can be huge, but other must be small, we iterate over other values.",
        "params": {
          "other": "the Map that must be included",
          "self": "the Map that is checked for inclusion"
        },
        "returns": {
          "_0": "true if there is at least one bit set in both Maps"
        }
      },
      "intersect(MapLib.Map storage,MapLib.TranslateResult)": {
        "params": {
          "s": "the four tiles that are the result of a translation",
          "self": "the Map to compare"
        },
        "returns": {
          "_0": "true if there is at least one bit set in both the Map and the TranslationResult"
        }
      },
      "intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "params": {
          "self": "the Map to compare",
          "tile": "the TileWithCoord to compare"
        },
        "returns": {
          "_0": "true if there is at least one bit set in both the Map and the TileWithCoord"
        }
      },
      "intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "params": {
          "self": "the Map that is checked for inclusion",
          "tiles": "the TileWithCoord that must be included"
        },
        "returns": {
          "_0": "true if there is at least one bit set in both the Map and the TileWithCoord[]"
        }
      },
      "intersect(MapLib.Map storage,uint256,uint256,uint256)": {
        "details": "the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract",
        "params": {
          "self": "the Map where the check is done",
          "size": "the size of the square",
          "x": "the x coordinate of the square",
          "y": "the y coordinate of the square"
        },
        "returns": {
          "_0": "true if there is at least one bit set in both the Map and the square"
        }
      },
      "isAdjacent(MapLib.Map storage)": {
        "details": "Checks the full map to see if all the pixels are adjacent",
        "params": {
          "self": "the map"
        },
        "returns": {
          "ret": "true if all the bits (lands) are adjacent"
        }
      },
      "isAdjacent(MapLib.Map storage,uint256,uint256,uint256)": {
        "details": "used to add a quad to a map, it is cheaper than isAdjacent(map)",
        "params": {
          "self": "the map",
          "size": "the size of the square",
          "x": "the x coordinate of the square",
          "y": "the y coordinate of the square"
        },
        "returns": {
          "_0": "true if the square is 4-connected to the map"
        }
      },
      "isEmpty(MapLib.Map storage)": {
        "params": {
          "self": "the Map to check"
        },
        "returns": {
          "_0": "true if the map is empty"
        }
      },
      "isEqual(MapLib.Map storage,MapLib.Map storage)": {
        "params": {
          "other": "the second Map to check",
          "self": "the first Map to check"
        },
        "returns": {
          "_0": "true if the two maps are equal"
        }
      },
      "isEqual(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "params": {
          "other": "the list of TileWithCoord to check",
          "self": "the Map to check"
        },
        "returns": {
          "_0": "true if the two are equal"
        }
      },
      "length(MapLib.Map storage)": {
        "details": "used to iterate off-chain over the tiles.",
        "params": {
          "self": "the Map"
        },
        "returns": {
          "_0": "the length of the list"
        }
      },
      "set(MapLib.Map storage,MapLib.Map storage)": {
        "params": {
          "other": "the map that is used as source to set the bits in the current one",
          "self": "the Map in which the bits are set"
        }
      },
      "set(MapLib.Map storage,MapLib.TranslateResult)": {
        "params": {
          "s": "translation result, the result of a translation of a tile are four tiles.",
          "self": "the Map in which the bits are set"
        }
      },
      "set(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "params": {
          "self": "the Map in which the bits are set",
          "tile": "the tile that is used to set the bits inside the map"
        }
      },
      "set(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "params": {
          "self": "the Map in which the bits are set",
          "tiles": "the list of TileWithCoord"
        }
      },
      "set(MapLib.Map storage,uint256,uint256,uint256)": {
        "details": "the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract",
        "params": {
          "self": "the Map in which the bits are set",
          "size": "the size of the square",
          "x": "the x coordinate of the square",
          "y": "the y coordinate of the square"
        }
      }
    },
    "title": "An iterable mapping of Tiles (24x24 bit set).",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assign(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "notice": "Given a TileWithCoord set the values of this tile in the map to the given one"
      },
      "assign(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "notice": "Set the values of a list of TileWithCoord in the current one"
      },
      "at(MapLib.Map storage,uint256)": {
        "notice": "get the tile that is in certain position in the internal list of tiles"
      },
      "at(MapLib.Map storage,uint256,uint256)": {
        "notice": "get the internal list of tiles with pagination"
      },
      "clear(MapLib.Map storage)": {
        "notice": "Clear the all the bits in the map"
      },
      "clear(MapLib.Map storage,MapLib.Map storage)": {
        "notice": "Clear the bits of another map in the current one"
      },
      "clear(MapLib.Map storage,MapLib.TranslateResult)": {
        "notice": "Given a translation of a tile the corresponding bits are cleared in the current map"
      },
      "clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "notice": "Given a TileWithCoord (a tile that includes coordinates inside it) clear the corresponding bits in the map"
      },
      "clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "notice": "Clear the bits of a list of TileWithCoord"
      },
      "clear(MapLib.Map storage,uint256,uint256,uint256)": {
        "notice": "Clear the bits inside a square that has size x size in the x,y coordinates in the map"
      },
      "contain(MapLib.Map storage,MapLib.Map storage)": {
        "notice": "Check if a Map includes all the bits that are set in another Map"
      },
      "contain(MapLib.Map storage,MapLib.TranslateResult)": {
        "notice": "Check if a Map includes all the bits that are set in translation result"
      },
      "contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "notice": "Check if a Map includes all the bits that are set in a TileWithCoord"
      },
      "contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "notice": "Check if a Map includes all the bits that are set in a TileWithCoord[]"
      },
      "contain(MapLib.Map storage,uint256,uint256)": {
        "notice": "Check if the bit in certain coordinate are set or not inside the map"
      },
      "contain(MapLib.Map storage,uint256,uint256,uint256)": {
        "notice": "Check if the all the bits of a square inside the Map are set or not"
      },
      "floodStep(MapLib.Map storage,TileLib.Tile[])": {
        "notice": "used to check adjacency. See: https://en.wikipedia.org/wiki/Flood_fill and isAdjacent."
      },
      "get(MapLib.Map storage,uint256,uint256)": {
        "notice": "return a tile from the Map by his coordinates"
      },
      "getLandCount(MapLib.Map storage)": {
        "notice": "count the amount of bits (lands) set inside a Map"
      },
      "getLandCount(MapLib.Map storage,uint256,uint256,uint256)": {
        "notice": "count the amount of bits (lands) set inside a Map filtered by quad"
      },
      "getMap(MapLib.Map storage)": {
        "notice": "return the internal list of tiles"
      },
      "intersect(MapLib.Map storage,MapLib.Map storage)": {
        "notice": "Check if a Map includes any of the bits that are set in another Map"
      },
      "intersect(MapLib.Map storage,MapLib.TranslateResult)": {
        "notice": "Check if a map has at least one bit in common with some translation result"
      },
      "intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "notice": "Check if a map has at least one bit in common with some TileWithCoord"
      },
      "intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "notice": "Check if a Map has at least one of the bits that are set in a TileWithCoord[]"
      },
      "intersect(MapLib.Map storage,uint256,uint256,uint256)": {
        "notice": "Check if a map has at least one bit in common with a square (x,y,size)"
      },
      "isAdjacent(MapLib.Map storage)": {
        "notice": "check that the map has only one 4-connected component, aka everything is adjacent"
      },
      "isAdjacent(MapLib.Map storage,uint256,uint256,uint256)": {
        "notice": "check if a square is adjacent (4-connected component) to the current map."
      },
      "isEmpty(MapLib.Map storage)": {
        "notice": "Check if a map is empty (no bits are set)"
      },
      "isEqual(MapLib.Map storage,MapLib.Map storage)": {
        "notice": "Check if two maps are equal"
      },
      "isEqual(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "notice": "Check if a map is equal to an array of TileWithCoord"
      },
      "length(MapLib.Map storage)": {
        "notice": "return the length of the internal list of tiles"
      },
      "set(MapLib.Map storage,MapLib.Map storage)": {
        "notice": "Merge the bits of another map in the current one"
      },
      "set(MapLib.Map storage,MapLib.TranslateResult)": {
        "notice": "Given a translation of a tile the corresponding bits are set in the current map"
      },
      "set(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "notice": "Given a TileWithCoord (a tile that includes coordinates inside it) set the corresponding bits in the map"
      },
      "set(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "notice": "Merge the bits of a list of TileWithCoord in the current one"
      },
      "set(MapLib.Map storage,uint256,uint256,uint256)": {
        "notice": "Set the bits inside a square that has size x size in the x,y coordinates in the map"
      }
    },
    "notice": "Used to represent a the presence or absence of certain x,y coordinate in a map of lands",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}