{
  "address": "0xAbA89821c0eeBBe019b895e2c7A3b853DCB884c8",
  "abi": [],
  "transactionHash": "0x7868b45e68af9e42a488fa03881866c8771d61fc24488a994cf5a8f745e63de6",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0xAbA89821c0eeBBe019b895e2c7A3b853DCB884c8",
    "transactionIndex": 8,
    "gasUsed": "3558340",
    "logsBloom": "0x
    "blockHash": "0x067afe76b526789efa46d9d167945158b0fbbc736d4872f72759d47c722ea9d1",
    "transactionHash": "0x7868b45e68af9e42a488fa03881866c8771d61fc24488a994cf5a8f745e63de6",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 27229835,
        "transactionHash": "0x7868b45e68af9e42a488fa03881866c8771d61fc24488a994cf5a8f745e63de6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000018645c06d122870000000000000000000000000000000000000000000000000034b67236b28e4dd0000000000000000000000000000000000000000000004e042dd031e1fd0e49000000000000000000000000000000000000000000000000001c52162fe16bc6d0000000000000000000000000000000000000000000004e0446348de8ce30d00",
        "logIndex": 16,
        "blockHash": "0x067afe76b526789efa46d9d167945158b0fbbc736d4872f72759d47c722ea9d1"
      }
    ],
    "blockNumber": 27229835,
    "cumulativeGasUsed": "4716754",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d30173aa61b27c0632df2346127d859a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"The key of the mapping is a combination of x and y.This library try to reduce the gas consumption and to do that it accesses the internal structure of the Tiles\",\"kind\":\"dev\",\"methods\":{\"at(MapLib.Map storage,uint256)\":{\"details\":\"used to iterate off-chain over the tiles.\",\"params\":{\"index\":\"the index of the tile\",\"self\":\"the Map\"},\"returns\":{\"_0\":\"the tile that is in the position index in the list\"}},\"at(MapLib.Map storage,uint256,uint256)\":{\"details\":\"used to iterate off-chain over the tiles.\",\"params\":{\"limit\":\"amount of tiles to get\",\"offset\":\"initial offset used to paginate\",\"self\":\"the Map\"},\"returns\":{\"_0\":\"the partial list of tiles\"}},\"clear(MapLib.Map storage)\":{\"params\":{\"self\":\"the Map in which the bits are cleared\"}},\"clear(MapLib.Map storage,MapLib.Map storage)\":{\"params\":{\"other\":\"the map that is used as source to clear the bits in the current one\",\"self\":\"the Map in which the bits are cleared\"}},\"clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"params\":{\"self\":\"the Map, in which the bits will be cleared\",\"tile\":\"the tile that is used to clear the bits inside the map\"},\"returns\":{\"_0\":\"false if the the coordinates are not found so the bits are already cleared\"}},\"clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"params\":{\"self\":\"the Map in which the bits are cleared\",\"tiles\":\"the list of TileWithCoord\"}},\"clear(MapLib.Map storage,uint256,uint256,uint256)\":{\"details\":\"the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\",\"params\":{\"self\":\"the Map, in which the bits will be cleared\",\"size\":\"the size of the square\",\"x\":\"the x coordinate of the square\",\"y\":\"the y coordinate of the square\"},\"returns\":{\"_0\":\"false if the the coordinates are not found so the bits are already cleared\"}},\"contain(MapLib.Map storage,MapLib.Map storage)\":{\"details\":\"self can be huge, but other must be small, we iterate over other values.\",\"params\":{\"other\":\"the Map that must be included\",\"self\":\"the Map that is checked for inclusion\"},\"returns\":{\"_0\":\"true if self contain other Map\"}},\"contain(MapLib.Map storage,MapLib.TranslateResult)\":{\"details\":\"this routine is used to match an experience template after translation\",\"params\":{\"s\":\"the translation result that must be included\",\"self\":\"the bigger Tile that is checked for inclusion\"},\"returns\":{\"_0\":\"true if self contain all the bits in the translation result\"}},\"contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"params\":{\"self\":\"the Map that is checked for inclusion\",\"tile\":\"the TileWithCoord that must be included\"},\"returns\":{\"_0\":\"true if self contain tile TileWithCoord\"}},\"contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"params\":{\"self\":\"the Map that is checked for inclusion\",\"tiles\":\"the TileWithCoord that must be included\"},\"returns\":{\"_0\":\"true if self contain tiles TileWithCoord[]\"}},\"contain(MapLib.Map storage,uint256,uint256)\":{\"params\":{\"self\":\"the Map where the check is done\",\"x\":\"the x coordinate\",\"y\":\"the  coordinate\"},\"returns\":{\"_0\":\"true if the x,y coordinate bit is set or false if it is cleared\"}},\"contain(MapLib.Map storage,uint256,uint256,uint256)\":{\"details\":\"the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\",\"params\":{\"self\":\"the Map where the check is done\",\"size\":\"the size of the square\",\"x\":\"the x coordinate of the square\",\"y\":\"the y coordinate of the square\"},\"returns\":{\"_0\":\"true if al the bits are set or false if at least one bit is cleared\"}},\"floodStep(MapLib.Map storage,TileLib.Tile[])\":{\"params\":{\"current\":\"the current image\",\"self\":\"the map\"},\"returns\":{\"done\":\"true if the current image is the same as the next one so the algorithm is ready to stop flooding.\",\"next\":\"return the image with the extra pixels that correspond to the flooding process\"}},\"getLandCount(MapLib.Map storage)\":{\"params\":{\"self\":\"the map\"},\"returns\":{\"_0\":\"the quantity of lands\"}},\"getMap(MapLib.Map storage)\":{\"details\":\"Use only for testing. This can be problematic if it grows too much !!!\",\"params\":{\"self\":\"the map\"},\"returns\":{\"_0\":\"the list of internal tiles\"}},\"intersect(MapLib.Map storage,MapLib.Map storage)\":{\"details\":\"self can be huge, but other must be small, we iterate over other values.\",\"params\":{\"other\":\"the Map that must be included\",\"self\":\"the Map that is checked for inclusion\"},\"returns\":{\"_0\":\"true if there is at least one bit set in both Maps\"}},\"intersect(MapLib.Map storage,MapLib.TranslateResult)\":{\"params\":{\"s\":\"the four tiles that are the result of a translation\",\"self\":\"the Map to compare\"},\"returns\":{\"_0\":\"true if there is at least one bit set in both the Map and the TranslationResult\"}},\"intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"params\":{\"self\":\"the Map to compare\",\"tile\":\"the TileWithCoord to compare\"},\"returns\":{\"_0\":\"true if there is at least one bit set in both the Map and the TileWithCoord\"}},\"intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"params\":{\"self\":\"the Map that is checked for inclusion\",\"tiles\":\"the TileWithCoord that must be included\"},\"returns\":{\"_0\":\"true if there is at least one bit set in both the Map and the TileWithCoord[]\"}},\"intersect(MapLib.Map storage,uint256,uint256,uint256)\":{\"details\":\"the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\",\"params\":{\"self\":\"the Map where the check is done\",\"size\":\"the size of the square\",\"x\":\"the x coordinate of the square\",\"y\":\"the y coordinate of the square\"},\"returns\":{\"_0\":\"true if there is at least one bit set in both the Map and the square\"}},\"isAdjacent(MapLib.Map storage)\":{\"details\":\"Checks the full map to see if all the pixels are adjacent\",\"params\":{\"self\":\"the map\"},\"returns\":{\"ret\":\"true if all the bits (lands) are adjacent\"}},\"isAdjacent(MapLib.Map storage,uint256,uint256,uint256)\":{\"details\":\"used to add a quad to a map, it is cheaper than isAdjacent(map)\",\"params\":{\"self\":\"the map\",\"size\":\"the size of the square\",\"x\":\"the x coordinate of the square\",\"y\":\"the y coordinate of the square\"},\"returns\":{\"_0\":\"true if the square is 4-connected to the map\"}},\"isEmpty(MapLib.Map storage)\":{\"params\":{\"self\":\"the Map to check\"},\"returns\":{\"_0\":\"true if the map is empty\"}},\"isEqual(MapLib.Map storage,MapLib.Map storage)\":{\"params\":{\"other\":\"the second Map to check\",\"self\":\"the first Map to check\"},\"returns\":{\"_0\":\"true if the two maps are equal\"}},\"isEqual(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"params\":{\"other\":\"the list of TileWithCoord to check\",\"self\":\"the Map to check\"},\"returns\":{\"_0\":\"true if the two are equal\"}},\"length(MapLib.Map storage)\":{\"details\":\"used to iterate off-chain over the tiles.\",\"params\":{\"self\":\"the Map\"},\"returns\":{\"_0\":\"the length of the list\"}},\"set(MapLib.Map storage,MapLib.Map storage)\":{\"params\":{\"other\":\"the map that is used as source to set the bits in the current one\",\"self\":\"the Map in which the bits are set\"}},\"set(MapLib.Map storage,MapLib.TranslateResult)\":{\"params\":{\"s\":\"translation result, the result of a translation of a tile are four tiles.\",\"self\":\"the Map in which the bits are set\"}},\"set(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"params\":{\"self\":\"the Map in which the bits are set\",\"tile\":\"the tile that is used to set the bits inside the map\"}},\"set(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"params\":{\"self\":\"the Map in which the bits are set\",\"tiles\":\"the list of TileWithCoord\"}},\"set(MapLib.Map storage,uint256,uint256,uint256)\":{\"details\":\"the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\",\"params\":{\"self\":\"the Map in which the bits are set\",\"size\":\"the size of the square\",\"x\":\"the x coordinate of the square\",\"y\":\"the y coordinate of the square\"}}},\"title\":\"An iterable mapping of Tiles (24x24 bit set).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"at(MapLib.Map storage,uint256)\":{\"notice\":\"get the tile that is in certain position in the internal list of tiles\"},\"at(MapLib.Map storage,uint256,uint256)\":{\"notice\":\"get the internal list of tiles with pagination\"},\"clear(MapLib.Map storage)\":{\"notice\":\"Clear the all the bits in the map\"},\"clear(MapLib.Map storage,MapLib.Map storage)\":{\"notice\":\"Clear the bits of another map in the current one\"},\"clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"notice\":\"Given a TileWithCoord (a tile that includes coordinates inside it) clear the corresponding bits in the map\"},\"clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"notice\":\"Clear the bits of a list of TileWithCoord\"},\"clear(MapLib.Map storage,uint256,uint256,uint256)\":{\"notice\":\"Clear the bits inside a square that has size x size in the x,y coordinates in the map\"},\"contain(MapLib.Map storage,MapLib.Map storage)\":{\"notice\":\"Check if a Map includes all the bits that are set in another Map\"},\"contain(MapLib.Map storage,MapLib.TranslateResult)\":{\"notice\":\"Check if a Map includes all the bits that are set in translation result\"},\"contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"notice\":\"Check if a Map includes all the bits that are set in a TileWithCoord\"},\"contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"notice\":\"Check if a Map includes all the bits that are set in a TileWithCoord[]\"},\"contain(MapLib.Map storage,uint256,uint256)\":{\"notice\":\"Check if the bit in certain coordinate are set or not inside the map\"},\"contain(MapLib.Map storage,uint256,uint256,uint256)\":{\"notice\":\"Check if the all the bits of a square inside the Map are set or not\"},\"floodStep(MapLib.Map storage,TileLib.Tile[])\":{\"notice\":\"used to check adjacency. See: https://en.wikipedia.org/wiki/Flood_fill and isAdjacent.\"},\"getLandCount(MapLib.Map storage)\":{\"notice\":\"count the amount of bits (lands) set inside a Map\"},\"getMap(MapLib.Map storage)\":{\"notice\":\"return the internal list of tiles\"},\"intersect(MapLib.Map storage,MapLib.Map storage)\":{\"notice\":\"Check if a Map includes any of the bits that are set in another Map\"},\"intersect(MapLib.Map storage,MapLib.TranslateResult)\":{\"notice\":\"Check if a map has at least one bit in common with some translation result\"},\"intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"notice\":\"Check if a map has at least one bit in common with some TileWithCoord\"},\"intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"notice\":\"Check if a Map has at least one of the bits that are set in a TileWithCoord[]\"},\"intersect(MapLib.Map storage,uint256,uint256,uint256)\":{\"notice\":\"Check if a map has at least one bit in common with a square (x,y,size)\"},\"isAdjacent(MapLib.Map storage)\":{\"notice\":\"check that the map has only one 4-connected component, aka everything is adjacent\"},\"isAdjacent(MapLib.Map storage,uint256,uint256,uint256)\":{\"notice\":\"check if a square is adjacent (4-connected component) to the current map.\"},\"isEmpty(MapLib.Map storage)\":{\"notice\":\"Check if a map is empty (no bits are set)\"},\"isEqual(MapLib.Map storage,MapLib.Map storage)\":{\"notice\":\"Check if two maps are equal\"},\"isEqual(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"notice\":\"Check if a map is equal to an array of TileWithCoord\"},\"length(MapLib.Map storage)\":{\"notice\":\"return the length of the internal list of tiles\"},\"set(MapLib.Map storage,MapLib.Map storage)\":{\"notice\":\"Merge the bits of another map in the current one\"},\"set(MapLib.Map storage,MapLib.TranslateResult)\":{\"notice\":\"Given a translation of a tile the corresponding bits are set in the current map\"},\"set(MapLib.Map storage,TileWithCoordLib.TileWithCoord)\":{\"notice\":\"Given a TileWithCoord (a tile that includes coordinates inside it) set the corresponding bits in the map\"},\"set(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])\":{\"notice\":\"Merge the bits of a list of TileWithCoord in the current one\"},\"set(MapLib.Map storage,uint256,uint256,uint256)\":{\"notice\":\"Set the bits inside a square that has size x size in the x,y coordinates in the map\"}},\"notice\":\"Used to represent a the presence or absence of certain x,y coordinate in a map of lands\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/common/Libraries/MapLib.sol\":\"MapLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/solc_0.8/common/Libraries/MapLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/* solhint-disable code-complexity */\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {TileWithCoordLib} from \\\"./TileWithCoordLib.sol\\\";\\nimport {TileLib} from \\\"./TileLib.sol\\\";\\n\\n/// @title An iterable mapping of Tiles (24x24 bit set).\\n/// @notice Used to represent a the presence or absence of certain x,y coordinate in a map of lands\\n/// @dev The key of the mapping is a combination of x and y.\\n/// @dev This library try to reduce the gas consumption and to do that it accesses the internal structure of the Tiles\\nlibrary MapLib {\\n    using TileWithCoordLib for TileWithCoordLib.TileWithCoord;\\n    using TileLib for TileLib.Tile;\\n\\n    uint256 private constant LEFT_MASK = 0x000001000001000001000001000001000001000001000001;\\n    uint256 private constant LEFT_MASK_NEG = ~LEFT_MASK;\\n    uint256 private constant RIGHT_MASK = 0x800000800000800000800000800000800000800000800000;\\n    uint256 private constant RIGHT_MASK_NEG = ~RIGHT_MASK;\\n    uint256 private constant UP_MASK = 0x000000000000000000000000000000000000000000FFFFFF;\\n    uint256 private constant DOWN_MASK = 0xFFFFFF000000000000000000000000000000000000000000;\\n\\n    struct TranslateResult {\\n        TileWithCoordLib.TileWithCoord topLeft;\\n        TileWithCoordLib.TileWithCoord topRight;\\n        TileWithCoordLib.TileWithCoord bottomLeft;\\n        TileWithCoordLib.TileWithCoord bottomRight;\\n    }\\n\\n    // An iterable mapping of tiles (24x24 bit set).\\n    struct Map {\\n        TileWithCoordLib.TileWithCoord[] values;\\n        // Position of the value in the `values` array, plus 1 because index 0 means that the key is not found.\\n        mapping(uint256 => uint256) indexes;\\n    }\\n\\n    /// @notice Set the bits inside a square that has size x size in the x,y coordinates in the map\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map in which the bits are set\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    function set(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            // Add a new tile\\n            TileWithCoordLib.TileWithCoord memory t = TileWithCoordLib.init(x, y);\\n            self.values.push(t.set(x, y, size));\\n            self.indexes[key] = self.values.length;\\n        } else {\\n            // contains\\n            self.values[idx - 1] = self.values[idx - 1].set(x, y, size);\\n        }\\n    }\\n\\n    /// @notice Given a translation of a tile the corresponding bits are set in the current map\\n    /// @param self the Map in which the bits are set\\n    /// @param s translation result, the result of a translation of a tile are four tiles.\\n    function set(Map storage self, TranslateResult memory s) public {\\n        set(self, s.topLeft);\\n        set(self, s.topRight);\\n        set(self, s.bottomLeft);\\n        set(self, s.bottomRight);\\n    }\\n\\n    /// @notice Given a TileWithCoord (a tile that includes coordinates inside it) set the corresponding bits in the map\\n    /// @param self the Map in which the bits are set\\n    /// @param tile the tile that is used to set the bits inside the map\\n    function set(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public {\\n        if (tile.isEmpty()) {\\n            return;\\n        }\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            // Add a new tile\\n            self.values.push(tile);\\n            self.indexes[key] = self.values.length;\\n        } else {\\n            self.values[idx - 1] = self.values[idx - 1].merge(tile);\\n        }\\n    }\\n\\n    /// @notice Merge the bits of a list of TileWithCoord in the current one\\n    /// @param self the Map in which the bits are set\\n    /// @param tiles the list of TileWithCoord\\n    function set(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            set(self, tiles[i]);\\n        }\\n    }\\n\\n    /// @notice Merge the bits of another map in the current one\\n    /// @param self the Map in which the bits are set\\n    /// @param other the map that is used as source to set the bits in the current one\\n    function set(Map storage self, Map storage other) public {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            set(self, other.values[i]);\\n        }\\n    }\\n\\n    /// @notice Clear the bits inside a square that has size x size in the x,y coordinates in the map\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map, in which the bits will be cleared\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return false if the the coordinates are not found so the bits are already cleared\\n    function clear(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains, nothing to clear\\n            return false;\\n        }\\n        TileWithCoordLib.TileWithCoord memory t = self.values[idx - 1].clear(x, y, size);\\n        if (t.isEmpty()) {\\n            _remove(self, idx, key);\\n        } else {\\n            self.values[idx - 1] = t;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Given a TileWithCoord (a tile that includes coordinates inside it) clear the corresponding bits in the map\\n    /// @param self the Map, in which the bits will be cleared\\n    /// @param tile the tile that is used to clear the bits inside the map\\n    /// @return false if the the coordinates are not found so the bits are already cleared\\n    function clear(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public returns (bool) {\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        TileWithCoordLib.TileWithCoord memory t = self.values[idx - 1].clear(tile);\\n        if (t.isEmpty()) {\\n            _remove(self, idx, key);\\n        } else {\\n            self.values[idx - 1] = t;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Clear the bits of a list of TileWithCoord\\n    /// @param self the Map in which the bits are cleared\\n    /// @param tiles the list of TileWithCoord\\n    function clear(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            clear(self, tiles[i]);\\n        }\\n    }\\n\\n    /// @notice Clear the bits of another map in the current one\\n    /// @param self the Map in which the bits are cleared\\n    /// @param other the map that is used as source to clear the bits in the current one\\n    function clear(Map storage self, Map storage other) public {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            clear(self, other.values[i]);\\n        }\\n    }\\n\\n    /// @notice Clear the all the bits in the map\\n    /// @param self the Map in which the bits are cleared\\n    function clear(Map storage self) public {\\n        for (uint256 i; i < self.values.length; i++) {\\n            delete self.indexes[self.values[i].getKey()];\\n        }\\n        delete self.values;\\n    }\\n\\n    /// @notice given a tile, translate all the bits in the x and y direction\\n    /// @dev the result of the translation are four tiles\\n    /// @param deltaX the x distance to translate\\n    /// @param deltaY the y distance to translate\\n    /// @return four tiles with coords that are the result of the translation\\n    function translate(\\n        TileLib.Tile memory tile,\\n        uint256 deltaX,\\n        uint256 deltaY\\n    ) internal pure returns (TranslateResult memory) {\\n        (uint256[6] memory col1, uint256[6] memory col2) = tile.translate(deltaX % 24, deltaY % 24);\\n        return\\n            TranslateResult({\\n                topLeft: TileWithCoordLib.init(deltaX, deltaY, col1[0], col1[1], col1[2]),\\n                bottomLeft: TileWithCoordLib.init(deltaX, deltaY + 24, col1[3], col1[4], col1[5]),\\n                topRight: TileWithCoordLib.init(deltaX + 24, deltaY, col2[0], col2[1], col2[2]),\\n                bottomRight: TileWithCoordLib.init(deltaX + 24, deltaY + 24, col2[3], col2[4], col2[5])\\n            });\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate are set or not inside the map\\n    /// @param self the Map where the check is done\\n    /// @param x the x coordinate\\n    /// @param y the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function contain(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y\\n    ) public view returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].contain(x, y);\\n    }\\n\\n    /// @notice Check if the all the bits of a square inside the Map are set or not\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if al the bits are set or false if at least one bit is cleared\\n    function contain(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public view returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].contain(x, y, size);\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in a TileWithCoord\\n    /// @param self the Map that is checked for inclusion\\n    /// @param tile the TileWithCoord that must be included\\n    /// @return true if self contain tile TileWithCoord\\n    function contain(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public view returns (bool) {\\n        if (tile.isEmpty()) {\\n            return true;\\n        }\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].tile.contain(tile.tile);\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in a TileWithCoord[]\\n    /// @param self the Map that is checked for inclusion\\n    /// @param tiles the TileWithCoord that must be included\\n    /// @return true if self contain tiles TileWithCoord[]\\n    function contain(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public view returns (bool) {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            if (!contain(self, tiles[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in translation result\\n    /// @dev this routine is used to match an experience template after translation\\n    /// @param self the bigger Tile that is checked for inclusion\\n    /// @param s the translation result that must be included\\n    /// @return true if self contain all the bits in the translation result\\n    function contain(Map storage self, TranslateResult memory s) public view returns (bool) {\\n        return\\n            contain(self, s.topLeft) &&\\n            contain(self, s.topRight) &&\\n            contain(self, s.bottomLeft) &&\\n            contain(self, s.bottomRight);\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in another Map\\n    /// @dev self can be huge, but other must be small, we iterate over other values.\\n    /// @param self the Map that is checked for inclusion\\n    /// @param other the Map that must be included\\n    /// @return true if self contain other Map\\n    function contain(Map storage self, Map storage other) public view returns (bool) {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            if (!contain(self, other.values[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if a map has at least one bit in common with a square (x,y,size)\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if there is at least one bit set in both the Map and the square\\n    function intersect(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public view returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !intersect\\n            return false;\\n        }\\n        return self.values[idx - 1].intersect(x, y, size);\\n    }\\n\\n    /// @notice Check if a map has at least one bit in common with some TileWithCoord\\n    /// @param self the Map to compare\\n    /// @param tile the TileWithCoord to compare\\n    /// @return true if there is at least one bit set in both the Map and the TileWithCoord\\n    function intersect(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public view returns (bool) {\\n        if (tile.isEmpty()) {\\n            return false;\\n        }\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].tile.intersect(tile.tile);\\n    }\\n\\n    /// @notice Check if a Map has at least one of the bits that are set in a TileWithCoord[]\\n    /// @param self the Map that is checked for inclusion\\n    /// @param tiles the TileWithCoord that must be included\\n    /// @return true if there is at least one bit set in both the Map and the TileWithCoord[]\\n    function intersect(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public view returns (bool) {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            if (intersect(self, tiles[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Check if a map has at least one bit in common with some translation result\\n    /// @param self the Map to compare\\n    /// @param s the four tiles that are the result of a translation\\n    /// @return true if there is at least one bit set in both the Map and the TranslationResult\\n    function intersect(Map storage self, TranslateResult memory s) public view returns (bool) {\\n        return\\n            intersect(self, s.topLeft) ||\\n            intersect(self, s.topRight) ||\\n            intersect(self, s.bottomLeft) ||\\n            intersect(self, s.bottomRight);\\n    }\\n\\n    /// @notice Check if a Map includes any of the bits that are set in another Map\\n    /// @dev self can be huge, but other must be small, we iterate over other values.\\n    /// @param self the Map that is checked for inclusion\\n    /// @param other the Map that must be included\\n    /// @return true if there is at least one bit set in both Maps\\n    function intersect(Map storage self, Map storage other) public view returns (bool) {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            if (intersect(self, other.values[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Check if a map is empty (no bits are set)\\n    /// @param self the Map to check\\n    /// @return true if the map is empty\\n    function isEmpty(Map storage self) public view returns (bool) {\\n        // We remove the tiles when they are empty\\n        return self.values.length == 0;\\n    }\\n\\n    /// @notice Check if two maps are equal\\n    /// @param self the first Map to check\\n    /// @param other the second Map to check\\n    /// @return true if the two maps are equal\\n    function isEqual(Map storage self, Map storage other) public view returns (bool) {\\n        return isEqual(self, other.values);\\n    }\\n\\n    /// @notice Check if a map is equal to an array of TileWithCoord\\n    /// @param self the Map to check\\n    /// @param other the list of TileWithCoord to check\\n    /// @return true if the two are equal\\n    function isEqual(Map storage self, TileWithCoordLib.TileWithCoord[] memory other) public view returns (bool) {\\n        if (other.length != self.values.length) {\\n            return false;\\n        }\\n        uint256 cant = other.length;\\n        // Check that self contains the same set of tiles than other and they are equal\\n        for (uint256 i; i < cant; i++) {\\n            uint256 key = other[i].getKey();\\n            uint256 idx = self.indexes[key];\\n            if (idx == 0 || !self.values[idx - 1].isEqual(other[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice return the length of the internal list of tiles\\n    /// @dev used to iterate off-chain over the tiles.\\n    /// @param self the Map\\n    /// @return the length of the list\\n    function length(Map storage self) public view returns (uint256) {\\n        return self.values.length;\\n    }\\n\\n    /// @notice get the tile that is in certain position in the internal list of tiles\\n    /// @dev used to iterate off-chain over the tiles.\\n    /// @param self the Map\\n    /// @param index the index of the tile\\n    /// @return the tile that is in the position index in the list\\n    function at(Map storage self, uint256 index) public view returns (TileWithCoordLib.TileWithCoord memory) {\\n        return self.values[index];\\n    }\\n\\n    /// @notice get the internal list of tiles with pagination\\n    /// @dev used to iterate off-chain over the tiles.\\n    /// @param self the Map\\n    /// @param offset initial offset used to paginate\\n    /// @param limit amount of tiles to get\\n    /// @return the partial list of tiles\\n    function at(\\n        Map storage self,\\n        uint256 offset,\\n        uint256 limit\\n    ) public view returns (TileWithCoordLib.TileWithCoord[] memory) {\\n        TileWithCoordLib.TileWithCoord[] memory ret = new TileWithCoordLib.TileWithCoord[](limit);\\n        for (uint256 i; i < limit; i++) {\\n            ret[i] = self.values[offset + i];\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice return the internal list of tiles\\n    /// @dev Use only for testing. This can be problematic if it grows too much !!!\\n    /// @param self the map\\n    /// @return the list of internal tiles\\n    function getMap(Map storage self) public view returns (TileWithCoordLib.TileWithCoord[] memory) {\\n        return self.values;\\n    }\\n\\n    /// @notice count the amount of bits (lands) set inside a Map\\n    /// @param self the map\\n    /// @return the quantity of lands\\n    function getLandCount(Map storage self) public view returns (uint256) {\\n        uint256 ret;\\n        uint256 len = self.values.length;\\n        for (uint256 i; i < len; i++) {\\n            ret += self.values[i].countBits();\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice check if a square is adjacent (4-connected component) to the current map.\\n    /// @dev used to add a quad to a map, it is cheaper than isAdjacent(map)\\n    /// @param self the map\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if the square is 4-connected to the map\\n    function isAdjacent(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public view returns (bool) {\\n        if (isEmpty(self)) {\\n            return true;\\n        }\\n\\n        uint256 idx;\\n        TileLib.Tile memory spot;\\n        spot = spot.set(x % 24, y % 24, size);\\n        // left\\n        if (x >= 24) {\\n            idx = _getIdx(self, x - 24, y);\\n            if (idx != 0 && !self.values[idx - 1].tile.and(_growLeft(spot)).isEmpty()) {\\n                return true;\\n            }\\n        }\\n        // up\\n        if (y >= 24) {\\n            idx = _getIdx(self, x, y - 24);\\n            if (idx != 0 && (self.values[idx - 1].tile.data[0] & ((spot.data[0] & UP_MASK) << (24 * 7))) != 0) {\\n                return true;\\n            }\\n        }\\n        // middle\\n        idx = _getIdx(self, x, y);\\n        if (idx != 0 && !self.values[idx - 1].tile.and(_growMiddle(spot)).isEmpty()) {\\n            return true;\\n        }\\n        // down\\n        idx = _getIdx(self, x, y + 24);\\n        if (idx != 0 && (self.values[idx - 1].tile.data[2] & ((spot.data[2] & DOWN_MASK) >> (24 * 7))) != 0) {\\n            return true;\\n        }\\n        // right\\n        idx = _getIdx(self, x + 24, y);\\n        if (idx != 0 && !self.values[idx - 1].tile.and(_growRight(spot)).isEmpty()) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice check that the map has only one 4-connected component, aka everything is adjacent\\n    /// @dev Checks the full map to see if all the pixels are adjacent\\n    /// @param self the map\\n    /// @return ret true if all the bits (lands) are adjacent\\n    function isAdjacent(Map storage self) public view returns (bool ret) {\\n        if (isEmpty(self)) {\\n            // everything is adjacent to an empty map\\n            return true;\\n        }\\n\\n        TileLib.Tile[] memory spot = new TileLib.Tile[](self.values.length);\\n        // We assume that all self.values[] are non empty (we remove them if they are empty).\\n        spot[0] = self.values[0].tile.findAPixel();\\n        bool done;\\n        while (!done) {\\n            (spot, done) = floodStep(self, spot);\\n        }\\n        uint256 len = self.values.length;\\n        uint256 i;\\n        for (; i < len; i++) {\\n            // Check the tile ignoring coordinates\\n            if (!self.values[i].tile.isEqual(spot[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice used to check adjacency. See: https://en.wikipedia.org/wiki/Flood_fill and isAdjacent.\\n    /// @param self the map\\n    /// @param current the current image\\n    /// @return next return the image with the extra pixels that correspond to the flooding process\\n    /// @return done true if the current image is the same as the next one so the algorithm is ready to stop flooding.\\n    function floodStep(Map storage self, TileLib.Tile[] memory current)\\n        public\\n        view\\n        returns (TileLib.Tile[] memory next, bool done)\\n    {\\n        uint256 len = self.values.length;\\n        uint256 i;\\n        uint256 x;\\n        uint256 y;\\n        uint256 idx;\\n        TileLib.Tile memory ci;\\n        next = new TileLib.Tile[](len);\\n        // grow\\n        for (i; i < len; i++) {\\n            ci = current[i];\\n            // isEmpty\\n            if ((ci.data[0] | ci.data[1] | ci.data[2]) == 0) {\\n                continue;\\n            }\\n            x = self.values[i].getX() * 24;\\n            y = self.values[i].getY() * 24;\\n\\n            // middle, always included\\n            next[i].data[0] |= _grow(ci.data[0]) | ((ci.data[1] & UP_MASK) << (24 * 7));\\n            next[i].data[1] |=\\n                _grow(ci.data[1]) |\\n                ((ci.data[2] & UP_MASK) << (24 * 7)) |\\n                ((ci.data[0] & DOWN_MASK) >> (24 * 7));\\n            next[i].data[2] |= _grow(ci.data[2]) | ((ci.data[1] & DOWN_MASK) >> (24 * 7));\\n            // left\\n            if (x >= 24) {\\n                idx = _getIdx(self, x - 24, y);\\n                if (idx != 0) {\\n                    next[idx - 1].data[0] |= (ci.data[0] & LEFT_MASK) << 23;\\n                    next[idx - 1].data[1] |= (ci.data[1] & LEFT_MASK) << 23;\\n                    next[idx - 1].data[2] |= (ci.data[2] & LEFT_MASK) << 23;\\n                }\\n            }\\n            // up\\n            if (y >= 24) {\\n                idx = _getIdx(self, x, y - 24);\\n                if (idx != 0) {\\n                    next[idx - 1].data[2] |= (ci.data[0] & UP_MASK) << (24 * 7);\\n                }\\n            }\\n            // down\\n            idx = _getIdx(self, x, y + 24);\\n            if (idx != 0) {\\n                next[idx - 1].data[0] |= (ci.data[2] & DOWN_MASK) >> (24 * 7);\\n            }\\n            // right\\n            idx = _getIdx(self, x + 24, y);\\n            if (idx != 0) {\\n                next[idx - 1].data[0] |= (ci.data[0] & RIGHT_MASK) >> 23;\\n                next[idx - 1].data[1] |= (ci.data[1] & RIGHT_MASK) >> 23;\\n                next[idx - 1].data[2] |= (ci.data[2] & RIGHT_MASK) >> 23;\\n            }\\n        }\\n        // Mask it.\\n        done = true;\\n        for (i = 0; i < len; i++) {\\n            // next[i] = next[i].and(self.values[i].tile);\\n            // done = done && next[i].isEqual(current[i]);\\n            next[i].data[0] &= self.values[i].tile.data[0];\\n            next[i].data[1] &= self.values[i].tile.data[1];\\n            next[i].data[2] &= self.values[i].tile.data[2];\\n            done =\\n                done &&\\n                next[i].data[0] == current[i].data[0] &&\\n                next[i].data[1] == current[i].data[1] &&\\n                next[i].data[2] == current[i].data[2];\\n        }\\n        return (next, done);\\n    }\\n\\n    /// @notice delete certain tile from the map\\n    /// @param self the Map where the tile is removed\\n    /// @param idx the index of the tile in the internal list\\n    /// @param key the key of the tile (combination of x,y)\\n    function _remove(\\n        Map storage self,\\n        uint256 idx,\\n        uint256 key\\n    ) private {\\n        uint256 toDeleteIndex = idx - 1;\\n        uint256 lastIndex = self.values.length - 1;\\n        if (lastIndex != toDeleteIndex) {\\n            TileWithCoordLib.TileWithCoord memory lastValue = self.values[lastIndex];\\n            self.values[toDeleteIndex] = lastValue;\\n            self.indexes[lastValue.getKey()] = idx;\\n        }\\n        self.values.pop();\\n        delete self.indexes[key];\\n    }\\n\\n    /// @notice given x and y return the index of the tile inside the internal list of tiles\\n    /// @param self the Map where the tile is removed\\n    /// @param x the x coordinate\\n    /// @param y the y coordinate\\n    /// @return the index in the list + 1 or zero if not found\\n    function _getIdx(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y\\n    ) private view returns (uint256) {\\n        return self.indexes[TileWithCoordLib.getKey(x, y)];\\n    }\\n\\n    /// @notice grow (4-connected) the internal word that represent 8 lines of the tile adding pixels\\n    /// @param x the value of the internal work\\n    /// @return the internal work with the extra pixels from growing it\\n    function _grow(uint256 x) private pure returns (uint256) {\\n        return (x | ((x & RIGHT_MASK_NEG) << 1) | ((x & LEFT_MASK_NEG) >> 1) | (x << 24) | (x >> 24));\\n    }\\n\\n    /// @notice grow (4-connected) a tile adding pixels around those that exists\\n    /// @param self the tile to grow\\n    /// @return e the tile that results from adding all the 4-connected pixels\\n    function _growMiddle(TileLib.Tile memory self) internal pure returns (TileLib.Tile memory e) {\\n        e.data[0] = _grow(self.data[0]) | ((self.data[1] & UP_MASK) << (24 * 7));\\n        e.data[1] =\\n            _grow(self.data[1]) |\\n            ((self.data[2] & UP_MASK) << (24 * 7)) |\\n            ((self.data[0] & DOWN_MASK) >> (24 * 7));\\n        e.data[2] = _grow(self.data[2]) | ((self.data[1] & DOWN_MASK) >> (24 * 7));\\n        return e;\\n    }\\n\\n    /// @notice grow (4-connected) a tile adding pixels around those that exists\\n    /// @param self the tile to grow\\n    /// @return e the extra tile to the right that results from adding all the 4-connected pixels\\n    function _growRight(TileLib.Tile memory self) internal pure returns (TileLib.Tile memory e) {\\n        // for loop removed to save some gas.\\n        e.data[0] = (self.data[0] & RIGHT_MASK) >> 23;\\n        e.data[1] = (self.data[1] & RIGHT_MASK) >> 23;\\n        e.data[2] = (self.data[2] & RIGHT_MASK) >> 23;\\n        return e;\\n    }\\n\\n    /// @notice grow (4-connected) a tile adding pixels around those that exists\\n    /// @param self the tile to grow\\n    /// @return e the extra tile to the left that results from adding all the 4-connected pixels\\n    function _growLeft(TileLib.Tile memory self) internal pure returns (TileLib.Tile memory e) {\\n        e.data[0] = (self.data[0] & LEFT_MASK) << 23;\\n        e.data[1] = (self.data[1] & LEFT_MASK) << 23;\\n        e.data[2] = (self.data[2] & LEFT_MASK) << 23;\\n        return e;\\n    }\\n}\\n\",\"keccak256\":\"0xa851b13fc6ea0af93e3c72c00e1e9baec322bf99cc279c1d3f0b74d35a829672\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/TileLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @title An optimized bitset of 24x24 bits (used to represent maps)\\n/// @notice see: http://\\n/// @dev We store 8 lines of 24 bits in each uint256 and leave some free space.\\nlibrary TileLib {\\n    uint256 public constant PIXEL_MASK = 0x0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 public constant PIXEL_MASK_INV = 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000;\\n\\n    struct Tile {\\n        uint256[3] data;\\n    }\\n\\n    /// @notice init the tile with the internal data directly\\n    /// @return A Tile that has the bit data set\\n    function init(\\n        Tile memory self,\\n        uint256 pixelData1,\\n        uint256 pixelData2,\\n        uint256 pixelData3\\n    ) internal pure returns (Tile memory) {\\n        self.data[0] = pixelData1 & PIXEL_MASK;\\n        self.data[1] = pixelData2 & PIXEL_MASK;\\n        self.data[2] = pixelData3 & PIXEL_MASK;\\n        return self;\\n    }\\n\\n    /// @notice Set the bits inside a square that has size x size in the x,y coordinates\\n    /// @dev can be optimized for the specific case of a 24x24 square\\n    /// @param self the Tile in which the bits are set\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding bits set\\n    function set(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (Tile memory) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            self.data[idx] |= mask << (x + 24 * ((y + i) % 8));\\n        }\\n        return self;\\n    }\\n\\n    /// @notice Clear the bits inside a square that has size x size in the x,y coordinates\\n    /// @dev can be optimized for the specific case of a 24x24 square\\n    /// @param self the Tile in which the bits will be cleared\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding cleared bits\\n    function clear(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (Tile memory) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            self.data[idx] &= ~(mask << (x + 24 * ((y + i) % 8)));\\n        }\\n        return self;\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate inside the Tile is set or not, if not set it.\\n    /// @dev this routine is a combination of contains and set, used to save some gas\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate\\n    /// @param y the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function addIfNotContain(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (bool, Tile memory) {\\n        require(x < 24 && y < 24, \\\"Invalid coordinates\\\");\\n        uint256 idx = y / 8;\\n        uint256 bitMask = 1 << (x + 24 * (y % 8));\\n        if (self.data[idx] & bitMask == bitMask) {\\n            return (false, self);\\n        }\\n        self.data[idx] |= bitMask;\\n        return (true, self);\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate inside the Tile is set or not\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate\\n    /// @param y the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function contain(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (bool) {\\n        require(x < 24 && y < 24, \\\"Invalid coordinates\\\");\\n        uint256 idx = y / 8;\\n        uint256 bitMask = 1 << (x + 24 * (y % 8));\\n        return (self.data[idx] & bitMask == bitMask);\\n    }\\n\\n    /// @notice Check if the all the bits of a square inside the Tile are set or not\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if al the bits are set or false if at least one bit is cleared\\n    function contain(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            uint256 bitMask = mask << (x + 24 * ((y + i) % 8));\\n            if (self.data[idx] & bitMask != bitMask) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if a Tile includes all the bits that are set in another Tile\\n    /// @param self the bigger Tile that is checked for inclusion\\n    /// @param contained the Tile that must be included\\n    /// @return true if self contain contained Tile\\n    function contain(Tile memory self, Tile memory contained) internal pure returns (bool) {\\n        uint256 d0 = contained.data[0] & PIXEL_MASK;\\n        uint256 d1 = contained.data[1] & PIXEL_MASK;\\n        uint256 d2 = contained.data[2] & PIXEL_MASK;\\n        return (self.data[0] & d0 == d0) && (self.data[1] & d1 == d1) && (self.data[2] & d2 == d2);\\n    }\\n\\n    /// @notice Check if the Tile has any bit in common with a square\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if there is at least one bit set in both Tiles\\n    function intersect(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            uint256 bitMask = mask << (x + 24 * ((y + i) % 8));\\n            if (self.data[idx] & bitMask != 0) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Check if two Tiles has any bit in common\\n    /// @param self first Tile to compare\\n    /// @param other second tile to compare\\n    /// @return true if there is at least one bit set in both Tiles\\n    function intersect(Tile memory self, Tile memory other) internal pure returns (bool) {\\n        return\\n            ((self.data[0] & other.data[0]) | (self.data[1] & other.data[1]) | (self.data[2] & other.data[2])) &\\n                PIXEL_MASK !=\\n            0;\\n    }\\n\\n    /// @notice Check if two Tiles has exactly the same bits set\\n    /// @param self first Tile to compare\\n    /// @param other second Tile to compare\\n    /// @return true if the two Tiles has the same bits set\\n    function isEqual(Tile memory self, Tile memory other) internal pure returns (bool) {\\n        return\\n            ((self.data[0] ^ other.data[0]) | (self.data[1] ^ other.data[1]) | (self.data[2] ^ other.data[2])) &\\n                PIXEL_MASK ==\\n            0;\\n    }\\n\\n    /// @notice return a Tile that is the union of two Tiles\\n    /// @dev this function destroys data outside the pixel data (we want to save some gas)\\n    /// @param self first Tile to compare\\n    /// @param other second Tile to compare\\n    /// @return a Tile that is the union of self and other\\n    function or(Tile memory self, Tile memory other) internal pure returns (Tile memory) {\\n        self.data[0] |= other.data[0] & PIXEL_MASK;\\n        self.data[1] |= other.data[1] & PIXEL_MASK;\\n        self.data[2] |= other.data[2] & PIXEL_MASK;\\n        return self;\\n    }\\n\\n    /// @notice return a Tile that is the intersection of two Tiles\\n    /// @dev this function destroys data outside the pixel data (we want to save some gas)\\n    /// @param self first Tile to compare\\n    /// @param other second Tile to compare\\n    /// @return a Tile that is the intersection of self and other\\n    function and(Tile memory self, Tile memory other) internal pure returns (Tile memory) {\\n        self.data[0] &= other.data[0] | PIXEL_MASK_INV;\\n        self.data[1] &= other.data[1] | PIXEL_MASK_INV;\\n        self.data[2] &= other.data[2] | PIXEL_MASK_INV;\\n        return self;\\n    }\\n\\n    /// @notice Calculates the subtraction of two Tile\\n    /// @param self the Tile to subtract from\\n    /// @param value the Tile subtracted\\n    /// @return the self with all the bits set in value cleared\\n    function subtract(Tile memory self, Tile memory value) internal pure returns (Tile memory) {\\n        self.data[0] &= ~(value.data[0] & PIXEL_MASK);\\n        self.data[1] &= ~(value.data[1] & PIXEL_MASK);\\n        self.data[2] &= ~(value.data[2] & PIXEL_MASK);\\n        return self;\\n    }\\n\\n    /// @notice check if a Tile is empty, doesn't have any bit set\\n    /// @param self first Tile to compare\\n    /// @return true if the Tile is empty\\n    function isEmpty(Tile memory self) internal pure returns (bool) {\\n        return (self.data[0] | self.data[1] | self.data[2]) & PIXEL_MASK == 0;\\n    }\\n\\n    /// @notice return a Tile that has only one of the pixels from the original Tile set\\n    /// @param self Tile in which one pixel is searched\\n    /// @return ret a Tile that has only one pixel set\\n    function findAPixel(Tile memory self) internal pure returns (Tile memory ret) {\\n        uint256 target;\\n        uint256 shift;\\n\\n        target = self.data[2] & PIXEL_MASK;\\n        if (target != 0) {\\n            shift = _findAPixel(target);\\n            ret.data[2] = (1 << shift);\\n            return ret;\\n        }\\n\\n        target = self.data[1] & PIXEL_MASK;\\n        if (target != 0) {\\n            shift = _findAPixel(target);\\n            ret.data[1] = (1 << shift);\\n            return ret;\\n        }\\n\\n        target = self.data[0] & PIXEL_MASK;\\n        if (target != 0) {\\n            shift = _findAPixel(target);\\n            ret.data[0] = (1 << shift);\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice given a tile, translate all the bits in the x and y direction\\n    /// @param self the initial Tile to translate\\n    /// @param x the x distance to translate\\n    /// @param y the y distance to translate\\n    /// @return col1 first column that represents the four tiles that are the result of the translation\\n    /// @return col2 second column that represents the four tiles that are the result of the translation\\n    function translate(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256[6] memory col1, uint256[6] memory col2) {\\n        // Move right\\n        uint256 mask = _getTranslateXMask(x);\\n        col1[0] = (self.data[0] & mask) << x;\\n        col1[1] = (self.data[1] & mask) << x;\\n        col1[2] = (self.data[2] & mask) << x;\\n        if (x > 0) {\\n            mask = PIXEL_MASK - mask;\\n            col2[0] = (self.data[0] & mask) >> (24 - x);\\n            col2[1] = (self.data[1] & mask) >> (24 - x);\\n            col2[2] = (self.data[2] & mask) >> (24 - x);\\n        }\\n        // Move down\\n        uint256 rem = 24 * (y % 8);\\n        uint256 div = y / 8;\\n        mask = PIXEL_MASK - (2**(24 * 8 - rem) - 1);\\n        // TODO: optimization, remove the loop, check gas consumption\\n        for (uint256 i = 5; i > div; i--) {\\n            col1[i] = (col1[i - div] << rem) | ((col1[i - div - 1] & mask) >> (24 * 8 - rem));\\n            col2[i] = (col2[i - div] << rem) | ((col2[i - div - 1] & mask) >> (24 * 8 - rem));\\n        }\\n        col1[div] = col1[0] << rem;\\n        col2[div] = col2[0] << rem;\\n        if (div > 0) {\\n            col1[0] = 0;\\n            col2[0] = 0;\\n            if (div > 1) {\\n                col1[1] = 0;\\n                col2[1] = 0;\\n            }\\n        }\\n        return (col1, col2);\\n    }\\n\\n    uint256 private constant QUAD_MASK_1 = 1;\\n    uint256 private constant QUAD_MASK_3 = 2**3 - 1;\\n    uint256 private constant QUAD_MASK_6 = 2**6 - 1;\\n    uint256 private constant QUAD_MASK_12 = 2**12 - 1;\\n    uint256 private constant QUAD_MASK_24 = 2**24 - 1;\\n\\n    /// @notice return a bit mask used to set or clear a square of certain size in the Tile\\n    /// @param size the size of the square\\n    /// @return the bit mask or zero if the size is not supported\\n    function _quadMask(uint256 size) private pure returns (uint256) {\\n        if (size == 1) return 1;\\n        if (size == 3) return QUAD_MASK_3;\\n        if (size == 6) return QUAD_MASK_6;\\n        if (size == 12) return QUAD_MASK_12;\\n        if (size == 24) return QUAD_MASK_24;\\n        return 0;\\n    }\\n\\n    /// @notice count the amount of bits set inside the Tile\\n    /// @param self the Tile in which the bits are counted\\n    /// @return the count of bits that are set\\n    function countBits(Tile memory self) internal pure returns (uint256) {\\n        return _countBits(self.data[0]) + _countBits(self.data[1]) + _countBits(self.data[2]);\\n    }\\n\\n    /// @notice count the amount of bits set inside a word\\n    /// @dev see: https://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer\\n    /// @param x the word in which the bits are counted\\n    /// @return the count of bits that are set\\n    function _countBits(uint256 x) private pure returns (uint256) {\\n        x = x - ((x >> 1) & 0x0000000000000000555555555555555555555555555555555555555555555555);\\n        x =\\n            (x & 0x0000000000000000333333333333333333333333333333333333333333333333) +\\n            ((x >> 2) & 0x0000000000000000333333333333333333333333333333333333333333333333);\\n        x = (x + (x >> 4)) & 0x00000000000000000F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F;\\n        return\\n            ((((x >> 96) * 0x010101010101010101010101) +\\n                ((x & 0x0F0F0F0F0F0F0F0F0F0F0F0F) * 0x010101010101010101010101)) >> (11 * 8)) & 0xFF;\\n    }\\n\\n    /// @notice giving 8 lines of a Tile, find any bit that is set\\n    /// @dev we must search in 8 * 24 bits that correspond to 8 lines, so 2^6 * 3, we split in three and then do a binary search\\n    /// @param target the uint256 that has the 8 lines\\n    /// @return shift the amount of bits shift left so the choose bit is set in the resulting Tile\\n    function _findAPixel(uint256 target) private pure returns (uint256 shift) {\\n        uint256 mask = (2**64 - 1);\\n        // divide in 3 parts, then do a binary search\\n        if ((target & mask) == 0) {\\n            target = target >> 64;\\n            shift = 64;\\n            if ((target & mask) == 0) {\\n                target = target >> 64;\\n                shift = 128;\\n            }\\n        }\\n        for (uint256 i = 32; i > 0; i = i / 2) {\\n            mask = mask >> i;\\n            if ((target & mask) == 0) {\\n                target = target >> i;\\n                shift += i;\\n            }\\n        }\\n        return shift;\\n    }\\n\\n    /// @notice return a bit mask used translate a Tile data in the x direction\\n    /// @param x the x value to translate\\n    /// @return the bit mask\\n    function _getTranslateXMask(uint256 x) private pure returns (uint256) {\\n        uint256 mask = (2**24 - 1) >> x;\\n        mask |= mask << 24;\\n        mask |= mask << (24 * 2);\\n        mask |= mask << (24 * 4);\\n        return mask;\\n    }\\n}\\n\",\"keccak256\":\"0x597571a993575cf7f27e1313fab368b3d362d5539caaea46fb06546ccf883d63\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/TileWithCoordLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {TileLib} from \\\"./TileLib.sol\\\";\\n\\n/// @title A Tile (24x24 map piece) that also stores x,y coordinates and a combination of the two called key\\n/// @dev Using a sparse array of TileWithCoords we build a bigger map covered with Tiles\\nlibrary TileWithCoordLib {\\n    using TileLib for TileLib.Tile;\\n\\n    struct TileWithCoord {\\n        TileLib.Tile tile;\\n    }\\n\\n    /// @notice initialize the TileWithCoord structure\\n    /// @return An empty Tile that has the x,y and corresponding key value set\\n    function init(uint256 x, uint256 y) internal pure returns (TileWithCoord memory) {\\n        TileWithCoord memory ret;\\n        ret.tile.data[0] = (getKey(x, y)) << 224;\\n        ret.tile.data[1] = (x / 24) << 224;\\n        ret.tile.data[2] = (y / 24) << 224;\\n        return ret;\\n    }\\n\\n    /// @notice initialize the TileWithCoord structure\\n    /// @return An TileWithCoord that has the x,y, key and the Tile bit data set\\n    function init(\\n        uint256 x,\\n        uint256 y,\\n        uint256 pixelData1,\\n        uint256 pixelData2,\\n        uint256 pixelData3\\n    ) internal pure returns (TileWithCoord memory) {\\n        TileWithCoord memory ret;\\n        ret.tile = ret.tile.init(pixelData1, pixelData2, pixelData3);\\n        ret.tile.data[0] |= (getKey(x, y)) << 224;\\n        ret.tile.data[1] |= (x / 24) << 224;\\n        ret.tile.data[2] |= (y / 24) << 224;\\n        return ret;\\n    }\\n\\n    /// @notice Set the bits inside a square that has size x size in the x,y coordinates\\n    /// @param self the TileWithCoord in which the bits are set\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding bits set\\n    function set(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.set(xi % 24, yi % 24, size);\\n        return self;\\n    }\\n\\n    /// @notice Calculates the union/addition of two TileWithCoord\\n    /// @dev to be able to merge the two TileWithCoord must have the same coordinates\\n    /// @param self one of the TileWithCoord to merge\\n    /// @param value the second TileWithCoord to merge\\n    /// @return the merge of the two TileWithCoord\\n    function merge(TileWithCoord memory self, TileWithCoord memory value) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == getX(value) && getY(self) == getY(value), \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.or(value.tile);\\n        return self;\\n    }\\n\\n    /// @notice Clear the bits inside a square that has size x size in the x,y coordinates\\n    /// @param self the TileWithCoord, in which the bits will be cleared\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding cleared bits\\n    function clear(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.clear(xi % 24, yi % 24, size);\\n        return self;\\n    }\\n\\n    /// @notice Calculates the subtraction of two TileWithCoord\\n    /// @dev to be able to subtract them the two TileWithCoord must have the same coordinates\\n    /// @param self the TileWithCoord to subtract from\\n    /// @param value the TileWithCoord subtracted\\n    /// @return the self with all the bits set in value cleared\\n    function clear(TileWithCoord memory self, TileWithCoord memory value) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == getX(value) && getY(self) == getY(value), \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.subtract(value.tile);\\n        return self;\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate are set or not in the TileWithCoord\\n    /// @param self the TileWithCoord where the check is done\\n    /// @param xi the x coordinate\\n    /// @param yi the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function contain(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi\\n    ) internal pure returns (bool) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid coordinates\\\");\\n        return self.tile.contain(xi % 24, yi % 24);\\n    }\\n\\n    /// @notice Check if the all the bits of a square inside the TileWithCoord are set or not\\n    /// @param self the TileWithCoord where the check is done\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if al the bits are set or false if at least one bit is cleared\\n    function contain(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        return self.tile.contain(xi % 24, yi % 24, size);\\n    }\\n\\n    /// @notice Check if the TileWithCoord has any bit in common with a square\\n    /// @param self the TileWithCoord where the check is done\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if there is at least one bit set in the TileWithCoords and the square\\n    function intersect(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        return self.tile.intersect(xi % 24, yi % 24, size);\\n    }\\n\\n    /// @notice return the key value stored in the TileWithCoord\\n    /// @param self the TileWithCoord to get the key from\\n    /// @return the key value\\n    function getKey(TileWithCoord memory self) internal pure returns (uint256) {\\n        return self.tile.data[0] >> 224;\\n    }\\n\\n    /// @notice return the x coordinate value stored in the TileWithCoord\\n    /// @param self the TileWithCoord to get the x coordinate from\\n    /// @return the x value\\n    function getX(TileWithCoord memory self) internal pure returns (uint256) {\\n        return self.tile.data[1] >> 224;\\n    }\\n\\n    /// @notice return the y coordinate value stored in the TileWithCoord\\n    /// @param self the TileWithCoord to get the y coordinate from\\n    /// @return the y value\\n    function getY(TileWithCoord memory self) internal pure returns (uint256) {\\n        return self.tile.data[2] >> 224;\\n    }\\n\\n    /// @notice helper to calculate the key value given the x,y coordinates\\n    /// @param x the x coordinate\\n    /// @param y the y coordinate\\n    /// @return the key value\\n    function getKey(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x / 24) | ((y / 24) << 16);\\n    }\\n\\n    /// @notice count the amount of bits set inside the TileWithCoord\\n    /// @param self the TileWithCoord in which the bits are counted\\n    /// @return the count of bits that are set\\n    function countBits(TileWithCoord memory self) internal pure returns (uint256) {\\n        return self.tile.countBits();\\n    }\\n\\n    /// @notice check if a TileWithCoord is empty, none of the bits are set\\n    /// @param self the TileWithCoord to check\\n    /// @return true if none of the bits are set\\n    function isEmpty(TileWithCoord memory self) internal pure returns (bool) {\\n        return self.tile.isEmpty();\\n    }\\n\\n    /// @notice Check if two TileWithCoord has exactly the same coordinates and bits set\\n    /// @param self first TileWithCoord to compare\\n    /// @param other second TileWithCoord to compare\\n    /// @return true if the two TileWithCoord has the same coordinates and bits set\\n    function isEqual(TileWithCoord memory self, TileWithCoord memory other) internal pure returns (bool) {\\n        return\\n            self.tile.data[0] == other.tile.data[0] &&\\n            self.tile.data[1] == other.tile.data[1] &&\\n            self.tile.data[2] == other.tile.data[2];\\n    }\\n}\\n\",\"keccak256\":\"0xdd8f0df8786c11865f76645eb7b83648605a4bf36cda9dcfcaecbd92fcc1b8c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x613f7061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101fa5760003560e01c80638addfdc411610119578063cca0f3b7116100ac578063f48005191161007b578063f4800519146104d4578063f5fd439d146104e7578063f9b9fec6146104fa578063fc5b7bdb1461051a576101fa565b8063cca0f3b714610461578063d374411714610474578063dcedd4b014610494578063e8485b07146104b4576101fa565b8063ac775cf8116100e8578063ac775cf814610409578063c62137541461041b578063c853cffe1461042e578063ca26a6ad14610441576101fa565b80638addfdc4146103a35780638c263b73146103b65780638f2981d5146103c9578063a1b4c2bc146103e9576101fa565b8063552a98a51161019157806370b4918c1161016057806370b4918c1461032e57806372ba78881461034f57806374527bfb146103625780637c2c514814610382576101fa565b8063552a98a5146102c857806357128810146102db578063590ec2a6146102fb5780635a20ec721461031b576101fa565b80632f8332fa116101cd5780632f8332fa1461026d5780633362c7cd1461028f57806336fa6231146102a257806351500438146102b5576101fa565b806305a33386146101ff578063064acfd91461022757806311c7db8e1461023a5780631b261f441461025a575b600080fd5b61021261020d366004613a2f565b61052d565b60405190151581526020015b60405180910390f35b610212610235366004613b74565b61059b565b61024d610248366004613c47565b610641565b60405161021e9190613ccf565b610212610268366004613b74565b610776565b81801561027957600080fd5b5061028d610288366004613a2f565b610831565b005b61021261029d366004613c47565b610888565b6102126102b0366004613b95565b61094c565b6102126102c3366004613c72565b610a22565b6102126102d6366004613bc1565b610aeb565b8180156102e757600080fd5b5061028d6102f6366004613b74565b610b37565b81801561030757600080fd5b5061028d610316366004613a17565b610bd5565b610212610329366004613a17565b610c99565b61034161033c366004613adc565b610ca2565b60405161021e929190613d1e565b61021261035d366004613c72565b61162b565b81801561036e57600080fd5b5061028d61037d366004613bc1565b6116e7565b610395610390366004613a17565b611723565b60405190815260200161021e565b6102126103b1366004613c72565b6117d9565b6102126103c4366004613a2f565b611a84565b8180156103d557600080fd5b5061028d6103e4366004613b95565b611bcf565b8180156103f557600080fd5b5061028d610404366004613a2f565b611d34565b610395610417366004613a17565b5490565b610212610429366004613a17565b611d84565b61024d61043c366004613a17565b611f9f565b81801561044d57600080fd5b5061028d61045c366004613b74565b61203c565b61021261046f366004613a2f565b6120db565b81801561048057600080fd5b5061021261048f366004613b95565b61213d565b6104a76104a2366004613b74565b612278565b60405161021e9190613dff565b8180156104c057600080fd5b506102126104cf366004613c72565b6122fd565b6102126104e2366004613b95565b612440565b6102126104f5366004613bc1565b61250d565b81801561050657600080fd5b5061028d610515366004613c72565b61255c565b610212610528366004613b74565b6126d5565b8051600090815b8181101561058e5761056d8585838151811061056057634e487b7160e01b600052603260045260246000fd5b602002602001015161094c565b61057c57600092505050610595565b8061058681613ec9565b915050610534565b5060019150505b92915050565b600061063a8383600001805480602002602001604051908101604052809291908181526020016000905b828210156106315760008481526020908190206040805160a081018083529093600387810290940193859391840192859284929086019184919082845b8154815260200190600101908083116106025750505050508152505081525050815260200190600101906105c5565b50505050611a84565b9392505050565b606060008267ffffffffffffffff81111561066c57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106a557816020015b610692613894565b81526020019060019003908161068a5790505b50905060005b8381101561076d57856106be8287613e67565b815481106106dc57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b81548152602001906001019080831161070f575050505050815250508152505082828151811061074f57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061076590613ec9565b9150506106ab565b50949350505050565b8054600090815b8181101561082657610804858560000183815481106107ac57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b8154815260200190600101908083116107df5750505050508152505081525050612440565b1561081457600192505050610595565b8061081e81613ec9565b91505061077d565b506000949350505050565b805160005b818110156108825761086f8484838151811061086257634e487b7160e01b600052603260045260246000fd5b602002602001015161213d565b508061087a81613ec9565b915050610836565b50505050565b6000806108958484612784565b6000818152600187016020526040902054909150806108b95760009250505061063a565b6109428585886108ca600186613eb2565b815481106108e857634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b81548152602001906001019080831161091b575050509190925250505090525091906127a8565b9695505050505050565b600061095782612823565b1561096457506001610595565b600061096f83612846565b60008181526001860160205260409020549091508061099357600092505050610595565b8351610a1990866109a5600185613eb2565b815481106109c357634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081019182905293600393840290920192849283019184919082845b8154815260200190600101908083116109ef5750505050508152505061285e90919063ffffffff16565b95945050505050565b600080610a2f8585612784565b600081815260018801602052604090205490915080610a5357600092505050610ae3565b610ade8686868a610a65600187613eb2565b81548110610a8357634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311610ab657505050919092525050509052509291906128b8565b925050505b949350505050565b6000610afb838360000151612440565b80610b0f5750610b0f838360200151612440565b80610b235750610b23838360400151612440565b8061063a575061063a838360600151612440565b805460005b8181101561088257610bc384846000018381548110610b6b57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311610b9e5750505050508152505081525050611bcf565b80610bcd81613ec9565b915050610b3c565b60005b8154811015610c8a57816001016000610c65846000018481548110610c0d57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311610c405750505050508152505081525050612846565b8152602001908152602001600020600090558080610c8290613ec9565b915050610bd8565b50610c968160006138ac565b50565b8054155b919050565b815460609060009081808080610cb66138cd565b8567ffffffffffffffff811115610cdd57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d1657816020015b610d036138cd565b815260200190600190039081610cfb5790505b5097505b8585101561137b57888581518110610d4257634e487b7160e01b600052603260045260246000fd5b602002602001015190508060000151600260038110610d7157634e487b7160e01b600052603260045260246000fd5b60200201518151600160200201518251600060200201511717610d9357611369565b610e118a6000018681548110610db957634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311610dec575050505050815250508152505061292b565b610e1c906018613e93565b9350610e9c8a6000018681548110610e4457634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311610e77575050505050815250508152505061293b565b610ea7906018613e93565b8151602081015191945060a89190911b62ffffff60a81b1690610f229060005b60200201516000601882901c601883901b60017501000001000001000001000001000001000001000001198516901c600177800000800000800000800000800000800000800000800000198616901b85171717179050919050565b17888681518110610f4357634e487b7160e01b600052603260045260246000fd5b602090810291909101015151805191909117905280518051604082015162ffffff60a892831c1692911b62ffffff60a81b1690610f81906001610ec7565b1717888681518110610fa357634e487b7160e01b600052603260045260246000fd5b60209081029190910181015151810180519290921790915281519081015160a81c62ffffff1690610fd5906002610ec7565b17888681518110610ff657634e487b7160e01b600052603260045260246000fd5b6020908102919091010151516040018051919091179052601884106111585761102a8a611024601887613eb2565b8561294b565b915081156111585780515160171b77800000800000800000800000800000800000800000800000168861105e600185613eb2565b8151811061107c57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151518051929092179091528151015160171b7780000080000080000080000080000080000080000080000016886110bf600185613eb2565b815181106110dd57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101515101805191909117905280516040015160171b778000008000008000008000008000008000008000008000001688611122600185613eb2565b8151811061114057634e487b7160e01b600052603260045260246000fd5b60209081029190910101515160400180519190911790525b601883106111cd576111758a85611170601887613eb2565b61294b565b915081156111cd5780515160a81b62ffffff60a81b1688611197600185613eb2565b815181106111b557634e487b7160e01b600052603260045260246000fd5b60209081029190910101515160400180519190911790525b6111dd8a85611170866018613e67565b915081156112325780516040015160a81c62ffffff16886111ff600185613eb2565b8151811061121d57634e487b7160e01b600052603260045260246000fd5b60209081029190910101515180519190911790525b6112418a611024866018613e67565b915081156113695780515160171c75010000010000010000010000010000010000010000011688611273600185613eb2565b8151811061129157634e487b7160e01b600052603260045260246000fd5b602090810291909101810151518051929092179091528151015160171c750100000100000100000100000100000100000100000116886112d2600185613eb2565b815181106112f057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101515101805191909117905280516040015160171c75010000010000010000010000010000010000010000011688611333600185613eb2565b8151811061135157634e487b7160e01b600052603260045260246000fd5b60209081029190910101515160400180519190911790525b8461137381613ec9565b955050610d1a565b60019650600094505b8585101561161e578960000185815481106113af57634e487b7160e01b600052603260045260246000fd5b60009182526020822060039091020101548886815181106113e057634e487b7160e01b600052603260045260246000fd5b602090810291909101015151805191909116905289548a908690811061141657634e487b7160e01b600052603260045260246000fd5b600091825260209091206003909102016001015488868151811061144a57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101515101805191909116905289548a908690811061148257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600390910201600201548886815181106114b657634e487b7160e01b600052603260045260246000fd5b602090810291909101015151604001805191909116905286801561153357508885815181106114f557634e487b7160e01b600052603260045260246000fd5b60209081029190910101515151885189908790811061152457634e487b7160e01b600052603260045260246000fd5b60209081029190910101515151145b801561159e575088858151811061155a57634e487b7160e01b600052603260045260246000fd5b6020908102919091010151516001602002015188868151811061158d57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151510151145b801561160a57508885815181106115c557634e487b7160e01b600052603260045260246000fd5b602090810291909101015151600260200201518886815181106115f857634e487b7160e01b600052603260045260246000fd5b60209081029190910101515160400151145b96508461161681613ec9565b955050611384565b5050505050509250929050565b6000806116388585612784565b60008181526001880160205260409020549091508061165c57600092505050610ae3565b610ade8686868a61166e600187613eb2565b8154811061168c57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b8154815260200190600101908083116116bf5750505091909252505050905250929190612975565b6116f5828260000151611bcf565b611703828260200151611bcf565b611711828260400151611bcf565b61171f828260600151611bcf565b5050565b80546000908190815b818110156117d0576117b285600001828154811061175a57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b81548152602001906001019080831161178d57505050505081525050815250506129e8565b6117bc9084613e67565b9250806117c881613ec9565b91505061172c565b50909392505050565b60006117e485610c99565b156117f157506001610ae3565b60006117fb6138cd565b61181d611809601888613ee4565b611814601888613ee4565b839190876129f7565b9050601886106119065761183c87611836601889613eb2565b8761294b565b915081158015906118f657506118f46118d761185783612b2f565b89611863600187613eb2565b8154811061188157634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081019182905293600393840290920192849283019184919082845b8154815260200190600101908083116118ad57505050505081525050612b8a90919063ffffffff16565b516040810151602082015191516001600160c01b03921717161590565b155b1561190657600192505050610ae3565b601885106119875761191e8787611170601889613eb2565b91508115801590611977575080515160a81b62ffffff60a81b1687611944600185613eb2565b8154811061196257634e487b7160e01b600052603260045260246000fd5b60009182526020822060039091020101541615155b1561198757600192505050610ae3565b61199287878761294b565b915081158015906119af57506119ad6118d761185783612be0565b155b156119bf57600192505050610ae3565b6119cf8787611170886018613e67565b91508115801590611a2b575080516040015160a81c62ffffff16876119f5600185613eb2565b81548110611a1357634e487b7160e01b600052603260045260246000fd5b60009182526020909120600390910201600201541615155b15611a3b57600192505050610ae3565b611a4a87611836886018613e67565b91508115801590611a675750611a656118d761185783612c95565b155b15611a7757600192505050610ae3565b5060009695505050505050565b8154815160009114611a9857506000610595565b815160005b8181101561058e576000611ad7858381518110611aca57634e487b7160e01b600052603260045260246000fd5b6020026020010151612846565b6000818152600188016020526040902054909150801580611ba85750611ba6868481518110611b1657634e487b7160e01b600052603260045260246000fd5b602002602001015188600001600184611b2f9190613eb2565b81548110611b4d57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311611b80575050509190925250505090525090612ce8565b155b15611bba576000945050505050610595565b50508080611bc790613ec9565b915050611a9d565b611bd881612823565b15611be25761171f565b6000611bed82612846565b600081815260018501602052604090205490915080611c525783546001810185556000858152602090208451805186936003908102909301928391611c34918391906138e0565b50508654600086815260018901602052604090205550610882915050565b611cd98385611c62600185613eb2565b81548110611c8057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311611cb3575050509190925250505090525090612d26565b84611ce5600184613eb2565b81548110611d0357634e487b7160e01b600052603260045260246000fd5b600091825260209091208251805160039384029092019290918391611d299183916138e0565b505050505050505050565b805160005b8181101561088257611d7284848381518110611d6557634e487b7160e01b600052603260045260246000fd5b6020026020010151611bcf565b80611d7c81613ec9565b915050611d39565b6000611d8f82610c99565b15611d9c57506001610c9d565b815460009067ffffffffffffffff811115611dc757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e0057816020015b611ded6138cd565b815260200190600190039081611de55790505b509050611e7783600001600081548110611e2a57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081019182905293600393840290920192849283019184919082845b815481526020019060010190808311611e5657505050505081525050612d8e565b81600081518110611e9857634e487b7160e01b600052603260045260246000fd5b602002602001018190525060005b80611ebf57611eb58483610ca2565b9092509050611ea6565b835460005b81811015611f9357611f70848281518110611eef57634e487b7160e01b600052603260045260246000fd5b6020026020010151876000018381548110611f1a57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081019182905293600393840290920192849283019184919082845b815481526020019060010190808311611f4657505050505081525050612e3090919063ffffffff16565b611f81576000945050505050610c9d565b80611f8b81613ec9565b915050611ec4565b50600195945050505050565b606081600001805480602002602001604051908101604052809291908181526020016000905b828210156120315760008481526020908190206040805160a081018083529093600387810290940193859391840192859284929086019184919082845b815481526020019060010190808311612002575050505050815250508152505081526020019060010190611fc5565b505050509050919050565b805460005b81811015610882576120c88484600001838154811061207057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b8154815260200190600101908083116120a3575050505050815250508152505061213d565b50806120d381613ec9565b915050612041565b8051600090815b818110156108265761211b8585838151811061210e57634e487b7160e01b600052603260045260246000fd5b6020026020010151612440565b1561212b57600192505050610595565b8061213581613ec9565b9150506120e2565b60008061214983612846565b60008181526001860160205260409020549091508061216d57600092505050610595565b60006121f6858761217f600186613eb2565b8154811061219d57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b8154815260200190600101908083116121d0575050509190925250505090525090612e66565b905061220181612823565b1561221657612211868385612ec5565b611f93565b8086612223600185613eb2565b8154811061224157634e487b7160e01b600052603260045260246000fd5b6000918252602090912082518051600393840290920192909183916122679183916138e0565b505050505050600195945050505050565b612280613894565b8260000182815481106122a357634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b8154815260200190600101908083116122d657505050919092525050509052509392505050565b60008061230a8585612784565b60008181526001880160205260409020549091508061232e57600092505050610ae3565b60006123bb8787878b612342600188613eb2565b8154811061236057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311612393575050509190925250505090525092919061303d565b90506123c681612823565b156123db576123d6888385612ec5565b612432565b80886123e8600185613eb2565b8154811061240657634e487b7160e01b600052603260045260246000fd5b60009182526020909120825180516003938402909201929091839161242c9183916138e0565b50505050505b506001979650505050505050565b600061244b82612823565b1561245857506000610595565b600061246383612846565b60008181526001860160205260409020549091508061248757600092505050610595565b8351610a199086612499600185613eb2565b815481106124b757634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081019182905293600393840290920192849283019184919082845b8154815260200190600101908083116124e3575050505050815250506130c190919063ffffffff16565b600061251d83836000015161094c565b8015612532575061253283836020015161094c565b8015612547575061254783836040015161094c565b801561063a575061063a83836060015161094c565b60006125688484612784565b6000818152600187016020526040902054909150806125ec57600061258d86866130f8565b90508661259c82888888613152565b815460018101835560009283526020909220815180519293600390810290920192909183916125cd918391906138e0565b50508954600087815260018c016020526040902055506126cd92505050565b612677858585896125fe600187613eb2565b8154811061261c57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b81548152602001906001019080831161264f5750505091909252505050905250929190613152565b86612683600184613eb2565b815481106126a157634e487b7160e01b600052603260045260246000fd5b6000918252602090912082518051600393840290920192909183916126c79183916138e0565b50505050505b505050505050565b8054600090815b8181101561058e576127638585600001838154811061270b57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b81548152602001906001019080831161273e575050505050815250508152505061094c565b61277257600092505050610595565b8061277c81613ec9565b9150506126dc565b60006010612793601884613e7f565b901b6127a0601885613e7f565b179392505050565b60006127b5601884613e7f565b6127be8561292b565b1480156127dc57506127d1601883613e7f565b6127da8561293b565b145b6128015760405162461bcd60e51b81526004016127f890613d75565b60405180910390fd5b610ae361280f601885613ee4565b61281a601885613ee4565b865191906131cb565b80515160408101516020820151915160009217176001600160c01b031615610595565b80515160009060e090825b6020020151901c92915050565b8051805160208201516040909201518451516000936001600160c01b038481169491811693811692909116168314801561289e5750855160200151821682145b801561094257509451604001518516909414949350505050565b60006128c5601885613e7f565b6128ce8661292b565b1480156128ec57506128e1601884613e7f565b6128ea8661293b565b145b6129085760405162461bcd60e51b81526004016127f890613dc8565b610a19612916601886613ee4565b612921601886613ee4565b8751919085613267565b80515160009060e0906001612851565b80515160009060e0906002612851565b600083600101600061295d8585612784565b81526020019081526020016000205490509392505050565b6000612982601885613e7f565b61298b8661292b565b1480156129a9575061299e601884613e7f565b6129a78661293b565b145b6129c55760405162461bcd60e51b81526004016127f890613dc8565b610a196129d3601886613ee4565b6129de601886613ee4565b87519190856133b0565b600061059582600001516134eb565b6129ff6138cd565b601884108015612a0f5750601883105b612a2b5760405162461bcd60e51b81526004016127f890613dc8565b612a358285613ee4565b158015612a495750612a478284613ee4565b155b612a655760405162461bcd60e51b81526004016127f890613d75565b6000612a708361352f565b905080612a8f5760405162461bcd60e51b81526004016127f890613da2565b60005b83811015612b245760006008612aa88388613e67565b612ab29190613e7f565b90506008612ac08388613e67565b612aca9190613ee4565b612ad5906018613e93565b612adf9088613e67565b83901b88600001518260038110612b0657634e487b7160e01b600052603260045260246000fd5b60200201805190911790525080612b1c81613ec9565b915050612a92565b509495945050505050565b612b376138cd565b815151815177800000800000800000800000800000800000800000800000601792831b81169091528351602090810151845190841b83169101528351604001518351921b169060025b6020020152919050565b612b926138cd565b815151835180516001600160c01b03199283171690528251602090810151855190910180519183179091169052825160400151845191179060025b6020020180519091169052508192915050565b612be86138cd565b8151602081015160a81b62ffffff60a81b1690612c06906000610ec7565b82519117905281518051604082015162ffffff60a892831c1692911b62ffffff60a81b1690612c36906001610ec7565b17178160000151600160038110612c5d57634e487b7160e01b600052603260045260246000fd5b6020020152815160a89062ffffff60a81b90600160200201518451911690911c90612c89906002610ec7565b82519117906002612b80565b612c9d6138cd565b81515181517501000001000001000001000001000001000001000001601792831c81169091528351602090810151845190841c83169101528351604001518351921c16906002612b80565b8051515182515151600091148015612d0d575081515160209081015184515190910151145b801561063a575050515160409081015191515101511490565b612d2e613894565b612d378261292b565b612d408461292b565b148015612d5c5750612d518261293b565b612d5a8461293b565b145b612d785760405162461bcd60e51b81526004016127f890613dc8565b81518351612d8591613591565b83525090919050565b612d966138cd565b8151604001516001600160c01b031660008115612dd057612db6826135df565b83519091506001821b9060025b602002015250610c9d9050565b8351602001516001600160c01b031691508115612e0157612df0826135df565b8351909150600180831b9190612dc3565b8351516001600160c01b031691508115612e2957612e1e826135df565b83516001821b905290505b5050919050565b51604080820151925190810151602080840151908301519351925190921892909118919091179118176001600160c01b03161590565b612e6e613894565b612e778261292b565b612e808461292b565b148015612e9c5750612e918261293b565b612e9a8461293b565b145b612eb85760405162461bcd60e51b81526004016127f890613dc8565b81518351612d8591613643565b6000612ed2600184613eb2565b8454909150600090612ee690600190613eb2565b9050818114612fdc576000856000018281548110612f1457634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101808352909460039485029093019385938401928592849291860191849182845b815481526020019060010190808311612f475750505050508152505081525050905080866000018481548110612f8d57634e487b7160e01b600052603260045260246000fd5b600091825260209091208251805160039384029092019290918391612fb39183916138e0565b50505090505084866001016000612fc984612846565b8152602081019190915260400160002055505b8454859080612ffb57634e487b7160e01b600052603160045260246000fd5b60008281526020812060036000199093019283020181815560018101829055600281018290559050915550505060009081526001909201602052506040812055565b613045613894565b613050601885613e7f565b6130598661292b565b148015613077575061306c601884613e7f565b6130758661293b565b145b6130935760405162461bcd60e51b81526004016127f890613dc8565b6130b66130a1601886613ee4565b6130ac601886613ee4565b875191908561368c565b855250929392505050565b51604080820151925190810151602080840151908301519351925190921692909116919091179116176001600160c01b0316151590565b613100613894565b613108613894565b60e06131148585612784565b825151911b905260e0613128601886613e7f565b825151911b60209091015260e0613140601885613e7f565b825151911b6040909101529392505050565b61315a613894565b613165601885613e7f565b61316e8661292b565b14801561318c5750613181601884613e7f565b61318a8661293b565b145b6131a85760405162461bcd60e51b81526004016127f890613dc8565b6130b66131b6601886613ee4565b6131c1601886613ee4565b87519190856129f7565b60006018831080156131dd5750601882105b6131f95760405162461bcd60e51b81526004016127f890613d75565b6000613206600884613e7f565b90506000613215600885613ee4565b613220906018613e93565b61322a9086613e67565b6001901b905080818760000151846003811061325657634e487b7160e01b600052603260045260246000fd5b602002015116149695505050505050565b60006018841080156132795750601883105b6132955760405162461bcd60e51b81526004016127f890613dc8565b61329f8285613ee4565b1580156132b357506132b18284613ee4565b155b6132cf5760405162461bcd60e51b81526004016127f890613d75565b60006132da8361352f565b9050806132f95760405162461bcd60e51b81526004016127f890613da2565b60005b838110156133a357600060086133128388613e67565b61331c9190613e7f565b90506000600861332c8489613e67565b6133369190613ee4565b613341906018613e93565b61334b9089613e67565b84901b905080818a60000151846003811061337657634e487b7160e01b600052603260045260246000fd5b6020020151161461338e576000945050505050610ae3565b5050808061339b90613ec9565b9150506132fc565b5060019695505050505050565b60006018841080156133c25750601883105b6133de5760405162461bcd60e51b81526004016127f890613dc8565b6133e88285613ee4565b1580156133fc57506133fa8284613ee4565b155b6134185760405162461bcd60e51b81526004016127f890613d75565b60006134238361352f565b9050806134425760405162461bcd60e51b81526004016127f890613da2565b60005b83811015611a77576000600861345b8388613e67565b6134659190613e7f565b9050600060086134758489613e67565b61347f9190613ee4565b61348a906018613e93565b6134949089613e67565b84901b905080896000015183600381106134be57634e487b7160e01b600052603260045260246000fd5b602002015116156134d6576001945050505050610ae3565b505080806134e390613ec9565b915050613445565b80516000906135019060025b60200201516137ba565b825161350e9060016134f7565b835161351b9060006134f7565b6135259190613e67565b6105959190613e67565b6000816001141561354257506001610c9d565b816003141561355357506007610c9d565b81600614156135645750603f610c9d565b81600c14156135765750610fff610c9d565b8160181415613589575062ffffff610c9d565b506000919050565b6135996138cd565b50805151825180516001600160c01b0392831617905281516020908101518451909101805191831690911790529051604090810151835190910180519190921617905290565b600067ffffffffffffffff82811661360c57604092831c92915080831661360c57604083901c9250608091505b60205b8015612e295790811c908382166136315792831c9261362e8184613e67565b92505b61363c600282613e7f565b905061360f565b61364b6138cd565b815151835180516001600160c01b03928316191690528251602090810151855190910180519183161990911690528251604001518451911619906002612bcd565b6136946138cd565b6018841080156136a45750601883105b6136c05760405162461bcd60e51b81526004016127f890613dc8565b6136ca8285613ee4565b1580156136de57506136dc8284613ee4565b155b6136fa5760405162461bcd60e51b81526004016127f890613d75565b60006137058361352f565b9050806137245760405162461bcd60e51b81526004016127f890613da2565b60005b83811015612b24576000600861373d8388613e67565b6137479190613e7f565b905060086137558388613e67565b61375f9190613ee4565b61376a906018613e93565b6137749088613e67565b83901b198860000151826003811061379c57634e487b7160e01b600052603260045260246000fd5b602002018051909116905250806137b281613ec9565b915050613727565b60006137e477555555555555555555555555555555555555555555555555600184901c1683613eb2565b915061381177333333333333333333333333333333333333333333333333600284901c8116908416613e67565b9150613821600483901c83613e67565b770f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f1691506058826b0f0f0f0f0f0f0f0f0f0f0f0f166b0101010101010101010101016138659190613e93565b61387f606085901c6b010101010101010101010101613e93565b6138899190613e67565b60ff911c1692915050565b60405180602001604052806138a76138cd565b905290565b5080546000825560030290600052602060002090810190610c96919061391e565b60405180602001604052806138a761393f565b826003810192821561390e579160200282015b8281111561390e5782518255916020019190600101906138f3565b5061391a92915061395d565b5090565b8082111561391a57600080825560018201819055600282015560030161391e565b60405180606001604052806003906020820280368337509192915050565b5b8082111561391a576000815560010161395e565b600060608284031215613983578081fd5b61398d6020613e12565b905061399983836139a1565b815292915050565b6000606082840312156139b2578081fd5b60206139bd81613e12565b915083601f8401126139ce57600080fd5b6139d86060613e12565b8084866060870111156139ea57600080fd5b60005b6003811015613a0a578135845292840192908401906001016139ed565b5050835250909392505050565b600060208284031215613a28578081fd5b5035919050565b60008060408385031215613a41578081fd5b8235915060208084013567ffffffffffffffff811115613a5f578283fd5b8401601f81018613613a6f578283fd5b8035613a82613a7d82613e43565b613e12565b818152838101908385016060808502860187018b1015613aa0578788fd5b8795505b84861015613acc57613ab68b83613972565b8452600195909501949286019290810190613aa4565b5096999098509650505050505050565b60008060408385031215613aee578182fd5b8235915060208084013567ffffffffffffffff811115613b0c578283fd5b8401601f81018613613b1c578283fd5b8035613b2a613a7d82613e43565b818152838101908385016060808502860187018b1015613b48578788fd5b8795505b84861015613acc57613b5e8b836139a1565b8452600195909501949286019290810190613b4c565b60008060408385031215613b86578182fd5b50508035926020909101359150565b60008060808385031215613ba7578182fd5b82359150613bb88460208501613972565b90509250929050565b6000808284036101a0811215613bd5578283fd5b83359250610180601f1982011215613beb578182fd5b50613bf66080613e12565b613c038560208601613972565b8152613c128560808601613972565b6020820152613c248560e08601613972565b6040820152613c37856101408601613972565b6060820152809150509250929050565b600080600060608486031215613c5b578081fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613c87578081fd5b5050823594602084013594506040840135936060013592509050565b80518260005b6003811015613cc8578251825260209283019290910190600101613ca9565b5050505050565b6020808252825182820181905260009190848201906040850190845b81811015613d1257613cff83855151613ca3565b9284019260609290920191600101613ceb565b50909695505050505050565b60408082528351908201819052600090606090818401906020808801855b83811015613d5f57613d4f858351613ca3565b9385019390820190600101613d3c565b5050951515949095019390935250909392505050565b602080825260139082015272496e76616c696420636f6f7264696e6174657360681b604082015260600190565b6020808252600c908201526b696e76616c69642073697a6560a01b604082015260600190565b60208082526018908201527f496e76616c69642074696c6520636f6f7264696e617465730000000000000000604082015260600190565b6000606082019050610595828451613ca3565b604051601f8201601f1916810167ffffffffffffffff81118282101715613e3b57613e3b613f24565b604052919050565b600067ffffffffffffffff821115613e5d57613e5d613f24565b5060209081020190565b60008219821115613e7a57613e7a613ef8565b500190565b600082613e8e57613e8e613f0e565b500490565b6000816000190483118215151615613ead57613ead613ef8565b500290565b600082821015613ec457613ec4613ef8565b500390565b6000600019821415613edd57613edd613ef8565b5060010190565b600082613ef357613ef3613f0e565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220897436c4f0c1f5ff1012f1d7a15a46df301f34ff5ab9551cabb84fa1a0cdc16f64736f6c63430008020033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "The key of the mapping is a combination of x and y.This library try to reduce the gas consumption and to do that it accesses the internal structure of the Tiles",
    "kind": "dev",
    "methods": {
      "at(MapLib.Map storage,uint256)": {
        "details": "used to iterate off-chain over the tiles.",
        "params": {
          "index": "the index of the tile",
          "self": "the Map"
        },
        "returns": {
          "_0": "the tile that is in the position index in the list"
        }
      },
      "at(MapLib.Map storage,uint256,uint256)": {
        "details": "used to iterate off-chain over the tiles.",
        "params": {
          "limit": "amount of tiles to get",
          "offset": "initial offset used to paginate",
          "self": "the Map"
        },
        "returns": {
          "_0": "the partial list of tiles"
        }
      },
      "clear(MapLib.Map storage)": {
        "params": {
          "self": "the Map in which the bits are cleared"
        }
      },
      "clear(MapLib.Map storage,MapLib.Map storage)": {
        "params": {
          "other": "the map that is used as source to clear the bits in the current one",
          "self": "the Map in which the bits are cleared"
        }
      },
      "clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "params": {
          "self": "the Map, in which the bits will be cleared",
          "tile": "the tile that is used to clear the bits inside the map"
        },
        "returns": {
          "_0": "false if the the coordinates are not found so the bits are already cleared"
        }
      },
      "clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "params": {
          "self": "the Map in which the bits are cleared",
          "tiles": "the list of TileWithCoord"
        }
      },
      "clear(MapLib.Map storage,uint256,uint256,uint256)": {
        "details": "the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract",
        "params": {
          "self": "the Map, in which the bits will be cleared",
          "size": "the size of the square",
          "x": "the x coordinate of the square",
          "y": "the y coordinate of the square"
        },
        "returns": {
          "_0": "false if the the coordinates are not found so the bits are already cleared"
        }
      },
      "contain(MapLib.Map storage,MapLib.Map storage)": {
        "details": "self can be huge, but other must be small, we iterate over other values.",
        "params": {
          "other": "the Map that must be included",
          "self": "the Map that is checked for inclusion"
        },
        "returns": {
          "_0": "true if self contain other Map"
        }
      },
      "contain(MapLib.Map storage,MapLib.TranslateResult)": {
        "details": "this routine is used to match an experience template after translation",
        "params": {
          "s": "the translation result that must be included",
          "self": "the bigger Tile that is checked for inclusion"
        },
        "returns": {
          "_0": "true if self contain all the bits in the translation result"
        }
      },
      "contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "params": {
          "self": "the Map that is checked for inclusion",
          "tile": "the TileWithCoord that must be included"
        },
        "returns": {
          "_0": "true if self contain tile TileWithCoord"
        }
      },
      "contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "params": {
          "self": "the Map that is checked for inclusion",
          "tiles": "the TileWithCoord that must be included"
        },
        "returns": {
          "_0": "true if self contain tiles TileWithCoord[]"
        }
      },
      "contain(MapLib.Map storage,uint256,uint256)": {
        "params": {
          "self": "the Map where the check is done",
          "x": "the x coordinate",
          "y": "the  coordinate"
        },
        "returns": {
          "_0": "true if the x,y coordinate bit is set or false if it is cleared"
        }
      },
      "contain(MapLib.Map storage,uint256,uint256,uint256)": {
        "details": "the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract",
        "params": {
          "self": "the Map where the check is done",
          "size": "the size of the square",
          "x": "the x coordinate of the square",
          "y": "the y coordinate of the square"
        },
        "returns": {
          "_0": "true if al the bits are set or false if at least one bit is cleared"
        }
      },
      "floodStep(MapLib.Map storage,TileLib.Tile[])": {
        "params": {
          "current": "the current image",
          "self": "the map"
        },
        "returns": {
          "done": "true if the current image is the same as the next one so the algorithm is ready to stop flooding.",
          "next": "return the image with the extra pixels that correspond to the flooding process"
        }
      },
      "getLandCount(MapLib.Map storage)": {
        "params": {
          "self": "the map"
        },
        "returns": {
          "_0": "the quantity of lands"
        }
      },
      "getMap(MapLib.Map storage)": {
        "details": "Use only for testing. This can be problematic if it grows too much !!!",
        "params": {
          "self": "the map"
        },
        "returns": {
          "_0": "the list of internal tiles"
        }
      },
      "intersect(MapLib.Map storage,MapLib.Map storage)": {
        "details": "self can be huge, but other must be small, we iterate over other values.",
        "params": {
          "other": "the Map that must be included",
          "self": "the Map that is checked for inclusion"
        },
        "returns": {
          "_0": "true if there is at least one bit set in both Maps"
        }
      },
      "intersect(MapLib.Map storage,MapLib.TranslateResult)": {
        "params": {
          "s": "the four tiles that are the result of a translation",
          "self": "the Map to compare"
        },
        "returns": {
          "_0": "true if there is at least one bit set in both the Map and the TranslationResult"
        }
      },
      "intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "params": {
          "self": "the Map to compare",
          "tile": "the TileWithCoord to compare"
        },
        "returns": {
          "_0": "true if there is at least one bit set in both the Map and the TileWithCoord"
        }
      },
      "intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "params": {
          "self": "the Map that is checked for inclusion",
          "tiles": "the TileWithCoord that must be included"
        },
        "returns": {
          "_0": "true if there is at least one bit set in both the Map and the TileWithCoord[]"
        }
      },
      "intersect(MapLib.Map storage,uint256,uint256,uint256)": {
        "details": "the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract",
        "params": {
          "self": "the Map where the check is done",
          "size": "the size of the square",
          "x": "the x coordinate of the square",
          "y": "the y coordinate of the square"
        },
        "returns": {
          "_0": "true if there is at least one bit set in both the Map and the square"
        }
      },
      "isAdjacent(MapLib.Map storage)": {
        "details": "Checks the full map to see if all the pixels are adjacent",
        "params": {
          "self": "the map"
        },
        "returns": {
          "ret": "true if all the bits (lands) are adjacent"
        }
      },
      "isAdjacent(MapLib.Map storage,uint256,uint256,uint256)": {
        "details": "used to add a quad to a map, it is cheaper than isAdjacent(map)",
        "params": {
          "self": "the map",
          "size": "the size of the square",
          "x": "the x coordinate of the square",
          "y": "the y coordinate of the square"
        },
        "returns": {
          "_0": "true if the square is 4-connected to the map"
        }
      },
      "isEmpty(MapLib.Map storage)": {
        "params": {
          "self": "the Map to check"
        },
        "returns": {
          "_0": "true if the map is empty"
        }
      },
      "isEqual(MapLib.Map storage,MapLib.Map storage)": {
        "params": {
          "other": "the second Map to check",
          "self": "the first Map to check"
        },
        "returns": {
          "_0": "true if the two maps are equal"
        }
      },
      "isEqual(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "params": {
          "other": "the list of TileWithCoord to check",
          "self": "the Map to check"
        },
        "returns": {
          "_0": "true if the two are equal"
        }
      },
      "length(MapLib.Map storage)": {
        "details": "used to iterate off-chain over the tiles.",
        "params": {
          "self": "the Map"
        },
        "returns": {
          "_0": "the length of the list"
        }
      },
      "set(MapLib.Map storage,MapLib.Map storage)": {
        "params": {
          "other": "the map that is used as source to set the bits in the current one",
          "self": "the Map in which the bits are set"
        }
      },
      "set(MapLib.Map storage,MapLib.TranslateResult)": {
        "params": {
          "s": "translation result, the result of a translation of a tile are four tiles.",
          "self": "the Map in which the bits are set"
        }
      },
      "set(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "params": {
          "self": "the Map in which the bits are set",
          "tile": "the tile that is used to set the bits inside the map"
        }
      },
      "set(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "params": {
          "self": "the Map in which the bits are set",
          "tiles": "the list of TileWithCoord"
        }
      },
      "set(MapLib.Map storage,uint256,uint256,uint256)": {
        "details": "the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract",
        "params": {
          "self": "the Map in which the bits are set",
          "size": "the size of the square",
          "x": "the x coordinate of the square",
          "y": "the y coordinate of the square"
        }
      }
    },
    "title": "An iterable mapping of Tiles (24x24 bit set).",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "at(MapLib.Map storage,uint256)": {
        "notice": "get the tile that is in certain position in the internal list of tiles"
      },
      "at(MapLib.Map storage,uint256,uint256)": {
        "notice": "get the internal list of tiles with pagination"
      },
      "clear(MapLib.Map storage)": {
        "notice": "Clear the all the bits in the map"
      },
      "clear(MapLib.Map storage,MapLib.Map storage)": {
        "notice": "Clear the bits of another map in the current one"
      },
      "clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "notice": "Given a TileWithCoord (a tile that includes coordinates inside it) clear the corresponding bits in the map"
      },
      "clear(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "notice": "Clear the bits of a list of TileWithCoord"
      },
      "clear(MapLib.Map storage,uint256,uint256,uint256)": {
        "notice": "Clear the bits inside a square that has size x size in the x,y coordinates in the map"
      },
      "contain(MapLib.Map storage,MapLib.Map storage)": {
        "notice": "Check if a Map includes all the bits that are set in another Map"
      },
      "contain(MapLib.Map storage,MapLib.TranslateResult)": {
        "notice": "Check if a Map includes all the bits that are set in translation result"
      },
      "contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "notice": "Check if a Map includes all the bits that are set in a TileWithCoord"
      },
      "contain(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "notice": "Check if a Map includes all the bits that are set in a TileWithCoord[]"
      },
      "contain(MapLib.Map storage,uint256,uint256)": {
        "notice": "Check if the bit in certain coordinate are set or not inside the map"
      },
      "contain(MapLib.Map storage,uint256,uint256,uint256)": {
        "notice": "Check if the all the bits of a square inside the Map are set or not"
      },
      "floodStep(MapLib.Map storage,TileLib.Tile[])": {
        "notice": "used to check adjacency. See: https://en.wikipedia.org/wiki/Flood_fill and isAdjacent."
      },
      "getLandCount(MapLib.Map storage)": {
        "notice": "count the amount of bits (lands) set inside a Map"
      },
      "getMap(MapLib.Map storage)": {
        "notice": "return the internal list of tiles"
      },
      "intersect(MapLib.Map storage,MapLib.Map storage)": {
        "notice": "Check if a Map includes any of the bits that are set in another Map"
      },
      "intersect(MapLib.Map storage,MapLib.TranslateResult)": {
        "notice": "Check if a map has at least one bit in common with some translation result"
      },
      "intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "notice": "Check if a map has at least one bit in common with some TileWithCoord"
      },
      "intersect(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "notice": "Check if a Map has at least one of the bits that are set in a TileWithCoord[]"
      },
      "intersect(MapLib.Map storage,uint256,uint256,uint256)": {
        "notice": "Check if a map has at least one bit in common with a square (x,y,size)"
      },
      "isAdjacent(MapLib.Map storage)": {
        "notice": "check that the map has only one 4-connected component, aka everything is adjacent"
      },
      "isAdjacent(MapLib.Map storage,uint256,uint256,uint256)": {
        "notice": "check if a square is adjacent (4-connected component) to the current map."
      },
      "isEmpty(MapLib.Map storage)": {
        "notice": "Check if a map is empty (no bits are set)"
      },
      "isEqual(MapLib.Map storage,MapLib.Map storage)": {
        "notice": "Check if two maps are equal"
      },
      "isEqual(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "notice": "Check if a map is equal to an array of TileWithCoord"
      },
      "length(MapLib.Map storage)": {
        "notice": "return the length of the internal list of tiles"
      },
      "set(MapLib.Map storage,MapLib.Map storage)": {
        "notice": "Merge the bits of another map in the current one"
      },
      "set(MapLib.Map storage,MapLib.TranslateResult)": {
        "notice": "Given a translation of a tile the corresponding bits are set in the current map"
      },
      "set(MapLib.Map storage,TileWithCoordLib.TileWithCoord)": {
        "notice": "Given a TileWithCoord (a tile that includes coordinates inside it) set the corresponding bits in the map"
      },
      "set(MapLib.Map storage,TileWithCoordLib.TileWithCoord[])": {
        "notice": "Merge the bits of a list of TileWithCoord in the current one"
      },
      "set(MapLib.Map storage,uint256,uint256,uint256)": {
        "notice": "Set the bits inside a square that has size x size in the x,y coordinates in the map"
      }
    },
    "notice": "Used to represent a the presence or absence of certain x,y coordinate in a map of lands",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}