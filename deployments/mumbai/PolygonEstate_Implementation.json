{
  "address": "0x5727AAf268704C987177ca1c3197DEA3eae42368",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "EstateBaseUrlChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[3]",
                  "name": "data",
                  "type": "uint256[3]"
                }
              ],
              "internalType": "struct TileLib.Tile",
              "name": "tile",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct TileWithCoordLib.TileWithCoord[]",
          "name": "lands",
          "type": "tuple[]"
        }
      ],
      "name": "EstateBridgeBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[3]",
                  "name": "data",
                  "type": "uint256[3]"
                }
              ],
              "internalType": "struct TileLib.Tile",
              "name": "tile",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct TileWithCoordLib.TileWithCoord[]",
          "name": "lands",
          "type": "tuple[]"
        }
      ],
      "name": "EstateBridgeMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "EstateLandTokenChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IEstateExperienceRegistry",
          "name": "oldRegistry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IEstateExperienceRegistry",
          "name": "newRegistry",
          "type": "address"
        }
      ],
      "name": "EstateRegistryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "EstateTokenBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[3]",
                  "name": "data",
                  "type": "uint256[3]"
                }
              ],
              "internalType": "struct TileLib.Tile",
              "name": "tile",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct TileWithCoordLib.TileWithCoord[]",
          "name": "lands",
          "type": "tuple[]"
        }
      ],
      "name": "EstateTokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[3]",
                  "name": "data",
                  "type": "uint256[3]"
                }
              ],
              "internalType": "struct TileLib.Tile",
              "name": "tile",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct TileWithCoordLib.TileWithCoord[]",
          "name": "lands",
          "type": "tuple[]"
        }
      ],
      "name": "EstateTokenLandsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[3]",
                  "name": "data",
                  "type": "uint256[3]"
                }
              ],
              "internalType": "struct TileLib.Tile",
              "name": "tile",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct TileWithCoordLib.TileWithCoord[]",
          "name": "lands",
          "type": "tuple[]"
        }
      ],
      "name": "EstateTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BURNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oldId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[][3]",
          "name": "landToAdd",
          "type": "uint256[][3]"
        }
      ],
      "name": "addLand",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "expToUnlink",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[][3]",
          "name": "landToRemove",
          "type": "uint256[][3]"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        }
      ],
      "name": "burnEstate",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[3]",
                  "name": "data",
                  "type": "uint256[3]"
                }
              ],
              "internalType": "struct TileLib.Tile",
              "name": "tile",
              "type": "tuple"
            }
          ],
          "internalType": "struct TileWithCoordLib.TileWithCoord[]",
          "name": "tiles",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256[3]",
                      "name": "data",
                      "type": "uint256[3]"
                    }
                  ],
                  "internalType": "struct TileLib.Tile",
                  "name": "tile",
                  "type": "tuple"
                }
              ],
              "internalType": "struct TileWithCoordLib.TileWithCoord",
              "name": "topLeft",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256[3]",
                      "name": "data",
                      "type": "uint256[3]"
                    }
                  ],
                  "internalType": "struct TileLib.Tile",
                  "name": "tile",
                  "type": "tuple"
                }
              ],
              "internalType": "struct TileWithCoordLib.TileWithCoord",
              "name": "topRight",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256[3]",
                      "name": "data",
                      "type": "uint256[3]"
                    }
                  ],
                  "internalType": "struct TileLib.Tile",
                  "name": "tile",
                  "type": "tuple"
                }
              ],
              "internalType": "struct TileWithCoordLib.TileWithCoord",
              "name": "bottomLeft",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256[3]",
                      "name": "data",
                      "type": "uint256[3]"
                    }
                  ],
                  "internalType": "struct TileLib.Tile",
                  "name": "tile",
                  "type": "tuple"
                }
              ],
              "internalType": "struct TileWithCoordLib.TileWithCoord",
              "name": "bottomRight",
              "type": "tuple"
            }
          ],
          "internalType": "struct MapLib.TranslateResult",
          "name": "s",
          "type": "tuple"
        }
      ],
      "name": "contain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][3]",
          "name": "landToAdd",
          "type": "uint256[][3]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getLandAt",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[3]",
                  "name": "data",
                  "type": "uint256[3]"
                }
              ],
              "internalType": "struct TileLib.Tile",
              "name": "tile",
              "type": "tuple"
            }
          ],
          "internalType": "struct TileWithCoordLib.TileWithCoord[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        }
      ],
      "name": "getLandCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        }
      ],
      "name": "getLandLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLandToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "storageId",
          "type": "uint256"
        }
      ],
      "name": "getOwnerOfStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegistry",
      "outputs": [
        {
          "internalType": "contract IEstateExperienceRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        }
      ],
      "name": "getStorageId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "landToken_",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "chainIndex_",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "name": "initV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[3]",
                  "name": "data",
                  "type": "uint256[3]"
                }
              ],
              "internalType": "struct TileLib.Tile",
              "name": "tile",
              "type": "tuple"
            }
          ],
          "internalType": "struct TileWithCoordLib.TileWithCoord[]",
          "name": "tiles",
          "type": "tuple[]"
        }
      ],
      "name": "mintEstate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseUri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "landToken",
          "type": "address"
        }
      ],
      "name": "setLandToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEstateExperienceRegistry",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oldId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[][3]",
          "name": "landToAdd",
          "type": "uint256[][3]"
        },
        {
          "internalType": "uint256[]",
          "name": "expToUnlink",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[][3]",
          "name": "landToRemove",
          "type": "uint256[][3]"
        }
      ],
      "name": "update",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2111222d3e3252b9303a687ca7e53fef896d49113c80cd16cc1778fa8b94e368",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x5727AAf268704C987177ca1c3197DEA3eae42368",
    "transactionIndex": 1,
    "gasUsed": "4581211",
    "logsBloom": "0x
    "blockHash": "0x52cb237f5a09baf19dd933e0a3d47243139eb98cbc88e375010efe62cd4ad6a8",
    "transactionHash": "0x2111222d3e3252b9303a687ca7e53fef896d49113c80cd16cc1778fa8b94e368",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 27229869,
        "transactionHash": "0x2111222d3e3252b9303a687ca7e53fef896d49113c80cd16cc1778fa8b94e368",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001f1f6294e2e1e300000000000000000000000000000000000000000000000001082f9c0f42d3dcd0000000000000000000000000000000000000000000004e06f5f01284479088e0000000000000000000000000000000000000000000000000e910397a5ff1f9d0000000000000000000000000000000000000000000004e07150f75192a726be",
        "logIndex": 2,
        "blockHash": "0x52cb237f5a09baf19dd933e0a3d47243139eb98cbc88e375010efe62cd4ad6a8"
      }
    ],
    "blockNumber": 27229869,
    "cumulativeGasUsed": "4636340",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d30173aa61b27c0632df2346127d859a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"EstateBaseUrlChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct TileLib.Tile\",\"name\":\"tile\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct TileWithCoordLib.TileWithCoord[]\",\"name\":\"lands\",\"type\":\"tuple[]\"}],\"name\":\"EstateBridgeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct TileLib.Tile\",\"name\":\"tile\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct TileWithCoordLib.TileWithCoord[]\",\"name\":\"lands\",\"type\":\"tuple[]\"}],\"name\":\"EstateBridgeMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"EstateLandTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IEstateExperienceRegistry\",\"name\":\"oldRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IEstateExperienceRegistry\",\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"EstateRegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"EstateTokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct TileLib.Tile\",\"name\":\"tile\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct TileWithCoordLib.TileWithCoord[]\",\"name\":\"lands\",\"type\":\"tuple[]\"}],\"name\":\"EstateTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct TileLib.Tile\",\"name\":\"tile\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct TileWithCoordLib.TileWithCoord[]\",\"name\":\"lands\",\"type\":\"tuple[]\"}],\"name\":\"EstateTokenLandsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct TileLib.Tile\",\"name\":\"tile\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct TileWithCoordLib.TileWithCoord[]\",\"name\":\"lands\",\"type\":\"tuple[]\"}],\"name\":\"EstateTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[][3]\",\"name\":\"landToAdd\",\"type\":\"uint256[][3]\"}],\"name\":\"addLand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"expToUnlink\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][3]\",\"name\":\"landToRemove\",\"type\":\"uint256[][3]\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"burnEstate\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct TileLib.Tile\",\"name\":\"tile\",\"type\":\"tuple\"}],\"internalType\":\"struct TileWithCoordLib.TileWithCoord[]\",\"name\":\"tiles\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct TileLib.Tile\",\"name\":\"tile\",\"type\":\"tuple\"}],\"internalType\":\"struct TileWithCoordLib.TileWithCoord\",\"name\":\"topLeft\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct TileLib.Tile\",\"name\":\"tile\",\"type\":\"tuple\"}],\"internalType\":\"struct TileWithCoordLib.TileWithCoord\",\"name\":\"topRight\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct TileLib.Tile\",\"name\":\"tile\",\"type\":\"tuple\"}],\"internalType\":\"struct TileWithCoordLib.TileWithCoord\",\"name\":\"bottomLeft\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct TileLib.Tile\",\"name\":\"tile\",\"type\":\"tuple\"}],\"internalType\":\"struct TileWithCoordLib.TileWithCoord\",\"name\":\"bottomRight\",\"type\":\"tuple\"}],\"internalType\":\"struct MapLib.TranslateResult\",\"name\":\"s\",\"type\":\"tuple\"}],\"name\":\"contain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][3]\",\"name\":\"landToAdd\",\"type\":\"uint256[][3]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getLandAt\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct TileLib.Tile\",\"name\":\"tile\",\"type\":\"tuple\"}],\"internalType\":\"struct TileWithCoordLib.TileWithCoord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"getLandCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"getLandLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLandToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"storageId\",\"type\":\"uint256\"}],\"name\":\"getOwnerOfStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"contract IEstateExperienceRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"getStorageId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"landToken_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"chainIndex_\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct TileLib.Tile\",\"name\":\"tile\",\"type\":\"tuple\"}],\"internalType\":\"struct TileWithCoordLib.TileWithCoord[]\",\"name\":\"tiles\",\"type\":\"tuple[]\"}],\"name\":\"mintEstate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"landToken\",\"type\":\"address\"}],\"name\":\"setLandToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEstateExperienceRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[][3]\",\"name\":\"landToAdd\",\"type\":\"uint256[][3]\"},{\"internalType\":\"uint256[]\",\"name\":\"expToUnlink\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][3]\",\"name\":\"landToRemove\",\"type\":\"uint256[][3]\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EstateRegistryChanged(address,address,address)\":{\"details\":\"Emitted when the registry is changed\",\"params\":{\"newRegistry\":\"new address of the registry\",\"oldRegistry\":\"old address of the registry\",\"operator\":\"The msg sender\"}}},\"kind\":\"dev\",\"methods\":{\"addLand(uint256,uint256[][3])\":{\"params\":{\"landToAdd\":\"The set of quads to add.\",\"oldId\":\"the estate id that will be updated\"},\"returns\":{\"_0\":\"estateId the new estate Id\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256,uint256[],uint256[][3])\":{\"details\":\"to be able to remove lands they must be completely unlinked from any experience (in the registry)to be able to burn an estate it must be empty\",\"params\":{\"estateId\":\"the estate id that will be updated\",\"expToUnlink\":\"experiences to unlink\",\"landToRemove\":\"The set of quads to remove.\"}},\"burnEstate(address,uint256)\":{\"details\":\"to be able to bridge an estate all the lands must be unlinked (we don't have a registry on L1)\",\"params\":{\"estateId\":\"the id of the estate token\",\"from\":\"user that is trying to use the bridge\"},\"returns\":{\"tiles\":\"the list of tiles (aka lands) to add to the estate\"}},\"contain(uint256,(((uint256[3])),((uint256[3])),((uint256[3])),((uint256[3]))))\":{\"params\":{\"estateId\":\"the estate id\",\"s\":\"displaced template\"},\"returns\":{\"_0\":\"true if the estate contain all the lands of the displaced template\"}},\"contractURI()\":{\"details\":\"See https://docs.opensea.io/docs/contract-level-metadata\",\"returns\":{\"_0\":\"the metadata url for the whole contract\"}},\"create(uint256[][3])\":{\"params\":{\"landToAdd\":\"The set of quads to add.\"},\"returns\":{\"estateId\":\"the estate Id created\"}},\"decimals()\":{\"details\":\"Returns the decimals places of the token, for ERC721 it is always zero.\",\"returns\":{\"_0\":\"\"}},\"exists(uint256)\":{\"details\":\"Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.Tokens start existing when they are minted (`mint`), and stop existing when they are burned (`burn`).\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getChainIndex()\":{\"returns\":{\"_0\":\"chain index\"}},\"getLandAt(uint256,uint256,uint256)\":{\"params\":{\"estateId\":\"the estate id\",\"limit\":\"amount of entries to get (pagination)\",\"offset\":\"an amount of entries to skip in the array (pagination)\"},\"returns\":{\"_0\":\"an array of tiles describing the map of lands\"}},\"getLandCount(uint256)\":{\"params\":{\"estateId\":\"the estate id\"},\"returns\":{\"_0\":\"the amount of lands inside the estate\"}},\"getLandLength(uint256)\":{\"params\":{\"estateId\":\"the estate id\"},\"returns\":{\"_0\":\"the length of the tile map\"}},\"getLandToken()\":{\"returns\":{\"_0\":\"land token contract address\"}},\"getNextId()\":{\"returns\":{\"_0\":\"next id\"}},\"getOwnerOfStorage(uint256)\":{\"params\":{\"storageId\":\"the storage id for an estate\"},\"returns\":{\"_0\":\"owner address\"}},\"getRegistry()\":{\"returns\":{\"_0\":\"registry the registry contract address\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getStorageId(uint256)\":{\"params\":{\"estateId\":\"the estate id\"},\"returns\":{\"_0\":\"the storage Id\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initV1(address,address,address,uint16,string,string)\":{\"params\":{\"admin\":\"initial admin role that can grant or revoke other roles\",\"chainIndex_\":\"the chain index for example: 0:mainnet, 1:polygon, etc\",\"landToken_\":\"the address of the land token contract\",\"name_\":\"name of the token\",\"symbol_\":\"symbol of the token\",\"trustedForwarder\":\"address of the meta tx trustedForwarder\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintEstate(address,((uint256[3]))[])\":{\"params\":{\"tiles\":\"the list of tiles (aka lands) to add to the estate\",\"to\":\"user that will get the new minted Estate\"},\"returns\":{\"_0\":\"the estate Id created\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"params\":{\"baseUri\":\"the base uri of the metadata url\"}},\"setLandToken(address)\":{\"params\":{\"landToken\":\"the new address of the land contract\"}},\"setRegistry(address)\":{\"params\":{\"registry\":\"the registry contract address\"}},\"setTrustedForwarder(address)\":{\"params\":{\"trustedForwarder\":\"address of the meta tx trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The id of the interface.\"},\"returns\":{\"_0\":\"Whether the interface is supported.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"update(uint256,uint256[][3],uint256[],uint256[][3])\":{\"details\":\"to be able to remove lands they must be completely unlinked from any experience (in the registry)\",\"params\":{\"expToUnlink\":\"experiences to unlink\",\"landToAdd\":\"The set of quads to add.\",\"landToRemove\":\"The set of quads to remove.\",\"oldId\":\"the estate id that will be updated\"},\"returns\":{\"_0\":\"estateId the new estate Id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLand(uint256,uint256[][3])\":{\"notice\":\"Add the given quads (aka lands) to an Estate.\"},\"burn(uint256,uint256[],uint256[][3])\":{\"notice\":\"burn an estate\"},\"burnEstate(address,uint256)\":{\"notice\":\"completely burn an estate (Used by the bridge)\"},\"contain(uint256,(((uint256[3])),((uint256[3])),((uint256[3])),((uint256[3]))))\":{\"notice\":\"check if the estate contains certain displaced template (used by the registry)\"},\"create(uint256[][3])\":{\"notice\":\"Create a new estate token adding the given quads (aka lands).\"},\"decimals()\":{\"notice\":\"Implement an ERC20 metadata method so it is easier to import the token into metamask\"},\"exists(uint256)\":{\"notice\":\"Returns whether `tokenId` exists.\"},\"getChainIndex()\":{\"notice\":\"return the chain index\"},\"getLandAt(uint256,uint256,uint256)\":{\"notice\":\"return an array of tiles describing the map of lands for a given estate\"},\"getLandCount(uint256)\":{\"notice\":\"return the amount of lands inside the estate\"},\"getLandLength(uint256)\":{\"notice\":\"return the amount of tiles that describe the land map inside a given estate\"},\"getLandToken()\":{\"notice\":\"return the address of the land token contract\"},\"getNextId()\":{\"notice\":\"return the id of the next estate token\"},\"getOwnerOfStorage(uint256)\":{\"notice\":\"return owner of the estateId ignoring version rotations (used by the registry)\"},\"getRegistry()\":{\"notice\":\"get the registry contract address\"},\"getStorageId(uint256)\":{\"notice\":\"given and estateId return the part that doesn't change when the version is incremented\"},\"initV1(address,address,address,uint16,string,string)\":{\"notice\":\"initialization\"},\"mintEstate(address,((uint256[3]))[])\":{\"notice\":\"create a new estate from scratch (Used by the bridge)\"},\"onERC721BatchReceived(address,address,uint256[],bytes)\":{\"notice\":\"this is necessary to be able to receive land\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"this is necessary to be able to receive land\"},\"setBaseURI(string)\":{\"notice\":\"change the base uri of the metadata url\"},\"setLandToken(address)\":{\"notice\":\"change the address of the land contract\"},\"setRegistry(address)\":{\"notice\":\"set the registry contract address\"},\"setTrustedForwarder(address)\":{\"notice\":\"set the trusted forwarder (used by the admin in case of misconfiguration)\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface.\"},\"update(uint256,uint256[][3],uint256[],uint256[][3])\":{\"notice\":\"update an estate adding and removing lands, and unlinking experiences in one step\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol\":\"PolygonEstateTokenV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x6c25d4211724a6f4cdc8d25397edc780f48d951fc81c1d507f59b3edb22afaf7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/solc_0.8/common/Base/BaseERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {ERC2771ContextUpgradeable} from \\\"../BaseWithStorage/ERC2771ContextUpgradeable.sol\\\";\\n\\n/// @title An ERC721 token that supports meta-tx and access control.\\nabstract contract BaseERC721Upgradeable is AccessControlUpgradeable, ERC721Upgradeable, ERC2771ContextUpgradeable {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    /// @notice initialization\\n    /// @param trustedForwarder address of the meta tx trustedForwarder\\n    /// @param admin initial admin role that can grant or revoke other roles\\n    /// @param name_ name of the token\\n    /// @param symbol_ symbol of the token\\n    function __EstateBaseERC721_init(\\n        address trustedForwarder,\\n        address admin,\\n        string memory name_,\\n        string memory symbol_\\n    ) internal onlyInitializing {\\n        __ERC2771Context_init_unchained(trustedForwarder);\\n        __ERC721_init_unchained(name_, symbol_);\\n        __EstateBaseERC721_init_unchained(admin);\\n    }\\n\\n    /// @notice initialization unchained\\n    /// @param admin initial admin role that can grant or revoke other roles\\n    function __EstateBaseERC721_init_unchained(address admin) internal onlyInitializing {\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    /// @notice set the trusted forwarder (used by the admin in case of misconfiguration)\\n    /// @param trustedForwarder address of the meta tx trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external {\\n        require(hasRole(ADMIN_ROLE, _msgSender()), \\\"not admin\\\");\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    /// @notice Returns whether `tokenId` exists.\\n    /// @dev Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n    /// @dev Tokens start existing when they are minted (`mint`), and stop existing when they are burned (`burn`).\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// @param interfaceId The id of the interface.\\n    /// @return Whether the interface is supported.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            ERC721Upgradeable.supportsInterface(interfaceId) || AccessControlUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Implement an ERC20 metadata method so it is easier to import the token into metamask\\n    /// @dev Returns the decimals places of the token, for ERC721 it is always zero.\\n    /// @return\\n    function decimals() external pure returns (uint8) {\\n        return 0;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (bytes calldata) {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xad6714112107b5898d782ba2951a85b71bd9035db89e94b14a7fd2ebbb416c07\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n * @dev Taken from OpenZeppelin source code. Remove after upgrading the OZ library!!!\\n * @dev we need and internal _trustedForwarder so we can add a setter.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Context_init(address trustedForwarder) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC2771Context_init_unchained(trustedForwarder);\\n    }\\n\\n    function __ERC2771Context_init_unchained(address trustedForwarder) internal onlyInitializing {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe2e0e0c762a5864cc9d3cedfc5a84504915cfb42e325ff8ef51246b0b25af363\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/MapLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/* solhint-disable code-complexity */\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {TileWithCoordLib} from \\\"./TileWithCoordLib.sol\\\";\\nimport {TileLib} from \\\"./TileLib.sol\\\";\\n\\n/// @title An iterable mapping of Tiles (24x24 bit set).\\n/// @notice Used to represent a the presence or absence of certain x,y coordinate in a map of lands\\n/// @dev The key of the mapping is a combination of x and y.\\n/// @dev This library try to reduce the gas consumption and to do that it accesses the internal structure of the Tiles\\nlibrary MapLib {\\n    using TileWithCoordLib for TileWithCoordLib.TileWithCoord;\\n    using TileLib for TileLib.Tile;\\n\\n    uint256 private constant LEFT_MASK = 0x000001000001000001000001000001000001000001000001;\\n    uint256 private constant LEFT_MASK_NEG = ~LEFT_MASK;\\n    uint256 private constant RIGHT_MASK = 0x800000800000800000800000800000800000800000800000;\\n    uint256 private constant RIGHT_MASK_NEG = ~RIGHT_MASK;\\n    uint256 private constant UP_MASK = 0x000000000000000000000000000000000000000000FFFFFF;\\n    uint256 private constant DOWN_MASK = 0xFFFFFF000000000000000000000000000000000000000000;\\n\\n    struct TranslateResult {\\n        TileWithCoordLib.TileWithCoord topLeft;\\n        TileWithCoordLib.TileWithCoord topRight;\\n        TileWithCoordLib.TileWithCoord bottomLeft;\\n        TileWithCoordLib.TileWithCoord bottomRight;\\n    }\\n\\n    // An iterable mapping of tiles (24x24 bit set).\\n    struct Map {\\n        TileWithCoordLib.TileWithCoord[] values;\\n        // Position of the value in the `values` array, plus 1 because index 0 means that the key is not found.\\n        mapping(uint256 => uint256) indexes;\\n    }\\n\\n    /// @notice Set the bits inside a square that has size x size in the x,y coordinates in the map\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map in which the bits are set\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    function set(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            // Add a new tile\\n            TileWithCoordLib.TileWithCoord memory t = TileWithCoordLib.init(x, y);\\n            self.values.push(t.set(x, y, size));\\n            self.indexes[key] = self.values.length;\\n        } else {\\n            // contains\\n            self.values[idx - 1] = self.values[idx - 1].set(x, y, size);\\n        }\\n    }\\n\\n    /// @notice Given a translation of a tile the corresponding bits are set in the current map\\n    /// @param self the Map in which the bits are set\\n    /// @param s translation result, the result of a translation of a tile are four tiles.\\n    function set(Map storage self, TranslateResult memory s) public {\\n        set(self, s.topLeft);\\n        set(self, s.topRight);\\n        set(self, s.bottomLeft);\\n        set(self, s.bottomRight);\\n    }\\n\\n    /// @notice Given a TileWithCoord (a tile that includes coordinates inside it) set the corresponding bits in the map\\n    /// @param self the Map in which the bits are set\\n    /// @param tile the tile that is used to set the bits inside the map\\n    function set(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public {\\n        if (tile.isEmpty()) {\\n            return;\\n        }\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            // Add a new tile\\n            self.values.push(tile);\\n            self.indexes[key] = self.values.length;\\n        } else {\\n            self.values[idx - 1] = self.values[idx - 1].merge(tile);\\n        }\\n    }\\n\\n    /// @notice Merge the bits of a list of TileWithCoord in the current one\\n    /// @param self the Map in which the bits are set\\n    /// @param tiles the list of TileWithCoord\\n    function set(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            set(self, tiles[i]);\\n        }\\n    }\\n\\n    /// @notice Merge the bits of another map in the current one\\n    /// @param self the Map in which the bits are set\\n    /// @param other the map that is used as source to set the bits in the current one\\n    function set(Map storage self, Map storage other) public {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            set(self, other.values[i]);\\n        }\\n    }\\n\\n    /// @notice Clear the bits inside a square that has size x size in the x,y coordinates in the map\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map, in which the bits will be cleared\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return false if the the coordinates are not found so the bits are already cleared\\n    function clear(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains, nothing to clear\\n            return false;\\n        }\\n        TileWithCoordLib.TileWithCoord memory t = self.values[idx - 1].clear(x, y, size);\\n        if (t.isEmpty()) {\\n            _remove(self, idx, key);\\n        } else {\\n            self.values[idx - 1] = t;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Given a TileWithCoord (a tile that includes coordinates inside it) clear the corresponding bits in the map\\n    /// @param self the Map, in which the bits will be cleared\\n    /// @param tile the tile that is used to clear the bits inside the map\\n    /// @return false if the the coordinates are not found so the bits are already cleared\\n    function clear(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public returns (bool) {\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        TileWithCoordLib.TileWithCoord memory t = self.values[idx - 1].clear(tile);\\n        if (t.isEmpty()) {\\n            _remove(self, idx, key);\\n        } else {\\n            self.values[idx - 1] = t;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Clear the bits of a list of TileWithCoord\\n    /// @param self the Map in which the bits are cleared\\n    /// @param tiles the list of TileWithCoord\\n    function clear(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            clear(self, tiles[i]);\\n        }\\n    }\\n\\n    /// @notice Clear the bits of another map in the current one\\n    /// @param self the Map in which the bits are cleared\\n    /// @param other the map that is used as source to clear the bits in the current one\\n    function clear(Map storage self, Map storage other) public {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            clear(self, other.values[i]);\\n        }\\n    }\\n\\n    /// @notice Clear the all the bits in the map\\n    /// @param self the Map in which the bits are cleared\\n    function clear(Map storage self) public {\\n        for (uint256 i; i < self.values.length; i++) {\\n            delete self.indexes[self.values[i].getKey()];\\n        }\\n        delete self.values;\\n    }\\n\\n    /// @notice given a tile, translate all the bits in the x and y direction\\n    /// @dev the result of the translation are four tiles\\n    /// @param deltaX the x distance to translate\\n    /// @param deltaY the y distance to translate\\n    /// @return four tiles with coords that are the result of the translation\\n    function translate(\\n        TileLib.Tile memory tile,\\n        uint256 deltaX,\\n        uint256 deltaY\\n    ) internal pure returns (TranslateResult memory) {\\n        (uint256[6] memory col1, uint256[6] memory col2) = tile.translate(deltaX % 24, deltaY % 24);\\n        return\\n            TranslateResult({\\n                topLeft: TileWithCoordLib.init(deltaX, deltaY, col1[0], col1[1], col1[2]),\\n                bottomLeft: TileWithCoordLib.init(deltaX, deltaY + 24, col1[3], col1[4], col1[5]),\\n                topRight: TileWithCoordLib.init(deltaX + 24, deltaY, col2[0], col2[1], col2[2]),\\n                bottomRight: TileWithCoordLib.init(deltaX + 24, deltaY + 24, col2[3], col2[4], col2[5])\\n            });\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate are set or not inside the map\\n    /// @param self the Map where the check is done\\n    /// @param x the x coordinate\\n    /// @param y the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function contain(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y\\n    ) public view returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].contain(x, y);\\n    }\\n\\n    /// @notice Check if the all the bits of a square inside the Map are set or not\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if al the bits are set or false if at least one bit is cleared\\n    function contain(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public view returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].contain(x, y, size);\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in a TileWithCoord\\n    /// @param self the Map that is checked for inclusion\\n    /// @param tile the TileWithCoord that must be included\\n    /// @return true if self contain tile TileWithCoord\\n    function contain(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public view returns (bool) {\\n        if (tile.isEmpty()) {\\n            return true;\\n        }\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].tile.contain(tile.tile);\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in a TileWithCoord[]\\n    /// @param self the Map that is checked for inclusion\\n    /// @param tiles the TileWithCoord that must be included\\n    /// @return true if self contain tiles TileWithCoord[]\\n    function contain(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public view returns (bool) {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            if (!contain(self, tiles[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in translation result\\n    /// @dev this routine is used to match an experience template after translation\\n    /// @param self the bigger Tile that is checked for inclusion\\n    /// @param s the translation result that must be included\\n    /// @return true if self contain all the bits in the translation result\\n    function contain(Map storage self, TranslateResult memory s) public view returns (bool) {\\n        return\\n            contain(self, s.topLeft) &&\\n            contain(self, s.topRight) &&\\n            contain(self, s.bottomLeft) &&\\n            contain(self, s.bottomRight);\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in another Map\\n    /// @dev self can be huge, but other must be small, we iterate over other values.\\n    /// @param self the Map that is checked for inclusion\\n    /// @param other the Map that must be included\\n    /// @return true if self contain other Map\\n    function contain(Map storage self, Map storage other) public view returns (bool) {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            if (!contain(self, other.values[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if a map has at least one bit in common with a square (x,y,size)\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if there is at least one bit set in both the Map and the square\\n    function intersect(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public view returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !intersect\\n            return false;\\n        }\\n        return self.values[idx - 1].intersect(x, y, size);\\n    }\\n\\n    /// @notice Check if a map has at least one bit in common with some TileWithCoord\\n    /// @param self the Map to compare\\n    /// @param tile the TileWithCoord to compare\\n    /// @return true if there is at least one bit set in both the Map and the TileWithCoord\\n    function intersect(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public view returns (bool) {\\n        if (tile.isEmpty()) {\\n            return false;\\n        }\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].tile.intersect(tile.tile);\\n    }\\n\\n    /// @notice Check if a Map has at least one of the bits that are set in a TileWithCoord[]\\n    /// @param self the Map that is checked for inclusion\\n    /// @param tiles the TileWithCoord that must be included\\n    /// @return true if there is at least one bit set in both the Map and the TileWithCoord[]\\n    function intersect(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public view returns (bool) {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            if (intersect(self, tiles[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Check if a map has at least one bit in common with some translation result\\n    /// @param self the Map to compare\\n    /// @param s the four tiles that are the result of a translation\\n    /// @return true if there is at least one bit set in both the Map and the TranslationResult\\n    function intersect(Map storage self, TranslateResult memory s) public view returns (bool) {\\n        return\\n            intersect(self, s.topLeft) ||\\n            intersect(self, s.topRight) ||\\n            intersect(self, s.bottomLeft) ||\\n            intersect(self, s.bottomRight);\\n    }\\n\\n    /// @notice Check if a Map includes any of the bits that are set in another Map\\n    /// @dev self can be huge, but other must be small, we iterate over other values.\\n    /// @param self the Map that is checked for inclusion\\n    /// @param other the Map that must be included\\n    /// @return true if there is at least one bit set in both Maps\\n    function intersect(Map storage self, Map storage other) public view returns (bool) {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            if (intersect(self, other.values[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Check if a map is empty (no bits are set)\\n    /// @param self the Map to check\\n    /// @return true if the map is empty\\n    function isEmpty(Map storage self) public view returns (bool) {\\n        // We remove the tiles when they are empty\\n        return self.values.length == 0;\\n    }\\n\\n    /// @notice Check if two maps are equal\\n    /// @param self the first Map to check\\n    /// @param other the second Map to check\\n    /// @return true if the two maps are equal\\n    function isEqual(Map storage self, Map storage other) public view returns (bool) {\\n        return isEqual(self, other.values);\\n    }\\n\\n    /// @notice Check if a map is equal to an array of TileWithCoord\\n    /// @param self the Map to check\\n    /// @param other the list of TileWithCoord to check\\n    /// @return true if the two are equal\\n    function isEqual(Map storage self, TileWithCoordLib.TileWithCoord[] memory other) public view returns (bool) {\\n        if (other.length != self.values.length) {\\n            return false;\\n        }\\n        uint256 cant = other.length;\\n        // Check that self contains the same set of tiles than other and they are equal\\n        for (uint256 i; i < cant; i++) {\\n            uint256 key = other[i].getKey();\\n            uint256 idx = self.indexes[key];\\n            if (idx == 0 || !self.values[idx - 1].isEqual(other[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice return the length of the internal list of tiles\\n    /// @dev used to iterate off-chain over the tiles.\\n    /// @param self the Map\\n    /// @return the length of the list\\n    function length(Map storage self) public view returns (uint256) {\\n        return self.values.length;\\n    }\\n\\n    /// @notice get the tile that is in certain position in the internal list of tiles\\n    /// @dev used to iterate off-chain over the tiles.\\n    /// @param self the Map\\n    /// @param index the index of the tile\\n    /// @return the tile that is in the position index in the list\\n    function at(Map storage self, uint256 index) public view returns (TileWithCoordLib.TileWithCoord memory) {\\n        return self.values[index];\\n    }\\n\\n    /// @notice get the internal list of tiles with pagination\\n    /// @dev used to iterate off-chain over the tiles.\\n    /// @param self the Map\\n    /// @param offset initial offset used to paginate\\n    /// @param limit amount of tiles to get\\n    /// @return the partial list of tiles\\n    function at(\\n        Map storage self,\\n        uint256 offset,\\n        uint256 limit\\n    ) public view returns (TileWithCoordLib.TileWithCoord[] memory) {\\n        TileWithCoordLib.TileWithCoord[] memory ret = new TileWithCoordLib.TileWithCoord[](limit);\\n        for (uint256 i; i < limit; i++) {\\n            ret[i] = self.values[offset + i];\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice return the internal list of tiles\\n    /// @dev Use only for testing. This can be problematic if it grows too much !!!\\n    /// @param self the map\\n    /// @return the list of internal tiles\\n    function getMap(Map storage self) public view returns (TileWithCoordLib.TileWithCoord[] memory) {\\n        return self.values;\\n    }\\n\\n    /// @notice count the amount of bits (lands) set inside a Map\\n    /// @param self the map\\n    /// @return the quantity of lands\\n    function getLandCount(Map storage self) public view returns (uint256) {\\n        uint256 ret;\\n        uint256 len = self.values.length;\\n        for (uint256 i; i < len; i++) {\\n            ret += self.values[i].countBits();\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice check if a square is adjacent (4-connected component) to the current map.\\n    /// @dev used to add a quad to a map, it is cheaper than isAdjacent(map)\\n    /// @param self the map\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if the square is 4-connected to the map\\n    function isAdjacent(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public view returns (bool) {\\n        if (isEmpty(self)) {\\n            return true;\\n        }\\n\\n        uint256 idx;\\n        TileLib.Tile memory spot;\\n        spot = spot.set(x % 24, y % 24, size);\\n        // left\\n        if (x >= 24) {\\n            idx = _getIdx(self, x - 24, y);\\n            if (idx != 0 && !self.values[idx - 1].tile.and(_growLeft(spot)).isEmpty()) {\\n                return true;\\n            }\\n        }\\n        // up\\n        if (y >= 24) {\\n            idx = _getIdx(self, x, y - 24);\\n            if (idx != 0 && (self.values[idx - 1].tile.data[0] & ((spot.data[0] & UP_MASK) << (24 * 7))) != 0) {\\n                return true;\\n            }\\n        }\\n        // middle\\n        idx = _getIdx(self, x, y);\\n        if (idx != 0 && !self.values[idx - 1].tile.and(_growMiddle(spot)).isEmpty()) {\\n            return true;\\n        }\\n        // down\\n        idx = _getIdx(self, x, y + 24);\\n        if (idx != 0 && (self.values[idx - 1].tile.data[2] & ((spot.data[2] & DOWN_MASK) >> (24 * 7))) != 0) {\\n            return true;\\n        }\\n        // right\\n        idx = _getIdx(self, x + 24, y);\\n        if (idx != 0 && !self.values[idx - 1].tile.and(_growRight(spot)).isEmpty()) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice check that the map has only one 4-connected component, aka everything is adjacent\\n    /// @dev Checks the full map to see if all the pixels are adjacent\\n    /// @param self the map\\n    /// @return ret true if all the bits (lands) are adjacent\\n    function isAdjacent(Map storage self) public view returns (bool ret) {\\n        if (isEmpty(self)) {\\n            // everything is adjacent to an empty map\\n            return true;\\n        }\\n\\n        TileLib.Tile[] memory spot = new TileLib.Tile[](self.values.length);\\n        // We assume that all self.values[] are non empty (we remove them if they are empty).\\n        spot[0] = self.values[0].tile.findAPixel();\\n        bool done;\\n        while (!done) {\\n            (spot, done) = floodStep(self, spot);\\n        }\\n        uint256 len = self.values.length;\\n        uint256 i;\\n        for (; i < len; i++) {\\n            // Check the tile ignoring coordinates\\n            if (!self.values[i].tile.isEqual(spot[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice used to check adjacency. See: https://en.wikipedia.org/wiki/Flood_fill and isAdjacent.\\n    /// @param self the map\\n    /// @param current the current image\\n    /// @return next return the image with the extra pixels that correspond to the flooding process\\n    /// @return done true if the current image is the same as the next one so the algorithm is ready to stop flooding.\\n    function floodStep(Map storage self, TileLib.Tile[] memory current)\\n        public\\n        view\\n        returns (TileLib.Tile[] memory next, bool done)\\n    {\\n        uint256 len = self.values.length;\\n        uint256 i;\\n        uint256 x;\\n        uint256 y;\\n        uint256 idx;\\n        TileLib.Tile memory ci;\\n        next = new TileLib.Tile[](len);\\n        // grow\\n        for (i; i < len; i++) {\\n            ci = current[i];\\n            // isEmpty\\n            if ((ci.data[0] | ci.data[1] | ci.data[2]) == 0) {\\n                continue;\\n            }\\n            x = self.values[i].getX() * 24;\\n            y = self.values[i].getY() * 24;\\n\\n            // middle, always included\\n            next[i].data[0] |= _grow(ci.data[0]) | ((ci.data[1] & UP_MASK) << (24 * 7));\\n            next[i].data[1] |=\\n                _grow(ci.data[1]) |\\n                ((ci.data[2] & UP_MASK) << (24 * 7)) |\\n                ((ci.data[0] & DOWN_MASK) >> (24 * 7));\\n            next[i].data[2] |= _grow(ci.data[2]) | ((ci.data[1] & DOWN_MASK) >> (24 * 7));\\n            // left\\n            if (x >= 24) {\\n                idx = _getIdx(self, x - 24, y);\\n                if (idx != 0) {\\n                    next[idx - 1].data[0] |= (ci.data[0] & LEFT_MASK) << 23;\\n                    next[idx - 1].data[1] |= (ci.data[1] & LEFT_MASK) << 23;\\n                    next[idx - 1].data[2] |= (ci.data[2] & LEFT_MASK) << 23;\\n                }\\n            }\\n            // up\\n            if (y >= 24) {\\n                idx = _getIdx(self, x, y - 24);\\n                if (idx != 0) {\\n                    next[idx - 1].data[2] |= (ci.data[0] & UP_MASK) << (24 * 7);\\n                }\\n            }\\n            // down\\n            idx = _getIdx(self, x, y + 24);\\n            if (idx != 0) {\\n                next[idx - 1].data[0] |= (ci.data[2] & DOWN_MASK) >> (24 * 7);\\n            }\\n            // right\\n            idx = _getIdx(self, x + 24, y);\\n            if (idx != 0) {\\n                next[idx - 1].data[0] |= (ci.data[0] & RIGHT_MASK) >> 23;\\n                next[idx - 1].data[1] |= (ci.data[1] & RIGHT_MASK) >> 23;\\n                next[idx - 1].data[2] |= (ci.data[2] & RIGHT_MASK) >> 23;\\n            }\\n        }\\n        // Mask it.\\n        done = true;\\n        for (i = 0; i < len; i++) {\\n            // next[i] = next[i].and(self.values[i].tile);\\n            // done = done && next[i].isEqual(current[i]);\\n            next[i].data[0] &= self.values[i].tile.data[0];\\n            next[i].data[1] &= self.values[i].tile.data[1];\\n            next[i].data[2] &= self.values[i].tile.data[2];\\n            done =\\n                done &&\\n                next[i].data[0] == current[i].data[0] &&\\n                next[i].data[1] == current[i].data[1] &&\\n                next[i].data[2] == current[i].data[2];\\n        }\\n        return (next, done);\\n    }\\n\\n    /// @notice delete certain tile from the map\\n    /// @param self the Map where the tile is removed\\n    /// @param idx the index of the tile in the internal list\\n    /// @param key the key of the tile (combination of x,y)\\n    function _remove(\\n        Map storage self,\\n        uint256 idx,\\n        uint256 key\\n    ) private {\\n        uint256 toDeleteIndex = idx - 1;\\n        uint256 lastIndex = self.values.length - 1;\\n        if (lastIndex != toDeleteIndex) {\\n            TileWithCoordLib.TileWithCoord memory lastValue = self.values[lastIndex];\\n            self.values[toDeleteIndex] = lastValue;\\n            self.indexes[lastValue.getKey()] = idx;\\n        }\\n        self.values.pop();\\n        delete self.indexes[key];\\n    }\\n\\n    /// @notice given x and y return the index of the tile inside the internal list of tiles\\n    /// @param self the Map where the tile is removed\\n    /// @param x the x coordinate\\n    /// @param y the y coordinate\\n    /// @return the index in the list + 1 or zero if not found\\n    function _getIdx(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y\\n    ) private view returns (uint256) {\\n        return self.indexes[TileWithCoordLib.getKey(x, y)];\\n    }\\n\\n    /// @notice grow (4-connected) the internal word that represent 8 lines of the tile adding pixels\\n    /// @param x the value of the internal work\\n    /// @return the internal work with the extra pixels from growing it\\n    function _grow(uint256 x) private pure returns (uint256) {\\n        return (x | ((x & RIGHT_MASK_NEG) << 1) | ((x & LEFT_MASK_NEG) >> 1) | (x << 24) | (x >> 24));\\n    }\\n\\n    /// @notice grow (4-connected) a tile adding pixels around those that exists\\n    /// @param self the tile to grow\\n    /// @return e the tile that results from adding all the 4-connected pixels\\n    function _growMiddle(TileLib.Tile memory self) internal pure returns (TileLib.Tile memory e) {\\n        e.data[0] = _grow(self.data[0]) | ((self.data[1] & UP_MASK) << (24 * 7));\\n        e.data[1] =\\n            _grow(self.data[1]) |\\n            ((self.data[2] & UP_MASK) << (24 * 7)) |\\n            ((self.data[0] & DOWN_MASK) >> (24 * 7));\\n        e.data[2] = _grow(self.data[2]) | ((self.data[1] & DOWN_MASK) >> (24 * 7));\\n        return e;\\n    }\\n\\n    /// @notice grow (4-connected) a tile adding pixels around those that exists\\n    /// @param self the tile to grow\\n    /// @return e the extra tile to the right that results from adding all the 4-connected pixels\\n    function _growRight(TileLib.Tile memory self) internal pure returns (TileLib.Tile memory e) {\\n        // for loop removed to save some gas.\\n        e.data[0] = (self.data[0] & RIGHT_MASK) >> 23;\\n        e.data[1] = (self.data[1] & RIGHT_MASK) >> 23;\\n        e.data[2] = (self.data[2] & RIGHT_MASK) >> 23;\\n        return e;\\n    }\\n\\n    /// @notice grow (4-connected) a tile adding pixels around those that exists\\n    /// @param self the tile to grow\\n    /// @return e the extra tile to the left that results from adding all the 4-connected pixels\\n    function _growLeft(TileLib.Tile memory self) internal pure returns (TileLib.Tile memory e) {\\n        e.data[0] = (self.data[0] & LEFT_MASK) << 23;\\n        e.data[1] = (self.data[1] & LEFT_MASK) << 23;\\n        e.data[2] = (self.data[2] & LEFT_MASK) << 23;\\n        return e;\\n    }\\n}\\n\",\"keccak256\":\"0xa851b13fc6ea0af93e3c72c00e1e9baec322bf99cc279c1d3f0b74d35a829672\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/TileLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @title An optimized bitset of 24x24 bits (used to represent maps)\\n/// @notice see: http://\\n/// @dev We store 8 lines of 24 bits in each uint256 and leave some free space.\\nlibrary TileLib {\\n    uint256 public constant PIXEL_MASK = 0x0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 public constant PIXEL_MASK_INV = 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000;\\n\\n    struct Tile {\\n        uint256[3] data;\\n    }\\n\\n    /// @notice init the tile with the internal data directly\\n    /// @return A Tile that has the bit data set\\n    function init(\\n        Tile memory self,\\n        uint256 pixelData1,\\n        uint256 pixelData2,\\n        uint256 pixelData3\\n    ) internal pure returns (Tile memory) {\\n        self.data[0] = pixelData1 & PIXEL_MASK;\\n        self.data[1] = pixelData2 & PIXEL_MASK;\\n        self.data[2] = pixelData3 & PIXEL_MASK;\\n        return self;\\n    }\\n\\n    /// @notice Set the bits inside a square that has size x size in the x,y coordinates\\n    /// @dev can be optimized for the specific case of a 24x24 square\\n    /// @param self the Tile in which the bits are set\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding bits set\\n    function set(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (Tile memory) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            self.data[idx] |= mask << (x + 24 * ((y + i) % 8));\\n        }\\n        return self;\\n    }\\n\\n    /// @notice Clear the bits inside a square that has size x size in the x,y coordinates\\n    /// @dev can be optimized for the specific case of a 24x24 square\\n    /// @param self the Tile in which the bits will be cleared\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding cleared bits\\n    function clear(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (Tile memory) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            self.data[idx] &= ~(mask << (x + 24 * ((y + i) % 8)));\\n        }\\n        return self;\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate inside the Tile is set or not, if not set it.\\n    /// @dev this routine is a combination of contains and set, used to save some gas\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate\\n    /// @param y the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function addIfNotContain(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (bool, Tile memory) {\\n        require(x < 24 && y < 24, \\\"Invalid coordinates\\\");\\n        uint256 idx = y / 8;\\n        uint256 bitMask = 1 << (x + 24 * (y % 8));\\n        if (self.data[idx] & bitMask == bitMask) {\\n            return (false, self);\\n        }\\n        self.data[idx] |= bitMask;\\n        return (true, self);\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate inside the Tile is set or not\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate\\n    /// @param y the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function contain(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (bool) {\\n        require(x < 24 && y < 24, \\\"Invalid coordinates\\\");\\n        uint256 idx = y / 8;\\n        uint256 bitMask = 1 << (x + 24 * (y % 8));\\n        return (self.data[idx] & bitMask == bitMask);\\n    }\\n\\n    /// @notice Check if the all the bits of a square inside the Tile are set or not\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if al the bits are set or false if at least one bit is cleared\\n    function contain(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            uint256 bitMask = mask << (x + 24 * ((y + i) % 8));\\n            if (self.data[idx] & bitMask != bitMask) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if a Tile includes all the bits that are set in another Tile\\n    /// @param self the bigger Tile that is checked for inclusion\\n    /// @param contained the Tile that must be included\\n    /// @return true if self contain contained Tile\\n    function contain(Tile memory self, Tile memory contained) internal pure returns (bool) {\\n        uint256 d0 = contained.data[0] & PIXEL_MASK;\\n        uint256 d1 = contained.data[1] & PIXEL_MASK;\\n        uint256 d2 = contained.data[2] & PIXEL_MASK;\\n        return (self.data[0] & d0 == d0) && (self.data[1] & d1 == d1) && (self.data[2] & d2 == d2);\\n    }\\n\\n    /// @notice Check if the Tile has any bit in common with a square\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if there is at least one bit set in both Tiles\\n    function intersect(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            uint256 bitMask = mask << (x + 24 * ((y + i) % 8));\\n            if (self.data[idx] & bitMask != 0) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Check if two Tiles has any bit in common\\n    /// @param self first Tile to compare\\n    /// @param other second tile to compare\\n    /// @return true if there is at least one bit set in both Tiles\\n    function intersect(Tile memory self, Tile memory other) internal pure returns (bool) {\\n        return\\n            ((self.data[0] & other.data[0]) | (self.data[1] & other.data[1]) | (self.data[2] & other.data[2])) &\\n                PIXEL_MASK !=\\n            0;\\n    }\\n\\n    /// @notice Check if two Tiles has exactly the same bits set\\n    /// @param self first Tile to compare\\n    /// @param other second Tile to compare\\n    /// @return true if the two Tiles has the same bits set\\n    function isEqual(Tile memory self, Tile memory other) internal pure returns (bool) {\\n        return\\n            ((self.data[0] ^ other.data[0]) | (self.data[1] ^ other.data[1]) | (self.data[2] ^ other.data[2])) &\\n                PIXEL_MASK ==\\n            0;\\n    }\\n\\n    /// @notice return a Tile that is the union of two Tiles\\n    /// @dev this function destroys data outside the pixel data (we want to save some gas)\\n    /// @param self first Tile to compare\\n    /// @param other second Tile to compare\\n    /// @return a Tile that is the union of self and other\\n    function or(Tile memory self, Tile memory other) internal pure returns (Tile memory) {\\n        self.data[0] |= other.data[0] & PIXEL_MASK;\\n        self.data[1] |= other.data[1] & PIXEL_MASK;\\n        self.data[2] |= other.data[2] & PIXEL_MASK;\\n        return self;\\n    }\\n\\n    /// @notice return a Tile that is the intersection of two Tiles\\n    /// @dev this function destroys data outside the pixel data (we want to save some gas)\\n    /// @param self first Tile to compare\\n    /// @param other second Tile to compare\\n    /// @return a Tile that is the intersection of self and other\\n    function and(Tile memory self, Tile memory other) internal pure returns (Tile memory) {\\n        self.data[0] &= other.data[0] | PIXEL_MASK_INV;\\n        self.data[1] &= other.data[1] | PIXEL_MASK_INV;\\n        self.data[2] &= other.data[2] | PIXEL_MASK_INV;\\n        return self;\\n    }\\n\\n    /// @notice Calculates the subtraction of two Tile\\n    /// @param self the Tile to subtract from\\n    /// @param value the Tile subtracted\\n    /// @return the self with all the bits set in value cleared\\n    function subtract(Tile memory self, Tile memory value) internal pure returns (Tile memory) {\\n        self.data[0] &= ~(value.data[0] & PIXEL_MASK);\\n        self.data[1] &= ~(value.data[1] & PIXEL_MASK);\\n        self.data[2] &= ~(value.data[2] & PIXEL_MASK);\\n        return self;\\n    }\\n\\n    /// @notice check if a Tile is empty, doesn't have any bit set\\n    /// @param self first Tile to compare\\n    /// @return true if the Tile is empty\\n    function isEmpty(Tile memory self) internal pure returns (bool) {\\n        return (self.data[0] | self.data[1] | self.data[2]) & PIXEL_MASK == 0;\\n    }\\n\\n    /// @notice return a Tile that has only one of the pixels from the original Tile set\\n    /// @param self Tile in which one pixel is searched\\n    /// @return ret a Tile that has only one pixel set\\n    function findAPixel(Tile memory self) internal pure returns (Tile memory ret) {\\n        uint256 target;\\n        uint256 shift;\\n\\n        target = self.data[2] & PIXEL_MASK;\\n        if (target != 0) {\\n            shift = _findAPixel(target);\\n            ret.data[2] = (1 << shift);\\n            return ret;\\n        }\\n\\n        target = self.data[1] & PIXEL_MASK;\\n        if (target != 0) {\\n            shift = _findAPixel(target);\\n            ret.data[1] = (1 << shift);\\n            return ret;\\n        }\\n\\n        target = self.data[0] & PIXEL_MASK;\\n        if (target != 0) {\\n            shift = _findAPixel(target);\\n            ret.data[0] = (1 << shift);\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice given a tile, translate all the bits in the x and y direction\\n    /// @param self the initial Tile to translate\\n    /// @param x the x distance to translate\\n    /// @param y the y distance to translate\\n    /// @return col1 first column that represents the four tiles that are the result of the translation\\n    /// @return col2 second column that represents the four tiles that are the result of the translation\\n    function translate(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256[6] memory col1, uint256[6] memory col2) {\\n        // Move right\\n        uint256 mask = _getTranslateXMask(x);\\n        col1[0] = (self.data[0] & mask) << x;\\n        col1[1] = (self.data[1] & mask) << x;\\n        col1[2] = (self.data[2] & mask) << x;\\n        if (x > 0) {\\n            mask = PIXEL_MASK - mask;\\n            col2[0] = (self.data[0] & mask) >> (24 - x);\\n            col2[1] = (self.data[1] & mask) >> (24 - x);\\n            col2[2] = (self.data[2] & mask) >> (24 - x);\\n        }\\n        // Move down\\n        uint256 rem = 24 * (y % 8);\\n        uint256 div = y / 8;\\n        mask = PIXEL_MASK - (2**(24 * 8 - rem) - 1);\\n        // TODO: optimization, remove the loop, check gas consumption\\n        for (uint256 i = 5; i > div; i--) {\\n            col1[i] = (col1[i - div] << rem) | ((col1[i - div - 1] & mask) >> (24 * 8 - rem));\\n            col2[i] = (col2[i - div] << rem) | ((col2[i - div - 1] & mask) >> (24 * 8 - rem));\\n        }\\n        col1[div] = col1[0] << rem;\\n        col2[div] = col2[0] << rem;\\n        if (div > 0) {\\n            col1[0] = 0;\\n            col2[0] = 0;\\n            if (div > 1) {\\n                col1[1] = 0;\\n                col2[1] = 0;\\n            }\\n        }\\n        return (col1, col2);\\n    }\\n\\n    uint256 private constant QUAD_MASK_1 = 1;\\n    uint256 private constant QUAD_MASK_3 = 2**3 - 1;\\n    uint256 private constant QUAD_MASK_6 = 2**6 - 1;\\n    uint256 private constant QUAD_MASK_12 = 2**12 - 1;\\n    uint256 private constant QUAD_MASK_24 = 2**24 - 1;\\n\\n    /// @notice return a bit mask used to set or clear a square of certain size in the Tile\\n    /// @param size the size of the square\\n    /// @return the bit mask or zero if the size is not supported\\n    function _quadMask(uint256 size) private pure returns (uint256) {\\n        if (size == 1) return 1;\\n        if (size == 3) return QUAD_MASK_3;\\n        if (size == 6) return QUAD_MASK_6;\\n        if (size == 12) return QUAD_MASK_12;\\n        if (size == 24) return QUAD_MASK_24;\\n        return 0;\\n    }\\n\\n    /// @notice count the amount of bits set inside the Tile\\n    /// @param self the Tile in which the bits are counted\\n    /// @return the count of bits that are set\\n    function countBits(Tile memory self) internal pure returns (uint256) {\\n        return _countBits(self.data[0]) + _countBits(self.data[1]) + _countBits(self.data[2]);\\n    }\\n\\n    /// @notice count the amount of bits set inside a word\\n    /// @dev see: https://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer\\n    /// @param x the word in which the bits are counted\\n    /// @return the count of bits that are set\\n    function _countBits(uint256 x) private pure returns (uint256) {\\n        x = x - ((x >> 1) & 0x0000000000000000555555555555555555555555555555555555555555555555);\\n        x =\\n            (x & 0x0000000000000000333333333333333333333333333333333333333333333333) +\\n            ((x >> 2) & 0x0000000000000000333333333333333333333333333333333333333333333333);\\n        x = (x + (x >> 4)) & 0x00000000000000000F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F;\\n        return\\n            ((((x >> 96) * 0x010101010101010101010101) +\\n                ((x & 0x0F0F0F0F0F0F0F0F0F0F0F0F) * 0x010101010101010101010101)) >> (11 * 8)) & 0xFF;\\n    }\\n\\n    /// @notice giving 8 lines of a Tile, find any bit that is set\\n    /// @dev we must search in 8 * 24 bits that correspond to 8 lines, so 2^6 * 3, we split in three and then do a binary search\\n    /// @param target the uint256 that has the 8 lines\\n    /// @return shift the amount of bits shift left so the choose bit is set in the resulting Tile\\n    function _findAPixel(uint256 target) private pure returns (uint256 shift) {\\n        uint256 mask = (2**64 - 1);\\n        // divide in 3 parts, then do a binary search\\n        if ((target & mask) == 0) {\\n            target = target >> 64;\\n            shift = 64;\\n            if ((target & mask) == 0) {\\n                target = target >> 64;\\n                shift = 128;\\n            }\\n        }\\n        for (uint256 i = 32; i > 0; i = i / 2) {\\n            mask = mask >> i;\\n            if ((target & mask) == 0) {\\n                target = target >> i;\\n                shift += i;\\n            }\\n        }\\n        return shift;\\n    }\\n\\n    /// @notice return a bit mask used translate a Tile data in the x direction\\n    /// @param x the x value to translate\\n    /// @return the bit mask\\n    function _getTranslateXMask(uint256 x) private pure returns (uint256) {\\n        uint256 mask = (2**24 - 1) >> x;\\n        mask |= mask << 24;\\n        mask |= mask << (24 * 2);\\n        mask |= mask << (24 * 4);\\n        return mask;\\n    }\\n}\\n\",\"keccak256\":\"0x597571a993575cf7f27e1313fab368b3d362d5539caaea46fb06546ccf883d63\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/TileWithCoordLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {TileLib} from \\\"./TileLib.sol\\\";\\n\\n/// @title A Tile (24x24 map piece) that also stores x,y coordinates and a combination of the two called key\\n/// @dev Using a sparse array of TileWithCoords we build a bigger map covered with Tiles\\nlibrary TileWithCoordLib {\\n    using TileLib for TileLib.Tile;\\n\\n    struct TileWithCoord {\\n        TileLib.Tile tile;\\n    }\\n\\n    /// @notice initialize the TileWithCoord structure\\n    /// @return An empty Tile that has the x,y and corresponding key value set\\n    function init(uint256 x, uint256 y) internal pure returns (TileWithCoord memory) {\\n        TileWithCoord memory ret;\\n        ret.tile.data[0] = (getKey(x, y)) << 224;\\n        ret.tile.data[1] = (x / 24) << 224;\\n        ret.tile.data[2] = (y / 24) << 224;\\n        return ret;\\n    }\\n\\n    /// @notice initialize the TileWithCoord structure\\n    /// @return An TileWithCoord that has the x,y, key and the Tile bit data set\\n    function init(\\n        uint256 x,\\n        uint256 y,\\n        uint256 pixelData1,\\n        uint256 pixelData2,\\n        uint256 pixelData3\\n    ) internal pure returns (TileWithCoord memory) {\\n        TileWithCoord memory ret;\\n        ret.tile = ret.tile.init(pixelData1, pixelData2, pixelData3);\\n        ret.tile.data[0] |= (getKey(x, y)) << 224;\\n        ret.tile.data[1] |= (x / 24) << 224;\\n        ret.tile.data[2] |= (y / 24) << 224;\\n        return ret;\\n    }\\n\\n    /// @notice Set the bits inside a square that has size x size in the x,y coordinates\\n    /// @param self the TileWithCoord in which the bits are set\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding bits set\\n    function set(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.set(xi % 24, yi % 24, size);\\n        return self;\\n    }\\n\\n    /// @notice Calculates the union/addition of two TileWithCoord\\n    /// @dev to be able to merge the two TileWithCoord must have the same coordinates\\n    /// @param self one of the TileWithCoord to merge\\n    /// @param value the second TileWithCoord to merge\\n    /// @return the merge of the two TileWithCoord\\n    function merge(TileWithCoord memory self, TileWithCoord memory value) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == getX(value) && getY(self) == getY(value), \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.or(value.tile);\\n        return self;\\n    }\\n\\n    /// @notice Clear the bits inside a square that has size x size in the x,y coordinates\\n    /// @param self the TileWithCoord, in which the bits will be cleared\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding cleared bits\\n    function clear(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.clear(xi % 24, yi % 24, size);\\n        return self;\\n    }\\n\\n    /// @notice Calculates the subtraction of two TileWithCoord\\n    /// @dev to be able to subtract them the two TileWithCoord must have the same coordinates\\n    /// @param self the TileWithCoord to subtract from\\n    /// @param value the TileWithCoord subtracted\\n    /// @return the self with all the bits set in value cleared\\n    function clear(TileWithCoord memory self, TileWithCoord memory value) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == getX(value) && getY(self) == getY(value), \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.subtract(value.tile);\\n        return self;\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate are set or not in the TileWithCoord\\n    /// @param self the TileWithCoord where the check is done\\n    /// @param xi the x coordinate\\n    /// @param yi the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function contain(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi\\n    ) internal pure returns (bool) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid coordinates\\\");\\n        return self.tile.contain(xi % 24, yi % 24);\\n    }\\n\\n    /// @notice Check if the all the bits of a square inside the TileWithCoord are set or not\\n    /// @param self the TileWithCoord where the check is done\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if al the bits are set or false if at least one bit is cleared\\n    function contain(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        return self.tile.contain(xi % 24, yi % 24, size);\\n    }\\n\\n    /// @notice Check if the TileWithCoord has any bit in common with a square\\n    /// @param self the TileWithCoord where the check is done\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if there is at least one bit set in the TileWithCoords and the square\\n    function intersect(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        return self.tile.intersect(xi % 24, yi % 24, size);\\n    }\\n\\n    /// @notice return the key value stored in the TileWithCoord\\n    /// @param self the TileWithCoord to get the key from\\n    /// @return the key value\\n    function getKey(TileWithCoord memory self) internal pure returns (uint256) {\\n        return self.tile.data[0] >> 224;\\n    }\\n\\n    /// @notice return the x coordinate value stored in the TileWithCoord\\n    /// @param self the TileWithCoord to get the x coordinate from\\n    /// @return the x value\\n    function getX(TileWithCoord memory self) internal pure returns (uint256) {\\n        return self.tile.data[1] >> 224;\\n    }\\n\\n    /// @notice return the y coordinate value stored in the TileWithCoord\\n    /// @param self the TileWithCoord to get the y coordinate from\\n    /// @return the y value\\n    function getY(TileWithCoord memory self) internal pure returns (uint256) {\\n        return self.tile.data[2] >> 224;\\n    }\\n\\n    /// @notice helper to calculate the key value given the x,y coordinates\\n    /// @param x the x coordinate\\n    /// @param y the y coordinate\\n    /// @return the key value\\n    function getKey(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x / 24) | ((y / 24) << 16);\\n    }\\n\\n    /// @notice count the amount of bits set inside the TileWithCoord\\n    /// @param self the TileWithCoord in which the bits are counted\\n    /// @return the count of bits that are set\\n    function countBits(TileWithCoord memory self) internal pure returns (uint256) {\\n        return self.tile.countBits();\\n    }\\n\\n    /// @notice check if a TileWithCoord is empty, none of the bits are set\\n    /// @param self the TileWithCoord to check\\n    /// @return true if none of the bits are set\\n    function isEmpty(TileWithCoord memory self) internal pure returns (bool) {\\n        return self.tile.isEmpty();\\n    }\\n\\n    /// @notice Check if two TileWithCoord has exactly the same coordinates and bits set\\n    /// @param self first TileWithCoord to compare\\n    /// @param other second TileWithCoord to compare\\n    /// @return true if the two TileWithCoord has the same coordinates and bits set\\n    function isEqual(TileWithCoord memory self, TileWithCoord memory other) internal pure returns (bool) {\\n        return\\n            self.tile.data[0] == other.tile.data[0] &&\\n            self.tile.data[1] == other.tile.data[1] &&\\n            self.tile.data[2] == other.tile.data[2];\\n    }\\n}\\n\",\"keccak256\":\"0xdd8f0df8786c11865f76645eb7b83648605a4bf36cda9dcfcaecbd92fcc1b8c5\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5e8bf644.\\ninterface IERC721MandatoryTokenReceiver {\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n}\\n\",\"keccak256\":\"0x66db07bc53d4c7f6b8f23dfa76874378e01b87a1b81726d5d637942d072203a9\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IEstateExperienceRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {TileWithCoordLib} from \\\"../Libraries/TileWithCoordLib.sol\\\";\\n\\ninterface IEstateExperienceRegistry {\\n    function link(\\n        uint256 estateId, // estateId == 0 => single land experience\\n        uint256 expId,\\n        uint256 x,\\n        uint256 y\\n    ) external;\\n\\n    function unLink(uint256 expId) external;\\n\\n    // Called only by the estate contract\\n    function batchUnLinkFrom(address from, uint256[] calldata expIdsToUnlink) external;\\n\\n    function isLinked(uint256 expId) external view returns (bool);\\n\\n    function isLinked(uint256[][3] calldata quads) external view returns (bool);\\n\\n    function isLinked(TileWithCoordLib.TileWithCoord[] calldata) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x551a00f46500b7510d7efb302860a6dc627ef1255e298ee5d379ed8810725ddd\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IEstateToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {TileWithCoordLib} from \\\"../Libraries/TileWithCoordLib.sol\\\";\\nimport {MapLib} from \\\"../Libraries/MapLib.sol\\\";\\n\\n/// @title Interface for the Estate token on L1\\ninterface IEstateToken {\\n    function mintEstate(address from, TileWithCoordLib.TileWithCoord[] calldata freeLand) external returns (uint256);\\n\\n    function burnEstate(address from, uint256 estateId)\\n        external\\n        returns (TileWithCoordLib.TileWithCoord[] memory tiles);\\n\\n    function contain(uint256 estateId, MapLib.TranslateResult memory s) external view returns (bool);\\n\\n    function getStorageId(uint256 tokenId) external pure returns (uint256);\\n\\n    function getOwnerOfStorage(uint256 estateId) external view returns (address owner);\\n}\\n\",\"keccak256\":\"0x80de86ceb641ad87b4f858f97a174229d185128d254c0c3f73adc29e41f1f835\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/ILandToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface ILandToken {\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external;\\n\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf1cb108c7274c973356adedb18230b18bdad992b946e0921cc3ebed04f59c92e\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IPolygonLand.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./ILandToken.sol\\\";\\n\\ninterface IPolygonLand is ILandToken {\\n    function mintQuad(\\n        address user,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) external;\\n\\n    function exists(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5a52e567ddb2271b88c5dfe919401036f0f6c15dd7ff7a6eb055e12a6c12f06c\",\"license\":\"MIT\"},\"src/solc_0.8/estate/EstateBaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {\\n    IERC721ReceiverUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport {ILandToken} from \\\"../common/interfaces/ILandToken.sol\\\";\\nimport {IEstateToken} from \\\"../common/interfaces/IEstateToken.sol\\\";\\nimport {TileWithCoordLib} from \\\"../common/Libraries/TileWithCoordLib.sol\\\";\\nimport {MapLib} from \\\"../common/Libraries/MapLib.sol\\\";\\nimport {BaseERC721Upgradeable} from \\\"../common/Base/BaseERC721Upgradeable.sol\\\";\\nimport {IERC721MandatoryTokenReceiver} from \\\"../common/interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport {EstateTokenIdHelperLib} from \\\"./EstateTokenIdHelperLib.sol\\\";\\n\\n/// @title Base contract for estate contract on L1 and L2, it used to group lands together.\\n/// @dev it uses tile maps to save the land\\n/// @dev each time something is modified the token id (version) is changed (but keeping a common storageId part)\\nabstract contract EstateBaseToken is BaseERC721Upgradeable, IEstateToken {\\n    using MapLib for MapLib.Map;\\n    using EstateTokenIdHelperLib for uint256;\\n\\n    struct Estate {\\n        // current estateId, for the same storageId we have only one valid estateId (the last one)\\n        uint256 id;\\n        // estate lands tile set.\\n        MapLib.Map land;\\n    }\\n\\n    struct EstateBaseTokenStorage {\\n        address landToken;\\n        uint128 nextId; // max uint64 = 18,446,744,073,709,551,615\\n        uint32 chainIndex;\\n        string baseUri;\\n        // storageId -> estateData\\n        mapping(uint256 => Estate) estate;\\n    }\\n\\n    uint256[50] private __preGap;\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    /// @dev Emitted when an estate is updated.\\n    /// @param estateId The id of the newly minted token.\\n    /// @param user the user to which the estate is created\\n    /// @param lands the initial lands of the estate\\n    event EstateTokenCreated(uint256 indexed estateId, address user, TileWithCoordLib.TileWithCoord[] lands);\\n\\n    /// @dev Emitted when lands are added to the estate.\\n    /// @param estateId The id of the previous erc721 ESTATE token.\\n    /// @param newId The id of the newly minted token.\\n    /// @param user the user that is adding lands\\n    /// @param lands The lands of the estate.\\n    event EstateTokenLandsAdded(\\n        uint256 indexed estateId,\\n        uint256 indexed newId,\\n        address user,\\n        TileWithCoordLib.TileWithCoord[] lands\\n    );\\n\\n    /// @dev Emitted when the estate is updated\\n    /// @param oldId The original id of the erc721 ESTATE token.\\n    /// @param newId The updated id of the erc721 ESTATE token.\\n    /// @param user the user that is updating the estate\\n    /// @param lands the tiles that compose the estate\\n    event EstateTokenUpdated(\\n        uint256 indexed oldId,\\n        uint256 indexed newId,\\n        address user,\\n        TileWithCoordLib.TileWithCoord[] lands\\n    );\\n\\n    /// @dev Emitted when the user burn an estate (must be empty).\\n    /// @param estateId The id of the erc721 ESTATE token.\\n    /// @param from the user from which the estate is taken\\n    event EstateTokenBurned(uint256 indexed estateId, address from);\\n\\n    /// @dev Emitted when the bridge mint an estate.\\n    /// @param estateId The id of the  erc721 ESTATE token.\\n    /// @param operator The msg sender\\n    /// @param to the user to which the estate is minted\\n    /// @param lands the tiles that compose the estate and was sent from the other layer\\n    event EstateBridgeMinted(\\n        uint256 indexed estateId,\\n        address operator,\\n        address to,\\n        TileWithCoordLib.TileWithCoord[] lands\\n    );\\n\\n    /// @dev Emitted when the bridge (burner role) burn an estate.\\n    /// @param estateId The id of the erc721 ESTATE token.\\n    /// @param operator The msg sender\\n    /// @param from the user from which the estate is taken\\n    /// @param lands the tiles that compose the estate and will be sent to the other layer\\n    event EstateBridgeBurned(\\n        uint256 indexed estateId,\\n        address operator,\\n        address from,\\n        TileWithCoordLib.TileWithCoord[] lands\\n    );\\n\\n    /// @dev Emitted when the land contract address is changed\\n    /// @param operator The msg sender\\n    /// @param oldAddress of the land contract\\n    /// @param newAddress of the land contract\\n    event EstateLandTokenChanged(address indexed operator, address oldAddress, address newAddress);\\n\\n    /// @dev Emitted when the base uri for the metadata url is changed\\n    /// @param operator The msg sender\\n    /// @param oldURI of the metadata url\\n    /// @param newURI of the metadata url\\n    event EstateBaseUrlChanged(address indexed operator, string oldURI, string newURI);\\n\\n    /// @notice initialization\\n    /// @param trustedForwarder address of the meta tx trustedForwarder\\n    /// @param admin initial admin role that can grant or revoke other roles\\n    /// @param landToken_ the address of the land token contract\\n    /// @param chainIndex_ the chain index for example: 0:mainnet, 1:polygon, etc\\n    /// @param name_ name of the token\\n    /// @param symbol_ symbol of the token\\n    function initV1(\\n        address trustedForwarder,\\n        address admin,\\n        address landToken_,\\n        uint16 chainIndex_,\\n        string calldata name_,\\n        string calldata symbol_\\n    ) external initializer {\\n        __ERC2771Context_init_unchained(trustedForwarder);\\n        __ERC721_init_unchained(name_, symbol_);\\n        __EstateBaseERC721_init_unchained(admin);\\n        __EstateBaseToken_init_unchained(landToken_, chainIndex_);\\n    }\\n\\n    /// @notice initialization unchained\\n    /// @param landToken_ the address of the land token contract\\n    /// @param chainIndex_ the chain index for example: 0:mainnet, 1:polygon, etc\\n    function __EstateBaseToken_init_unchained(address landToken_, uint16 chainIndex_) internal onlyInitializing {\\n        _s().landToken = landToken_;\\n        _s().chainIndex = chainIndex_;\\n    }\\n\\n    /// @notice Create a new estate token adding the given quads (aka lands).\\n    /// @param landToAdd The set of quads to add.\\n    /// @return estateId the estate Id created\\n    function create(uint256[][3] calldata landToAdd) external virtual returns (uint256 estateId) {\\n        Estate storage estate = _mintEstate(_msgSender());\\n        require(landToAdd[0].length > 0, \\\"nothing to add\\\");\\n        _addLand(estate, _msgSender(), landToAdd);\\n        require(estate.land.isAdjacent(), \\\"not adjacent\\\");\\n        emit EstateTokenCreated(estate.id, _msgSender(), estate.land.getMap());\\n        return estate.id;\\n    }\\n\\n    /// @notice Add the given quads (aka lands) to an Estate.\\n    /// @param oldId the estate id that will be updated\\n    /// @param landToAdd The set of quads to add.\\n    /// @return estateId the new estate Id\\n    function addLand(uint256 oldId, uint256[][3] calldata landToAdd) external virtual returns (uint256) {\\n        require(_isApprovedOrOwner(_msgSender(), oldId), \\\"caller is not owner nor approved\\\");\\n        require(landToAdd[0].length > 0, \\\"nothing to add\\\");\\n        Estate storage estate = _estate(oldId);\\n        // we can optimize when adding only one quad\\n        // The risk with this optimizations is that you keep adding lands but then you cannot remove because\\n        // the removal check is the expensive one.\\n        if (landToAdd[0].length == 1) {\\n            // check that the quad is adjacent before adding\\n            require(estate.land.isAdjacent(landToAdd[1][0], landToAdd[2][0], landToAdd[0][0]), \\\"not adjacent\\\");\\n            _addLand(estate, _msgSender(), landToAdd);\\n        } else {\\n            // add everything then make the heavier check of the result\\n            _addLand(estate, _msgSender(), landToAdd);\\n            require(estate.land.isAdjacent(), \\\"not adjacent\\\");\\n        }\\n        estate.id = _incrementTokenVersion(estate.id);\\n        emit EstateTokenLandsAdded(oldId, estate.id, _msgSender(), estate.land.getMap());\\n        return estate.id;\\n    }\\n\\n    /// @notice create a new estate from scratch (Used by the bridge)\\n    /// @param to user that will get the new minted Estate\\n    /// @param tiles the list of tiles (aka lands) to add to the estate\\n    /// @return the estate Id created\\n    function mintEstate(address to, TileWithCoordLib.TileWithCoord[] calldata tiles)\\n        external\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"not authorized\\\");\\n        Estate storage estate = _mintEstate(to);\\n        estate.land.set(tiles);\\n        emit EstateBridgeMinted(estate.id, _msgSender(), to, tiles);\\n        return estate.id;\\n    }\\n\\n    /// @notice completely burn an estate (Used by the bridge)\\n    /// @dev must be implemented for every layer, see PolygonEstateTokenV1 and EstateTokenV1\\n    /// @param from user that is trying to use the bridge\\n    /// @param estateId the id of the estate token\\n    /// @return tiles the list of tiles (aka lands) to add to the estate\\n    function burnEstate(address from, uint256 estateId)\\n        external\\n        virtual\\n        override\\n        returns (TileWithCoordLib.TileWithCoord[] memory tiles);\\n\\n    /// @notice change the address of the land contract\\n    /// @param landToken the new address of the land contract\\n    function setLandToken(address landToken) external {\\n        require(hasRole(ADMIN_ROLE, _msgSender()), \\\"not admin\\\");\\n        require(landToken != address(0), \\\"invalid address\\\");\\n        address oldAddress = _s().landToken;\\n        _s().landToken = landToken;\\n        emit EstateLandTokenChanged(_msgSender(), oldAddress, landToken);\\n    }\\n\\n    /// @notice change the base uri of the metadata url\\n    /// @param baseUri the base uri of the metadata url\\n    function setBaseURI(string calldata baseUri) external {\\n        require(hasRole(ADMIN_ROLE, _msgSender()), \\\"not admin\\\");\\n        string memory oldUri = _s().baseUri;\\n        _s().baseUri = baseUri;\\n        emit EstateBaseUrlChanged(_msgSender(), oldUri, baseUri);\\n    }\\n\\n    /// @notice return the id of the next estate token\\n    /// @return next id\\n    function getNextId() external view returns (uint256) {\\n        return _s().nextId;\\n    }\\n\\n    /// @notice return the chain index\\n    /// @return chain index\\n    function getChainIndex() external view returns (uint256) {\\n        return _s().chainIndex;\\n    }\\n\\n    /// @notice return the address of the land token contract\\n    /// @return land token contract address\\n    function getLandToken() external view returns (address) {\\n        return _s().landToken;\\n    }\\n\\n    /// @notice return owner of the estateId ignoring version rotations (used by the registry)\\n    /// @param storageId the storage id for an estate\\n    /// @return owner address\\n    function getOwnerOfStorage(uint256 storageId) external view override returns (address) {\\n        return ownerOf(_estate(storageId).id);\\n    }\\n\\n    /// @notice return the amount of tiles that describe the land map inside a given estate\\n    /// @param estateId the estate id\\n    /// @return the length of the tile map\\n    function getLandLength(uint256 estateId) external view returns (uint256) {\\n        return _estate(estateId).land.length();\\n    }\\n\\n    /// @notice return an array of tiles describing the map of lands for a given estate\\n    /// @param estateId the estate id\\n    /// @param offset an amount of entries to skip in the array (pagination)\\n    /// @param limit amount of entries to get (pagination)\\n    /// @return an array of tiles describing the map of lands\\n    function getLandAt(\\n        uint256 estateId,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (TileWithCoordLib.TileWithCoord[] memory) {\\n        return _estate(estateId).land.at(offset, limit);\\n    }\\n\\n    /// @notice check if the estate contains certain displaced template (used by the registry)\\n    /// @param estateId the estate id\\n    /// @param s displaced template\\n    /// @return true if the estate contain all the lands of the displaced template\\n    function contain(uint256 estateId, MapLib.TranslateResult memory s) external view override returns (bool) {\\n        return _estate(estateId).land.contain(s);\\n    }\\n\\n    /// @notice return the amount of lands inside the estate\\n    /// @param estateId the estate id\\n    /// @return the amount of lands inside the estate\\n    function getLandCount(uint256 estateId) external view returns (uint256) {\\n        return _estate(estateId).land.getLandCount();\\n    }\\n\\n    /// @notice given and estateId return the part that doesn't change when the version is incremented\\n    /// @param estateId the estate id\\n    /// @return the storage Id\\n    function getStorageId(uint256 estateId) external pure override returns (uint256) {\\n        return estateId.storageId();\\n    }\\n\\n    /// @notice this is necessary to be able to receive land\\n    function onERC721Received(\\n        address, /* operator */\\n        address, /* from */\\n        uint256, /* id */\\n        bytes calldata /* data */\\n    ) external view virtual returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @notice this is necessary to be able to receive land\\n    function onERC721BatchReceived(\\n        address, /* operator */\\n        address, /* from */\\n        uint256[] calldata, /* ids */\\n        bytes calldata /* data */\\n    ) external view virtual returns (bytes4) {\\n        return this.onERC721BatchReceived.selector;\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// @param interfaceId The id of the interface.\\n    /// @return Whether the interface is supported.\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC721ReceiverUpgradeable).interfaceId ||\\n            interfaceId == type(IERC721MandatoryTokenReceiver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function _addLand(\\n        Estate storage estate,\\n        address from,\\n        uint256[][3] calldata quads\\n    ) internal {\\n        uint256 len = quads[0].length;\\n        require(len == quads[1].length && len == quads[2].length, \\\"invalid data\\\");\\n        for (uint256 i; i < len; i++) {\\n            estate.land.set(quads[1][i], quads[2][i], quads[0][i]);\\n        }\\n        ILandToken(_s().landToken).batchTransferQuad(from, address(this), quads[0], quads[1], quads[2], \\\"\\\");\\n    }\\n\\n    function _mintEstate(address to) internal returns (Estate storage estate) {\\n        uint256 estateId = EstateTokenIdHelperLib.packId(++(_s().nextId), _s().chainIndex, 1);\\n        estate = _estate(estateId);\\n        estate.id = estateId;\\n        super._mint(to, estateId);\\n        return estate;\\n    }\\n\\n    function _burnEstate(Estate storage estate) internal {\\n        estate.land.clear();\\n        delete estate.land;\\n        uint256 estateId = estate.id;\\n        delete _s().estate[estateId.storageId()];\\n        super._burn(estateId);\\n    }\\n\\n    /// @dev used to increment the version in a tokenId by burning the original and reminting a new token. Mappings to\\n    /// @dev token-specific data are preserved via the storageId mechanism.\\n    /// @param estateId The estateId to increment.\\n    /// @return new estate id\\n    function _incrementTokenVersion(uint256 estateId) internal returns (uint256) {\\n        address owner = ownerOf(estateId);\\n        super._burn(estateId);\\n        estateId = estateId.incrementVersion();\\n        super._mint(owner, estateId);\\n        return estateId;\\n    }\\n\\n    /// @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n    /// @dev token will be the concatenation of the `baseURI` and the `tokenId`.\\n    /// @dev We don't use storageId in the url because we want the centralized backend to extract it if needed.\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _s().baseUri;\\n    }\\n\\n    function _estate(uint256 estateId) internal view returns (Estate storage) {\\n        return _s().estate[estateId.storageId()];\\n    }\\n\\n    function _s() internal pure returns (EstateBaseTokenStorage storage ds) {\\n        bytes32 storagePosition = keccak256(\\\"EstateBaseTokenStorage.EstateBaseTokenStorage\\\");\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n\\n    uint256[50] private __posGap;\\n}\\n\",\"keccak256\":\"0x2a4c257b2975d7b2ceecd0229aa03cf0d7f87f56a864ab35bd1b05c6b160d65e\",\"license\":\"MIT\"},\"src/solc_0.8/estate/EstateTokenIdHelperLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\n/// @title Helper library to manage the estate token Id\\nlibrary EstateTokenIdHelperLib {\\n    uint256 internal constant SUB_ID_MULTIPLIER = uint256(2)**128;\\n    uint256 internal constant CHAIN_INDEX_MULTIPLIER = uint256(2)**96;\\n\\n    /// @notice Increment the version field of the tokenId (the storage Id is kept unchanged).\\n    /// @dev Mappings to token-specific data are preserved via the storageId part that doesn't change.\\n    /// @param estateId The estateId to increment.\\n    /// @return new estate id\\n    function incrementVersion(uint256 estateId) internal pure returns (uint256) {\\n        (uint128 subId, uint32 chainIndex, uint96 version) = unpackId(estateId);\\n        // is it ok to roll over the version we assume the it is impossible to send 2^16 txs\\n        unchecked {version++;}\\n        return packId(subId, chainIndex, version);\\n    }\\n\\n    /// @notice Pack a new tokenId and associate it with an owner.\\n    /// @param subId The main id of the token, it never changes.\\n    /// @param chainIndex The index of the chain, 0: mainet, 1:polygon, etc\\n    /// @param version The version of the token, it changes on each modification.\\n    /// @return the token id\\n    function packId(\\n        uint128 subId,\\n        uint32 chainIndex,\\n        uint96 version\\n    ) internal pure returns (uint256) {\\n        return subId * SUB_ID_MULTIPLIER + chainIndex * CHAIN_INDEX_MULTIPLIER + version;\\n    }\\n\\n    /// @notice Unpack the tokenId returning the separated values.\\n    /// @param id The token id\\n    /// @return subId The main id of the token, it never changes.\\n    /// @return chainIndex The index of the chain, 0: mainet, 1:polygon, etc\\n    /// @return version The version of the token, it changes on each modification.\\n    function unpackId(uint256 id)\\n        internal\\n        pure\\n        returns (\\n            uint128 subId,\\n            uint32 chainIndex,\\n            uint96 version\\n        )\\n    {\\n        return (uint64(id / SUB_ID_MULTIPLIER), uint16(id / CHAIN_INDEX_MULTIPLIER), uint16(id));\\n    }\\n\\n    /// @notice Return the part of the tokenId that doesn't change on modifications\\n    /// @param id The token id\\n    /// @return The storage Id (the part that doesn't change on modifications)\\n    function storageId(uint256 id) internal pure returns (uint256) {\\n        return uint256(id / CHAIN_INDEX_MULTIPLIER) * CHAIN_INDEX_MULTIPLIER;\\n    }\\n}\\n\",\"keccak256\":\"0x44d9574209f8b3eb05e3195192955399d72a7b8421087bd9fff20be5c02bac2b\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IPolygonLand} from \\\"../../../common/interfaces/IPolygonLand.sol\\\";\\nimport {IEstateExperienceRegistry} from \\\"../../../common/interfaces/IEstateExperienceRegistry.sol\\\";\\nimport {MapLib} from \\\"../../../common/Libraries/MapLib.sol\\\";\\nimport {TileWithCoordLib} from \\\"../../../common/Libraries/TileWithCoordLib.sol\\\";\\nimport {EstateBaseToken} from \\\"../../../estate/EstateBaseToken.sol\\\";\\n\\ncontract PolygonEstateTokenV1 is EstateBaseToken {\\n    using MapLib for MapLib.Map;\\n\\n    struct PolygonEstateTokenStorage {\\n        IEstateExperienceRegistry registryToken;\\n    }\\n\\n    /// @dev Emitted when the registry is changed\\n    /// @param operator The msg sender\\n    /// @param oldRegistry old address of the registry\\n    /// @param newRegistry new address of the registry\\n    event EstateRegistryChanged(\\n        address indexed operator,\\n        IEstateExperienceRegistry oldRegistry,\\n        IEstateExperienceRegistry newRegistry\\n    );\\n\\n    /// @notice update an estate adding and removing lands, and unlinking experiences in one step\\n    /// @dev to be able to remove lands they must be completely unlinked from any experience (in the registry)\\n    /// @param oldId the estate id that will be updated\\n    /// @param landToAdd The set of quads to add.\\n    /// @param expToUnlink experiences to unlink\\n    /// @param landToRemove The set of quads to remove.\\n    /// @return estateId the new estate Id\\n    function update(\\n        uint256 oldId,\\n        uint256[][3] calldata landToAdd,\\n        uint256[] calldata expToUnlink,\\n        uint256[][3] calldata landToRemove\\n    ) external returns (uint256) {\\n        require(_isApprovedOrOwner(_msgSender(), oldId), \\\"caller is not owner nor approved\\\");\\n        IEstateExperienceRegistry registry = _ps().registryToken;\\n        if (address(registry) == address(0)) {\\n            require(expToUnlink.length == 0, \\\"invalid data\\\");\\n            require(landToAdd[0].length > 0 || landToRemove[0].length > 0, \\\"nothing to update\\\");\\n        } else {\\n            require(\\n                landToAdd[0].length > 0 || landToRemove[0].length > 0 || expToUnlink.length > 0,\\n                \\\"nothing to update\\\"\\n            );\\n        }\\n        Estate storage estate = _estate(oldId);\\n        _addLand(estate, _msgSender(), landToAdd);\\n        _removeLand(estate, registry, _msgSender(), landToRemove, expToUnlink);\\n        require(!estate.land.isEmpty(), \\\"estate cannot be empty\\\");\\n        require(estate.land.isAdjacent(), \\\"not adjacent\\\");\\n        estate.id = _incrementTokenVersion(estate.id);\\n        emit EstateTokenUpdated(oldId, estate.id, _msgSender(), estate.land.getMap());\\n        return estate.id;\\n    }\\n\\n    /// @notice burn an estate\\n    /// @dev to be able to remove lands they must be completely unlinked from any experience (in the registry)\\n    /// @dev to be able to burn an estate it must be empty\\n    /// @param estateId the estate id that will be updated\\n    /// @param expToUnlink experiences to unlink\\n    /// @param landToRemove The set of quads to remove.\\n    function burn(\\n        uint256 estateId,\\n        uint256[] calldata expToUnlink,\\n        uint256[][3] calldata landToRemove\\n    ) external {\\n        require(_isApprovedOrOwner(_msgSender(), estateId), \\\"caller is not owner nor approved\\\");\\n        Estate storage estate = _estate(estateId);\\n        IEstateExperienceRegistry registry = _ps().registryToken;\\n        require(expToUnlink.length == 0 || address(registry) != address(0), \\\"invalid data\\\");\\n        _removeLand(estate, registry, _msgSender(), landToRemove, expToUnlink);\\n        require(estate.land.isEmpty(), \\\"map not empty\\\");\\n        _burnEstate(estate);\\n        emit EstateTokenBurned(estateId, _msgSender());\\n    }\\n\\n    /// @notice completely burn an estate (Used by the bridge)\\n    /// @dev to be able to bridge an estate all the lands must be unlinked (we don't have a registry on L1)\\n    /// @param from user that is trying to use the bridge\\n    /// @param estateId the id of the estate token\\n    /// @return tiles the list of tiles (aka lands) to add to the estate\\n    function burnEstate(address from, uint256 estateId)\\n        external\\n        override\\n        returns (TileWithCoordLib.TileWithCoord[] memory tiles)\\n    {\\n        require(hasRole(BURNER_ROLE, _msgSender()), \\\"not authorized\\\");\\n        require(_isApprovedOrOwner(from, estateId), \\\"caller is not owner nor approved\\\");\\n        Estate storage estate = _estate(estateId);\\n        tiles = estate.land.getMap();\\n        IEstateExperienceRegistry r = _ps().registryToken;\\n        if (address(r) != address(0)) {\\n            require(!r.isLinked(tiles), \\\"must unlink first\\\");\\n        }\\n        _burnEstate(estate);\\n        emit EstateBridgeBurned(estateId, _msgSender(), from, tiles);\\n        return (tiles);\\n    }\\n\\n    /// @notice set the registry contract address\\n    /// @param registry the registry contract address\\n    function setRegistry(IEstateExperienceRegistry registry) external {\\n        require(hasRole(ADMIN_ROLE, _msgSender()), \\\"not admin\\\");\\n        require(address(registry) != address(0), \\\"invalid address\\\");\\n        IEstateExperienceRegistry old = _ps().registryToken;\\n        _ps().registryToken = registry;\\n        emit EstateRegistryChanged(_msgSender(), old, registry);\\n    }\\n\\n    /// @notice get the registry contract address\\n    /// @return registry the registry contract address\\n    function getRegistry() external view returns (IEstateExperienceRegistry) {\\n        return _ps().registryToken;\\n    }\\n\\n    /// @dev See https://docs.opensea.io/docs/contract-level-metadata\\n    /// @return the metadata url for the whole contract\\n    function contractURI() public view returns (string memory) {\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, \\\"polygon_estate.json\\\")) : \\\"\\\";\\n    }\\n\\n    function _removeLand(\\n        Estate storage estate,\\n        IEstateExperienceRegistry registry,\\n        address from,\\n        uint256[][3] calldata quads,\\n        uint256[] calldata expToUnlink\\n    ) internal {\\n        uint256 len = quads[0].length;\\n        require(len == quads[1].length && len == quads[2].length, \\\"invalid quad data\\\");\\n        if (address(registry) != address(0)) {\\n            if (expToUnlink.length > 0) {\\n                registry.batchUnLinkFrom(from, expToUnlink);\\n            }\\n            require(!registry.isLinked(quads), \\\"must unlink first\\\");\\n        }\\n        address landToken = _s().landToken;\\n        MapLib.Map storage map = estate.land;\\n        for (uint256 i; i < len; i++) {\\n            _removeQuad(from, map, landToken, quads[0][i], quads[1][i], quads[2][i]);\\n        }\\n    }\\n\\n    function _removeQuad(\\n        address to,\\n        MapLib.Map storage map,\\n        address landToken,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal {\\n        require(map.contain(x, y, size), \\\"quad missing\\\");\\n        map.clear(x, y, size);\\n        if (!IPolygonLand(landToken).exists(size, x, y)) {\\n            // The only way this can happen is if the lands passed trough the bridge\\n            IPolygonLand(landToken).mintQuad(to, size, x, y, \\\"\\\");\\n        } else {\\n            IPolygonLand(landToken).transferQuad(address(this), to, size, x, y, \\\"\\\");\\n        }\\n    }\\n\\n    function _ps() internal pure returns (PolygonEstateTokenStorage storage ds) {\\n        bytes32 storagePosition = keccak256(\\\"PolygonEstateToken.PolygonEstateTokenStorage\\\");\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xafb1a22186bd2b6b2c804caddd6dc35a95d0a7467b30eda622b93f93293b4b96\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506151e5806100206000396000f3fe608060405234801561001057600080fd5b50600436106102bb5760003560e01c80637ad237a011610182578063b88d4fde116100e9578063d5391393116100a2578063e5d7dbd71161007c578063e5d7dbd7146106f1578063e8a3d485146106f9578063e985e9c514610701578063fa83e33a1461073d576102bb565b8063d5391393146106a4578063d547741f146106cb578063da742228146106de576102bb565b8063b88d4fde14610616578063bc96832614610629578063c0ae401614610658578063c87b56dd1461066b578063cd17aa411461067e578063d3fec7cf14610691576102bb565b80639c0d90581161013b5780639c0d9058146105af578063a217fddf146105c2578063a22cb465146105ca578063a70c4709146105dd578063a91ee0dc146105f0578063a9266dde14610603576102bb565b80637ad237a0146105485780638bee92e61461055b5780638f3d9daa1461056e57806391d148541461058157806395d89b41146105945780639b64c4fc1461059c576102bb565b806336568abe116102265780635a09942f116101df5780635a09942f146104d25780635ab1bd53146104f25780636352211e146104fa5780636c7ecdff1461050d57806370a082311461052057806375b238fc14610533576102bb565b806336568abe1461044457806342842e0e146104575780634b808c461461046a5780634f558e791461048a57806355f804b31461049d578063572b6c05146104b0576102bb565b806321ab0c711161027857806321ab0c71146103b257806323b872dd146103c5578063248a9ca3146103d8578063282c51f3146103fb5780632f2ff15d14610422578063313ce56714610435576102bb565b806301ffc9a7146102c057806306fdde03146102e8578063081812fc146102fd578063095ea7b3146103285780630d363f0d1461033d578063150b7a021461037a575b600080fd5b6102d36102ce366004614500565b610750565b60405190151581526020015b60405180910390f35b6102f0610798565b6040516102df9190614b6b565b61031061030b3660046144c4565b61082b565b6040516001600160a01b0390911681526020016102df565b61033b61033636600461432a565b6108c5565b005b7ef52b0807fdece1f767ee6f74b46926674002b92e5176c0b1fbc1c6a045384b54600160801b900463ffffffff165b6040519081526020016102df565b610399610388366004614150565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016102df565b61036c6103c03660046144c4565b6109ed565b61033b6103d3366004614110565b6109f8565b61036c6103e63660046144c4565b60009081526065602052604090206001015490565b61036c7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b61033b6104303660046144dc565b610a30565b604051600081526020016102df565b61033b6104523660046144dc565b610a5d565b61033b610465366004614110565b610aeb565b61039961047836600461407f565b6325c0462360e11b9695505050505050565b6102d36104983660046144c4565b610b06565b61033b6104ab366004614538565b610b25565b6102d36104be366004613f6f565b60c9546001600160a01b0390811691161490565b6104e56104e036600461475b565b610c73565b6040516102df9190614b58565b610310610d20565b6103106105083660046144c4565b610d41565b61036c61051b3660046145d3565b610db8565b61036c61052e366004613f6f565b61117f565b61036c60008051602061519083398151915281565b61036c61055636600461427b565b611206565b6102d36105693660046146d5565b61133f565b6104e561057c36600461432a565b6113de565b6102d361058f3660046144dc565b611639565b6102f0611664565b61036c6105aa3660046144c4565b611673565b61036c6105bd366004614355565b611705565b61036c600081565b61033b6105d83660046142fd565b6118ea565b61033b6105eb366004614666565b6118fc565b61033b6105fe366004613f6f565b611aad565b61036c6106113660046144c4565b611bad565b61033b6106243660046141c0565b611bf3565b7ef52b0807fdece1f767ee6f74b46926674002b92e5176c0b1fbc1c6a045384b546001600160801b031661036c565b61036c61066636600461458f565b611c32565b6102f06106793660046144c4565b61200b565b61033b61068c366004613f6f565b6120e5565b61031061069f3660046144c4565b6121dd565b61036c7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61033b6106d93660046144dc565b6121f1565b61033b6106ec366004613f6f565b612219565b610310612271565b6102f0612287565b6102d361070f366004613f8b565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b61033b61074b366004613fc3565b6122da565b60006001600160e01b03198216630a85bd0160e11b148061078157506001600160e01b031982166317a2fd9160e21b145b80610790575061079082612433565b90505b919050565b6060609780546107a790615049565b80601f01602080910402602001604051908101604052809291908181526020018280546107d390615049565b80156108205780601f106107f557610100808354040283529160200191610820565b820191906000526020600020905b81548152906001019060200180831161080357829003601f168201915b505050505090505b90565b6000818152609960205260408120546001600160a01b03166108a95760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152609b60205260409020546001600160a01b031690565b60006108d082610d41565b9050806001600160a01b0316836001600160a01b0316141561093e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016108a0565b806001600160a01b031661095061244d565b6001600160a01b0316148061096c575061096c8161070f61244d565b6109de5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016108a0565b6109e8838361245c565b505050565b6000610790826124ca565b610a09610a0361244d565b826124f8565b610a255760405162461bcd60e51b81526004016108a090614c70565b6109e88383836125ef565b600082815260656020526040902060010154610a5381610a4e61244d565b61278f565b6109e883836127f3565b610a6561244d565b6001600160a01b0316816001600160a01b031614610add5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016108a0565b610ae7828261287a565b5050565b6109e883838360405180602001604052806000815250611bf3565b6000818152609960205260408120546001600160a01b03161515610790565b610b3f60008051602061519083398151915261058f61244d565b610b5b5760405162461bcd60e51b81526004016108a090614d32565b60006000805160206151708339815191526002018054610b7a90615049565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba690615049565b8015610bf35780601f10610bc857610100808354040283529160200191610bf3565b820191906000526020600020905b815481529060010190602001808311610bd657829003601f168201915b505050505090508282610c1160008051602061517083398151915290565b6002019190610c21929190613d08565b50610c2a61244d565b6001600160a01b03167fcad0ef056b20aa50414ef503ee13c75ff786ba9317d7f8a4379a9892310c9338828585604051610c6693929190614b7e565b60405180910390a2505050565b6060610c7e846128ff565b6040516308e3edc760e11b815260019091016004820152602481018490526044810183905273AbA89821c0eeBBe019b895e2c7A3b853DCB884c8906311c7db8e9060640160006040518083038186803b158015610cda57600080fd5b505af4158015610cee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d169190810190614387565b90505b9392505050565b60006000805160206151508339815191525b546001600160a01b0316905090565b6000818152609960205260408120546001600160a01b0316806107905760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016108a0565b6000610dcb610dc561244d565b876124f8565b610de75760405162461bcd60e51b81526004016108a090614c3b565b600080516020615150833981519152546001600160a01b031680610e8d578315610e235760405162461bcd60e51b81526004016108a090614d0c565b6000610e2f8780614df7565b90501180610e4857506000610e448480614df7565b9050115b610e885760405162461bcd60e51b81526020600482015260116024820152706e6f7468696e6720746f2075706461746560781b60448201526064016108a0565b610efc565b6000610e998780614df7565b90501180610eb257506000610eae8480614df7565b9050115b80610ebc57508315155b610efc5760405162461bcd60e51b81526020600482015260116024820152706e6f7468696e6720746f2075706461746560781b60448201526064016108a0565b6000610f07886128ff565b9050610f1b81610f1561244d565b89612940565b610f308183610f2861244d565b878a8a612bb5565b604051632d10763960e11b815260018201600482015273AbA89821c0eeBBe019b895e2c7A3b853DCB884c890635a20ec729060240160206040518083038186803b158015610f7d57600080fd5b505af4158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb591906144a8565b15610ffb5760405162461bcd60e51b81526020600482015260166024820152756573746174652063616e6e6f7420626520656d70747960501b60448201526064016108a0565b6040516331884dd560e21b815260018201600482015273AbA89821c0eeBBe019b895e2c7A3b853DCB884c89063c62137549060240160206040518083038186803b15801561104857600080fd5b505af415801561105c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108091906144a8565b61109c5760405162461bcd60e51b81526004016108a090614c15565b80546110a790612e90565b808255887f9d558f479216a061e3c0dd35693fdc4904a085e0ec5582272591dda3f9ab27c46110d461244d565b604051636429e7ff60e11b815260018601600482015273AbA89821c0eeBBe019b895e2c7A3b853DCB884c89063c853cffe9060240160006040518083038186803b15801561112157600080fd5b505af4158015611135573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261115d9190810190614387565b60405161116b929190614a83565b60405180910390a354979650505050505050565b60006001600160a01b0382166111ea5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016108a0565b506001600160a01b03166000908152609a602052604090205490565b60006112347f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661058f61244d565b6112715760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b60448201526064016108a0565b600061127c85612ec3565b60405163286d30af60e21b815290915073AbA89821c0eeBBe019b895e2c7A3b853DCB884c89063a1b4c2bc906112bd90600185019088908890600401614d55565b60006040518083038186803b1580156112d557600080fd5b505af41580156112e9573d6000803e3d6000fd5b5050505080600001547f8ba5d7096a6e37fd8a143e486dbc3dc12dc25159042fca9431af78475768d5d961131b61244d565b87878760405161132e949392919061494e565b60405180910390a254949350505050565b600061134a836128ff565b60405163f5fd439d60e01b815273AbA89821c0eeBBe019b895e2c7A3b853DCB884c89163f5fd439d9161138591600101908690600401614d9c565b60206040518083038186803b15801561139d57600080fd5b505af41580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d591906144a8565b90505b92915050565b606061140c7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84861058f61244d565b6114495760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b60448201526064016108a0565b61145383836124f8565b61146f5760405162461bcd60e51b81526004016108a090614c3b565b600061147a836128ff565b604051636429e7ff60e11b815260018201600482015290915073AbA89821c0eeBBe019b895e2c7A3b853DCB884c89063c853cffe9060240160006040518083038186803b1580156114ca57600080fd5b505af41580156114de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115069190810190614387565b600080516020615150833981519152549092506001600160a01b031680156115e55760405163ad51dacb60e01b81526001600160a01b0382169063ad51dacb90611554908690600401614b58565b60206040518083038186803b15801561156c57600080fd5b505afa158015611580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a491906144a8565b156115e55760405162461bcd60e51b81526020600482015260116024820152701b5d5cdd081d5b9b1a5b9ac8199a5c9cdd607a1b60448201526064016108a0565b6115ee82612f63565b837fa95f078511bfff5e18ae1876d396070153217e28e9939b24ee2b407bea5c93da61161861244d565b8786604051611629939291906149a7565b60405180910390a2505092915050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060609880546107a790615049565b600061167e826128ff565b60405163158eeb9f60e31b81526001909101600482015273AbA89821c0eeBBe019b895e2c7A3b853DCB884c89063ac775cf8906024015b60206040518083038186803b1580156116cd57600080fd5b505af41580156116e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107909190614577565b60008061171861171361244d565b612ec3565b905060006117268480614df7565b9050116117665760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd1a1a5b99c81d1bc818591960921b60448201526064016108a0565b6117788161177261244d565b85612940565b6040516331884dd560e21b815260018201600482015273AbA89821c0eeBBe019b895e2c7A3b853DCB884c89063c62137549060240160206040518083038186803b1580156117c557600080fd5b505af41580156117d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fd91906144a8565b6118195760405162461bcd60e51b81526004016108a090614c15565b80547f1fdc5a6efe117110d3a653439a0b1fedc9258a17c8b2477c5c7586accb26d28961184461244d565b604051636429e7ff60e11b815260018501600482015273AbA89821c0eeBBe019b895e2c7A3b853DCB884c89063c853cffe9060240160006040518083038186803b15801561189157600080fd5b505af41580156118a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118cd9190810190614387565b6040516118db929190614a83565b60405180910390a25492915050565b610ae76118f561244d565b838361303a565b61190d61190761244d565b856124f8565b6119295760405162461bcd60e51b81526004016108a090614c3b565b6000611934856128ff565b600080516020615150833981519152549091506001600160a01b031683158061196557506001600160a01b03811615155b6119815760405162461bcd60e51b81526004016108a090614d0c565b611996828261198e61244d565b868989612bb5565b604051632d10763960e11b815260018301600482015273AbA89821c0eeBBe019b895e2c7A3b853DCB884c890635a20ec729060240160206040518083038186803b1580156119e357600080fd5b505af41580156119f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1b91906144a8565b611a575760405162461bcd60e51b815260206004820152600d60248201526c6d6170206e6f7420656d70747960981b60448201526064016108a0565b611a6082612f63565b857fc16ce9c4d0002876fc4c9679fc409385f51b8d3659a3b307d9a35931081bcc3f611a8a61244d565b6040516001600160a01b03909116815260200160405180910390a2505050505050565b611ac760008051602061519083398151915261058f61244d565b611ae35760405162461bcd60e51b81526004016108a090614d32565b6001600160a01b038116611b2b5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016108a0565b60008051602061515083398151915280546001600160a01b038381166001600160a01b031983161790925516611b5f61244d565b604080516001600160a01b038481168252858116602083015292909216917f814a095c46e008854bbfd092e4981c02e2e623d3ba415d78ff58b5900956c16491015b60405180910390a25050565b6000611bb8826128ff565b604051630f858a2960e31b81526001909101600482015273AbA89821c0eeBBe019b895e2c7A3b853DCB884c890637c2c5148906024016116b5565b611c04611bfe61244d565b836124f8565b611c205760405162461bcd60e51b81526004016108a090614c70565b611c2c84848484613109565b50505050565b6000611c45611c3f61244d565b846124f8565b611c615760405162461bcd60e51b81526004016108a090614c3b565b6000611c6d8380614df7565b905011611cad5760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd1a1a5b99c81d1bc818591960921b60448201526064016108a0565b6000611cb8846128ff565b9050611cc48380614df7565b905060011415611e7f5773AbA89821c0eeBBe019b895e2c7A3b853DCB884c8638addfdc460018301611cf96020870187614df7565b6000818110611d1857634e487b7160e01b600052603260045260246000fd5b9050602002013586600260038110611d4057634e487b7160e01b600052603260045260246000fd5b602002810190611d509190614df7565b6000818110611d6f57634e487b7160e01b600052603260045260246000fd5b9050602002013587600060038110611d9757634e487b7160e01b600052603260045260246000fd5b602002810190611da79190614df7565b6000818110611dc657634e487b7160e01b600052603260045260246000fd5b905060200201356040518563ffffffff1660e01b8152600401611e02949392919093845260208401929092526040830152606082015260800190565b60206040518083038186803b158015611e1a57600080fd5b505af4158015611e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5291906144a8565b611e6e5760405162461bcd60e51b81526004016108a090614c15565b611e7a8161177261244d565b611f2c565b611e8b8161177261244d565b6040516331884dd560e21b815260018201600482015273AbA89821c0eeBBe019b895e2c7A3b853DCB884c89063c62137549060240160206040518083038186803b158015611ed857600080fd5b505af4158015611eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1091906144a8565b611f2c5760405162461bcd60e51b81526004016108a090614c15565b8054611f3790612e90565b808255847f412391f5f3bd0705db9b0ab9939daa3ba27c2e72ff1f3e171425cc00406ac58a611f6461244d565b604051636429e7ff60e11b815260018601600482015273AbA89821c0eeBBe019b895e2c7A3b853DCB884c89063c853cffe9060240160006040518083038186803b158015611fb157600080fd5b505af4158015611fc5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611fed9190810190614387565b604051611ffb929190614a83565b60405180910390a3549392505050565b6000818152609960205260409020546060906001600160a01b031661208a5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016108a0565b600061209461313c565b905060008151116120b45760405180602001604052806000815250610d19565b806120be8461315b565b6040516020016120cf929190614873565b6040516020818303038152906040529392505050565b6120ff60008051602061519083398151915261058f61244d565b61211b5760405162461bcd60e51b81526004016108a090614d32565b6001600160a01b0381166121635760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016108a0565b60008051602061517083398151915280546001600160a01b038381166001600160a01b03198316179092551661219761244d565b604080516001600160a01b038481168252858116602083015292909216917f43348694b30dafadd67997415d04baa9eed18579262b5bd26256362b89b575c29101611ba1565b60006107906121eb836128ff565b54610d41565b60008281526065602052604090206001015461220f81610a4e61244d565b6109e8838361287a565b61223360008051602061519083398151915261058f61244d565b61224f5760405162461bcd60e51b81526004016108a090614d32565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b6000600080516020615170833981519152610d32565b6060600061229361313c565b905060008151116122b357604051806020016040528060008152506122d4565b806040516020016122c491906148a2565b6040516020818303038152906040525b91505090565b600054610100900460ff166122f55760005460ff16156122f9565b303b155b61235c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108a0565b600054610100900460ff16158015612387576000805460ff1961ff0019909116610100171660011790555b61239089613275565b61240385858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152925087915086908190840183828082843760009201919091525061329c92505050565b61240c886132ea565b612416878761331f565b8015612428576000805461ff00191690555b505050505050505050565b600061243e826133b4565b806107905750610790826133ef565b6000612457613424565b905090565b6000818152609b6020526040902080546001600160a01b0319166001600160a01b038416908117909155819061249182610d41565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006124d860606002614eff565b6124e460606002614eff565b6124ee9084614ea5565b6107909190614fd0565b6000818152609960205260408120546001600160a01b03166125715760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016108a0565b600061257c83610d41565b9050806001600160a01b0316846001600160a01b031614806125b75750836001600160a01b03166125ac8461082b565b6001600160a01b0316145b806125e757506001600160a01b038082166000908152609c602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661260282610d41565b6001600160a01b03161461266a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016108a0565b6001600160a01b0382166126cc5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016108a0565b6126d760008261245c565b6001600160a01b0383166000908152609a60205260408120805460019290612700908490614fef565b90915550506001600160a01b0382166000908152609a6020526040812080546001929061272e908490614e8d565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6127998282611639565b610ae7576127b1816001600160a01b03166014613450565b6127bc836020613450565b6040516020016127cd9291906148d9565b60408051601f198184030181529082905262461bcd60e51b82526108a091600401614b6b565b6127fd8282611639565b610ae75760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561283661244d565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6128848282611639565b15610ae75760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191690556128bb61244d565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60007ef52b0807fdece1f767ee6f74b46926674002b92e5176c0b1fbc1c6a045384d8161292b846124ca565b81526020019081526020016000209050919050565b600061294c8280614df7565b915061295d90506020830183614df7565b90508114801561297a57506129756040830183614df7565b905081145b6129965760405162461bcd60e51b81526004016108a090614d0c565b60005b81811015612b155773AbA89821c0eeBBe019b895e2c7A3b853DCB884c863f9b9fec6600187016129cc6020870187614df7565b858181106129ea57634e487b7160e01b600052603260045260246000fd5b9050602002013586600260038110612a1257634e487b7160e01b600052603260045260246000fd5b602002810190612a229190614df7565b86818110612a4057634e487b7160e01b600052603260045260246000fd5b9050602002013587600060038110612a6857634e487b7160e01b600052603260045260246000fd5b602002810190612a789190614df7565b87818110612a9657634e487b7160e01b600052603260045260246000fd5b905060200201356040518563ffffffff1660e01b8152600401612ad2949392919093845260208401929092526040830152606082015260800190565b60006040518083038186803b158015612aea57600080fd5b505af4158015612afe573d6000803e3d6000fd5b505050508080612b0d906150a5565b915050612999565b50600080516020615170833981519152546001600160a01b031663eaa5e0678430612b408680614df7565b612b4d6020890189614df7565b612b5a60408b018b614df7565b6040518963ffffffff1660e01b8152600401612b7d9897969594939291906149d3565b600060405180830381600087803b158015612b9757600080fd5b505af1158015612bab573d6000803e3d6000fd5b5050505050505050565b6000612bc18480614df7565b9150612bd290506020850185614df7565b905081148015612bef5750612bea6040850185614df7565b905081145b612c2f5760405162461bcd60e51b8152602060048201526011602482015270696e76616c69642071756164206461746160781b60448201526064016108a0565b6001600160a01b03861615612d64578115612ca757604051630910168560e11b81526001600160a01b038716906312202d0a90612c7490889087908790600401614aa7565b600060405180830381600087803b158015612c8e57600080fd5b505af1158015612ca2573d6000803e3d6000fd5b505050505b604051633cbe399760e01b81526001600160a01b03871690633cbe399790612cd3908790600401614acc565b60206040518083038186803b158015612ceb57600080fd5b505afa158015612cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2391906144a8565b15612d645760405162461bcd60e51b81526020600482015260116024820152701b5d5cdd081d5b9b1a5b9ac8199a5c9cdd607a1b60448201526064016108a0565b600080516020615170833981519152546001600160a01b03166001880160005b83811015612e8457612e72888385612d9c8b80614df7565b86818110612dba57634e487b7160e01b600052603260045260246000fd5b905060200201358b600160038110612de257634e487b7160e01b600052603260045260246000fd5b602002810190612df29190614df7565b87818110612e1057634e487b7160e01b600052603260045260246000fd5b905060200201358c600260038110612e3857634e487b7160e01b600052603260045260246000fd5b602002810190612e489190614df7565b88818110612e6657634e487b7160e01b600052603260045260246000fd5b90506020020135613631565b80612e7c816150a5565b915050612d84565b50505050505050505050565b600080612e9c83610d41565b9050612ea783613932565b612eb0836139cd565b9250612ebc81846139fa565b5090919050565b600080612f436000805160206151708339815191526001018054600090612ef2906001600160801b031661507e565b91906101000a8154816001600160801b0302191690836001600160801b031602179055612f2a60008051602061517083398151915290565b600190810154600160801b900463ffffffff1690613b3c565b9050612f4e816128ff565b8181559150612f5d83826139fa565b50919050565b604051632c87615360e11b815260018201600482015273AbA89821c0eeBBe019b895e2c7A3b853DCB884c89063590ec2a69060240160006040518083038186803b158015612fb057600080fd5b505af4158015612fc4573d6000803e3d6000fd5b5050506001820190506000612fd98282613d8c565b505080547ef52b0807fdece1f767ee6f74b46926674002b92e5176c0b1fbc1c6a045384d6000613008836124ca565b81526020810191909152604001600090812081815590600182018161302d8282613d8c565b50505050610ae781613932565b816001600160a01b0316836001600160a01b0316141561309c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016108a0565b6001600160a01b038381166000818152609c6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6131148484846125ef565b61312084848484613b9c565b611c2c5760405162461bcd60e51b81526004016108a090614bc3565b606060008051602061517083398151915260020180546107a790615049565b60608161318057506040805180820190915260018152600360fc1b6020820152610793565b8160005b81156131aa5780613194816150a5565b91506131a39050600a83614ea5565b9150613184565b6000816001600160401b038111156131d257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156131fc576020820181803683370190505b5090505b84156125e757613211600183614fef565b915061321e600a866150c0565b613229906030614e8d565b60f81b81838151811061324c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061326e600a86614ea5565b9450613200565b600054610100900460ff1661224f5760405162461bcd60e51b81526004016108a090614cc1565b600054610100900460ff166132c35760405162461bcd60e51b81526004016108a090614cc1565b81516132d6906097906020850190613dad565b5080516109e8906098906020840190613dad565b600054610100900460ff166133115760405162461bcd60e51b81526004016108a090614cc1565b61331c600082613cb0565b50565b600054610100900460ff166133465760405162461bcd60e51b81526004016108a090614cc1565b60008051602061517083398151915280546001600160a01b0319166001600160a01b0393909316929092179091557ef52b0807fdece1f767ee6f74b46926674002b92e5176c0b1fbc1c6a045384b805463ffffffff60801b191661ffff909216600160801b02919091179055565b60006001600160e01b031982166380ac58cd60e01b148061243e57506001600160e01b03198216635b5e139f60e01b14806107905750610790825b60006001600160e01b03198216637965db0b60e01b148061079057506301ffc9a760e01b6001600160e01b0319831614610790565b60c9546000906001600160a01b0316331415613449575060131936013560601c610828565b5033610828565b6060600061345f836002614fd0565b61346a906002614e8d565b6001600160401b0381111561348f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156134b9576020820181803683370190505b509050600360fc1b816000815181106134e257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061351f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000613543846002614fd0565b61354e906001614e8d565b90505b60018111156135e2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061359057634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106135b457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936135db81615032565b9050613551565b5083156113d55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108a0565b604051630a2a008760e31b81526004810186905260248101839052604481018290526064810184905273AbA89821c0eeBBe019b895e2c7A3b853DCB884c89063515004389060840160206040518083038186803b15801561369157600080fd5b505af41580156136a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c991906144a8565b6137045760405162461bcd60e51b815260206004820152600c60248201526b71756164206d697373696e6760a01b60448201526064016108a0565b60405163e8485b0760e01b81526004810186905260248101839052604481018290526064810184905273AbA89821c0eeBBe019b895e2c7A3b853DCB884c89063e8485b079060840160206040518083038186803b15801561376457600080fd5b505af4158015613778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061379c91906144a8565b506040516355064d8560e01b81526004810184905260248101839052604481018290526001600160a01b038516906355064d859060640160206040518083038186803b1580156137eb57600080fd5b505afa1580156137ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061382391906144a8565b6138aa57604051636e1e3bbf60e01b81526001600160a01b03878116600483015260248201859052604482018490526064820183905260a06084830152600060a4830152851690636e1e3bbf9060c401600060405180830381600087803b15801561388d57600080fd5b505af11580156138a1573d6000803e3d6000fd5b5050505061392a565b604051631c5d982d60e11b81523060048201526001600160a01b03878116602483015260448201859052606482018490526084820183905260c060a4830152600060c48301528516906338bb305a9060e401600060405180830381600087803b15801561391657600080fd5b505af1158015612e84573d6000803e3d6000fd5b505050505050565b600061393d82610d41565b905061394a60008361245c565b6001600160a01b0381166000908152609a60205260408120805460019290613973908490614fef565b909155505060008281526099602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000806000806139dc85613cba565b919450925060010190506139f1838383613b3c565b95945050505050565b6001600160a01b038216613a505760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108a0565b6000818152609960205260409020546001600160a01b031615613ab55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108a0565b6001600160a01b0382166000908152609a60205260408120805460019290613ade908490614e8d565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006bffffffffffffffffffffffff8216613b5960606002614eff565b613b699063ffffffff8616614fd0565b613b7560806002614eff565b613b88906001600160801b038816614fd0565b613b929190614e8d565b610d169190614e8d565b60006001600160a01b0384163b15613ca557836001600160a01b031663150b7a02613bc561244d565b8786866040518563ffffffff1660e01b8152600401613be79493929190614a46565b602060405180830381600087803b158015613c0157600080fd5b505af1925050508015613c31575060408051601f3d908101601f19168201909252613c2e9181019061451c565b60015b613c8b573d808015613c5f576040519150601f19603f3d011682016040523d82523d6000602084013e613c64565b606091505b508051613c835760405162461bcd60e51b81526004016108a090614bc3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506125e7565b506001949350505050565b610ae782826127f3565b60008080613cca60806002614eff565b613cd49085614ea5565b613ce060606002614eff565b613cea9086614ea5565b6001600160401b03919091169561ffff918216959091169350915050565b828054613d1490615049565b90600052602060002090601f016020900481019282613d365760008555613d7c565b82601f10613d4f5782800160ff19823516178555613d7c565b82800160010185558215613d7c579182015b82811115613d7c578235825591602001919060010190613d61565b50613d88929150613e21565b5090565b508054600082556003029060005260206000209081019061331c9190613e36565b828054613db990615049565b90600052602060002090601f016020900481019282613ddb5760008555613d7c565b82601f10613df457805160ff1916838001178555613d7c565b82800160010185558215613d7c579182015b82811115613d7c578251825591602001919060010190613e06565b5b80821115613d885760008155600101613e22565b80821115613d88576000808255600182018190556002820155600301613e36565b80606081018310156113d857600080fd5b60008083601f840112613e79578182fd5b5081356001600160401b03811115613e8f578182fd5b6020830191508360208083028501011115613ea957600080fd5b9250929050565b60008083601f840112613ec1578182fd5b5081356001600160401b03811115613ed7578182fd5b602083019150836020828501011115613ea957600080fd5b600060608284031215613f00578081fd5b6020613f0b81614e3d565b9150613f1681614e3d565b84601f850112613f2557600080fd5b613f2f6060614e3d565b808587606088011115613f4157600080fd5b60005b6003811015613f6157813584529285019290850190600101613f44565b505082525082525092915050565b600060208284031215613f80578081fd5b81356113d581615116565b60008060408385031215613f9d578081fd5b8235613fa881615116565b91506020830135613fb881615116565b809150509250929050565b60008060008060008060008060c0898b031215613fde578384fd5b8835613fe981615116565b97506020890135613ff981615116565b9650604089013561400981615116565b9550606089013561ffff8116811461401f578485fd5b945060808901356001600160401b038082111561403a578586fd5b6140468c838d01613eb0565b909650945060a08b013591508082111561405e578384fd5b5061406b8b828c01613eb0565b999c989b5096995094979396929594505050565b60008060008060008060808789031215614097578384fd5b86356140a281615116565b955060208701356140b281615116565b945060408701356001600160401b03808211156140cd578586fd5b6140d98a838b01613e68565b909650945060608901359150808211156140f1578384fd5b506140fe89828a01613eb0565b979a9699509497509295939492505050565b600080600060608486031215614124578081fd5b833561412f81615116565b9250602084013561413f81615116565b929592945050506040919091013590565b600080600080600060808688031215614167578283fd5b853561417281615116565b9450602086013561418281615116565b93506040860135925060608601356001600160401b038111156141a3578182fd5b6141af88828901613eb0565b969995985093965092949392505050565b600080600080608085870312156141d5578182fd5b84356141e081615116565b93506020858101356141f181615116565b93506040860135925060608601356001600160401b0380821115614213578384fd5b818801915088601f830112614226578384fd5b81358181111561423857614238615100565b61424a601f8201601f19168501614e3d565b9150808252898482850101111561425f578485fd5b8084840185840137810190920192909252939692955090935050565b60008060006040848603121561428f578081fd5b833561429a81615116565b925060208401356001600160401b03808211156142b5578283fd5b818601915086601f8301126142c8578283fd5b8135818111156142d6578384fd5b8760206060830285010111156142ea578384fd5b6020830194508093505050509250925092565b6000806040838503121561430f578182fd5b823561431a81615116565b91506020830135613fb88161512b565b6000806040838503121561433c578182fd5b823561434781615116565b946020939093013593505050565b600060208284031215614366578081fd5b81356001600160401b0381111561437b578182fd5b6125e784828501613e57565b60006020808385031215614399578182fd5b82516001600160401b03808211156143af578384fd5b818501915085601f8301126143c2578384fd5b8151818111156143d4576143d4615100565b6143e18485830201614e3d565b81815284810192508385016060808402860187018a1015614400578788fd5b8795505b8386101561449a5780828b03121561441a578788fd5b61442387614e3d565b61442c88614e3d565b8b601f85011261443a57898afd5b61444c6144476003614e6d565b614e3d565b80858587018f81111561445d578d8efd5b8d5b600381101561447c5782518552938d0193918d019160010161445f565b50918452509183525090865260019690960195948701949150614404565b509098975050505050505050565b6000602082840312156144b9578081fd5b81516113d58161512b565b6000602082840312156144d5578081fd5b5035919050565b600080604083850312156144ee578182fd5b823591506020830135613fb881615116565b600060208284031215614511578081fd5b81356113d581615139565b60006020828403121561452d578081fd5b81516113d581615139565b6000806020838503121561454a578182fd5b82356001600160401b0381111561455f578283fd5b61456b85828601613eb0565b90969095509350505050565b600060208284031215614588578081fd5b5051919050565b600080604083850312156145a1578182fd5b8235915060208301356001600160401b038111156145bd578182fd5b6145c985828601613e57565b9150509250929050565b6000806000806000608086880312156145ea578283fd5b8535945060208601356001600160401b0380821115614607578485fd5b61461389838a01613e57565b95506040880135915080821115614628578485fd5b61463489838a01613e68565b9095509350606088013591508082111561464c578283fd5b5061465988828901613e57565b9150509295509295909350565b6000806000806060858703121561467b578182fd5b8435935060208501356001600160401b0380821115614698578384fd5b6146a488838901613e68565b909550935060408701359150808211156146bc578283fd5b506146c987828801613e57565b91505092959194509250565b6000808284036101a08112156146e9578283fd5b83359250610180601f19820112156146ff578182fd5b5061470a6080614e3d565b6147178560208601613eef565b81526147268560808601613eef565b60208201526147388560e08601613eef565b604082015261474b856101408601613eef565b6060820152809150509250929050565b60008060006060848603121561476f578081fd5b505081359360208301359350604090920135919050565b6000815180845260208085019450808401835b838110156147db578151515187865b60038110156147c5578251825291850191908501906001016147a8565b5050506060969096019590820190600101614799565b509495945050505050565b81835260006001600160fb1b038311156147fe578081fd5b6020830280836020870137939093016020019283525090919050565b60008151808452614832816020860160208601615006565b601f01601f19169290920160200192915050565b8051518260005b600381101561486c57825182526020928301929091019060010161484d565b5050505050565b60008351614885818460208801615006565b835190830190614899818360208801615006565b01949350505050565b600082516148b4818460208701615006565b723837b63cb3b7b72fb2b9ba30ba32973539b7b760691b920191825250601301919050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351614911816017850160208801615006565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614942816028840160208801615006565b01602801949350505050565b6001600160a01b038581168252841660208201526060604082018190528181018390526000908460808401835b8681101561499a5783838337908301848152918301919060010161497b565b5098975050505050505050565b6001600160a01b038481168252831660208201526060604082018190526000906139f190830184614786565b6001600160a01b0389811682528816602082015260c060408201819052600090614a00908301888a6147e6565b8281036060840152614a138187896147e6565b90508281036080840152614a288185876147e6565b83810360a09094019390935250815260200198975050505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614a799083018461481a565b9695505050505050565b6001600160a01b0383168152604060208201819052600090610d1690830184614786565b6001600160a01b03841681526040602082018190526000906139f190830184866147e6565b60208082526000906080830183820185845b6003811015614b4c57868403601f19018352813536899003601e19018112614b04578687fd5b880180356001600160401b03811115614b1b578788fd5b86810236038a1315614b2b578788fd5b614b3886828985016147e6565b955050509184019190840190600101614ade565b50919695505050505050565b6000602082526113d56020830184614786565b6000602082526113d5602083018461481a565b600060408252614b91604083018661481a565b82810360208401528381528385602083013781602085830101526020601f19601f860116820101915050949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252600c908201526b1b9bdd0818591a9858d95b9d60a21b604082015260600190565b6020808252818101527f63616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600c908201526b696e76616c6964206461746160a01b604082015260600190565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b83815260406020820181905281018290526000606080830185835b86811015614d8f57838284379183018481529190830190600101614d70565b5090979650505050505050565b60006101a082019050838252614db6602083018451614846565b6020830151614dc86080840182614846565b506040830151614ddb60e0840182614846565b506060830151614def610140840182614846565b509392505050565b6000808335601e19843603018112614e0d578283fd5b8301803591506001600160401b03821115614e26578283fd5b6020908101925081023603821315613ea957600080fd5b604051601f8201601f191681016001600160401b0381118282101715614e6557614e65615100565b604052919050565b60006001600160401b03821115614e8657614e86615100565b5060200290565b60008219821115614ea057614ea06150d4565b500190565b600082614eb457614eb46150ea565b500490565b80825b6001808611614ecb5750614ef6565b818704821115614edd57614edd6150d4565b80861615614eea57918102915b9490941c938002614ebc565b94509492505050565b60006113d560001960ff851684600082614f1b57506001610d19565b81614f2857506000610d19565b8160018114614f3e5760028114614f4857614f75565b6001915050610d19565b60ff841115614f5957614f596150d4565b6001841b915084821115614f6f57614f6f6150d4565b50610d19565b5060208310610133831016604e8410600b8410161715614fa8575081810a83811115614fa357614fa36150d4565b610d19565b614fb58484846001614eb9565b808604821115614fc757614fc76150d4565b02949350505050565b6000816000190483118215151615614fea57614fea6150d4565b500290565b600082821015615001576150016150d4565b500390565b60005b83811015615021578181015183820152602001615009565b83811115611c2c5750506000910152565b600081615041576150416150d4565b506000190190565b60028104600182168061505d57607f821691505b60208210811415612f5d57634e487b7160e01b600052602260045260246000fd5b60006001600160801b038083168181141561509b5761509b6150d4565b6001019392505050565b60006000198214156150b9576150b96150d4565b5060010190565b6000826150cf576150cf6150ea565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461331c57600080fd5b801515811461331c57600080fd5b6001600160e01b03198116811461331c57600080fdfe72bb9cd2f41a3eb637a87b61a3cb3e6bf6772f1a5774103c4fbec1f2038e34df00f52b0807fdece1f767ee6f74b46926674002b92e5176c0b1fbc1c6a045384aa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220f23a9092d6a47d07db2a7e54e656cd00a0cf9e2435a3bcbb62584e7103ccabfb64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102bb5760003560e01c80637ad237a011610182578063b88d4fde116100e9578063d5391393116100a2578063e5d7dbd71161007c578063e5d7dbd7146106f1578063e8a3d485146106f9578063e985e9c514610701578063fa83e33a1461073d576102bb565b8063d5391393146106a4578063d547741f146106cb578063da742228146106de576102bb565b8063b88d4fde14610616578063bc96832614610629578063c0ae401614610658578063c87b56dd1461066b578063cd17aa411461067e578063d3fec7cf14610691576102bb565b80639c0d90581161013b5780639c0d9058146105af578063a217fddf146105c2578063a22cb465146105ca578063a70c4709146105dd578063a91ee0dc146105f0578063a9266dde14610603576102bb565b80637ad237a0146105485780638bee92e61461055b5780638f3d9daa1461056e57806391d148541461058157806395d89b41146105945780639b64c4fc1461059c576102bb565b806336568abe116102265780635a09942f116101df5780635a09942f146104d25780635ab1bd53146104f25780636352211e146104fa5780636c7ecdff1461050d57806370a082311461052057806375b238fc14610533576102bb565b806336568abe1461044457806342842e0e146104575780634b808c461461046a5780634f558e791461048a57806355f804b31461049d578063572b6c05146104b0576102bb565b806321ab0c711161027857806321ab0c71146103b257806323b872dd146103c5578063248a9ca3146103d8578063282c51f3146103fb5780632f2ff15d14610422578063313ce56714610435576102bb565b806301ffc9a7146102c057806306fdde03146102e8578063081812fc146102fd578063095ea7b3146103285780630d363f0d1461033d578063150b7a021461037a575b600080fd5b6102d36102ce366004614500565b610750565b60405190151581526020015b60405180910390f35b6102f0610798565b6040516102df9190614b6b565b61031061030b3660046144c4565b61082b565b6040516001600160a01b0390911681526020016102df565b61033b61033636600461432a565b6108c5565b005b7ef52b0807fdece1f767ee6f74b46926674002b92e5176c0b1fbc1c6a045384b54600160801b900463ffffffff165b6040519081526020016102df565b610399610388366004614150565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016102df565b61036c6103c03660046144c4565b6109ed565b61033b6103d3366004614110565b6109f8565b61036c6103e63660046144c4565b60009081526065602052604090206001015490565b61036c7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b61033b6104303660046144dc565b610a30565b604051600081526020016102df565b61033b6104523660046144dc565b610a5d565b61033b610465366004614110565b610aeb565b61039961047836600461407f565b6325c0462360e11b9695505050505050565b6102d36104983660046144c4565b610b06565b61033b6104ab366004614538565b610b25565b6102d36104be366004613f6f565b60c9546001600160a01b0390811691161490565b6104e56104e036600461475b565b610c73565b6040516102df9190614b58565b610310610d20565b6103106105083660046144c4565b610d41565b61036c61051b3660046145d3565b610db8565b61036c61052e366004613f6f565b61117f565b61036c60008051602061519083398151915281565b61036c61055636600461427b565b611206565b6102d36105693660046146d5565b61133f565b6104e561057c36600461432a565b6113de565b6102d361058f3660046144dc565b611639565b6102f0611664565b61036c6105aa3660046144c4565b611673565b61036c6105bd366004614355565b611705565b61036c600081565b61033b6105d83660046142fd565b6118ea565b61033b6105eb366004614666565b6118fc565b61033b6105fe366004613f6f565b611aad565b61036c6106113660046144c4565b611bad565b61033b6106243660046141c0565b611bf3565b7ef52b0807fdece1f767ee6f74b46926674002b92e5176c0b1fbc1c6a045384b546001600160801b031661036c565b61036c61066636600461458f565b611c32565b6102f06106793660046144c4565b61200b565b61033b61068c366004613f6f565b6120e5565b61031061069f3660046144c4565b6121dd565b61036c7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61033b6106d93660046144dc565b6121f1565b61033b6106ec366004613f6f565b612219565b610310612271565b6102f0612287565b6102d361070f366004613f8b565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b61033b61074b366004613fc3565b6122da565b60006001600160e01b03198216630a85bd0160e11b148061078157506001600160e01b031982166317a2fd9160e21b145b80610790575061079082612433565b90505b919050565b6060609780546107a790615049565b80601f01602080910402602001604051908101604052809291908181526020018280546107d390615049565b80156108205780601f106107f557610100808354040283529160200191610820565b820191906000526020600020905b81548152906001019060200180831161080357829003601f168201915b505050505090505b90565b6000818152609960205260408120546001600160a01b03166108a95760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152609b60205260409020546001600160a01b031690565b60006108d082610d41565b9050806001600160a01b0316836001600160a01b0316141561093e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016108a0565b806001600160a01b031661095061244d565b6001600160a01b0316148061096c575061096c8161070f61244d565b6109de5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016108a0565b6109e8838361245c565b505050565b6000610790826124ca565b610a09610a0361244d565b826124f8565b610a255760405162461bcd60e51b81526004016108a090614c70565b6109e88383836125ef565b600082815260656020526040902060010154610a5381610a4e61244d565b61278f565b6109e883836127f3565b610a6561244d565b6001600160a01b0316816001600160a01b031614610add5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016108a0565b610ae7828261287a565b5050565b6109e883838360405180602001604052806000815250611bf3565b6000818152609960205260408120546001600160a01b03161515610790565b610b3f60008051602061519083398151915261058f61244d565b610b5b5760405162461bcd60e51b81526004016108a090614d32565b60006000805160206151708339815191526002018054610b7a90615049565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba690615049565b8015610bf35780601f10610bc857610100808354040283529160200191610bf3565b820191906000526020600020905b815481529060010190602001808311610bd657829003601f168201915b505050505090508282610c1160008051602061517083398151915290565b6002019190610c21929190613d08565b50610c2a61244d565b6001600160a01b03167fcad0ef056b20aa50414ef503ee13c75ff786ba9317d7f8a4379a9892310c9338828585604051610c6693929190614b7e565b60405180910390a2505050565b6060610c7e846128ff565b6040516308e3edc760e11b815260019091016004820152602481018490526044810183905273__$c8b13b5401e105a03ccb2d5c98950fab3b$__906311c7db8e9060640160006040518083038186803b158015610cda57600080fd5b505af4158015610cee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d169190810190614387565b90505b9392505050565b60006000805160206151508339815191525b546001600160a01b0316905090565b6000818152609960205260408120546001600160a01b0316806107905760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016108a0565b6000610dcb610dc561244d565b876124f8565b610de75760405162461bcd60e51b81526004016108a090614c3b565b600080516020615150833981519152546001600160a01b031680610e8d578315610e235760405162461bcd60e51b81526004016108a090614d0c565b6000610e2f8780614df7565b90501180610e4857506000610e448480614df7565b9050115b610e885760405162461bcd60e51b81526020600482015260116024820152706e6f7468696e6720746f2075706461746560781b60448201526064016108a0565b610efc565b6000610e998780614df7565b90501180610eb257506000610eae8480614df7565b9050115b80610ebc57508315155b610efc5760405162461bcd60e51b81526020600482015260116024820152706e6f7468696e6720746f2075706461746560781b60448201526064016108a0565b6000610f07886128ff565b9050610f1b81610f1561244d565b89612940565b610f308183610f2861244d565b878a8a612bb5565b604051632d10763960e11b815260018201600482015273__$c8b13b5401e105a03ccb2d5c98950fab3b$__90635a20ec729060240160206040518083038186803b158015610f7d57600080fd5b505af4158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb591906144a8565b15610ffb5760405162461bcd60e51b81526020600482015260166024820152756573746174652063616e6e6f7420626520656d70747960501b60448201526064016108a0565b6040516331884dd560e21b815260018201600482015273__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063c62137549060240160206040518083038186803b15801561104857600080fd5b505af415801561105c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108091906144a8565b61109c5760405162461bcd60e51b81526004016108a090614c15565b80546110a790612e90565b808255887f9d558f479216a061e3c0dd35693fdc4904a085e0ec5582272591dda3f9ab27c46110d461244d565b604051636429e7ff60e11b815260018601600482015273__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063c853cffe9060240160006040518083038186803b15801561112157600080fd5b505af4158015611135573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261115d9190810190614387565b60405161116b929190614a83565b60405180910390a354979650505050505050565b60006001600160a01b0382166111ea5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016108a0565b506001600160a01b03166000908152609a602052604090205490565b60006112347f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661058f61244d565b6112715760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b60448201526064016108a0565b600061127c85612ec3565b60405163286d30af60e21b815290915073__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063a1b4c2bc906112bd90600185019088908890600401614d55565b60006040518083038186803b1580156112d557600080fd5b505af41580156112e9573d6000803e3d6000fd5b5050505080600001547f8ba5d7096a6e37fd8a143e486dbc3dc12dc25159042fca9431af78475768d5d961131b61244d565b87878760405161132e949392919061494e565b60405180910390a254949350505050565b600061134a836128ff565b60405163f5fd439d60e01b815273__$c8b13b5401e105a03ccb2d5c98950fab3b$__9163f5fd439d9161138591600101908690600401614d9c565b60206040518083038186803b15801561139d57600080fd5b505af41580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d591906144a8565b90505b92915050565b606061140c7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84861058f61244d565b6114495760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b60448201526064016108a0565b61145383836124f8565b61146f5760405162461bcd60e51b81526004016108a090614c3b565b600061147a836128ff565b604051636429e7ff60e11b815260018201600482015290915073__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063c853cffe9060240160006040518083038186803b1580156114ca57600080fd5b505af41580156114de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115069190810190614387565b600080516020615150833981519152549092506001600160a01b031680156115e55760405163ad51dacb60e01b81526001600160a01b0382169063ad51dacb90611554908690600401614b58565b60206040518083038186803b15801561156c57600080fd5b505afa158015611580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a491906144a8565b156115e55760405162461bcd60e51b81526020600482015260116024820152701b5d5cdd081d5b9b1a5b9ac8199a5c9cdd607a1b60448201526064016108a0565b6115ee82612f63565b837fa95f078511bfff5e18ae1876d396070153217e28e9939b24ee2b407bea5c93da61161861244d565b8786604051611629939291906149a7565b60405180910390a2505092915050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060609880546107a790615049565b600061167e826128ff565b60405163158eeb9f60e31b81526001909101600482015273__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063ac775cf8906024015b60206040518083038186803b1580156116cd57600080fd5b505af41580156116e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107909190614577565b60008061171861171361244d565b612ec3565b905060006117268480614df7565b9050116117665760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd1a1a5b99c81d1bc818591960921b60448201526064016108a0565b6117788161177261244d565b85612940565b6040516331884dd560e21b815260018201600482015273__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063c62137549060240160206040518083038186803b1580156117c557600080fd5b505af41580156117d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fd91906144a8565b6118195760405162461bcd60e51b81526004016108a090614c15565b80547f1fdc5a6efe117110d3a653439a0b1fedc9258a17c8b2477c5c7586accb26d28961184461244d565b604051636429e7ff60e11b815260018501600482015273__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063c853cffe9060240160006040518083038186803b15801561189157600080fd5b505af41580156118a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118cd9190810190614387565b6040516118db929190614a83565b60405180910390a25492915050565b610ae76118f561244d565b838361303a565b61190d61190761244d565b856124f8565b6119295760405162461bcd60e51b81526004016108a090614c3b565b6000611934856128ff565b600080516020615150833981519152549091506001600160a01b031683158061196557506001600160a01b03811615155b6119815760405162461bcd60e51b81526004016108a090614d0c565b611996828261198e61244d565b868989612bb5565b604051632d10763960e11b815260018301600482015273__$c8b13b5401e105a03ccb2d5c98950fab3b$__90635a20ec729060240160206040518083038186803b1580156119e357600080fd5b505af41580156119f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1b91906144a8565b611a575760405162461bcd60e51b815260206004820152600d60248201526c6d6170206e6f7420656d70747960981b60448201526064016108a0565b611a6082612f63565b857fc16ce9c4d0002876fc4c9679fc409385f51b8d3659a3b307d9a35931081bcc3f611a8a61244d565b6040516001600160a01b03909116815260200160405180910390a2505050505050565b611ac760008051602061519083398151915261058f61244d565b611ae35760405162461bcd60e51b81526004016108a090614d32565b6001600160a01b038116611b2b5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016108a0565b60008051602061515083398151915280546001600160a01b038381166001600160a01b031983161790925516611b5f61244d565b604080516001600160a01b038481168252858116602083015292909216917f814a095c46e008854bbfd092e4981c02e2e623d3ba415d78ff58b5900956c16491015b60405180910390a25050565b6000611bb8826128ff565b604051630f858a2960e31b81526001909101600482015273__$c8b13b5401e105a03ccb2d5c98950fab3b$__90637c2c5148906024016116b5565b611c04611bfe61244d565b836124f8565b611c205760405162461bcd60e51b81526004016108a090614c70565b611c2c84848484613109565b50505050565b6000611c45611c3f61244d565b846124f8565b611c615760405162461bcd60e51b81526004016108a090614c3b565b6000611c6d8380614df7565b905011611cad5760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd1a1a5b99c81d1bc818591960921b60448201526064016108a0565b6000611cb8846128ff565b9050611cc48380614df7565b905060011415611e7f5773__$c8b13b5401e105a03ccb2d5c98950fab3b$__638addfdc460018301611cf96020870187614df7565b6000818110611d1857634e487b7160e01b600052603260045260246000fd5b9050602002013586600260038110611d4057634e487b7160e01b600052603260045260246000fd5b602002810190611d509190614df7565b6000818110611d6f57634e487b7160e01b600052603260045260246000fd5b9050602002013587600060038110611d9757634e487b7160e01b600052603260045260246000fd5b602002810190611da79190614df7565b6000818110611dc657634e487b7160e01b600052603260045260246000fd5b905060200201356040518563ffffffff1660e01b8152600401611e02949392919093845260208401929092526040830152606082015260800190565b60206040518083038186803b158015611e1a57600080fd5b505af4158015611e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5291906144a8565b611e6e5760405162461bcd60e51b81526004016108a090614c15565b611e7a8161177261244d565b611f2c565b611e8b8161177261244d565b6040516331884dd560e21b815260018201600482015273__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063c62137549060240160206040518083038186803b158015611ed857600080fd5b505af4158015611eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1091906144a8565b611f2c5760405162461bcd60e51b81526004016108a090614c15565b8054611f3790612e90565b808255847f412391f5f3bd0705db9b0ab9939daa3ba27c2e72ff1f3e171425cc00406ac58a611f6461244d565b604051636429e7ff60e11b815260018601600482015273__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063c853cffe9060240160006040518083038186803b158015611fb157600080fd5b505af4158015611fc5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611fed9190810190614387565b604051611ffb929190614a83565b60405180910390a3549392505050565b6000818152609960205260409020546060906001600160a01b031661208a5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016108a0565b600061209461313c565b905060008151116120b45760405180602001604052806000815250610d19565b806120be8461315b565b6040516020016120cf929190614873565b6040516020818303038152906040529392505050565b6120ff60008051602061519083398151915261058f61244d565b61211b5760405162461bcd60e51b81526004016108a090614d32565b6001600160a01b0381166121635760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016108a0565b60008051602061517083398151915280546001600160a01b038381166001600160a01b03198316179092551661219761244d565b604080516001600160a01b038481168252858116602083015292909216917f43348694b30dafadd67997415d04baa9eed18579262b5bd26256362b89b575c29101611ba1565b60006107906121eb836128ff565b54610d41565b60008281526065602052604090206001015461220f81610a4e61244d565b6109e8838361287a565b61223360008051602061519083398151915261058f61244d565b61224f5760405162461bcd60e51b81526004016108a090614d32565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b6000600080516020615170833981519152610d32565b6060600061229361313c565b905060008151116122b357604051806020016040528060008152506122d4565b806040516020016122c491906148a2565b6040516020818303038152906040525b91505090565b600054610100900460ff166122f55760005460ff16156122f9565b303b155b61235c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108a0565b600054610100900460ff16158015612387576000805460ff1961ff0019909116610100171660011790555b61239089613275565b61240385858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152925087915086908190840183828082843760009201919091525061329c92505050565b61240c886132ea565b612416878761331f565b8015612428576000805461ff00191690555b505050505050505050565b600061243e826133b4565b806107905750610790826133ef565b6000612457613424565b905090565b6000818152609b6020526040902080546001600160a01b0319166001600160a01b038416908117909155819061249182610d41565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006124d860606002614eff565b6124e460606002614eff565b6124ee9084614ea5565b6107909190614fd0565b6000818152609960205260408120546001600160a01b03166125715760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016108a0565b600061257c83610d41565b9050806001600160a01b0316846001600160a01b031614806125b75750836001600160a01b03166125ac8461082b565b6001600160a01b0316145b806125e757506001600160a01b038082166000908152609c602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661260282610d41565b6001600160a01b03161461266a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016108a0565b6001600160a01b0382166126cc5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016108a0565b6126d760008261245c565b6001600160a01b0383166000908152609a60205260408120805460019290612700908490614fef565b90915550506001600160a01b0382166000908152609a6020526040812080546001929061272e908490614e8d565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6127998282611639565b610ae7576127b1816001600160a01b03166014613450565b6127bc836020613450565b6040516020016127cd9291906148d9565b60408051601f198184030181529082905262461bcd60e51b82526108a091600401614b6b565b6127fd8282611639565b610ae75760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561283661244d565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6128848282611639565b15610ae75760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191690556128bb61244d565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60007ef52b0807fdece1f767ee6f74b46926674002b92e5176c0b1fbc1c6a045384d8161292b846124ca565b81526020019081526020016000209050919050565b600061294c8280614df7565b915061295d90506020830183614df7565b90508114801561297a57506129756040830183614df7565b905081145b6129965760405162461bcd60e51b81526004016108a090614d0c565b60005b81811015612b155773__$c8b13b5401e105a03ccb2d5c98950fab3b$__63f9b9fec6600187016129cc6020870187614df7565b858181106129ea57634e487b7160e01b600052603260045260246000fd5b9050602002013586600260038110612a1257634e487b7160e01b600052603260045260246000fd5b602002810190612a229190614df7565b86818110612a4057634e487b7160e01b600052603260045260246000fd5b9050602002013587600060038110612a6857634e487b7160e01b600052603260045260246000fd5b602002810190612a789190614df7565b87818110612a9657634e487b7160e01b600052603260045260246000fd5b905060200201356040518563ffffffff1660e01b8152600401612ad2949392919093845260208401929092526040830152606082015260800190565b60006040518083038186803b158015612aea57600080fd5b505af4158015612afe573d6000803e3d6000fd5b505050508080612b0d906150a5565b915050612999565b50600080516020615170833981519152546001600160a01b031663eaa5e0678430612b408680614df7565b612b4d6020890189614df7565b612b5a60408b018b614df7565b6040518963ffffffff1660e01b8152600401612b7d9897969594939291906149d3565b600060405180830381600087803b158015612b9757600080fd5b505af1158015612bab573d6000803e3d6000fd5b5050505050505050565b6000612bc18480614df7565b9150612bd290506020850185614df7565b905081148015612bef5750612bea6040850185614df7565b905081145b612c2f5760405162461bcd60e51b8152602060048201526011602482015270696e76616c69642071756164206461746160781b60448201526064016108a0565b6001600160a01b03861615612d64578115612ca757604051630910168560e11b81526001600160a01b038716906312202d0a90612c7490889087908790600401614aa7565b600060405180830381600087803b158015612c8e57600080fd5b505af1158015612ca2573d6000803e3d6000fd5b505050505b604051633cbe399760e01b81526001600160a01b03871690633cbe399790612cd3908790600401614acc565b60206040518083038186803b158015612ceb57600080fd5b505afa158015612cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2391906144a8565b15612d645760405162461bcd60e51b81526020600482015260116024820152701b5d5cdd081d5b9b1a5b9ac8199a5c9cdd607a1b60448201526064016108a0565b600080516020615170833981519152546001600160a01b03166001880160005b83811015612e8457612e72888385612d9c8b80614df7565b86818110612dba57634e487b7160e01b600052603260045260246000fd5b905060200201358b600160038110612de257634e487b7160e01b600052603260045260246000fd5b602002810190612df29190614df7565b87818110612e1057634e487b7160e01b600052603260045260246000fd5b905060200201358c600260038110612e3857634e487b7160e01b600052603260045260246000fd5b602002810190612e489190614df7565b88818110612e6657634e487b7160e01b600052603260045260246000fd5b90506020020135613631565b80612e7c816150a5565b915050612d84565b50505050505050505050565b600080612e9c83610d41565b9050612ea783613932565b612eb0836139cd565b9250612ebc81846139fa565b5090919050565b600080612f436000805160206151708339815191526001018054600090612ef2906001600160801b031661507e565b91906101000a8154816001600160801b0302191690836001600160801b031602179055612f2a60008051602061517083398151915290565b600190810154600160801b900463ffffffff1690613b3c565b9050612f4e816128ff565b8181559150612f5d83826139fa565b50919050565b604051632c87615360e11b815260018201600482015273__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063590ec2a69060240160006040518083038186803b158015612fb057600080fd5b505af4158015612fc4573d6000803e3d6000fd5b5050506001820190506000612fd98282613d8c565b505080547ef52b0807fdece1f767ee6f74b46926674002b92e5176c0b1fbc1c6a045384d6000613008836124ca565b81526020810191909152604001600090812081815590600182018161302d8282613d8c565b50505050610ae781613932565b816001600160a01b0316836001600160a01b0316141561309c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016108a0565b6001600160a01b038381166000818152609c6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6131148484846125ef565b61312084848484613b9c565b611c2c5760405162461bcd60e51b81526004016108a090614bc3565b606060008051602061517083398151915260020180546107a790615049565b60608161318057506040805180820190915260018152600360fc1b6020820152610793565b8160005b81156131aa5780613194816150a5565b91506131a39050600a83614ea5565b9150613184565b6000816001600160401b038111156131d257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156131fc576020820181803683370190505b5090505b84156125e757613211600183614fef565b915061321e600a866150c0565b613229906030614e8d565b60f81b81838151811061324c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061326e600a86614ea5565b9450613200565b600054610100900460ff1661224f5760405162461bcd60e51b81526004016108a090614cc1565b600054610100900460ff166132c35760405162461bcd60e51b81526004016108a090614cc1565b81516132d6906097906020850190613dad565b5080516109e8906098906020840190613dad565b600054610100900460ff166133115760405162461bcd60e51b81526004016108a090614cc1565b61331c600082613cb0565b50565b600054610100900460ff166133465760405162461bcd60e51b81526004016108a090614cc1565b60008051602061517083398151915280546001600160a01b0319166001600160a01b0393909316929092179091557ef52b0807fdece1f767ee6f74b46926674002b92e5176c0b1fbc1c6a045384b805463ffffffff60801b191661ffff909216600160801b02919091179055565b60006001600160e01b031982166380ac58cd60e01b148061243e57506001600160e01b03198216635b5e139f60e01b14806107905750610790825b60006001600160e01b03198216637965db0b60e01b148061079057506301ffc9a760e01b6001600160e01b0319831614610790565b60c9546000906001600160a01b0316331415613449575060131936013560601c610828565b5033610828565b6060600061345f836002614fd0565b61346a906002614e8d565b6001600160401b0381111561348f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156134b9576020820181803683370190505b509050600360fc1b816000815181106134e257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061351f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000613543846002614fd0565b61354e906001614e8d565b90505b60018111156135e2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061359057634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106135b457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936135db81615032565b9050613551565b5083156113d55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108a0565b604051630a2a008760e31b81526004810186905260248101839052604481018290526064810184905273__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063515004389060840160206040518083038186803b15801561369157600080fd5b505af41580156136a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c991906144a8565b6137045760405162461bcd60e51b815260206004820152600c60248201526b71756164206d697373696e6760a01b60448201526064016108a0565b60405163e8485b0760e01b81526004810186905260248101839052604481018290526064810184905273__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063e8485b079060840160206040518083038186803b15801561376457600080fd5b505af4158015613778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061379c91906144a8565b506040516355064d8560e01b81526004810184905260248101839052604481018290526001600160a01b038516906355064d859060640160206040518083038186803b1580156137eb57600080fd5b505afa1580156137ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061382391906144a8565b6138aa57604051636e1e3bbf60e01b81526001600160a01b03878116600483015260248201859052604482018490526064820183905260a06084830152600060a4830152851690636e1e3bbf9060c401600060405180830381600087803b15801561388d57600080fd5b505af11580156138a1573d6000803e3d6000fd5b5050505061392a565b604051631c5d982d60e11b81523060048201526001600160a01b03878116602483015260448201859052606482018490526084820183905260c060a4830152600060c48301528516906338bb305a9060e401600060405180830381600087803b15801561391657600080fd5b505af1158015612e84573d6000803e3d6000fd5b505050505050565b600061393d82610d41565b905061394a60008361245c565b6001600160a01b0381166000908152609a60205260408120805460019290613973908490614fef565b909155505060008281526099602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000806000806139dc85613cba565b919450925060010190506139f1838383613b3c565b95945050505050565b6001600160a01b038216613a505760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108a0565b6000818152609960205260409020546001600160a01b031615613ab55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108a0565b6001600160a01b0382166000908152609a60205260408120805460019290613ade908490614e8d565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006bffffffffffffffffffffffff8216613b5960606002614eff565b613b699063ffffffff8616614fd0565b613b7560806002614eff565b613b88906001600160801b038816614fd0565b613b929190614e8d565b610d169190614e8d565b60006001600160a01b0384163b15613ca557836001600160a01b031663150b7a02613bc561244d565b8786866040518563ffffffff1660e01b8152600401613be79493929190614a46565b602060405180830381600087803b158015613c0157600080fd5b505af1925050508015613c31575060408051601f3d908101601f19168201909252613c2e9181019061451c565b60015b613c8b573d808015613c5f576040519150601f19603f3d011682016040523d82523d6000602084013e613c64565b606091505b508051613c835760405162461bcd60e51b81526004016108a090614bc3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506125e7565b506001949350505050565b610ae782826127f3565b60008080613cca60806002614eff565b613cd49085614ea5565b613ce060606002614eff565b613cea9086614ea5565b6001600160401b03919091169561ffff918216959091169350915050565b828054613d1490615049565b90600052602060002090601f016020900481019282613d365760008555613d7c565b82601f10613d4f5782800160ff19823516178555613d7c565b82800160010185558215613d7c579182015b82811115613d7c578235825591602001919060010190613d61565b50613d88929150613e21565b5090565b508054600082556003029060005260206000209081019061331c9190613e36565b828054613db990615049565b90600052602060002090601f016020900481019282613ddb5760008555613d7c565b82601f10613df457805160ff1916838001178555613d7c565b82800160010185558215613d7c579182015b82811115613d7c578251825591602001919060010190613e06565b5b80821115613d885760008155600101613e22565b80821115613d88576000808255600182018190556002820155600301613e36565b80606081018310156113d857600080fd5b60008083601f840112613e79578182fd5b5081356001600160401b03811115613e8f578182fd5b6020830191508360208083028501011115613ea957600080fd5b9250929050565b60008083601f840112613ec1578182fd5b5081356001600160401b03811115613ed7578182fd5b602083019150836020828501011115613ea957600080fd5b600060608284031215613f00578081fd5b6020613f0b81614e3d565b9150613f1681614e3d565b84601f850112613f2557600080fd5b613f2f6060614e3d565b808587606088011115613f4157600080fd5b60005b6003811015613f6157813584529285019290850190600101613f44565b505082525082525092915050565b600060208284031215613f80578081fd5b81356113d581615116565b60008060408385031215613f9d578081fd5b8235613fa881615116565b91506020830135613fb881615116565b809150509250929050565b60008060008060008060008060c0898b031215613fde578384fd5b8835613fe981615116565b97506020890135613ff981615116565b9650604089013561400981615116565b9550606089013561ffff8116811461401f578485fd5b945060808901356001600160401b038082111561403a578586fd5b6140468c838d01613eb0565b909650945060a08b013591508082111561405e578384fd5b5061406b8b828c01613eb0565b999c989b5096995094979396929594505050565b60008060008060008060808789031215614097578384fd5b86356140a281615116565b955060208701356140b281615116565b945060408701356001600160401b03808211156140cd578586fd5b6140d98a838b01613e68565b909650945060608901359150808211156140f1578384fd5b506140fe89828a01613eb0565b979a9699509497509295939492505050565b600080600060608486031215614124578081fd5b833561412f81615116565b9250602084013561413f81615116565b929592945050506040919091013590565b600080600080600060808688031215614167578283fd5b853561417281615116565b9450602086013561418281615116565b93506040860135925060608601356001600160401b038111156141a3578182fd5b6141af88828901613eb0565b969995985093965092949392505050565b600080600080608085870312156141d5578182fd5b84356141e081615116565b93506020858101356141f181615116565b93506040860135925060608601356001600160401b0380821115614213578384fd5b818801915088601f830112614226578384fd5b81358181111561423857614238615100565b61424a601f8201601f19168501614e3d565b9150808252898482850101111561425f578485fd5b8084840185840137810190920192909252939692955090935050565b60008060006040848603121561428f578081fd5b833561429a81615116565b925060208401356001600160401b03808211156142b5578283fd5b818601915086601f8301126142c8578283fd5b8135818111156142d6578384fd5b8760206060830285010111156142ea578384fd5b6020830194508093505050509250925092565b6000806040838503121561430f578182fd5b823561431a81615116565b91506020830135613fb88161512b565b6000806040838503121561433c578182fd5b823561434781615116565b946020939093013593505050565b600060208284031215614366578081fd5b81356001600160401b0381111561437b578182fd5b6125e784828501613e57565b60006020808385031215614399578182fd5b82516001600160401b03808211156143af578384fd5b818501915085601f8301126143c2578384fd5b8151818111156143d4576143d4615100565b6143e18485830201614e3d565b81815284810192508385016060808402860187018a1015614400578788fd5b8795505b8386101561449a5780828b03121561441a578788fd5b61442387614e3d565b61442c88614e3d565b8b601f85011261443a57898afd5b61444c6144476003614e6d565b614e3d565b80858587018f81111561445d578d8efd5b8d5b600381101561447c5782518552938d0193918d019160010161445f565b50918452509183525090865260019690960195948701949150614404565b509098975050505050505050565b6000602082840312156144b9578081fd5b81516113d58161512b565b6000602082840312156144d5578081fd5b5035919050565b600080604083850312156144ee578182fd5b823591506020830135613fb881615116565b600060208284031215614511578081fd5b81356113d581615139565b60006020828403121561452d578081fd5b81516113d581615139565b6000806020838503121561454a578182fd5b82356001600160401b0381111561455f578283fd5b61456b85828601613eb0565b90969095509350505050565b600060208284031215614588578081fd5b5051919050565b600080604083850312156145a1578182fd5b8235915060208301356001600160401b038111156145bd578182fd5b6145c985828601613e57565b9150509250929050565b6000806000806000608086880312156145ea578283fd5b8535945060208601356001600160401b0380821115614607578485fd5b61461389838a01613e57565b95506040880135915080821115614628578485fd5b61463489838a01613e68565b9095509350606088013591508082111561464c578283fd5b5061465988828901613e57565b9150509295509295909350565b6000806000806060858703121561467b578182fd5b8435935060208501356001600160401b0380821115614698578384fd5b6146a488838901613e68565b909550935060408701359150808211156146bc578283fd5b506146c987828801613e57565b91505092959194509250565b6000808284036101a08112156146e9578283fd5b83359250610180601f19820112156146ff578182fd5b5061470a6080614e3d565b6147178560208601613eef565b81526147268560808601613eef565b60208201526147388560e08601613eef565b604082015261474b856101408601613eef565b6060820152809150509250929050565b60008060006060848603121561476f578081fd5b505081359360208301359350604090920135919050565b6000815180845260208085019450808401835b838110156147db578151515187865b60038110156147c5578251825291850191908501906001016147a8565b5050506060969096019590820190600101614799565b509495945050505050565b81835260006001600160fb1b038311156147fe578081fd5b6020830280836020870137939093016020019283525090919050565b60008151808452614832816020860160208601615006565b601f01601f19169290920160200192915050565b8051518260005b600381101561486c57825182526020928301929091019060010161484d565b5050505050565b60008351614885818460208801615006565b835190830190614899818360208801615006565b01949350505050565b600082516148b4818460208701615006565b723837b63cb3b7b72fb2b9ba30ba32973539b7b760691b920191825250601301919050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351614911816017850160208801615006565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614942816028840160208801615006565b01602801949350505050565b6001600160a01b038581168252841660208201526060604082018190528181018390526000908460808401835b8681101561499a5783838337908301848152918301919060010161497b565b5098975050505050505050565b6001600160a01b038481168252831660208201526060604082018190526000906139f190830184614786565b6001600160a01b0389811682528816602082015260c060408201819052600090614a00908301888a6147e6565b8281036060840152614a138187896147e6565b90508281036080840152614a288185876147e6565b83810360a09094019390935250815260200198975050505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614a799083018461481a565b9695505050505050565b6001600160a01b0383168152604060208201819052600090610d1690830184614786565b6001600160a01b03841681526040602082018190526000906139f190830184866147e6565b60208082526000906080830183820185845b6003811015614b4c57868403601f19018352813536899003601e19018112614b04578687fd5b880180356001600160401b03811115614b1b578788fd5b86810236038a1315614b2b578788fd5b614b3886828985016147e6565b955050509184019190840190600101614ade565b50919695505050505050565b6000602082526113d56020830184614786565b6000602082526113d5602083018461481a565b600060408252614b91604083018661481a565b82810360208401528381528385602083013781602085830101526020601f19601f860116820101915050949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252600c908201526b1b9bdd0818591a9858d95b9d60a21b604082015260600190565b6020808252818101527f63616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600c908201526b696e76616c6964206461746160a01b604082015260600190565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b83815260406020820181905281018290526000606080830185835b86811015614d8f57838284379183018481529190830190600101614d70565b5090979650505050505050565b60006101a082019050838252614db6602083018451614846565b6020830151614dc86080840182614846565b506040830151614ddb60e0840182614846565b506060830151614def610140840182614846565b509392505050565b6000808335601e19843603018112614e0d578283fd5b8301803591506001600160401b03821115614e26578283fd5b6020908101925081023603821315613ea957600080fd5b604051601f8201601f191681016001600160401b0381118282101715614e6557614e65615100565b604052919050565b60006001600160401b03821115614e8657614e86615100565b5060200290565b60008219821115614ea057614ea06150d4565b500190565b600082614eb457614eb46150ea565b500490565b80825b6001808611614ecb5750614ef6565b818704821115614edd57614edd6150d4565b80861615614eea57918102915b9490941c938002614ebc565b94509492505050565b60006113d560001960ff851684600082614f1b57506001610d19565b81614f2857506000610d19565b8160018114614f3e5760028114614f4857614f75565b6001915050610d19565b60ff841115614f5957614f596150d4565b6001841b915084821115614f6f57614f6f6150d4565b50610d19565b5060208310610133831016604e8410600b8410161715614fa8575081810a83811115614fa357614fa36150d4565b610d19565b614fb58484846001614eb9565b808604821115614fc757614fc76150d4565b02949350505050565b6000816000190483118215151615614fea57614fea6150d4565b500290565b600082821015615001576150016150d4565b500390565b60005b83811015615021578181015183820152602001615009565b83811115611c2c5750506000910152565b600081615041576150416150d4565b506000190190565b60028104600182168061505d57607f821691505b60208210811415612f5d57634e487b7160e01b600052602260045260246000fd5b60006001600160801b038083168181141561509b5761509b6150d4565b6001019392505050565b60006000198214156150b9576150b96150d4565b5060010190565b6000826150cf576150cf6150ea565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461331c57600080fd5b801515811461331c57600080fd5b6001600160e01b03198116811461331c57600080fdfe72bb9cd2f41a3eb637a87b61a3cb3e6bf6772f1a5774103c4fbec1f2038e34df00f52b0807fdece1f767ee6f74b46926674002b92e5176c0b1fbc1c6a045384aa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220f23a9092d6a47d07db2a7e54e656cd00a0cf9e2435a3bcbb62584e7103ccabfb64736f6c63430008020033",
  "libraries": {
    "MapLib": "0xAbA89821c0eeBBe019b895e2c7A3b853DCB884c8"
  },
  "devdoc": {
    "events": {
      "EstateRegistryChanged(address,address,address)": {
        "details": "Emitted when the registry is changed",
        "params": {
          "newRegistry": "new address of the registry",
          "oldRegistry": "old address of the registry",
          "operator": "The msg sender"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addLand(uint256,uint256[][3])": {
        "params": {
          "landToAdd": "The set of quads to add.",
          "oldId": "the estate id that will be updated"
        },
        "returns": {
          "_0": "estateId the new estate Id"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256,uint256[],uint256[][3])": {
        "details": "to be able to remove lands they must be completely unlinked from any experience (in the registry)to be able to burn an estate it must be empty",
        "params": {
          "estateId": "the estate id that will be updated",
          "expToUnlink": "experiences to unlink",
          "landToRemove": "The set of quads to remove."
        }
      },
      "burnEstate(address,uint256)": {
        "details": "to be able to bridge an estate all the lands must be unlinked (we don't have a registry on L1)",
        "params": {
          "estateId": "the id of the estate token",
          "from": "user that is trying to use the bridge"
        },
        "returns": {
          "tiles": "the list of tiles (aka lands) to add to the estate"
        }
      },
      "contain(uint256,(((uint256[3])),((uint256[3])),((uint256[3])),((uint256[3]))))": {
        "params": {
          "estateId": "the estate id",
          "s": "displaced template"
        },
        "returns": {
          "_0": "true if the estate contain all the lands of the displaced template"
        }
      },
      "contractURI()": {
        "details": "See https://docs.opensea.io/docs/contract-level-metadata",
        "returns": {
          "_0": "the metadata url for the whole contract"
        }
      },
      "create(uint256[][3])": {
        "params": {
          "landToAdd": "The set of quads to add."
        },
        "returns": {
          "estateId": "the estate Id created"
        }
      },
      "decimals()": {
        "details": "Returns the decimals places of the token, for ERC721 it is always zero.",
        "returns": {
          "_0": ""
        }
      },
      "exists(uint256)": {
        "details": "Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.Tokens start existing when they are minted (`mint`), and stop existing when they are burned (`burn`)."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getChainIndex()": {
        "returns": {
          "_0": "chain index"
        }
      },
      "getLandAt(uint256,uint256,uint256)": {
        "params": {
          "estateId": "the estate id",
          "limit": "amount of entries to get (pagination)",
          "offset": "an amount of entries to skip in the array (pagination)"
        },
        "returns": {
          "_0": "an array of tiles describing the map of lands"
        }
      },
      "getLandCount(uint256)": {
        "params": {
          "estateId": "the estate id"
        },
        "returns": {
          "_0": "the amount of lands inside the estate"
        }
      },
      "getLandLength(uint256)": {
        "params": {
          "estateId": "the estate id"
        },
        "returns": {
          "_0": "the length of the tile map"
        }
      },
      "getLandToken()": {
        "returns": {
          "_0": "land token contract address"
        }
      },
      "getNextId()": {
        "returns": {
          "_0": "next id"
        }
      },
      "getOwnerOfStorage(uint256)": {
        "params": {
          "storageId": "the storage id for an estate"
        },
        "returns": {
          "_0": "owner address"
        }
      },
      "getRegistry()": {
        "returns": {
          "_0": "registry the registry contract address"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getStorageId(uint256)": {
        "params": {
          "estateId": "the estate id"
        },
        "returns": {
          "_0": "the storage Id"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initV1(address,address,address,uint16,string,string)": {
        "params": {
          "admin": "initial admin role that can grant or revoke other roles",
          "chainIndex_": "the chain index for example: 0:mainnet, 1:polygon, etc",
          "landToken_": "the address of the land token contract",
          "name_": "name of the token",
          "symbol_": "symbol of the token",
          "trustedForwarder": "address of the meta tx trustedForwarder"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintEstate(address,((uint256[3]))[])": {
        "params": {
          "tiles": "the list of tiles (aka lands) to add to the estate",
          "to": "user that will get the new minted Estate"
        },
        "returns": {
          "_0": "the estate Id created"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "params": {
          "baseUri": "the base uri of the metadata url"
        }
      },
      "setLandToken(address)": {
        "params": {
          "landToken": "the new address of the land contract"
        }
      },
      "setRegistry(address)": {
        "params": {
          "registry": "the registry contract address"
        }
      },
      "setTrustedForwarder(address)": {
        "params": {
          "trustedForwarder": "address of the meta tx trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "The id of the interface."
        },
        "returns": {
          "_0": "Whether the interface is supported."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "update(uint256,uint256[][3],uint256[],uint256[][3])": {
        "details": "to be able to remove lands they must be completely unlinked from any experience (in the registry)",
        "params": {
          "expToUnlink": "experiences to unlink",
          "landToAdd": "The set of quads to add.",
          "landToRemove": "The set of quads to remove.",
          "oldId": "the estate id that will be updated"
        },
        "returns": {
          "_0": "estateId the new estate Id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLand(uint256,uint256[][3])": {
        "notice": "Add the given quads (aka lands) to an Estate."
      },
      "burn(uint256,uint256[],uint256[][3])": {
        "notice": "burn an estate"
      },
      "burnEstate(address,uint256)": {
        "notice": "completely burn an estate (Used by the bridge)"
      },
      "contain(uint256,(((uint256[3])),((uint256[3])),((uint256[3])),((uint256[3]))))": {
        "notice": "check if the estate contains certain displaced template (used by the registry)"
      },
      "create(uint256[][3])": {
        "notice": "Create a new estate token adding the given quads (aka lands)."
      },
      "decimals()": {
        "notice": "Implement an ERC20 metadata method so it is easier to import the token into metamask"
      },
      "exists(uint256)": {
        "notice": "Returns whether `tokenId` exists."
      },
      "getChainIndex()": {
        "notice": "return the chain index"
      },
      "getLandAt(uint256,uint256,uint256)": {
        "notice": "return an array of tiles describing the map of lands for a given estate"
      },
      "getLandCount(uint256)": {
        "notice": "return the amount of lands inside the estate"
      },
      "getLandLength(uint256)": {
        "notice": "return the amount of tiles that describe the land map inside a given estate"
      },
      "getLandToken()": {
        "notice": "return the address of the land token contract"
      },
      "getNextId()": {
        "notice": "return the id of the next estate token"
      },
      "getOwnerOfStorage(uint256)": {
        "notice": "return owner of the estateId ignoring version rotations (used by the registry)"
      },
      "getRegistry()": {
        "notice": "get the registry contract address"
      },
      "getStorageId(uint256)": {
        "notice": "given and estateId return the part that doesn't change when the version is incremented"
      },
      "initV1(address,address,address,uint16,string,string)": {
        "notice": "initialization"
      },
      "mintEstate(address,((uint256[3]))[])": {
        "notice": "create a new estate from scratch (Used by the bridge)"
      },
      "onERC721BatchReceived(address,address,uint256[],bytes)": {
        "notice": "this is necessary to be able to receive land"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "this is necessary to be able to receive land"
      },
      "setBaseURI(string)": {
        "notice": "change the base uri of the metadata url"
      },
      "setLandToken(address)": {
        "notice": "change the address of the land contract"
      },
      "setRegistry(address)": {
        "notice": "set the registry contract address"
      },
      "setTrustedForwarder(address)": {
        "notice": "set the trusted forwarder (used by the admin in case of misconfiguration)"
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface."
      },
      "update(uint256,uint256[][3],uint256[],uint256[][3])": {
        "notice": "update an estate adding and removing lands, and unlinking experiences in one step"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7568,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7571,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9533,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10321,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7074,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)7069_storage)"
      },
      {
        "astId": 7361,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7855,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "_name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 7857,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "_symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 7861,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "_owners",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7865,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "_balances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7869,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7875,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8686,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 28685,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 28774,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 42056,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "__preGap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 43003,
        "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
        "label": "__posGap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)7069_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)7069_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)7069_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 7066,
            "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7068,
            "contract": "src/solc_0.8/polygon/child/estate/PolygonEstateTokenV1.sol:PolygonEstateTokenV1",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}