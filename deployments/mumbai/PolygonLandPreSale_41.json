{
  "address": "0xC39e9160d307535fdF52C02de26d8735F5508C5C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "landAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sandContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialMetaTx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "initialWalletAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "initialSigningWallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialMaxCommissionRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "estate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeDistributor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authValidator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topCornerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        }
      ],
      "name": "LandQuadPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxCommissionRate",
          "type": "uint256"
        }
      ],
      "name": "MaxCommissionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "MetaTransactionProcessor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "NewReceivingWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commissionRate",
          "type": "uint256"
        }
      ],
      "name": "ReferralUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newSigningWallet",
          "type": "address"
        }
      ],
      "name": "SigningWalletUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reserved",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "info",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "assetIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "referral",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "buyLandWithSand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "referral",
          "type": "bytes"
        }
      ],
      "name": "decodeReferral",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "disableWallet",
          "type": "address"
        }
      ],
      "name": "disablePreviousSigningWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExpiryTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxCommissionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSigningWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMetaTransactionProcessor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commissionRate",
          "type": "uint256"
        }
      ],
      "name": "isReferralValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMetaTransactionProcessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "setReceivingWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxCommissionRate",
          "type": "uint256"
        }
      ],
      "name": "updateMaxCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSigningWallet",
          "type": "address"
        }
      ],
      "name": "updateSigningWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "assetIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x33e9a1192d91e422fc4d9650d427febfa56a0755f27674ab2533dc622e5147ce",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0xC39e9160d307535fdF52C02de26d8735F5508C5C",
    "transactionIndex": 12,
    "gasUsed": "2714373",
    "logsBloom": "0x
    "blockHash": "0x486b827f35383d3d45c1f2e887e4c7487b9485c798aed35271c17e8cd6bbdc2b",
    "transactionHash": "0x33e9a1192d91e422fc4d9650d427febfa56a0755f27674ab2533dc622e5147ce",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 28978160,
        "transactionHash": "0x33e9a1192d91e422fc4d9650d427febfa56a0755f27674ab2533dc622e5147ce",
        "address": "0xC39e9160d307535fdF52C02de26d8735F5508C5C",
        "topics": [
          "0xb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb"
        ],
        "data": "0x000000000000000000000000592daadc9ea7f56a81de1fd27a723bd407709c460000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 30,
        "blockHash": "0x486b827f35383d3d45c1f2e887e4c7487b9485c798aed35271c17e8cd6bbdc2b"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 28978160,
        "transactionHash": "0x33e9a1192d91e422fc4d9650d427febfa56a0755f27674ab2533dc622e5147ce",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000d6a8aa1e2ae9700000000000000000000000000000000000000000000001ce4596644cf71ee6e00000000000000000000000000000000000000000000000023a5ab25068f59dc00000000000000000000000000000000000000000000001ce44bfbba2d8f3fd700000000000000000000000000000000000000000000000023b315afa8720873",
        "logIndex": 31,
        "blockHash": "0x486b827f35383d3d45c1f2e887e4c7487b9485c798aed35271c17e8cd6bbdc2b"
      }
    ],
    "blockNumber": 28978160,
    "cumulativeGasUsed": "3371655",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x525129b95bA89B9800e47ef3dc7d23fBAd27b1a3",
    "0x592daadC9eA7F56A81De1FD27A723Bd407709c46",
    "0x592daadC9eA7F56A81De1FD27A723Bd407709c46",
    "0x49c4D4C94829B9c44052C5f5Cb164Fc612181165",
    "0xa5Eb9C9Eb4F4c35B9Be8cFaAA7909F9ebe6Cb609",
    "0xbfed37fec54b1b1fe82b29a2f5c4231dce05672c0c7578d638bd16ee31eea3e5",
    1967115600,
    "0xB7060D3FeCAC3AE1F0A0AA416E3e8E472257950e",
    2000,
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000",
    "0xAc3ff31f526Af7f386ea43649e3fa67e329AeF93",
    "0x1d3CE3489a064aEFc9928fe08F9d2Dd968F5c969"
  ],
  "numDeployments": 2,
  "linkedData": [
    {
      "x": 312,
      "y": 393,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xb65b7a5124c439ec087c25bdd3de03a2aa749bd6a954d77dfc01c2ea6611e0b9",
      "assetIds": []
    },
    {
      "x": 312,
      "y": 394,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xa1d2d706aea7f4282f55e968321851563a867720f7403e456e89ab83431a264f",
      "assetIds": []
    },
    {
      "x": 312,
      "y": 395,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xa78a24403a509273af04b33aa75cd009dd483a30c8496f726a594bdfde3ff622",
      "assetIds": []
    },
    {
      "x": 312,
      "y": 396,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xa677a6c8f7b7067a438c2f9a32bf44b59ea7a920488ffdbd0e334ec6dc3f3ba6",
      "assetIds": []
    },
    {
      "x": 312,
      "y": 397,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x8d55764534e1a770335b9c7a84540fd748d51eebdbbd3479d7d15dbab90bd68f",
      "assetIds": []
    },
    {
      "x": 312,
      "y": 398,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x32ecf7649db4ddf73bc97ad16b5255a0995413bd40429693cfa1f90a27500a80",
      "assetIds": []
    },
    {
      "x": 312,
      "y": 399,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xe97023bddafb45f6597ee2364b87fa6c2cdbd188ad4fd2e323c198c576a38b0f",
      "assetIds": []
    },
    {
      "x": 312,
      "y": 400,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xd15d7882e40d8b5fed42f344a59cbd79cc34b89cd27c2cff7160c2e152012a9a",
      "assetIds": []
    },
    {
      "x": 312,
      "y": 401,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x77e6ad6e55f3b3e8494d5f18e6367c53792a3e5017eb67fedc863cfd255903bd",
      "assetIds": []
    },
    {
      "x": 312,
      "y": 405,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x4c6a7664a828b0cf499658a0298b11605001f4571864178479b49c6040d53c46",
      "assetIds": []
    },
    {
      "x": 312,
      "y": 406,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xa9d690e0632be63304d62fc2cf8899a26ff8327cfc08f8589dc8e2e1da86ca18",
      "assetIds": []
    },
    {
      "x": 312,
      "y": 407,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xc9806840d4dc2b919dd98d1e5ea61edca6d6db34d133c351291913314ab7113c",
      "assetIds": []
    },
    {
      "x": 313,
      "y": 393,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xa0639c8a7d61928c88efdee7fc93ba669c20e00105f7470fcaeefb341d233ac9",
      "assetIds": []
    },
    {
      "x": 313,
      "y": 394,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xd958f1f659ccc8096ed335ce234b00bde6286c4f4bfefa3dbd86bc7b5b829ce5",
      "assetIds": []
    },
    {
      "x": 313,
      "y": 395,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x77ab85063f03c1dc20e3dc2812e983745f1ba123842c54751316ba4c5b47d196",
      "assetIds": []
    },
    {
      "x": 313,
      "y": 396,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x0b2838cf93446ec34f5d2ec942d4371687723a031272f25dab73068f55893383",
      "assetIds": []
    },
    {
      "x": 313,
      "y": 397,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x7274d3ea0df13519619404cbba923b10dd1442ee43ec1f2ce1976720d5c11f3a",
      "assetIds": []
    },
    {
      "x": 313,
      "y": 398,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x998cd3702815bf480153819cf27e834bda53832028b0df46294102a235c27026",
      "assetIds": []
    },
    {
      "x": 313,
      "y": 399,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xdc0fbfbd717a9ecbfd1d4a8bbbda743d4b103f75646a62e9bb371ab0dc95090b",
      "assetIds": []
    },
    {
      "x": 313,
      "y": 400,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x4580105e38a74bb16f12ed753495921753e1391bfc7ac6d63691d7214f8a763c",
      "assetIds": []
    },
    {
      "x": 313,
      "y": 401,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x7e93a093d5863894ab618eed021d3551d1b34aa5383e37c66e2f451576d657dc",
      "assetIds": []
    },
    {
      "x": 313,
      "y": 405,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x26fc86dcc15241cfbf8e8db612123b0998557257d70b8e6ca7b9809915e9ac3c",
      "assetIds": []
    },
    {
      "x": 313,
      "y": 406,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x2ec759510e115a765e08746b9edc508bd24458c4c0781f50d8cd6103d7d8be2c",
      "assetIds": []
    },
    {
      "x": 313,
      "y": 407,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xde2064c5a7278e989b5e002c4e397dafb6db7f0e9d99874ff75bb6fc08d37333",
      "assetIds": []
    },
    {
      "x": 314,
      "y": 393,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x6cc5359715b735cc32836bca22f11da993518a210c86e4f2842ab8a88f4d62d9",
      "assetIds": []
    },
    {
      "x": 314,
      "y": 394,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x146ca7553adf39e9bda997f1402eed280684665a0c3adba4919ffcba7103e4ca",
      "assetIds": []
    },
    {
      "x": 314,
      "y": 395,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x80723ebfbb0553af92c1b6cad39e477c339430470031c7d3c0df01b0256c63ec",
      "assetIds": []
    },
    {
      "x": 314,
      "y": 396,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xced5f3da0eae4c6b124f897e8fc43d696c46820a50b92430d7f1916b094c8143",
      "assetIds": []
    },
    {
      "x": 314,
      "y": 397,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x32000c849e35223871e17ecf631d60ad4979aa60a558c92f1a6f9c40c27e67ce",
      "assetIds": []
    },
    {
      "x": 314,
      "y": 398,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x9166b9549f8f41862a787b1e8c6bf2403b91502dc2d3394e8d581fd537bb202d",
      "assetIds": []
    },
    {
      "x": 314,
      "y": 399,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x6f9ba1a770f421e1157b4b975e97e3c832946d900b08c018a4c916beededcd7d",
      "assetIds": []
    },
    {
      "x": 314,
      "y": 400,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x7d51b64277eb8e197f5a1c85f84aa1f6bce86ebfa49f775e1912ec6ac450f50d",
      "assetIds": []
    },
    {
      "x": 314,
      "y": 401,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xee49b4d4990531090ce62597ff004dc1c52aaa08a7a8bc2f6cb07ffac7703eba",
      "assetIds": []
    },
    {
      "x": 314,
      "y": 405,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x8698803a4c098a312bd352d0fc34768f0718e6f1c9e59225ddbd7985392ef44f",
      "assetIds": []
    },
    {
      "x": 314,
      "y": 406,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x3b0b0352ff2ef42fc39b11135d33a175d8b32487b7e644417b6c01df82c3f71b",
      "assetIds": []
    },
    {
      "x": 314,
      "y": 407,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x5ba72d042fbabb0c9cbdfdca21d9860544dcc5ecb3eb6a26262cbb04cd6cf039",
      "assetIds": []
    },
    {
      "x": 315,
      "y": 390,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xcc83865abacdb30f9f46200a389e9c411b7b5ef3d45b330bac06f753e4979a40",
      "assetIds": []
    },
    {
      "x": 315,
      "y": 391,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xa5d91dcec41679d6d8c0b9724a08e44e1a7ed050b98dc326ac62a07ab8b9f468",
      "assetIds": []
    },
    {
      "x": 315,
      "y": 392,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xafd5a97a91c60ece304485c9b571561df3a8dd29e43a5cb957fd0538aacb3d6c",
      "assetIds": []
    },
    {
      "x": 315,
      "y": 396,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xebae6aad6ab2fe5c3ed8607811402dc995429cfd8e50b6e2d51d683bddb6139e",
      "assetIds": []
    },
    {
      "x": 315,
      "y": 397,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x62364c777c3f27598062e6edd0759b8627161937fcf681da47be95097a4881c4",
      "assetIds": []
    },
    {
      "x": 315,
      "y": 398,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xeb15d6df1ee814181a7f7c69850a6c2d3c1207da5f9f2a719c2ebac422073989",
      "assetIds": []
    },
    {
      "x": 316,
      "y": 390,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x36cef555f434fd9c3212174eee22cbdb262aaa83e845910a03480c9f4829a6fc",
      "assetIds": []
    },
    {
      "x": 316,
      "y": 391,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x33b513637631e1c99cf2130589d43034062f644356cb13f1e764e7cbde223d43",
      "assetIds": []
    },
    {
      "x": 316,
      "y": 392,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x4720282285b03f92fc0526e06980aeac3d7de3b877918a0e41bb8b47c1c634d5",
      "assetIds": []
    },
    {
      "x": 316,
      "y": 396,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xe2c93b0ff3e513f3ffaa518caae0482741134fc7fcede33bb204b0a1256c5c04",
      "assetIds": []
    },
    {
      "x": 316,
      "y": 397,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x3d47f3a3dfc39127ceb81e1bdd4d78ebca0b87c3974634d19a9769c7455c7295",
      "assetIds": []
    },
    {
      "x": 316,
      "y": 398,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x37ea10cf6dc41b895337655be393b9f66728d7f97d9f07682a8e9b5711a2f51c",
      "assetIds": []
    },
    {
      "x": 317,
      "y": 390,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xdee116b9bcbe5f698a45cfc311963e5974306092f72cb6556a45f67bef1e1d77",
      "assetIds": []
    },
    {
      "x": 317,
      "y": 391,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x847ce8213b2e0e9c05cdb5df0a48b9170788a59557bcedfb30fa227c929fc517",
      "assetIds": []
    },
    {
      "x": 317,
      "y": 392,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x5e6eb50302df9a168ddc7f679ba4cfa40317c48cf9b0827bc856104c2446f720",
      "assetIds": []
    },
    {
      "x": 317,
      "y": 396,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x437dee39cc40c0122953f16f4679fde4b603a068e21824ce3dbb0e5d99ceff37",
      "assetIds": []
    },
    {
      "x": 317,
      "y": 397,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x7cecf8795ccf5b5f25911391d865d1ff1999b3b573f41e3659b9c7eeb87dc52d",
      "assetIds": []
    },
    {
      "x": 317,
      "y": 398,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x239c72e1537e3b474cf30f1fd572e6616756ff5829b2c66a31d646f0da7ff800",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 384,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x35842a46dabbb60694235d906be90564563c383f4ed7af7a678234872c3bd874",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 385,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x542d73a5442cffae2da55695a729bd0d8a2a9cf79bbf92495f29c978035b526b",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 386,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x9eddc3372ccaa7477c01b811e6cfb1b34461f1cc973d1a2e777ea7f6a66ba829",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 387,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xdeed4b1658bc3620c2e899952c7f189c6cdca2faed25ed335f7b4526cecf66d7",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 388,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x6f5beb80cb693adde03835661d456a590c8a0b57998766411df24c1747611f00",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 389,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x9f56893919b35553b67ec9bbc0a282493138707da24c431eb00f940ef65cd33e",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 399,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x91844836619a2f0d28ade6f77fd2d6781f03cf6f45869057bc6e02350fb0376d",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 400,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xf0354a3efb4d6abb7d14feb53d90d21753f7b306a1ae284cdd10ac9f1284369b",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 401,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x54be995aa6bbd96aa39de645fde30583acf30f92c054e2c59feab777b46fe75d",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 402,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x7258f25567a7614e16910669b8f90d2314610c3bc8c3e4bd483b1e9ad3d9a87e",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 403,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xd43eadbee6ffa32b72218d2c77fe4ebf944379f192e48e0dff55a3f0a228ff3c",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 404,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x86aa11c7ada901d56892bfc17c17dd3db5616db05f020673d6cdd1fa18d43403",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 405,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xfef76010db2551af3061453b19b35fd6c22968f00acd896e47c8ac4a9a5ef946",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 406,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x4f8cf9736f8266050dfc19fc2831a34f60e6f0145cd162827976bed33cad75ff",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 407,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x1a27b45b307e0e3e1bcc0e28c74c875512660e350670418e22fa836c116d2715",
      "assetIds": []
    },
    {
      "x": 319,
      "y": 384,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x6114d658db581007212f6c04c8ef3d26027d5196c5d4b5778cc808d7621286c5",
      "assetIds": []
    },
    {
      "x": 319,
      "y": 385,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x067f61e19bdf015b0e501eaa5c0d9af65ba18952f3ee8196006c5e9c09040348",
      "assetIds": []
    },
    {
      "x": 319,
      "y": 386,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x20af8f0cde99c54da3e11319965fb47fce7d86853ad47af96125788296d54529",
      "assetIds": []
    },
    {
      "x": 319,
      "y": 387,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x5ed796efdf2090d65ed204b950610472d3e9ac9e2cea09cc2e2975955970afc8",
      "assetIds": []
    },
    {
      "x": 319,
      "y": 388,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x198651ae7e48015f122f3798ebc23454fbcd871342c66d010ed0c30f81d7d2fb",
      "assetIds": []
    },
    {
      "x": 319,
      "y": 389,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x2f6cc6dc859f88d1593c048a286fb12d89afcf450c8640e01421c6b0c4e5fadb",
      "assetIds": []
    },
    {
      "x": 319,
      "y": 399,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x4ad39c3a8e8e5de589dcb2d632642f220dcef1373bad4c5fbdaf9b59888d6390",
      "assetIds": []
    },
    {
      "x": 319,
      "y": 400,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x5752da2665fcb350d863e57954e7c4714efd9f83b68eec5ab48ddd2d2f692315",
      "assetIds": []
    },
    {
      "x": 319,
      "y": 401,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x9cfef631e43475d83fec5d8cdda3dec23aea797b163e1abc78dd1723b717a26d",
      "assetIds": []
    },
    {
      "x": 319,
      "y": 402,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x666465804b236e5659144798fc4f611f53beb94033ac7a2ddeb8c842269e77f5",
      "assetIds": []
    },
    {
      "x": 319,
      "y": 403,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xf0e68388601da95c47730258807e5d68ee078db1d9f81dfef46e3c719b6650be",
      "assetIds": []
    },
    {
      "x": 319,
      "y": 404,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x97c423cd9d7cc61c42dad5827362e89b2fe17bee46c2592f307b1e5f2edbb6b4",
      "assetIds": []
    },
    {
      "x": 319,
      "y": 405,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x71ef6fee94a9b3777415919778b26329c7018cfc1095601b8fdbeda2f47b6a6d",
      "assetIds": []
    },
    {
      "x": 319,
      "y": 406,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x32ec9bb7073109310068123fe121a535d0058b83b106eaca1ee11f42004ca783",
      "assetIds": []
    },
    {
      "x": 319,
      "y": 407,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x63c217a4faef76fafde8daf7fbb956b11d9076396932f49f91f5611f72ca4b84",
      "assetIds": []
    },
    {
      "x": 320,
      "y": 384,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xe1bea5f7de3b433192e821db0efcade914e4f95e01abebcc1545928da4278e3c",
      "assetIds": []
    },
    {
      "x": 320,
      "y": 385,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x33553823da7bd73c61cd1e4e024f08651016a56cebca68b4f8b16c17c50f346f",
      "assetIds": []
    },
    {
      "x": 320,
      "y": 386,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x75a35d65b50d10ecb36da7100628faba62a54acef2ba85bdae8ccc0ad68c0050",
      "assetIds": []
    },
    {
      "x": 320,
      "y": 387,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x27541cfdc6a24c7b09c205b3249abb031522c6228ef716a02e724cf8a7f58453",
      "assetIds": []
    },
    {
      "x": 320,
      "y": 388,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x9bf250caed6ee30f4097e4ed25ea542d33260debf8b8163d74bcec1084afa0aa",
      "assetIds": []
    },
    {
      "x": 320,
      "y": 389,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xef1e35c2920e5fa6aef5f5f32ab63b00872c118bd1fd58b7e7c668d8028143cf",
      "assetIds": []
    },
    {
      "x": 320,
      "y": 399,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xd883c6b9df388b130065bfd28b044ad99d8152f9b1ba003a94b9234e579ca384",
      "assetIds": []
    },
    {
      "x": 320,
      "y": 400,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x221bf452ff478e49eb0b35bc7f8ff8da512cd10e15f75f3d32d9201fb2ecaa92",
      "assetIds": []
    },
    {
      "x": 320,
      "y": 401,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x8e878c6af01e039a924951ed27dd9820c40c1a962ddd2565c6e8b2ab09ac856b",
      "assetIds": []
    },
    {
      "x": 320,
      "y": 402,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xcf6ef204c59ebd1f9637db891f5cc63953efead470a8141552ca8e30b7143580",
      "assetIds": []
    },
    {
      "x": 320,
      "y": 403,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x70f2529b8363fcd0fefdc60c3292f16084f5d7c7a475abfbc85aa4b6b97d1446",
      "assetIds": []
    },
    {
      "x": 320,
      "y": 404,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x36bb37614b0f3f8356be0c51db7f4b18ccac7e3f397365d94427d454fcf68c90",
      "assetIds": []
    },
    {
      "x": 320,
      "y": 405,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xbb28c446037f4e11a21109e6e1296b6133b02fe3e9c3732ec1f701477de72ac7",
      "assetIds": []
    },
    {
      "x": 320,
      "y": 406,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x4329243460ae05cc01609530cc7b9fc0c318aaed603d8a9555ecfa99603180be",
      "assetIds": []
    },
    {
      "x": 320,
      "y": 407,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xefbd989cf0c6f2e6d73845500f246625f23b7bf5959b6adc57842aec07c4c835",
      "assetIds": []
    },
    {
      "x": 321,
      "y": 387,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x2c18338b9c1ec621ffb02c3f70c89cdc353b9a4e5d974af2b94540e1bc781f93",
      "assetIds": []
    },
    {
      "x": 321,
      "y": 388,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x798b72796fb11b24d8b038bee8201a4a44f91bf0787d4b3f9c7f4e7919e09604",
      "assetIds": []
    },
    {
      "x": 321,
      "y": 389,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xcf499e584de5631e86e9d7bddc3a359904e5d0400d17bd8d0c5140d04ecaca6e",
      "assetIds": []
    },
    {
      "x": 321,
      "y": 396,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xfb0bf87559a721f7d5cd50f913c916cb5d38001526b80c2f5f715126219fe174",
      "assetIds": []
    },
    {
      "x": 321,
      "y": 397,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x53fd048106e0dde12f5dc9ed5e2bfe0d4436d940a6cc75e4b632b053160f35a2",
      "assetIds": []
    },
    {
      "x": 321,
      "y": 398,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x2ef8b11857d5b456edc27d35fc52c559b5ba5cb1e7782e767b97a93e93b67841",
      "assetIds": []
    },
    {
      "x": 321,
      "y": 399,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x6fc01b75470d7e1967571bc903d4b90cc707feef048274fb93f7224f9425c3f5",
      "assetIds": []
    },
    {
      "x": 321,
      "y": 400,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x0091ef5c12577454a84287687d44f961ff212c0288e7a524ef99081ba8473d82",
      "assetIds": []
    },
    {
      "x": 321,
      "y": 401,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x3d81e91132c65f539d9de7be7c7f38a647ba27f768cec093814c3e84fc7d9d79",
      "assetIds": []
    },
    {
      "x": 322,
      "y": 387,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x7f1c9b114376323b0749b7c01a61bc5500004b84e861a95be559df2e70e818d0",
      "assetIds": []
    },
    {
      "x": 322,
      "y": 388,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xaa3b9482ea6dac56dbcb30b36e2873121192927514f96ad5dd8c62ec7ec4b7dc",
      "assetIds": []
    },
    {
      "x": 322,
      "y": 389,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x114b5499c2fbdf4551d9886a5bbb465eae190d381c6134cfc42abedd0659f7f7",
      "assetIds": []
    },
    {
      "x": 322,
      "y": 396,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xc1c15c7e2339278352279a34f8688561c538cd07ca224864eef19f8257359d08",
      "assetIds": []
    },
    {
      "x": 322,
      "y": 397,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xb949c4583b4b6ed87bdeacc87454a4a36dd8b0baabde9f59bb6de0c4194de3f7",
      "assetIds": []
    },
    {
      "x": 322,
      "y": 398,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xc67f5df5bd0eb0daeabd2f9a5137934287df1ff9f092f93cc996fb4fb6cbc707",
      "assetIds": []
    },
    {
      "x": 322,
      "y": 399,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x38b3d6318d171950815df2b83e6bbc659c6b0843b8688147a2d4637870df57d8",
      "assetIds": []
    },
    {
      "x": 322,
      "y": 400,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xbb6fbf9652fdf67ff1ea148e773527661da7d7d43e8ac54c0938ac311fc855f0",
      "assetIds": []
    },
    {
      "x": 322,
      "y": 401,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x7742f46c9dcadda795d7da7c8e9ef90cafa30a53c6f5da2a1c85a3e979da0b3d",
      "assetIds": []
    },
    {
      "x": 323,
      "y": 387,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xf37c1017a5b5b42834b5da448f279f567aa27a8e48ef174736a2cba78ab90136",
      "assetIds": []
    },
    {
      "x": 323,
      "y": 388,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xfa5c3d549eff5fa4a724ffe9f0521943a5e05d912984f9e0c8b844cd524d619b",
      "assetIds": []
    },
    {
      "x": 323,
      "y": 389,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xadd57fe3e4a862f1b13b3b21457b28c8306c69786b53cc46519c932025052111",
      "assetIds": []
    },
    {
      "x": 323,
      "y": 396,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x4f91f1d1e849d4da1ad3da8db745f254270303d207384cdfaa5f1ff2b9ff6ed1",
      "assetIds": []
    },
    {
      "x": 323,
      "y": 397,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x3600acc5be10883f07f16d5a4755d0172a4b7f8d72490315c3f8dddf884ee25f",
      "assetIds": []
    },
    {
      "x": 323,
      "y": 398,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xe93c9ff16da1f9ea783455e8e6a8522d99997e9f0c12c6c18e01dfb9056dec2a",
      "assetIds": []
    },
    {
      "x": 323,
      "y": 399,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x67cca61db00847eb47fe0426e2c35f6e2d0990e269f8d20d0d78bf054a6b3131",
      "assetIds": []
    },
    {
      "x": 323,
      "y": 400,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x2cf49b622d5504c497b54909e04ac910d312e97828f9a81ac7acd80d99ffb9fe",
      "assetIds": []
    },
    {
      "x": 323,
      "y": 401,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xa05c9b739d40b6cdd87007a89422f786c4dbe17947530f91f82b1e521249587b",
      "assetIds": []
    },
    {
      "x": 324,
      "y": 390,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xb36dcc4aaf3fede8f3ace5b78c145549f7e648df8eb979ac37a61b1d799fbbb4",
      "assetIds": []
    },
    {
      "x": 324,
      "y": 391,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x590fc8a913c1926e8325f3e69f46f395bc2dff9e0845f2712370986e5895642c",
      "assetIds": []
    },
    {
      "x": 324,
      "y": 392,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xe52a35de071ac4d925c043b33ea635323a991502f580363359f4ea8d91689d49",
      "assetIds": []
    },
    {
      "x": 325,
      "y": 390,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x7748fc445c9637e13225a4e5c93db701c7ce82a2b07a9ff2ae9d9974b21eb361",
      "assetIds": []
    },
    {
      "x": 325,
      "y": 391,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xf1a3fc7b0582a0e3555e5c5144987992f109ee4b1411ab1c343c6f8f89a0a326",
      "assetIds": []
    },
    {
      "x": 325,
      "y": 392,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x9351ad02a99dbd368d79d699d15a6eda98170000a8cc8cde8fed00097b5241c7",
      "assetIds": []
    },
    {
      "x": 326,
      "y": 390,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x5d24964fb8d8b3987edb9626b361e44949b9513c7f64104bb602ba10900cb60f",
      "assetIds": []
    },
    {
      "x": 326,
      "y": 391,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x79ec2058c961d75403a41220bf71dfc35314608c24a545405fb55c138f6f497a",
      "assetIds": []
    },
    {
      "x": 326,
      "y": 392,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x80e57fce751a60b24b244ab80217cd1d9831756282d5600ef4c7d892b6f6cb51",
      "assetIds": []
    },
    {
      "x": 327,
      "y": 384,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xaf7e57d7c312aa4794a0062fe402bbd5dae8ecbfc53af1798bec0929914b8c74",
      "assetIds": []
    },
    {
      "x": 327,
      "y": 385,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x7b210fa494b37bebed376acc734de0dafe810658475c809ae6015f015a2fc239",
      "assetIds": []
    },
    {
      "x": 327,
      "y": 386,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x7b06101a5bfb86c5511b1928d52ef8a84a915a86cbe06227fd454a7aa572ed37",
      "assetIds": []
    },
    {
      "x": 327,
      "y": 387,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x0d1c9ac7544fa47511596420276837ea6d1574ee994ca0550872f644894be426",
      "assetIds": []
    },
    {
      "x": 327,
      "y": 388,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x972e454dcb9b11d3f8cc2ddb34bcd1144847132b09af617f029c755068680243",
      "assetIds": []
    },
    {
      "x": 327,
      "y": 389,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x74f384cfbf7017cdf191c38949d8de3025fd863d5677448bef1e26c1b2275297",
      "assetIds": []
    },
    {
      "x": 327,
      "y": 393,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x3fe58aa3ee258a867f23338188d4e32e301344946c1419ef5dc653f168e8fc3a",
      "assetIds": []
    },
    {
      "x": 327,
      "y": 394,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x9dcc9897954ac1d1f3722df7ce7e9ec337c0ce22d4ac2a328a66661df63855d1",
      "assetIds": []
    },
    {
      "x": 327,
      "y": 395,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xa836d1f1b17eefaf0a0e5f330d6258e934bfe3ba33b5451388fbeeec0fd987c0",
      "assetIds": []
    },
    {
      "x": 328,
      "y": 384,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x6e803a8f0f5076bfb6b5acf6ebdc7d25597247d8722cdcae98eb6c39c04494cf",
      "assetIds": []
    },
    {
      "x": 328,
      "y": 385,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xc53f26448a823097251ff7193ef50075f2e045fea05684e260a1f290120d020c",
      "assetIds": []
    },
    {
      "x": 328,
      "y": 386,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x9404566a11d3f41e669bf195e17bb4c8db135b56480be7ee33c668b065a0d2f1",
      "assetIds": []
    },
    {
      "x": 328,
      "y": 387,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xff1f3947b2c2531197739fe09841e68e54a0d39fbbb4d58ee85e9a308420705f",
      "assetIds": []
    },
    {
      "x": 328,
      "y": 388,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x1da124559806facba756c73355ace07529322de9a07f11f308be9c1e4590ba84",
      "assetIds": []
    },
    {
      "x": 328,
      "y": 389,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xe118e5f962f008c2684ebe4fa09219665c8b0932bf21d6bf86c874ed16e91274",
      "assetIds": []
    },
    {
      "x": 328,
      "y": 393,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x7b7ced79a6a8845448038fcbc7d58cec28a39e6597edd9306b9e4d001fcb1e68",
      "assetIds": []
    },
    {
      "x": 328,
      "y": 394,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x4cb813d19ac44dad7d19e0d2d3d90dd13e5baab8fb3c4807ed247ae6e6388e8a",
      "assetIds": []
    },
    {
      "x": 328,
      "y": 395,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xbf88b4aeaaf59d7ada8290a688d23fdbc6556d6b92fcf8a7259e67af41d838ab",
      "assetIds": []
    },
    {
      "x": 329,
      "y": 384,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xc83787077b3ae2a7660a914ddb35fa22ecb9b59a2b20c2373e395fbe546ef083",
      "assetIds": []
    },
    {
      "x": 329,
      "y": 385,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xfdce7e7ae3af38455020476a2db95f848739ccf85bf1eb7d42b606ccc2fc0a33",
      "assetIds": []
    },
    {
      "x": 329,
      "y": 386,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x62c9495bbb1ae43f1041bfbc757ce37142da04f5a931d62fe6f65e6935085f4c",
      "assetIds": []
    },
    {
      "x": 329,
      "y": 387,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xc4375d5c2f63f37f052eb5cc66ee43e288f61ed5c244c0bec523c40c9a31da41",
      "assetIds": []
    },
    {
      "x": 329,
      "y": 388,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x98f5b868e66401de25897c38d037f376cb7ec39f59ed7c3dc88528d799d73d11",
      "assetIds": []
    },
    {
      "x": 329,
      "y": 389,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xfcdd7af81071ca7a816c59d56b821e34232a0650959c03df87c0afe27c4f76b8",
      "assetIds": []
    },
    {
      "x": 329,
      "y": 393,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x67837210a18d2fe22ed8624171559e578704aac7b6395434a4ec3afd81771afd",
      "assetIds": []
    },
    {
      "x": 329,
      "y": 394,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x9186dc68b552d62a27ec5df107a2150ee39fcba7b9a7e4fcc610ddb19e54afd1",
      "assetIds": []
    },
    {
      "x": 329,
      "y": 395,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0x85b5707870b4fbddabacff1bc0e99ccc239d4dba903cdaa12ac3a9993aca2c7e",
      "assetIds": []
    },
    {
      "x": 330,
      "y": 384,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x057c1d5483055214e00794684f1c8402224ddef47e893052a0e13fb9f705271e",
      "assetIds": []
    },
    {
      "x": 330,
      "y": 385,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xb12dfce83f61dec91dbc11edc7f3effad12daa9b99abf7f226d42a41d8a32d66",
      "assetIds": []
    },
    {
      "x": 330,
      "y": 386,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x79ae06401cab71f8775a126230a992adc096c57b2e58704cc51c3225ee336cd6",
      "assetIds": []
    },
    {
      "x": 331,
      "y": 384,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xa9df0908793ae97dcd8f6a89ba07a7150c2eabfe508f9b6a177adfd8ce64f42e",
      "assetIds": []
    },
    {
      "x": 331,
      "y": 385,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xf0b510e9da1e9d4d3bff060e805eb32ab552b0e65e274289ab97db5cf7da247b",
      "assetIds": []
    },
    {
      "x": 331,
      "y": 386,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xaeb2d1f02d49c4ada02de8c6d647a6f40a56d1dc5e112994bda489fc6de83f94",
      "assetIds": []
    },
    {
      "x": 332,
      "y": 384,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x7d2b5b273df71dd052d1558f5ec9bde3a1049cc3434d0835c5b5a24281a22dec",
      "assetIds": []
    },
    {
      "x": 332,
      "y": 385,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "",
      "salt": "0xc33a30abd0fc35d1196c4fd6e644ad301ebece64280355207855b7d8d8019b1d",
      "assetIds": []
    },
    {
      "x": 332,
      "y": 386,
      "size": 1,
      "price": "4683000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xfcc65313e70533a4532ac377ad924bef22dac8a441cf2899713610f839dff912",
      "assetIds": []
    },
    {
      "x": 312,
      "y": 390,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x7421025798403206e75ba033604afe3d0def2ea67aca9bc834017ebe556cac4e",
      "assetIds": []
    },
    {
      "x": 312,
      "y": 402,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x68771edc1c2a1a0cbdea81d9952ad659100c963c847cc8e099913ff7b12248aa",
      "assetIds": []
    },
    {
      "x": 315,
      "y": 393,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x44522e4d55668aa2677df28664e48fd78c0905dcd52dc83ebcd8993656cadfc2",
      "assetIds": []
    },
    {
      "x": 315,
      "y": 399,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x22caab667472958035d4de500998f1ff63c0fd925ee72cdd7677263af10b94c7",
      "assetIds": []
    },
    {
      "x": 315,
      "y": 402,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x25852f80aea18ac6a5922f7d09f21b74c5960036602e3f6e77e209a35b8331e7",
      "assetIds": []
    },
    {
      "x": 315,
      "y": 405,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xf55a8cf9b76960be10ffb091dabfc07f439dd64c2a26c093e791a0162258f07d",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 396,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x3f89d4bb43927204d2e9b588961711676977b8e25720c9e0a088fff69e86e14e",
      "assetIds": []
    },
    {
      "x": 321,
      "y": 384,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x4459a8a683d3ae33394acbb291bcdf5a9ca10c14ab01c9cd5ce5ed48848b8915",
      "assetIds": []
    },
    {
      "x": 321,
      "y": 402,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xbd2537366b19fd59702feba8e273f4ddb51d446aa1dac4b882ed47650ce1344a",
      "assetIds": []
    },
    {
      "x": 321,
      "y": 405,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x024d5f895c6ed04e703c1f8f804b233100cd4a7eda0f1aacccde33ffd91a089d",
      "assetIds": []
    },
    {
      "x": 324,
      "y": 384,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x6a3a6dd0c100d8ab46df75ed4b4ed8005542b95cae6383233561a336b48e5c9e",
      "assetIds": []
    },
    {
      "x": 324,
      "y": 387,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x3bb2eb90be384a749d9f6a2b3cdf2a1a769fa3c99b458690f64adbac7771b986",
      "assetIds": []
    },
    {
      "x": 324,
      "y": 393,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x96c2442a381667dadf0888cc63bfe47b880f901d42210bab52d3627e72130c31",
      "assetIds": []
    },
    {
      "x": 327,
      "y": 390,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x4204208a76428089928f7dea4d23389d8fca7d114c3c1ea0984bf01a6695d1c2",
      "assetIds": []
    },
    {
      "x": 330,
      "y": 387,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x3243a34f4706cc27cfd6c8ed2c8bafc70b37fe82f270a6db41d3ee760b82ec53",
      "assetIds": []
    },
    {
      "x": 333,
      "y": 384,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x1796fd02c3ea4202b00d06f8df30124cee535e2e7ec205d3722345936e8b00d4",
      "assetIds": []
    },
    {
      "x": 333,
      "y": 387,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x084e1fc17dc09a1c9bc0b11e3db4e43615d73948fce553311cc7ba4e7066071b",
      "assetIds": []
    },
    {
      "x": 312,
      "y": 384,
      "size": 6,
      "price": "32772000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x7f776560e83967af22e710b83e886cb76bf908ae55ff532cb8d1f05abb7de807",
      "assetIds": []
    },
    {
      "x": 318,
      "y": 390,
      "size": 6,
      "price": "32772000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xa571ad59e9e58df83ee84190b63c0d4fc607a06b5f0017f593b0495d95b58f3e",
      "assetIds": []
    },
    {
      "x": 330,
      "y": 390,
      "size": 6,
      "price": "32772000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xdd151d17426f2f241d2fb2b4a1123c5a303e6e420c9c950fbcedbbaf46751124",
      "assetIds": []
    },
    {
      "x": 324,
      "y": 396,
      "size": 12,
      "price": "123806000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x058f6ff574ccfd6eed34155efe9648562043c062c5c2d96a2124c4c8b8fdf676",
      "assetIds": []
    }
  ],
  "solcInputHash": "b95535d4046d7bea427b9b8a7e4171f4",
  "metadata": "{\"compiler\":{\"version\":\"0.6.5+commit.f956cc89\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"landAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sandContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialMetaTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"initialWalletAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initialSigningWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMaxCommissionRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"estate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeDistributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authValidator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topCornerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"LandQuadPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxCommissionRate\",\"type\":\"uint256\"}],\"name\":\"MaxCommissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MetaTransactionProcessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"NewReceivingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"name\":\"ReferralUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSigningWallet\",\"type\":\"address\"}],\"name\":\"SigningWalletUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserved\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"info\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"referral\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"buyLandWithSand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"referral\",\"type\":\"bytes\"}],\"name\":\"decodeReferral\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"disableWallet\",\"type\":\"address\"}],\"name\":\"disablePreviousSigningWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpiryTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigningWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMetaTransactionProcessor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"name\":\"isReferralValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMetaTransactionProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setReceivingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxCommissionRate\",\"type\":\"uint256\"}],\"name\":\"updateMaxCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigningWallet\",\"type\":\"address\"}],\"name\":\"updateSigningWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"withdrawAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"buyLandWithSand(address,address,address,uint256[],bytes32,uint256[],bytes32[],bytes,bytes)\":{\"params\":{\"assetIds\":\"asset ids (lands) that will be bought\",\"buyer\":\"address that perform the payment\",\"info\":\"[X_INDEX=0] x coordinate of the Land [Y_INDEX=1] y coordinate of the Land [SIZE_INDEX=2] size of the pack of Land to purchase [PRICE_INDEX=3] price in SAND to purchase that Land\",\"proof\":\"merkleProof for that particular Land\",\"referral\":\"referral id\",\"reserved\":\"the reserved address (if any)\",\"salt\":\"The salt submitted for verification.\",\"signature\":\"A signed message specifying tx details\",\"to\":\"address that will own the purchased Land\"}},\"changeAdmin(address)\":{\"details\":\"change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"address of the new administrator.\"}},\"disablePreviousSigningWallet(address)\":{\"details\":\"Disable compromised signing wallet\",\"params\":{\"disableWallet\":\"The wallet address to be disabled\"}},\"getAdmin()\":{\"details\":\"gives the current administrator of this contract.\",\"returns\":{\"_0\":\"the current administrator of this contract.\"}},\"getSigningWallet()\":{\"details\":\"signing wallet authorized for referral\",\"returns\":{\"_0\":\"the address of the signing wallet\"}},\"isMetaTransactionProcessor(address)\":{\"details\":\"check whether address `who` is given meta-transaction execution rights.\",\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has meta-transaction execution rights.\"}},\"isReferralValid(bytes,address,address,uint256,uint256)\":{\"params\":{\"commissionRate\":\"The commissionRate of the referral\",\"expiryTime\":\"The expiry time of the referral\",\"referee\":\"The address of the referee\",\"referrer\":\"The address of the referrer\",\"signature\":\"The signature to check (signed referral)\"},\"returns\":{\"_0\":\"True if the referral is valid\"}},\"setMetaTransactionProcessor(address,bool)\":{\"details\":\"Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\",\"params\":{\"enabled\":\"set whether the metaTransactionProcessor is enabled or disabled.\",\"metaTransactionProcessor\":\"address that will be given/removed metaTransactionProcessor rights.\"}},\"setReceivingWallet(address)\":{\"params\":{\"newWallet\":\"address of the new receiving wallet\"}},\"updateMaxCommissionRate(uint256)\":{\"details\":\"Update the maximum commission rate\",\"params\":{\"newMaxCommissionRate\":\"The new maximum commission rate\"}},\"updateSigningWallet(address)\":{\"details\":\"Update the signing wallet The previous wallet is still valid for a grace period (_previousSigningDelay). If you want to disable the previous wallet, use the disablePreviousSigningWallet function.\",\"params\":{\"newSigningWallet\":\"The new address of the signing wallet\"}},\"withdrawAssets(address,uint256[],uint256[])\":{\"params\":{\"assetIds\":\"the assetIds to be transferred\",\"to\":\"intended recipient of the asset tokens\",\"values\":\"the quantities of the assetIds to be transferred\"}}},\"title\":\"Estate Sale contract with referral\"},\"userdoc\":{\"methods\":{\"buyLandWithSand(address,address,address,uint256[],bytes32,uint256[],bytes32[],bytes,bytes)\":{\"notice\":\"buy Land with SAND using the merkle proof associated with it\"},\"getExpiryTime()\":{\"notice\":\"Gets the expiry time for the current sale\"},\"getMaxCommissionRate()\":{\"notice\":\"the max commission rate\"},\"getMerkleRoot()\":{\"notice\":\"Gets the Merkle root associated with the current sale\"},\"isReferralValid(bytes,address,address,uint256,uint256)\":{\"notice\":\"Check if a referral is valid\"},\"setReceivingWallet(address)\":{\"notice\":\"set the wallet receiving the proceeds\"},\"withdrawAssets(address,uint256[],uint256[])\":{\"notice\":\"enable Admin to withdraw remaining assets from EstateSaleWithFee contract\"}},\"notice\":\"This contract manages the sale of our lands as Estates\"}},\"settings\":{\"compilationTarget\":{\"src/solc_0.6/EstateSale/EstateSaleWithAuth.sol\":\"EstateSaleWithAuth\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.6/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x1efcb1ccef6b3bce65467c4b704cec8d0582e35ff48352269ba8cda4b54ae3da\"},\"@openzeppelin/contracts-0.6/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfa152b6e88a1dc50780e8f1580426dc23ad2e1e2c2f086a088adf206a202f453\"},\"@openzeppelin/contracts-0.6/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"@openzeppelin/contracts-0.6/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x31691ad0817f8cb338531b78d2ab2989027d9f27e6f8e62492b754fed9429b10\"},\"@openzeppelin/contracts-0.6/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\"},\"@openzeppelin/contracts-0.6/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\"},\"@openzeppelin/contracts-0.6/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\"},\"@openzeppelin/contracts-0.6/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x7ff0067f2d7df4187eaa1cb4800949b929602c9d9cb20fcaee6922a7613ef2fb\"},\"src/solc_0.6/EstateSale/AuthValidator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.5;\\n\\nimport \\\"@openzeppelin/contracts-0.6/cryptography/ECDSA.sol\\\";\\nimport \\\"../common/BaseWithStorage/Admin.sol\\\";\\n\\ncontract AuthValidator is Admin {\\n    address public _signingAuthWallet;\\n\\n    event SigningWallet(address indexed signingWallet);\\n\\n    constructor(address adminWallet, address initialSigningWallet) public {\\n        require(adminWallet != address(0), \\\"AuthValidator: zero address\\\");\\n\\n        _admin = adminWallet;\\n        _updateSigningAuthWallet(initialSigningWallet);\\n    }\\n\\n    function updateSigningAuthWallet(address newSigningWallet) external onlyAdmin {\\n        _updateSigningAuthWallet(newSigningWallet);\\n    }\\n\\n    function _updateSigningAuthWallet(address newSigningWallet) internal {\\n        require(newSigningWallet != address(0), \\\"AuthValidator: INVALID_SIGNING_WALLET\\\");\\n        _signingAuthWallet = newSigningWallet;\\n        emit SigningWallet(newSigningWallet);\\n    }\\n\\n    function isAuthValid(bytes memory signature, bytes32 hashedData) public view returns (bool) {\\n        address signer = ECDSA.recover(ECDSA.toEthSignedMessageHash(hashedData), signature);\\n        return signer == _signingAuthWallet;\\n    }\\n}\\n\",\"keccak256\":\"0x949c6063b3d90a8c53ca8d3c80a1097da05b7189e87d8c8825b97acc17dbd38e\"},\"src/solc_0.6/EstateSale/EstateSaleWithAuth.sol\":{\"content\":\"/* solhint-disable not-rely-on-time, func-order */\\npragma solidity 0.6.5;\\n\\nimport \\\"@openzeppelin/contracts-0.6/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./ILandToken.sol\\\";\\nimport \\\"../common/BaseWithStorage/MetaTransactionReceiver.sol\\\";\\nimport \\\"../ReferralValidator/ReferralValidator.sol\\\";\\nimport \\\"./AuthValidator.sol\\\";\\n\\n/// @title Estate Sale contract with referral\\n/// @notice This contract manages the sale of our lands as Estates\\ncontract EstateSaleWithAuth is ReentrancyGuard, MetaTransactionReceiver, ReferralValidator {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    event LandQuadPurchased(\\n        address indexed buyer,\\n        address indexed to,\\n        uint256 indexed topCornerId,\\n        uint256 size,\\n        uint256 price,\\n        address token,\\n        uint256 amountPaid\\n    );\\n\\n    event NewReceivingWallet(address newWallet);\\n\\n    /// @notice set the wallet receiving the proceeds\\n    /// @param newWallet address of the new receiving wallet\\n    function setReceivingWallet(address payable newWallet) external {\\n        require(newWallet != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(msg.sender == _admin, \\\"NOT_AUTHORIZED\\\");\\n        _wallet = newWallet;\\n\\n        emit NewReceivingWallet(newWallet);\\n    }\\n\\n    /// @notice buy Land with SAND using the merkle proof associated with it\\n    /// @param buyer address that perform the payment\\n    /// @param to address that will own the purchased Land\\n    /// @param reserved the reserved address (if any)\\n    /// @param info [X_INDEX=0] x coordinate of the Land [Y_INDEX=1] y coordinate of the Land [SIZE_INDEX=2] size of the pack of Land to purchase [PRICE_INDEX=3] price in SAND to purchase that Land\\n    /// @param salt The salt submitted for verification.\\n    /// @param assetIds asset ids (lands) that will be bought\\n    /// @param proof merkleProof for that particular Land\\n    /// @param referral referral id\\n    /// @param signature A signed message specifying tx details\\n    function buyLandWithSand(\\n        address buyer,\\n        address to,\\n        address reserved,\\n        uint256[] calldata info,\\n        bytes32 salt,\\n        uint256[] calldata assetIds,\\n        bytes32[] calldata proof,\\n        bytes calldata referral,\\n        bytes calldata signature\\n    ) external nonReentrant {\\n        _checkAddressesAndExpiryTime(buyer, reserved);\\n        _checkAuthAndProofValidity(to, reserved, info, salt, assetIds, proof, signature);\\n        _handleFeeAndReferral(buyer, info[PRICE_INDEX], referral);\\n        _mint(buyer, to, info);\\n        _sendAssets(to, assetIds);\\n    }\\n\\n    /// @notice Gets the expiry time for the current sale\\n    /// @return The expiry time, as a unix epoch\\n    function getExpiryTime() external view returns (uint256) {\\n        return _expiryTime;\\n    }\\n\\n    /// @notice Gets the Merkle root associated with the current sale\\n    /// @return The Merkle root, as a bytes32 hash\\n    function getMerkleRoot() external view returns (bytes32) {\\n        return _merkleRoot;\\n    }\\n\\n    /// @notice enable Admin to withdraw remaining assets from EstateSaleWithFee contract\\n    /// @param to intended recipient of the asset tokens\\n    /// @param assetIds the assetIds to be transferred\\n    /// @param values the quantities of the assetIds to be transferred\\n    function withdrawAssets(\\n        address to,\\n        uint256[] calldata assetIds,\\n        uint256[] calldata values\\n    ) external {\\n        require(msg.sender == _admin, \\\"NOT_AUTHORIZED\\\");\\n        _asset.safeBatchTransferFrom(address(this), to, assetIds, values, \\\"\\\");\\n    }\\n\\n    function onERC1155Received(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256, /*id*/\\n        uint256, /*value*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256[] calldata, /*ids*/\\n        uint256[] calldata, /*values*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return 0xbc197c81;\\n    }\\n\\n    function _sendAssets(address to, uint256[] memory assetIds) internal {\\n        uint256[] memory values = new uint256[](assetIds.length);\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            values[i] = 1;\\n        }\\n        _asset.safeBatchTransferFrom(address(this), to, assetIds, values, \\\"\\\");\\n    }\\n\\n    // NOTE: _checkAddressesAndExpiryTime & _checkAuthAndProofValidity were split due to a stack too deep issue\\n    function _checkAddressesAndExpiryTime(address buyer, address reserved) internal view {\\n        /* solium-disable-next-line security/no-block-members */\\n        require(block.timestamp < _expiryTime, \\\"SALE_IS_OVER\\\");\\n        require(buyer == msg.sender || _metaTransactionContracts[msg.sender], \\\"NOT_AUTHORIZED\\\");\\n        require(reserved == address(0) || reserved == buyer, \\\"RESERVED_LAND\\\");\\n    }\\n\\n    // NOTE: _checkAddressesAndExpiryTime & _checkAuthAndProofValidity were split due to a stack too deep issue\\n    function _checkAuthAndProofValidity(\\n        address to,\\n        address reserved,\\n        uint256[] memory info,\\n        bytes32 salt,\\n        uint256[] memory assetIds,\\n        bytes32[] memory proof,\\n        bytes memory signature\\n    ) internal view {\\n        bytes32 hashedData = keccak256(\\n            abi.encodePacked(\\n                to,\\n                reserved,\\n                info[X_INDEX],\\n                info[Y_INDEX],\\n                info[SIZE_INDEX],\\n                info[PRICE_INDEX],\\n                salt,\\n                keccak256(abi.encodePacked(assetIds)),\\n                keccak256(abi.encodePacked(proof))\\n            )\\n        );\\n        require(_authValidator.isAuthValid(signature, hashedData), \\\"INVALID_AUTH\\\");\\n\\n        bytes32 leaf = _generateLandHash(\\n            info[X_INDEX],\\n            info[Y_INDEX],\\n            info[SIZE_INDEX],\\n            info[PRICE_INDEX],\\n            reserved,\\n            salt,\\n            assetIds\\n        );\\n        require(_verify(proof, leaf), \\\"INVALID_LAND\\\");\\n    }\\n\\n    function _mint(\\n        address buyer,\\n        address to,\\n        uint256[] memory info\\n    ) internal {\\n        if (info[SIZE_INDEX] == 1 || _estate == address(0)) {\\n            _land.mintQuad(to, info[SIZE_INDEX], info[X_INDEX], info[Y_INDEX], \\\"\\\");\\n        } else {\\n            _land.mintQuad(_estate, info[SIZE_INDEX], info[X_INDEX], info[Y_INDEX], abi.encode(to));\\n        }\\n        emit LandQuadPurchased(\\n            buyer,\\n            to,\\n            info[X_INDEX] + (info[Y_INDEX] * GRID_SIZE),\\n            info[SIZE_INDEX],\\n            info[PRICE_INDEX],\\n            address(_sand),\\n            info[PRICE_INDEX]\\n        );\\n    }\\n\\n    function _generateLandHash(\\n        uint256 x,\\n        uint256 y,\\n        uint256 size,\\n        uint256 price,\\n        address reserved,\\n        bytes32 salt,\\n        uint256[] memory assetIds\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(x, y, size, price, reserved, salt, assetIds));\\n    }\\n\\n    function _verify(bytes32[] memory proof, bytes32 leaf) internal view returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash < proofElement) {\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        return computedHash == _merkleRoot;\\n    }\\n\\n    function _handleFeeAndReferral(\\n        address buyer,\\n        uint256 priceInSand,\\n        bytes memory referral\\n    ) internal {\\n        // send 5% fee to a specially configured instance of FeeDistributor.sol\\n        uint256 remainingAmountInSand = _handleSandFee(buyer, priceInSand);\\n\\n        // calculate referral based on 95% of original priceInSand\\n        handleReferralWithERC20(buyer, remainingAmountInSand, referral, _wallet, address(_sand));\\n    }\\n\\n    function _handleSandFee(address buyer, uint256 priceInSand) internal returns (uint256) {\\n        uint256 feeAmountInSand = priceInSand.mul(FEE).div(100);\\n        require(_sand.transferFrom(buyer, address(_feeDistributor), feeAmountInSand), \\\"FEE_TRANSFER_FAILED\\\");\\n        return priceInSand.sub(feeAmountInSand);\\n    }\\n\\n    uint256 internal constant GRID_SIZE = 408; // 408 is the size of the Land\\n\\n    IERC1155 internal immutable _asset;\\n    ILandToken internal immutable _land;\\n    IERC20 internal immutable _sand;\\n    address internal immutable _estate;\\n    address internal immutable _feeDistributor;\\n\\n    address payable internal _wallet;\\n    AuthValidator internal _authValidator;\\n    uint256 internal immutable _expiryTime;\\n    bytes32 internal immutable _merkleRoot;\\n\\n    uint256 private constant FEE = 5; // percentage of land sale price to be diverted to a specially configured instance of FeeDistributor, shown as an integer\\n    // buyLandWithSand info indexes\\n    uint256 private constant X_INDEX = 0;\\n    uint256 private constant Y_INDEX = 1;\\n    uint256 private constant SIZE_INDEX = 2;\\n    uint256 private constant PRICE_INDEX = 3;\\n\\n    constructor(\\n        address landAddress,\\n        address sandContractAddress,\\n        address initialMetaTx,\\n        address admin,\\n        address payable initialWalletAddress,\\n        bytes32 merkleRoot,\\n        uint256 expiryTime,\\n        address initialSigningWallet,\\n        uint256 initialMaxCommissionRate,\\n        address estate,\\n        address asset,\\n        address feeDistributor,\\n        address authValidator\\n    ) public ReferralValidator(initialSigningWallet, initialMaxCommissionRate) {\\n        require(landAddress.isContract(), \\\"EstateSaleWithAuth: is not a contract\\\");\\n        require(sandContractAddress.isContract(), \\\"EstateSaleWithAuth: is not a contract\\\");\\n        require(initialMetaTx != address(0), \\\"EstateSaleWithAuth: zero address\\\");\\n        require(admin != address(0), \\\"EstateSaleWithAuth: zero address\\\");\\n        require(initialWalletAddress != address(0), \\\"EstateSaleWithAuth: zero address\\\");\\n        // require(asset.isContract(), \\\"EstateSaleWithAuth: is not a contract\\\");\\n        require(feeDistributor != address(0), \\\"EstateSaleWithAuth: zero address\\\");\\n        require(authValidator.isContract(), \\\"EstateSaleWithAuth: is not a contract\\\");\\n\\n\\n        _land = ILandToken(landAddress);\\n        _sand = IERC20(sandContractAddress);\\n        _setMetaTransactionProcessor(initialMetaTx, true);\\n        _wallet = initialWalletAddress;\\n        _merkleRoot = merkleRoot;\\n        _expiryTime = expiryTime;\\n        _admin = admin;\\n        _estate = estate;\\n        _asset = IERC1155(asset);\\n        _feeDistributor = feeDistributor;\\n        _authValidator = AuthValidator(authValidator);\\n    }\\n}\\n\",\"keccak256\":\"0x61a7f82f3775e7de2d583799a664baa2d68f96ee63dc28b748f1b78143ec74c8\"},\"src/solc_0.6/EstateSale/ILandToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.5;\\n\\n\\ninterface ILandToken {\\n    function mintQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8d03b53d325fbb052d78f274b106f14bf9a5afc928451b26bc9e579585ae44b2\"},\"src/solc_0.6/ReferralValidator/ReferralValidator.sol\":{\"content\":\"/* solhint-disable not-rely-on-time, func-order */\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.5;\\n\\nimport \\\"@openzeppelin/contracts-0.6/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/math/SafeMath.sol\\\";\\nimport \\\"../common/BaseWithStorage/Admin.sol\\\";\\n\\n\\n/// @dev This contract verifies if a referral is valid\\ncontract ReferralValidator is Admin {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    address private _signingWallet;\\n    uint256 private _maxCommissionRate;\\n\\n    mapping(address => uint256) private _previousSigningWallets;\\n    uint256 constant private _previousSigningDelay = 10 days;\\n\\n    event ReferralUsed(\\n        address indexed referrer,\\n        address indexed referee,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 commission,\\n        uint256 commissionRate\\n    );\\n\\n    event SigningWalletUpdated(address newSigningWallet);\\n    event MaxCommissionRateUpdated(uint256 newMaxCommissionRate);\\n\\n    constructor(address initialSigningWallet, uint256 initialMaxCommissionRate) public {\\n        require(initialSigningWallet != address(0), \\\"ReferralValidator: zero address\\\");\\n\\n        _signingWallet = initialSigningWallet;\\n        _maxCommissionRate = initialMaxCommissionRate;\\n    }\\n\\n    /**\\n     * @dev Update the signing wallet\\n     * The previous wallet is still valid for a grace period (_previousSigningDelay). If you want to\\n     * disable the previous wallet, use the disablePreviousSigningWallet function.\\n     * @param newSigningWallet The new address of the signing wallet\\n     */\\n    function updateSigningWallet(address newSigningWallet) external onlyAdmin {\\n        require(newSigningWallet != address(0), \\\"ReferralValidator: zero address\\\");\\n        _previousSigningWallets[_signingWallet] = now + _previousSigningDelay;\\n        _signingWallet = newSigningWallet;\\n\\n        emit SigningWalletUpdated(newSigningWallet);\\n    }\\n\\n     /**\\n     * @dev Disable compromised signing wallet\\n     * @param disableWallet The wallet address to be disabled\\n     */\\n    function disablePreviousSigningWallet(address disableWallet) external {\\n        require(_admin == msg.sender, \\\"ReferralValidator: Sender not admin\\\");\\n        require(disableWallet != address(0), \\\"ReferralValidator: zero address\\\");\\n        _previousSigningWallets[disableWallet] = 0;\\n    }\\n\\n    /**\\n     * @dev signing wallet authorized for referral\\n     * @return the address of the signing wallet\\n     */\\n    function getSigningWallet() external view returns (address) {\\n        return _signingWallet;\\n    }\\n\\n    /**\\n     * @notice the max commission rate\\n     * @return the maximum commission rate that a referral can give\\n     */\\n    function getMaxCommissionRate() external view returns (uint256) {\\n        return _maxCommissionRate;\\n    }\\n\\n    /**\\n     * @dev Update the maximum commission rate\\n     * @param newMaxCommissionRate The new maximum commission rate\\n     */\\n    function updateMaxCommissionRate(uint256 newMaxCommissionRate) external onlyAdmin {\\n        _maxCommissionRate = newMaxCommissionRate;\\n\\n        emit MaxCommissionRateUpdated(newMaxCommissionRate);\\n    }\\n\\n    function handleReferralWithETH(\\n        uint256 amount,\\n        bytes memory referral,\\n        address payable destination\\n    ) internal {\\n        uint256 amountForDestination = amount;\\n\\n        require(msg.value >= amount, \\\"ReferralValidator: insufficient funds\\\");\\n\\n        if (referral.length > 0) {\\n            (bytes memory signature, address referrer, address referee, uint256 expiryTime, uint256 commissionRate) = decodeReferral(referral);\\n\\n            require(commissionRate < 10000, \\\"ReferralValidator: invalid commisionRate\\\");\\n\\n            uint256 commission = 0;\\n\\n            if (isReferralValid(signature, referrer, referee, expiryTime, commissionRate)) {\\n                commission = SafeMath.div(SafeMath.mul(amount, commissionRate), 10000);\\n\\n                emit ReferralUsed(referrer, referee, address(0), amount, commission, commissionRate);\\n                amountForDestination = SafeMath.sub(amountForDestination, commission);\\n            }\\n\\n            if (commission > 0) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (bool success, ) = payable(referrer).call{value:commission}(\\\"\\\");\\n                require(success, \\\"ReferralValidator: Transfer failed.\\\");\\n            }\\n        }\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = destination.call{value:amountForDestination}(\\\"\\\");\\n        require(success, \\\"ReferralValidator: Transfer failed.\\\");\\n    }\\n\\n    function handleReferralWithERC20(\\n        address buyer,\\n        uint256 amount,\\n        bytes memory referral,\\n        address payable destination,\\n        address tokenAddress\\n    ) internal {\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 amountForDestination = amount;\\n\\n        if (referral.length > 0) {\\n            (bytes memory signature, address referrer, address referee, uint256 expiryTime, uint256 commissionRate) = decodeReferral(referral);\\n\\n            uint256 commission = 0;\\n\\n            if (isReferralValid(signature, referrer, referee, expiryTime, commissionRate)) {\\n                commission = SafeMath.div(SafeMath.mul(amount, commissionRate), 10000);\\n\\n                emit ReferralUsed(referrer, referee, tokenAddress, amount, commission, commissionRate);\\n                amountForDestination = SafeMath.sub(amountForDestination, commission);\\n            }\\n\\n            if (commission > 0) {\\n                token.safeTransferFrom(buyer, referrer, commission);\\n            }\\n        }\\n\\n        token.safeTransferFrom(buyer, destination, amountForDestination);\\n    }\\n\\n    /**\\n     * @notice Check if a referral is valid\\n     * @param signature The signature to check (signed referral)\\n     * @param referrer The address of the referrer\\n     * @param referee The address of the referee\\n     * @param expiryTime The expiry time of the referral\\n     * @param commissionRate The commissionRate of the referral\\n     * @return True if the referral is valid\\n     */\\n    function isReferralValid(\\n        bytes memory signature,\\n        address referrer,\\n        address referee,\\n        uint256 expiryTime,\\n        uint256 commissionRate\\n    ) public view returns (bool) {\\n        if (commissionRate > _maxCommissionRate || referrer == referee || now > expiryTime) {\\n            return false;\\n        }\\n\\n        bytes32 hashedData = keccak256(abi.encodePacked(referrer, referee, expiryTime, commissionRate));\\n\\n        address signer = ECDSA.recover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hashedData)), signature);\\n\\n        if (_previousSigningWallets[signer] >= now) {\\n            return true;\\n        }\\n\\n        return _signingWallet == signer;\\n    }\\n\\n    function decodeReferral(bytes memory referral)\\n        public\\n        pure\\n        returns (\\n            bytes memory,\\n            address,\\n            address,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (bytes memory signature, address referrer, address referee, uint256 expiryTime, uint256 commissionRate) = abi.decode(\\n            referral,\\n            (bytes, address, address, uint256, uint256)\\n        );\\n\\n        return (signature, referrer, referee, expiryTime, commissionRate);\\n    }\\n}\\n\",\"keccak256\":\"0xc2c8874ec0b071822d0efb305302d55fba793f88b6b26a01fdf25aacb5ef7b96\"},\"src/solc_0.6/common/BaseWithStorage/Admin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.5;\\n\\n\\ncontract Admin {\\n    address internal _admin;\\n\\n    /// @dev emitted when the contract administrator is changed.\\n    /// @param oldAdmin address of the previous administrator.\\n    /// @param newAdmin address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    /// @dev gives the current administrator of this contract.\\n    /// @return the current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev change the administrator to be `newAdmin`.\\n    /// @param newAdmin address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"only admin can change admin\\\");\\n        require(_admin != newAdmin, \\\"already admin\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"only admin allowed\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe1a95ec41b32e523a6fad060f90aa6d03a72a545857a91c2f51473b6072637dc\"},\"src/solc_0.6/common/BaseWithStorage/MetaTransactionReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.5;\\n\\nimport \\\"./Admin.sol\\\";\\n\\ncontract MetaTransactionReceiver is Admin {\\n    mapping(address => bool) internal _metaTransactionContracts;\\n\\n    /// @dev emiited when a meta transaction processor is enabled/disabled\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    event MetaTransactionProcessor(address metaTransactionProcessor, bool enabled);\\n\\n    /// @dev Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    function setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) public onlyAdmin {\\n        require(metaTransactionProcessor != address(0), \\\"MetaTransactionReceiver: zero address\\\");\\n        _setMetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    function _setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) internal {\\n        _metaTransactionContracts[metaTransactionProcessor] = enabled;\\n        emit MetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    /// @dev check whether address `who` is given meta-transaction execution rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has meta-transaction execution rights.\\n    function isMetaTransactionProcessor(address who) external view returns (bool) {\\n        return _metaTransactionContracts[who];\\n    }\\n}\\n\",\"keccak256\":\"0xb2a40a48c62f9f44729bb9a08f96442a6fc655c89355a4038c497e3782d39b19\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620032183803806200321883398181016040526101a08110156200003957600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e08801516101008901516101208a01516101408b01516101608c0151610180909c015160016000559a9b999a9899979896979596949593949293919290919085856001600160a01b038216620000f8576040805162461bcd60e51b815260206004820152601f60248201527f526566657272616c56616c696461746f723a207a65726f206164647265737300604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0393841617905560045562000130908e16620003fd602090811b62002bd317901c565b6200016d5760405162461bcd60e51b8152600401808060200182810382526025815260200180620031f36025913960400191505060405180910390fd5b6200018c8c6001600160a01b0316620003fd60201b62002bd31760201c565b620001c95760405162461bcd60e51b8152600401808060200182810382526025815260200180620031f36025913960400191505060405180910390fd5b6001600160a01b038b1662000214576040805162461bcd60e51b81526020600482018190526024820152600080516020620031d3833981519152604482015290519081900360640190fd5b6001600160a01b038a166200025f576040805162461bcd60e51b81526020600482018190526024820152600080516020620031d3833981519152604482015290519081900360640190fd5b6001600160a01b038916620002aa576040805162461bcd60e51b81526020600482018190526024820152600080516020620031d3833981519152604482015290519081900360640190fd5b6001600160a01b038216620002f5576040805162461bcd60e51b81526020600482018190526024820152600080516020620031d3833981519152604482015290519081900360640190fd5b62000314816001600160a01b0316620003fd60201b62002bd31760201c565b620003515760405162461bcd60e51b8152600401808060200182810382526025815260200180620031f36025913960400191505060405180910390fd5b6001600160601b031960608e811b821660a0528d901b1660c052620003818b60016001600160e01b036200040316565b600680546001600160a01b039a8b166001600160a01b031991821617909155610140989098526101209690965260018054998916998816999099179098556001600160601b0319606092831b811660e05290821b811660805296901b909516610100525060078054919093169116179055506200046792505050565b3b151590565b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915582519384529083015280517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9281900390910190a15050565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205161014051612ce6620004ed60003980610be0528061249d525080610bbc5280611601525080612522525080611b565280611cb3525080611b0c5280611eb25280612556525080611b875280611c845250806111595280611f9e5250612ce66000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c8063984d6252116100b2578063c10a420811610081578063dc5074af11610066578063dc5074af146108a0578063e56f8a9e146108c6578063f23a6e61146108e357610136565b8063c10a4208146107c1578063caed35001461089857610136565b8063984d62521461055f578063ab1cc78c14610631578063b522ecff14610639578063bc197c811461065f57610136565b806365194ce71161010957806378e6e5b9116100ee57806378e6e5b9146104e55780638a04af6a1461050b5780638f2839701461053957610136565b806365194ce7146103635780636e9960c3146104c157610136565b80631187fd3c1461013b57806325cb5bc01461031b578063495906571461033557806358bc29441461033d575b600080fd5b610319600480360361012081101561015257600080fd5b6001600160a01b038235811692602081013582169260408201359092169181019060808101606082013564010000000081111561018e57600080fd5b8201836020820111156101a057600080fd5b803590602001918460208302840111640100000000831117156101c257600080fd5b919390928235926040810190602001356401000000008111156101e457600080fd5b8201836020820111156101f657600080fd5b8035906020019184602083028401116401000000008311171561021857600080fd5b91939092909160208101903564010000000081111561023657600080fd5b82018360208201111561024857600080fd5b8035906020019184602083028401116401000000008311171561026a57600080fd5b91939092909160208101903564010000000081111561028857600080fd5b82018360208201111561029a57600080fd5b803590602001918460018302840111640100000000831117156102bc57600080fd5b9193909290916020810190356401000000008111156102da57600080fd5b8201836020820111156102ec57600080fd5b8035906020019184600183028401116401000000008311171561030e57600080fd5b509092509050610978565b005b610323610bba565b60408051918252519081900360200190f35b610323610bde565b6103196004803603602081101561035357600080fd5b50356001600160a01b0316610c02565b6104096004803603602081101561037957600080fd5b81019060208101813564010000000081111561039457600080fd5b8201836020820111156103a657600080fd5b803590602001918460018302840111640100000000831117156103c857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610d3b945050505050565b6040518080602001866001600160a01b03166001600160a01b03168152602001856001600160a01b03166001600160a01b03168152602001848152602001838152602001828103825287818151815260200191508051906020019080838360005b8381101561048257818101518382015260200161046a565b50505050905090810190601f1680156104af5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6104c9610e40565b604080516001600160a01b039092168252519081900360200190f35b610319600480360360208110156104fb57600080fd5b50356001600160a01b0316610e4f565b6103196004803603604081101561052157600080fd5b506001600160a01b0381351690602001351515610f0d565b6103196004803603602081101561054f57600080fd5b50356001600160a01b0316610fbf565b6103196004803603606081101561057557600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156105a057600080fd5b8201836020820111156105b257600080fd5b803590602001918460208302840111640100000000831117156105d457600080fd5b9193909290916020810190356401000000008111156105f257600080fd5b82018360208201111561060457600080fd5b8035906020019184602083028401116401000000008311171561062657600080fd5b5090925090506110f8565b610323611283565b6103196004803603602081101561064f57600080fd5b50356001600160a01b0316611289565b61078c600480360360a081101561067557600080fd5b6001600160a01b0382358116926020810135909116918101906060810160408201356401000000008111156106a957600080fd5b8201836020820111156106bb57600080fd5b803590602001918460208302840111640100000000831117156106dd57600080fd5b9193909290916020810190356401000000008111156106fb57600080fd5b82018360208201111561070d57600080fd5b8035906020019184602083028401116401000000008311171561072f57600080fd5b91939092909160208101903564010000000081111561074d57600080fd5b82018360208201111561075f57600080fd5b8035906020019184600183028401116401000000008311171561078157600080fd5b5090925090506113a4565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b610884600480360360a08110156107d757600080fd5b8101906020810181356401000000008111156107f257600080fd5b82018360208201111561080457600080fd5b8035906020019184600183028401116401000000008311171561082657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160a01b0383358116945060208401351692604081013592506060013590506113d1565b604080519115158252519081900360200190f35b6104c961150d565b610884600480360360208110156108b657600080fd5b50356001600160a01b031661151c565b610319600480360360208110156108dc57600080fd5b503561153a565b61078c600480360360a08110156108f957600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a08101608082013564010000000081111561093957600080fd5b82018360208201111561094b57600080fd5b8035906020019184600183028401116401000000008311171561096d57600080fd5b5090925090506115d4565b600260005414156109d0576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556109df8e8d6115ff565b610ad68d8d8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a908190840183828082843760009201919091525061176292505050565b610b2a8e8c8c6003818110610ae757fe5b9050602002013586868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ae592505050565b610b688e8e8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611b3692505050565b610ba58d898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611f2792505050565b50506001600055505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001546001600160a01b03163314610c61576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116610cbc576040805162461bcd60e51b815260206004820152601f60248201527f526566657272616c56616c696461746f723a207a65726f206164647265737300604482015290519081900360640190fd5b600380546001600160a01b03908116600090815260056020908152604091829020620d2f0042019055835473ffffffffffffffffffffffffffffffffffffffff19169285169283179093558051918252517fbbb5fb2ee7e707ae0c968f63e94211ea81e66a718c34e2f810a7619e5678a217929181900390910190a150565b606060008060008060606000806000808a80602001905160a0811015610d6057600080fd5b8101908080516040519392919084640100000000821115610d8057600080fd5b908301906020820185811115610d9557600080fd5b8251640100000000811182820188101715610daf57600080fd5b82525081516020918201929091019080838360005b83811015610ddc578181015183820152602001610dc4565b50505050905090810190601f168015610e095780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608090930151959f50909d509b5099509197505050505050505091939590929450565b6001546001600160a01b031690565b6001546001600160a01b03163314610e985760405162461bcd60e51b8152600401808060200182810382526023815260200180612bfc6023913960400191505060405180910390fd5b6001600160a01b038116610ef3576040805162461bcd60e51b815260206004820152601f60248201527f526566657272616c56616c696461746f723a207a65726f206164647265737300604482015290519081900360640190fd5b6001600160a01b0316600090815260056020526040812055565b6001546001600160a01b03163314610f6c576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038216610fb15760405162461bcd60e51b8152600401808060200182810382526025815260200180612c626025913960400191505060405180910390fd5b610fbb82826120eb565b5050565b6001546001600160a01b0316331461101e576040805162461bcd60e51b815260206004820152601b60248201527f6f6e6c792061646d696e2063616e206368616e67652061646d696e0000000000604482015290519081900360640190fd5b6001546001600160a01b0382811691161415611081576040805162461bcd60e51b815260206004820152600d60248201527f616c72656164792061646d696e00000000000000000000000000000000000000604482015290519081900360640190fd5b600154604080516001600160a01b039283168152918316602083015280517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9281900390910190a16001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b03163314611157576040805162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632eb2c2d63087878787876040518763ffffffff1660e01b815260040180876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b031681526020018060200180602001806020018481038452888882818152602001925060200280828437600083820152601f01601f19169091018581038452868152602090810191508790870280828437600081840152601f19601f8201169050808301925050508481038252600081526020016020019950505050505050505050600060405180830381600087803b15801561126457600080fd5b505af1158015611278573d6000803e3d6000fd5b505050505050505050565b60045490565b6001600160a01b0381166112e4576040805162461bcd60e51b815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b6001546001600160a01b03163314611343576040805162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015290519081900360640190fd5b600680546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f4d66958b757eb92a1b43d02be4c38c9500b73f532420ee3706cb43d420ba02369181900360200190a150565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b60006004548211806113f45750836001600160a01b0316856001600160a01b0316145b806113fe57508242115b1561140b57506000611504565b60408051606087811b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009081166020808501919091529188901b166034830152604882018690526068808301869052835180840390910181526088830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a884015260c48084018290528451808503909101815260e490930190935281519101206000906114c2908961216d565b6001600160a01b03811660009081526005602052604090205490915042116114ef57600192505050611504565b6003546001600160a01b039081169116149150505b95945050505050565b6003546001600160a01b031690565b6001600160a01b031660009081526002602052604090205460ff1690565b6001546001600160a01b03163314611599576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b60048190556040805182815290517f774069781371d65424b3b0b101c1d40014532cac040f979595b99a3fcf8ce08c9181900360200190a150565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b7f00000000000000000000000000000000000000000000000000000000000000004210611673576040805162461bcd60e51b815260206004820152600c60248201527f53414c455f49535f4f5645520000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821633148061169957503360009081526002602052604090205460ff165b6116ea576040805162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03811615806117115750816001600160a01b0316816001600160a01b0316145b610fbb576040805162461bcd60e51b815260206004820152600d60248201527f52455345525645445f4c414e4400000000000000000000000000000000000000604482015290519081900360640190fd5b600087878760008151811061177357fe5b60200260200101518860018151811061178857fe5b60200260200101518960028151811061179d57fe5b60200260200101518a6003815181106117b257fe5b60200260200101518a8a60405160200180828051906020019060200280838360005b838110156117ec5781810151838201526020016117d4565b50505050905001915050604051602081830303815290604052805190602001208a60405160200180828051906020019060200280838360005b8381101561183d578181015183820152602001611825565b5050505090500191505060405160208183030381529060405280519060200120604051602001808a6001600160a01b03166001600160a01b031660601b8152601401896001600160a01b03166001600160a01b031660601b81526014018881526020018781526020018681526020018581526020018481526020018381526020018281526020019950505050505050505050604051602081830303815290604052805190602001209050600760009054906101000a90046001600160a01b03166001600160a01b031663012847ed83836040518363ffffffff1660e01b81526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561195f578181015183820152602001611947565b50505050905090810190601f16801561198c5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156119aa57600080fd5b505afa1580156119be573d6000803e3d6000fd5b505050506040513d60208110156119d457600080fd5b5051611a27576040805162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f415554480000000000000000000000000000000000000000604482015290519081900360640190fd5b6000611a8887600081518110611a3957fe5b602002602001015188600181518110611a4e57fe5b602002602001015189600281518110611a6357fe5b60200260200101518a600381518110611a7857fe5b60200260200101518c8b8b612356565b9050611a9484826123fb565b611278576040805162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f4c414e440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000611af184846124c4565b600654909150611b30908590839085906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000612636565b50505050565b80600281518110611b4357fe5b602002602001015160011480611b8057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316155b15611c82577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e1e3bbf8383600281518110611bc257fe5b602002602001015184600081518110611bd757fe5b602002602001015185600181518110611bec57fe5b60200260200101516040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b031681526020018481526020018381526020018281526020018060200182810382526000815260200160200195505050505050600060405180830381600087803b158015611c6557600080fd5b505af1158015611c79573d6000803e3d6000fd5b50505050611e22565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e1e3bbf7f000000000000000000000000000000000000000000000000000000000000000083600281518110611cdf57fe5b602002602001015184600081518110611cf457fe5b602002602001015185600181518110611d0957fe5b60200260200101518760405160200180826001600160a01b03166001600160a01b031681526020019150506040516020818303038152906040526040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b0316815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611db9578181015183820152602001611da1565b50505050905090810190601f168015611de65780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b158015611e0957600080fd5b505af1158015611e1d573d6000803e3d6000fd5b505050505b61019881600181518110611e3257fe5b60200260200101510281600081518110611e4857fe5b602002602001015101826001600160a01b0316846001600160a01b03167fe4dfa6ac11314892f3029b34a25b1a887da3b1cab2bbf8506d87128ba6e3ac0284600281518110611e9357fe5b602002602001015185600381518110611ea857fe5b60200260200101517f000000000000000000000000000000000000000000000000000000000000000087600381518110611ede57fe5b602002602001015160405180858152602001848152602001836001600160a01b03166001600160a01b0316815260200182815260200194505050505060405180910390a4505050565b6060815167ffffffffffffffff81118015611f4157600080fd5b50604051908082528060200260200182016040528015611f6b578160200160208202803683370190505b50905060005b8251811015611f9b576001828281518110611f8857fe5b6020908102919091010152600101611f71565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632eb2c2d6308585856040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b03168152602001806020018060200180602001848103845286818151815260200191508051906020019060200280838360005b8381101561205657818101518382015260200161203e565b50505050905001848103835285818151815260200191508051906020019060200280838360005b8381101561209557818101518382015260200161207d565b50505050905001848103825260008152602001602001975050505050505050600060405180830381600087803b1580156120ce57600080fd5b505af11580156120e2573d6000803e3d6000fd5b50505050505050565b6001600160a01b03821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915582519384529083015280517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9281900390910190a15050565b600081516041146121c5576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156122365760405162461bcd60e51b8152600401808060200182810382526022815260200180612bda6022913960400191505060405180910390fd5b8060ff16601b1415801561224e57508060ff16601c14155b1561228a5760405162461bcd60e51b8152600401808060200182810382526022815260200180612c1f6022913960400191505060405180910390fd5b60408051600080825260208083018085528a905260ff85168385015260608301879052608083018690529251909260019260a080820193601f1981019281900390910190855afa1580156122e2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661234a576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b93505050505b92915050565b60008787878787878760405160200180888152602001878152602001868152602001858152602001846001600160a01b03166001600160a01b031660601b8152601401838152602001828051906020019060200280838360005b838110156123c85781810151838201526020016123b0565b50505050905001975050505050505050604051602081830303815290604052805190602001209050979650505050505050565b600081815b845181101561249a57600085828151811061241757fe5b602002602001015190508083101561245f5782816040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250612491565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b50600101612400565b507f0000000000000000000000000000000000000000000000000000000000000000149392505050565b6000806124e960646124dd85600563ffffffff61273e16565b9063ffffffff61279e16565b604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820184905291519293507f0000000000000000000000000000000000000000000000000000000000000000909116916323b872dd916064808201926020929091908290030181600087803b1580156125a157600080fd5b505af11580156125b5573d6000803e3d6000fd5b505050506040513d60208110156125cb57600080fd5b505161261e576040805162461bcd60e51b815260206004820152601360248201527f4645455f5452414e534645525f4641494c454400000000000000000000000000604482015290519081900360640190fd5b61262e838263ffffffff6127e016565b949350505050565b825181908590156127235760606000806000806126528a610d3b565b939850919650945092509050600061266d86868686866113d1565b156126fb5761268761267f8d8461273e565b61271061279e565b9050886001600160a01b0316846001600160a01b0316866001600160a01b03167fac7a699eb95c3c6d390ec4626de17ef9a67b35891efdb197beba7c7fdd45fac48f858760405180848152602001838152602001828152602001935050505060405180910390a46126f887826127e0565b96505b801561271c5761271c6001600160a01b0389168e878463ffffffff61282216565b5050505050505b6120e26001600160a01b03831688868463ffffffff61282216565b60008261274d57506000612350565b8282028284828161275a57fe5b04146127975760405162461bcd60e51b8152600401808060200182810382526021815260200180612c416021913960400191505060405180910390fd5b9392505050565b600061279783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506128aa565b600061279783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061294c565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611b309085906129a6565b600081836129365760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156128fb5781810151838201526020016128e3565b50505050905090810190601f1680156129285780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161294257fe5b0495945050505050565b6000818484111561299e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128fb5781810151838201526020016128e3565b505050900390565b60606129fb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a5c9092919063ffffffff16565b805190915015612a5757808060200190516020811015612a1a57600080fd5b5051612a575760405162461bcd60e51b815260040180806020018281038252602a815260200180612c87602a913960400191505060405180910390fd5b505050565b606061262e84846000856060612a7185612bd3565b612ac2576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612b015780518252601f199092019160209182019101612ae2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612b63576040519150601f19603f3d011682016040523d82523d6000602084013e612b68565b606091505b50915091508115612b7c57915061262e9050565b805115612b8c5780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156128fb5781810151838201526020016128e3565b3b15159056fe45434453413a20696e76616c6964207369676e6174757265202773272076616c7565526566657272616c56616c696461746f723a2053656e646572206e6f742061646d696e45434453413a20696e76616c6964207369676e6174757265202776272076616c7565536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d6574615472616e73616374696f6e52656365697665723a207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220fb90b30e06152ba43e109dfbdd3fe2ca3c5eaeffbc009df13e4f11eb048f509d64736f6c6343000605003345737461746553616c6557697468417574683a207a65726f206164647265737345737461746553616c6557697468417574683a206973206e6f74206120636f6e7472616374",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c8063984d6252116100b2578063c10a420811610081578063dc5074af11610066578063dc5074af146108a0578063e56f8a9e146108c6578063f23a6e61146108e357610136565b8063c10a4208146107c1578063caed35001461089857610136565b8063984d62521461055f578063ab1cc78c14610631578063b522ecff14610639578063bc197c811461065f57610136565b806365194ce71161010957806378e6e5b9116100ee57806378e6e5b9146104e55780638a04af6a1461050b5780638f2839701461053957610136565b806365194ce7146103635780636e9960c3146104c157610136565b80631187fd3c1461013b57806325cb5bc01461031b578063495906571461033557806358bc29441461033d575b600080fd5b610319600480360361012081101561015257600080fd5b6001600160a01b038235811692602081013582169260408201359092169181019060808101606082013564010000000081111561018e57600080fd5b8201836020820111156101a057600080fd5b803590602001918460208302840111640100000000831117156101c257600080fd5b919390928235926040810190602001356401000000008111156101e457600080fd5b8201836020820111156101f657600080fd5b8035906020019184602083028401116401000000008311171561021857600080fd5b91939092909160208101903564010000000081111561023657600080fd5b82018360208201111561024857600080fd5b8035906020019184602083028401116401000000008311171561026a57600080fd5b91939092909160208101903564010000000081111561028857600080fd5b82018360208201111561029a57600080fd5b803590602001918460018302840111640100000000831117156102bc57600080fd5b9193909290916020810190356401000000008111156102da57600080fd5b8201836020820111156102ec57600080fd5b8035906020019184600183028401116401000000008311171561030e57600080fd5b509092509050610978565b005b610323610bba565b60408051918252519081900360200190f35b610323610bde565b6103196004803603602081101561035357600080fd5b50356001600160a01b0316610c02565b6104096004803603602081101561037957600080fd5b81019060208101813564010000000081111561039457600080fd5b8201836020820111156103a657600080fd5b803590602001918460018302840111640100000000831117156103c857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610d3b945050505050565b6040518080602001866001600160a01b03166001600160a01b03168152602001856001600160a01b03166001600160a01b03168152602001848152602001838152602001828103825287818151815260200191508051906020019080838360005b8381101561048257818101518382015260200161046a565b50505050905090810190601f1680156104af5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6104c9610e40565b604080516001600160a01b039092168252519081900360200190f35b610319600480360360208110156104fb57600080fd5b50356001600160a01b0316610e4f565b6103196004803603604081101561052157600080fd5b506001600160a01b0381351690602001351515610f0d565b6103196004803603602081101561054f57600080fd5b50356001600160a01b0316610fbf565b6103196004803603606081101561057557600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156105a057600080fd5b8201836020820111156105b257600080fd5b803590602001918460208302840111640100000000831117156105d457600080fd5b9193909290916020810190356401000000008111156105f257600080fd5b82018360208201111561060457600080fd5b8035906020019184602083028401116401000000008311171561062657600080fd5b5090925090506110f8565b610323611283565b6103196004803603602081101561064f57600080fd5b50356001600160a01b0316611289565b61078c600480360360a081101561067557600080fd5b6001600160a01b0382358116926020810135909116918101906060810160408201356401000000008111156106a957600080fd5b8201836020820111156106bb57600080fd5b803590602001918460208302840111640100000000831117156106dd57600080fd5b9193909290916020810190356401000000008111156106fb57600080fd5b82018360208201111561070d57600080fd5b8035906020019184602083028401116401000000008311171561072f57600080fd5b91939092909160208101903564010000000081111561074d57600080fd5b82018360208201111561075f57600080fd5b8035906020019184600183028401116401000000008311171561078157600080fd5b5090925090506113a4565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b610884600480360360a08110156107d757600080fd5b8101906020810181356401000000008111156107f257600080fd5b82018360208201111561080457600080fd5b8035906020019184600183028401116401000000008311171561082657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160a01b0383358116945060208401351692604081013592506060013590506113d1565b604080519115158252519081900360200190f35b6104c961150d565b610884600480360360208110156108b657600080fd5b50356001600160a01b031661151c565b610319600480360360208110156108dc57600080fd5b503561153a565b61078c600480360360a08110156108f957600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a08101608082013564010000000081111561093957600080fd5b82018360208201111561094b57600080fd5b8035906020019184600183028401116401000000008311171561096d57600080fd5b5090925090506115d4565b600260005414156109d0576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556109df8e8d6115ff565b610ad68d8d8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a908190840183828082843760009201919091525061176292505050565b610b2a8e8c8c6003818110610ae757fe5b9050602002013586868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ae592505050565b610b688e8e8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611b3692505050565b610ba58d898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611f2792505050565b50506001600055505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001546001600160a01b03163314610c61576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116610cbc576040805162461bcd60e51b815260206004820152601f60248201527f526566657272616c56616c696461746f723a207a65726f206164647265737300604482015290519081900360640190fd5b600380546001600160a01b03908116600090815260056020908152604091829020620d2f0042019055835473ffffffffffffffffffffffffffffffffffffffff19169285169283179093558051918252517fbbb5fb2ee7e707ae0c968f63e94211ea81e66a718c34e2f810a7619e5678a217929181900390910190a150565b606060008060008060606000806000808a80602001905160a0811015610d6057600080fd5b8101908080516040519392919084640100000000821115610d8057600080fd5b908301906020820185811115610d9557600080fd5b8251640100000000811182820188101715610daf57600080fd5b82525081516020918201929091019080838360005b83811015610ddc578181015183820152602001610dc4565b50505050905090810190601f168015610e095780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608090930151959f50909d509b5099509197505050505050505091939590929450565b6001546001600160a01b031690565b6001546001600160a01b03163314610e985760405162461bcd60e51b8152600401808060200182810382526023815260200180612bfc6023913960400191505060405180910390fd5b6001600160a01b038116610ef3576040805162461bcd60e51b815260206004820152601f60248201527f526566657272616c56616c696461746f723a207a65726f206164647265737300604482015290519081900360640190fd5b6001600160a01b0316600090815260056020526040812055565b6001546001600160a01b03163314610f6c576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038216610fb15760405162461bcd60e51b8152600401808060200182810382526025815260200180612c626025913960400191505060405180910390fd5b610fbb82826120eb565b5050565b6001546001600160a01b0316331461101e576040805162461bcd60e51b815260206004820152601b60248201527f6f6e6c792061646d696e2063616e206368616e67652061646d696e0000000000604482015290519081900360640190fd5b6001546001600160a01b0382811691161415611081576040805162461bcd60e51b815260206004820152600d60248201527f616c72656164792061646d696e00000000000000000000000000000000000000604482015290519081900360640190fd5b600154604080516001600160a01b039283168152918316602083015280517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9281900390910190a16001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b03163314611157576040805162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632eb2c2d63087878787876040518763ffffffff1660e01b815260040180876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b031681526020018060200180602001806020018481038452888882818152602001925060200280828437600083820152601f01601f19169091018581038452868152602090810191508790870280828437600081840152601f19601f8201169050808301925050508481038252600081526020016020019950505050505050505050600060405180830381600087803b15801561126457600080fd5b505af1158015611278573d6000803e3d6000fd5b505050505050505050565b60045490565b6001600160a01b0381166112e4576040805162461bcd60e51b815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b6001546001600160a01b03163314611343576040805162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015290519081900360640190fd5b600680546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f4d66958b757eb92a1b43d02be4c38c9500b73f532420ee3706cb43d420ba02369181900360200190a150565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b60006004548211806113f45750836001600160a01b0316856001600160a01b0316145b806113fe57508242115b1561140b57506000611504565b60408051606087811b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009081166020808501919091529188901b166034830152604882018690526068808301869052835180840390910181526088830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a884015260c48084018290528451808503909101815260e490930190935281519101206000906114c2908961216d565b6001600160a01b03811660009081526005602052604090205490915042116114ef57600192505050611504565b6003546001600160a01b039081169116149150505b95945050505050565b6003546001600160a01b031690565b6001600160a01b031660009081526002602052604090205460ff1690565b6001546001600160a01b03163314611599576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b60048190556040805182815290517f774069781371d65424b3b0b101c1d40014532cac040f979595b99a3fcf8ce08c9181900360200190a150565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b7f00000000000000000000000000000000000000000000000000000000000000004210611673576040805162461bcd60e51b815260206004820152600c60248201527f53414c455f49535f4f5645520000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821633148061169957503360009081526002602052604090205460ff165b6116ea576040805162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03811615806117115750816001600160a01b0316816001600160a01b0316145b610fbb576040805162461bcd60e51b815260206004820152600d60248201527f52455345525645445f4c414e4400000000000000000000000000000000000000604482015290519081900360640190fd5b600087878760008151811061177357fe5b60200260200101518860018151811061178857fe5b60200260200101518960028151811061179d57fe5b60200260200101518a6003815181106117b257fe5b60200260200101518a8a60405160200180828051906020019060200280838360005b838110156117ec5781810151838201526020016117d4565b50505050905001915050604051602081830303815290604052805190602001208a60405160200180828051906020019060200280838360005b8381101561183d578181015183820152602001611825565b5050505090500191505060405160208183030381529060405280519060200120604051602001808a6001600160a01b03166001600160a01b031660601b8152601401896001600160a01b03166001600160a01b031660601b81526014018881526020018781526020018681526020018581526020018481526020018381526020018281526020019950505050505050505050604051602081830303815290604052805190602001209050600760009054906101000a90046001600160a01b03166001600160a01b031663012847ed83836040518363ffffffff1660e01b81526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561195f578181015183820152602001611947565b50505050905090810190601f16801561198c5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156119aa57600080fd5b505afa1580156119be573d6000803e3d6000fd5b505050506040513d60208110156119d457600080fd5b5051611a27576040805162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f415554480000000000000000000000000000000000000000604482015290519081900360640190fd5b6000611a8887600081518110611a3957fe5b602002602001015188600181518110611a4e57fe5b602002602001015189600281518110611a6357fe5b60200260200101518a600381518110611a7857fe5b60200260200101518c8b8b612356565b9050611a9484826123fb565b611278576040805162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f4c414e440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000611af184846124c4565b600654909150611b30908590839085906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000612636565b50505050565b80600281518110611b4357fe5b602002602001015160011480611b8057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316155b15611c82577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e1e3bbf8383600281518110611bc257fe5b602002602001015184600081518110611bd757fe5b602002602001015185600181518110611bec57fe5b60200260200101516040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b031681526020018481526020018381526020018281526020018060200182810382526000815260200160200195505050505050600060405180830381600087803b158015611c6557600080fd5b505af1158015611c79573d6000803e3d6000fd5b50505050611e22565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e1e3bbf7f000000000000000000000000000000000000000000000000000000000000000083600281518110611cdf57fe5b602002602001015184600081518110611cf457fe5b602002602001015185600181518110611d0957fe5b60200260200101518760405160200180826001600160a01b03166001600160a01b031681526020019150506040516020818303038152906040526040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b0316815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611db9578181015183820152602001611da1565b50505050905090810190601f168015611de65780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b158015611e0957600080fd5b505af1158015611e1d573d6000803e3d6000fd5b505050505b61019881600181518110611e3257fe5b60200260200101510281600081518110611e4857fe5b602002602001015101826001600160a01b0316846001600160a01b03167fe4dfa6ac11314892f3029b34a25b1a887da3b1cab2bbf8506d87128ba6e3ac0284600281518110611e9357fe5b602002602001015185600381518110611ea857fe5b60200260200101517f000000000000000000000000000000000000000000000000000000000000000087600381518110611ede57fe5b602002602001015160405180858152602001848152602001836001600160a01b03166001600160a01b0316815260200182815260200194505050505060405180910390a4505050565b6060815167ffffffffffffffff81118015611f4157600080fd5b50604051908082528060200260200182016040528015611f6b578160200160208202803683370190505b50905060005b8251811015611f9b576001828281518110611f8857fe5b6020908102919091010152600101611f71565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632eb2c2d6308585856040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b03168152602001806020018060200180602001848103845286818151815260200191508051906020019060200280838360005b8381101561205657818101518382015260200161203e565b50505050905001848103835285818151815260200191508051906020019060200280838360005b8381101561209557818101518382015260200161207d565b50505050905001848103825260008152602001602001975050505050505050600060405180830381600087803b1580156120ce57600080fd5b505af11580156120e2573d6000803e3d6000fd5b50505050505050565b6001600160a01b03821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915582519384529083015280517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9281900390910190a15050565b600081516041146121c5576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156122365760405162461bcd60e51b8152600401808060200182810382526022815260200180612bda6022913960400191505060405180910390fd5b8060ff16601b1415801561224e57508060ff16601c14155b1561228a5760405162461bcd60e51b8152600401808060200182810382526022815260200180612c1f6022913960400191505060405180910390fd5b60408051600080825260208083018085528a905260ff85168385015260608301879052608083018690529251909260019260a080820193601f1981019281900390910190855afa1580156122e2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661234a576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b93505050505b92915050565b60008787878787878760405160200180888152602001878152602001868152602001858152602001846001600160a01b03166001600160a01b031660601b8152601401838152602001828051906020019060200280838360005b838110156123c85781810151838201526020016123b0565b50505050905001975050505050505050604051602081830303815290604052805190602001209050979650505050505050565b600081815b845181101561249a57600085828151811061241757fe5b602002602001015190508083101561245f5782816040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250612491565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b50600101612400565b507f0000000000000000000000000000000000000000000000000000000000000000149392505050565b6000806124e960646124dd85600563ffffffff61273e16565b9063ffffffff61279e16565b604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820184905291519293507f0000000000000000000000000000000000000000000000000000000000000000909116916323b872dd916064808201926020929091908290030181600087803b1580156125a157600080fd5b505af11580156125b5573d6000803e3d6000fd5b505050506040513d60208110156125cb57600080fd5b505161261e576040805162461bcd60e51b815260206004820152601360248201527f4645455f5452414e534645525f4641494c454400000000000000000000000000604482015290519081900360640190fd5b61262e838263ffffffff6127e016565b949350505050565b825181908590156127235760606000806000806126528a610d3b565b939850919650945092509050600061266d86868686866113d1565b156126fb5761268761267f8d8461273e565b61271061279e565b9050886001600160a01b0316846001600160a01b0316866001600160a01b03167fac7a699eb95c3c6d390ec4626de17ef9a67b35891efdb197beba7c7fdd45fac48f858760405180848152602001838152602001828152602001935050505060405180910390a46126f887826127e0565b96505b801561271c5761271c6001600160a01b0389168e878463ffffffff61282216565b5050505050505b6120e26001600160a01b03831688868463ffffffff61282216565b60008261274d57506000612350565b8282028284828161275a57fe5b04146127975760405162461bcd60e51b8152600401808060200182810382526021815260200180612c416021913960400191505060405180910390fd5b9392505050565b600061279783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506128aa565b600061279783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061294c565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611b309085906129a6565b600081836129365760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156128fb5781810151838201526020016128e3565b50505050905090810190601f1680156129285780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161294257fe5b0495945050505050565b6000818484111561299e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128fb5781810151838201526020016128e3565b505050900390565b60606129fb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a5c9092919063ffffffff16565b805190915015612a5757808060200190516020811015612a1a57600080fd5b5051612a575760405162461bcd60e51b815260040180806020018281038252602a815260200180612c87602a913960400191505060405180910390fd5b505050565b606061262e84846000856060612a7185612bd3565b612ac2576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612b015780518252601f199092019160209182019101612ae2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612b63576040519150601f19603f3d011682016040523d82523d6000602084013e612b68565b606091505b50915091508115612b7c57915061262e9050565b805115612b8c5780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156128fb5781810151838201526020016128e3565b3b15159056fe45434453413a20696e76616c6964207369676e6174757265202773272076616c7565526566657272616c56616c696461746f723a2053656e646572206e6f742061646d696e45434453413a20696e76616c6964207369676e6174757265202776272076616c7565536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d6574615472616e73616374696f6e52656365697665723a207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220fb90b30e06152ba43e109dfbdd3fe2ca3c5eaeffbc009df13e4f11eb048f509d64736f6c63430006050033",
  "devdoc": {
    "methods": {
      "buyLandWithSand(address,address,address,uint256[],bytes32,uint256[],bytes32[],bytes,bytes)": {
        "params": {
          "assetIds": "asset ids (lands) that will be bought",
          "buyer": "address that perform the payment",
          "info": "[X_INDEX=0] x coordinate of the Land [Y_INDEX=1] y coordinate of the Land [SIZE_INDEX=2] size of the pack of Land to purchase [PRICE_INDEX=3] price in SAND to purchase that Land",
          "proof": "merkleProof for that particular Land",
          "referral": "referral id",
          "reserved": "the reserved address (if any)",
          "salt": "The salt submitted for verification.",
          "signature": "A signed message specifying tx details",
          "to": "address that will own the purchased Land"
        }
      },
      "changeAdmin(address)": {
        "details": "change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "address of the new administrator."
        }
      },
      "disablePreviousSigningWallet(address)": {
        "details": "Disable compromised signing wallet",
        "params": {
          "disableWallet": "The wallet address to be disabled"
        }
      },
      "getAdmin()": {
        "details": "gives the current administrator of this contract.",
        "returns": {
          "_0": "the current administrator of this contract."
        }
      },
      "getSigningWallet()": {
        "details": "signing wallet authorized for referral",
        "returns": {
          "_0": "the address of the signing wallet"
        }
      },
      "isMetaTransactionProcessor(address)": {
        "details": "check whether address `who` is given meta-transaction execution rights.",
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has meta-transaction execution rights."
        }
      },
      "isReferralValid(bytes,address,address,uint256,uint256)": {
        "params": {
          "commissionRate": "The commissionRate of the referral",
          "expiryTime": "The expiry time of the referral",
          "referee": "The address of the referee",
          "referrer": "The address of the referrer",
          "signature": "The signature to check (signed referral)"
        },
        "returns": {
          "_0": "True if the referral is valid"
        }
      },
      "setMetaTransactionProcessor(address,bool)": {
        "details": "Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).",
        "params": {
          "enabled": "set whether the metaTransactionProcessor is enabled or disabled.",
          "metaTransactionProcessor": "address that will be given/removed metaTransactionProcessor rights."
        }
      },
      "setReceivingWallet(address)": {
        "params": {
          "newWallet": "address of the new receiving wallet"
        }
      },
      "updateMaxCommissionRate(uint256)": {
        "details": "Update the maximum commission rate",
        "params": {
          "newMaxCommissionRate": "The new maximum commission rate"
        }
      },
      "updateSigningWallet(address)": {
        "details": "Update the signing wallet The previous wallet is still valid for a grace period (_previousSigningDelay). If you want to disable the previous wallet, use the disablePreviousSigningWallet function.",
        "params": {
          "newSigningWallet": "The new address of the signing wallet"
        }
      },
      "withdrawAssets(address,uint256[],uint256[])": {
        "params": {
          "assetIds": "the assetIds to be transferred",
          "to": "intended recipient of the asset tokens",
          "values": "the quantities of the assetIds to be transferred"
        }
      }
    },
    "title": "Estate Sale contract with referral"
  },
  "userdoc": {
    "methods": {
      "buyLandWithSand(address,address,address,uint256[],bytes32,uint256[],bytes32[],bytes,bytes)": {
        "notice": "buy Land with SAND using the merkle proof associated with it"
      },
      "getExpiryTime()": {
        "notice": "Gets the expiry time for the current sale"
      },
      "getMaxCommissionRate()": {
        "notice": "the max commission rate"
      },
      "getMerkleRoot()": {
        "notice": "Gets the Merkle root associated with the current sale"
      },
      "isReferralValid(bytes,address,address,uint256,uint256)": {
        "notice": "Check if a referral is valid"
      },
      "setReceivingWallet(address)": {
        "notice": "set the wallet receiving the proceeds"
      },
      "withdrawAssets(address,uint256[],uint256[])": {
        "notice": "enable Admin to withdraw remaining assets from EstateSaleWithFee contract"
      }
    },
    "notice": "This contract manages the sale of our lands as Estates"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1129,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 14091,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14160,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_metaTransactionContracts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12192,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_signingWallet",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12194,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_maxCommissionRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 12198,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_previousSigningWallets",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7749,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_wallet",
        "offset": 0,
        "slot": "6",
        "type": "t_address_payable"
      },
      {
        "astId": 7751,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_authValidator",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(AuthValidator)7063"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AuthValidator)7063": {
        "encoding": "inplace",
        "label": "contract AuthValidator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}