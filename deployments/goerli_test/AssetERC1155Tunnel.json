{
  "address": "0xea28428106c9c715bc4d2C6FFcFC5Dc929f74678",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        },
        {
          "internalType": "contract IAssetERC1155",
          "name": "_rootToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchDepositToChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootToken",
      "outputs": [
        {
          "internalType": "contract IAssetERC1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2d2705d2854a87c5e5899f7a4274c919a0b074a4cbdf04e51a1dd7d55e21ca6",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0xea28428106c9c715bc4d2C6FFcFC5Dc929f74678",
    "transactionIndex": 28,
    "gasUsed": "3112008",
    "logsBloom": "0x
    "blockHash": "0xb51472e38d58a2463a16b647406f2cc21d739264deba5603066c035cdfe93b9a",
    "transactionHash": "0xb2d2705d2854a87c5e5899f7a4274c919a0b074a4cbdf04e51a1dd7d55e21ca6",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 6834358,
        "transactionHash": "0xb2d2705d2854a87c5e5899f7a4274c919a0b074a4cbdf04e51a1dd7d55e21ca6",
        "address": "0xea28428106c9c715bc4d2C6FFcFC5Dc929f74678",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a796ae911621e00809e0e7c8f0ad6bf118e5139e"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0xb51472e38d58a2463a16b647406f2cc21d739264deba5603066c035cdfe93b9a"
      }
    ],
    "blockNumber": 6834358,
    "cumulativeGasUsed": "4722401",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA",
    "0x02798784EbC991Ab0e2E6E64d62D12E77247C826",
    "0xD1Eb013345bAe50B396E0293636BCF0204463452"
  ],
  "numDeployments": 1,
  "solcInputHash": "3ac99781400346b5ef1247840c0f0d75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"},{\"internalType\":\"contract IAssetERC1155\",\"name\":\"_rootToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchDepositToChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootToken\",\"outputs\":[{\"internalType\":\"contract IAssetERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses all token transfers across bridge\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers across bridge\"}},\"title\":\"ASSETERC1155 bridge on L1\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol\":\"AssetERC1155Tunnel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/ExitPayloadReader.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { RLPReader } from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n  using RLPReader for bytes;\\n  using RLPReader for RLPReader.RLPItem;\\n\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct ExitPayload {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  struct Receipt {\\n    RLPReader.RLPItem[] data;\\n    bytes raw;\\n    uint256 logIndex;\\n  }\\n\\n  struct Log {\\n    RLPReader.RLPItem data;\\n    RLPReader.RLPItem[] list;\\n  }\\n\\n  struct LogTopics {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n  function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n  function toExitPayload(bytes memory data)\\n        internal\\n        pure\\n        returns (ExitPayload memory)\\n    {\\n        RLPReader.RLPItem[] memory payloadData = data\\n            .toRlpItem()\\n            .toList();\\n\\n        return ExitPayload(payloadData);\\n    }\\n\\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[0].toUint();\\n    }\\n\\n    function getBlockProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[1].toBytes();\\n    }\\n\\n    function getBlockNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[2].toUint();\\n    }\\n\\n    function getBlockTime(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[3].toUint();\\n    }\\n\\n    function getTxRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[4].toUint());\\n    }\\n\\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[5].toUint());\\n    }\\n\\n    function getReceipt(ExitPayload memory payload) internal pure returns(Receipt memory receipt) {\\n      receipt.raw = payload.data[6].toBytes();\\n      RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n      if (receiptItem.isList()) {\\n          // legacy tx\\n          receipt.data = receiptItem.toList();\\n      } else {\\n          // pop first byte before parsting receipt\\n          bytes memory typedBytes = receipt.raw;\\n          bytes memory result = new bytes(typedBytes.length - 1);\\n          uint256 srcPtr;\\n          uint256 destPtr;\\n          assembly {\\n              srcPtr := add(33, typedBytes)\\n              destPtr := add(0x20, result)\\n          }\\n\\n          copy(srcPtr, destPtr, result.length);\\n          receipt.data = result.toRlpItem().toList();\\n      }\\n\\n      receipt.logIndex = getReceiptLogIndex(payload);\\n      return receipt;\\n    }\\n\\n    function getReceiptProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[7].toBytes();\\n    }\\n\\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[8].toBytes();\\n    }\\n\\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[8].toUint();\\n    }\\n\\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[9].toUint();\\n    }\\n    \\n    // Receipt methods\\n    function toBytes(Receipt memory receipt) internal pure returns(bytes memory) {\\n        return receipt.raw;\\n    }\\n\\n    function getLog(Receipt memory receipt) internal pure returns(Log memory) {\\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n        return Log(logData, logData.toList());\\n    }\\n\\n    // Log methods\\n    function getEmitter(Log memory log) internal pure returns(address) {\\n      return RLPReader.toAddress(log.list[0]);\\n    }\\n\\n    function getTopics(Log memory log) internal pure returns(LogTopics memory) {\\n        return LogTopics(log.list[1].toList());\\n    }\\n\\n    function getData(Log memory log) internal pure returns(bytes memory) {\\n        return log.list[2].toBytes();\\n    }\\n\\n    function toRlpBytes(Log memory log) internal pure returns(bytes memory) {\\n      return log.data.toRlpBytes();\\n    }\\n\\n    // LogTopics methods\\n    function getField(LogTopics memory topics, uint256 index) internal pure returns(RLPReader.RLPItem memory) {\\n      return topics.data[index];\\n    }\\n}\\n\",\"keccak256\":\"0xdb3cbd2e895069e17db4cdb8a7fcde127bf598f1c8b3c6f272d0e89727af3aca\"},\"fx-portal/contracts/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x20a3e580bfbdf11e27fba2b2cef7e2a4533c694b2d5b47d0107fc9bc716a37e9\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\",\"keccak256\":\"0xdfbc8f6ea9a4c2b46bd902bbbfae049a2b8afe839fc8634257c9551ab6f74d66\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/RLPReader.sol\":{\"content\":\"/*\\n* @author Hamdi Allam hamdi.allam97@gmail.com\\n* Please reach out with any questions or concerns\\n*/\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START  = 0xb8;\\n    uint8 constant LIST_SHORT_START   = 0xc0;\\n    uint8 constant LIST_LONG_START    = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint len;\\n        uint memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item;   // Item that's being iterated over.\\n        uint nextPtr;   // Position of the next item in the list.\\n    }\\n\\n    /*\\n    * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n    * @param self The iterator.\\n    * @return The next element in the iteration.\\n    */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint ptr = self.nextPtr;\\n        uint itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n    * @dev Returns true if the iteration has more elements.\\n    * @param self The iterator.\\n    * @return true if the iteration has more elements.\\n    */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n    * @dev Create an iterator. Reverts if item is not a list.\\n    * @param self The RLP item.\\n    * @return An 'Iterator' over the item.\\n    */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded list in bytes\\n    */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr); \\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START)\\n            return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint memPtr = item.memPtr + offset;\\n        uint len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint memPtr, uint len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n        \\n        uint ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint result;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset;\\n\\n        uint result;\\n        uint memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint result;\\n        uint memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n    * Private Helpers\\n    */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint) {\\n        if (item.len == 0) return 0;\\n\\n        uint count = 0;\\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n           count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint memPtr) private pure returns (uint) {\\n        uint itemLen;\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START)\\n            itemLen = 1;\\n        \\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } \\n\\n        else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) \\n            return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\\n            return 1;\\n        else if (byte0 < LIST_SHORT_START)  // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n    * @param src Pointer to source\\n    * @param dest Pointer to destination\\n    * @param len Amount of memory to copy from the source\\n    */\\n    function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len == 0) return;\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x606985ec75fb803aae741a9890b635a5bcf60ba6df1921fdb1aaaaea80cec904\"},\"fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\nimport \\\"../lib/ExitPayloadReader.sol\\\";\\n\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using ExitPayloadReader for bytes;\\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n    using ExitPayloadReader for ExitPayloadReader.Log;\\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages \\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\n\\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n        uint256 blockNumber = payload.getBlockNumber();\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                blockNumber,\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n                payload.getReceiptLogIndex()\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n        ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n        // check child tunnel\\n        require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        bytes32 receiptRoot = payload.getReceiptRoot();\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                receipt.toBytes(), \\n                branchMaskBytes, \\n                payload.getReceiptProof(), \\n                receiptRoot\\n            ),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            blockNumber,\\n            payload.getBlockTime(),\\n            payload.getTxRoot(),\\n            receiptRoot,\\n            payload.getHeaderNumber(),\\n            payload.getBlockProof()\\n        );\\n\\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n        require(\\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        (bytes memory message) = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n                .checkMembership(\\n                blockNumber-startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0x0cd588c3f7c6bb2a450e094e92b899db8c3ea3f5cfedd132efd1eccbddacbe82\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IAssetERC721} from \\\"./IAssetERC721.sol\\\";\\n\\ninterface IAssetERC1155 {\\n    function changeBouncerAdmin(address newBouncerAdmin) external;\\n\\n    function setBouncer(address bouncer, bool enabled) external;\\n\\n    function setPredicate(address predicate) external;\\n\\n    function mint(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256 supply,\\n        uint8 rarity,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256 id);\\n\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintMultiple(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    // fails on non-NFT or nft who do not have collection (was a mistake)\\n    function collectionOf(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n\\n    // return true for Non-NFT ERC1155 tokens which exists\\n    function isCollection(uint256 id) external view returns (bool);\\n\\n    function collectionIndexOf(uint256 id) external view returns (uint256);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n\\n    function burnFrom(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function getBouncerAdmin() external view returns (address);\\n\\n    function extractERC721From(\\n        address sender,\\n        uint256 id,\\n        address to\\n    ) external returns (uint256 newId);\\n\\n    function isBouncer(address who) external view returns (bool);\\n\\n    function creatorOf(uint256 id) external view returns (address);\\n\\n    function wasEverMinted(uint256 id) external view returns (bool);\\n\\n    function isSuperOperator(address who) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool isOperator);\\n\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external returns (uint256[] memory);\\n\\n    function name() external returns (string memory _name);\\n\\n    function symbol() external returns (string memory _symbol);\\n\\n    function supportsInterface(bytes4 id) external returns (bool);\\n\\n    function tokenURI(uint256 id) external returns (string memory);\\n\\n    function setAssetERC721(IAssetERC721 assetERC721) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function setTrustedForwarder(address trustedForwarder) external;\\n\\n    function isTrustedForwarder(address forwarder) external returns (bool);\\n\\n    function getTrustedForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x4eef00971a14580bc48e8199bdb262ec616bbe43852a990264447011be0f72d5\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetERC721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Base} from \\\"./IERC721Base.sol\\\";\\n\\ninterface IAssetERC721 is IERC721Base {\\n    function mint(address to, uint256 id) external override;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) external override;\\n\\n    function setTokenURI(uint256 id, string memory uri) external;\\n\\n    function tokenURI(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3b9a9a153b67f1b525a777be5daf2bef73bd9a2f1f883128258105f313e28de9\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC721ExtendedToken} from \\\"./IERC721ExtendedToken.sol\\\";\\n\\ninterface IERC721Base is IERC721Upgradeable {\\n    function mint(address to, uint256 id) external;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata metaData\\n    ) external;\\n\\n    function approveFor(\\n        address from,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address from,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function supportsInterface(bytes4 id) external view override returns (bool);\\n\\n    function setTrustedForwarder(address trustedForwarder) external;\\n\\n    function isTrustedForwarder(address forwarder) external returns (bool);\\n\\n    function getTrustedForwarder() external returns (address trustedForwarder);\\n}\\n\",\"keccak256\":\"0x515a9d8e988c63547108b16b7efd4942ab15887529a98861a522dea6dbb0437d\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721ExtendedToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IERC721ExtendedToken {\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n}\\n\",\"keccak256\":\"0xe574d923fe66e20909df0d06b73478d2922e4865d85c578db60bda34f6273d45\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/common/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\nabstract contract ERC1155Receiver is IERC1155Receiver {\\n    function onERC1155Received(\\n        address, /* operator */\\n        address, /* from */\\n        uint256, /* id */\\n        uint256, /* value */\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address, /* operator */\\n        address, /* from */\\n        uint256[] calldata, /* ids */\\n        uint256[] calldata, /* values */\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xef97c9305e65a9ba07d50a5cb84deda5a435b7933d1821ef78f9b9bfea3c4cab\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\\\";\\nimport \\\"../../../common/interfaces/IAssetERC1155.sol\\\";\\nimport \\\"../../../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport \\\"../../common/ERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/security/Pausable.sol\\\";\\n\\n/// @title ASSETERC1155 bridge on L1\\ncontract AssetERC1155Tunnel is FxBaseRootTunnel, ERC1155Receiver, ERC2771Handler, Ownable, Pausable {\\n    IAssetERC1155 public rootToken;\\n\\n    event Deposit(address user, uint256 id, uint256 value, bytes data);\\n    event Withdraw(address user, uint256 id, uint256 value, bytes data);\\n\\n    constructor(\\n        address _checkpointManager,\\n        address _fxRoot,\\n        IAssetERC1155 _rootToken,\\n        address _trustedForwarder\\n    ) FxBaseRootTunnel(_checkpointManager, _fxRoot) {\\n        rootToken = _rootToken;\\n        __ERC2771Handler_initialize(_trustedForwarder);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\\n        return\\n            interfaceId == 0x4e2312e0 || // ERC1155Receiver\\n            interfaceId == 0x01ffc9a7; // ERC165\\n    }\\n\\n    function batchDepositToChild(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes calldata data\\n    ) public whenNotPaused() {\\n        require(ids.length > 0, \\\"MISSING_TOKEN_IDS\\\");\\n        rootToken.safeBatchTransferFrom(_msgSender(), address(this), ids, values, data);\\n        for (uint256 index = 0; index < ids.length; index++) {\\n            uint256 id = ids[index];\\n            bytes memory message = abi.encode(to, id, values[index], data);\\n            _sendMessageToChild(message);\\n            emit Deposit(to, id, values[index], data);\\n        }\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    /// @dev Pauses all token transfers across bridge\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @dev Unpauses all token transfers across bridge\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _processMessageFromChild(bytes memory message) internal override {\\n        (address to, uint256[] memory ids, uint256[] memory values, bytes memory data) =\\n            abi.decode(message, (address, uint256[], uint256[], bytes));\\n        for (uint256 index = 0; index < ids.length; index++) {\\n            bytes32[] memory metadataHashes = abi.decode(data, (bytes32[]));\\n            bytes memory metadata = abi.encode([\\\"bytes\\\"], [metadataHashes[index]]);\\n            rootToken.wasEverMinted(ids[index])\\n                ? rootToken.safeTransferFrom(address(this), to, ids[index], values[index], metadata)\\n                : rootToken.mint(to, ids[index], values[index], metadata);\\n            emit Withdraw(to, ids[index], values[index], metadata);\\n        }\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xf6ce73c03bbef2190e5232cf897d210357ffe19efb2b7039ac678b28b48c606c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620037413803806200374183398101604081905262000034916200016f565b600180546001600160a01b038087166001600160a01b03199283161790925560008054928616929091169190911790556200007862000072620000d1565b620000ee565b6005805460ff60a01b19169055600680546001600160a01b0319166001600160a01b038416179055620000c781600480546001600160a01b0319166001600160a01b0392909216919091179055565b50505050620001ef565b6000620000e86200014060201b62000ab21760201c565b90505b90565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6004546000906001600160a01b031633141562000167575060131936013560601c620000eb565b5033620000eb565b6000806000806080858703121562000185578384fd5b84516200019281620001d6565b6020860151909450620001a581620001d6565b6040860151909350620001b881620001d6565b6060860151909250620001cb81620001d6565b939692955090935050565b6001600160a01b0381168114620001ec57600080fd5b50565b61354280620001ff6000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80638da5cb5b116100d8578063ce1b815f1161008c578063f23a6e6111610066578063f23a6e611461036b578063f2fde38b146103a4578063f953cec7146103b757610177565b8063ce1b815f14610334578063da74222814610345578063de9b771f1461035857610177565b8063aea4e49e116100bd578063aea4e49e146102a2578063bc197c81146102b5578063c0857ba01461032157610177565b80638da5cb5b1461027e578063972c49281461028f57610177565b80635c975abb1161012f57806366cd04ad1161011457806366cd04ad1461025b578063715018a61461026e5780638456cb591461027657610177565b80635c975abb14610230578063607f2d421461023857610177565b80631f2d0065116101605780631f2d0065146101d95780633f4ba83a14610204578063572b6c051461020e57610177565b806301ffc9a71461017c5780630e387de6146101a4575b600080fd5b61018f61018a366004612e9f565b6103ca565b60405190151581526020015b60405180910390f35b6101cb7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b60405190815260200161019b565b6006546101ec906001600160a01b031681565b6040516001600160a01b03909116815260200161019b565b61020c610465565b005b61018f61021c366004612b04565b6004546001600160a01b0390811691161490565b61018f6104ed565b61018f610246366004612e3b565b60036020526000908152604090205460ff1681565b61020c610269366004612ced565b61050f565b61020c61073d565b61020c6107c0565b6005546001600160a01b03166101ec565b6002546101ec906001600160a01b031681565b61020c6102b0366004612b04565b610841565b6102f06102c3366004612bb8565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161019b565b6001546101ec906001600160a01b031681565b6004546001600160a01b03166101ec565b61020c610353366004612b04565b6108ef565b6000546101ec906001600160a01b031681565b6102f0610379366004612c73565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b61020c6103b2366004612b04565b610997565b61020c6103c5366004612edf565b610a98565b60007f4e2312e0000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061045d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b61046d610afc565b6001600160a01b03166104886005546001600160a01b031690565b6001600160a01b0316146104e35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6104eb610b0b565b565b60055474010000000000000000000000000000000000000000900460ff165b90565b6105176104ed565b156105645760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104da565b60008451116105b55760405162461bcd60e51b815260206004820152601160248201527f4d495353494e475f544f4b454e5f49445300000000000000000000000000000060448201526064016104da565b6006546001600160a01b0316632eb2c2d66105ce610afc565b30878787876040518763ffffffff1660e01b81526004016105f496959493929190613043565b600060405180830381600087803b15801561060e57600080fd5b505af1158015610622573d6000803e3d6000fd5b5050505060005b845181101561073557600085828151811061065457634e487b7160e01b600052603260045260246000fd5b602002602001015190506000878287858151811061068257634e487b7160e01b600052603260045260246000fd5b602002602001015187876040516020016106a09594939291906130fb565b60405160208183030381529060405290506106ba81610bcd565b7f07c6d86eb9c47d0224ebbb590d5fbb1d9d0d7aca54f94611e5ed37a2c6ee20a788838886815181106106fd57634e487b7160e01b600052603260045260246000fd5b602002602001015188886040516107189594939291906130fb565b60405180910390a15050808061072d90613464565b915050610629565b505050505050565b610745610afc565b6001600160a01b03166107606005546001600160a01b031690565b6001600160a01b0316146107b65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104da565b6104eb6000610c51565b6107c8610afc565b6001600160a01b03166107e36005546001600160a01b031690565b6001600160a01b0316146108395760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104da565b6104eb610cb0565b6002546001600160a01b0316156108c05760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201527f4c52454144595f5345540000000000000000000000000000000000000000000060648201526084016104da565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6108f7610afc565b6001600160a01b03166109126005546001600160a01b031690565b6001600160a01b0316146109685760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104da565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61099f610afc565b6001600160a01b03166109ba6005546001600160a01b031690565b6001600160a01b031614610a105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104da565b6001600160a01b038116610a8c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104da565b610a9581610c51565b50565b6000610aa382610d6d565b9050610aae816110bc565b5050565b6004546000906001600160a01b0316331415610af557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c61050c565b503361050c565b6000610b06610ab2565b905090565b610b136104ed565b610b5f5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016104da565b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610bb0610afc565b6040516001600160a01b03909116815260200160405180910390a1565b6000546002546040517fb47204770000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263b472047792610c1c9291169085906004016130d9565b600060405180830381600087803b158015610c3657600080fd5b505af1158015610c4a573d6000803e3d6000fd5b5050505050565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610cb86104ed565b15610d055760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104da565b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610bb0610afc565b60606000610d7a83611470565b90506000610d87826114cf565b90506000610d9483611506565b9050600081610da28461153d565b610dab86611763565b604051602001610dbd93929190613016565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff1615610e5a5760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201527f535345440000000000000000000000000000000000000000000000000000000060648201526084016104da565b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610e9a8561178d565b90506000610ea7826118f3565b9050610eb28161199f565b6002546001600160a01b03908116911614610f355760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460448201527f554e4e454c00000000000000000000000000000000000000000000000000000060648201526084016104da565b6000610f40876119d6565b9050610f60610f50846020015190565b87610f5a8a611a00565b84611a2a565b610fd25760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201527f4f4f46000000000000000000000000000000000000000000000000000000000060648201526084016104da565b61100085610fdf89611d51565b610fe88a611d7b565b84610ff28c611da5565b610ffb8d611dcf565b611df9565b50600061100c83611f47565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03661104261103d836000611f91565b611fd7565b1461108f5760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e41545552450060448201526064016104da565b600061109a84612052565b8060200190518101906110ad9190612f53565b9b9a5050505050505050505050565b600080600080848060200190518101906110d69190612b20565b935093509350935060005b8351811015610735576000828060200190518101906111009190612d8b565b9050600060405180602001604052806040518060400160405280600581526020017f6279746573000000000000000000000000000000000000000000000000000000815250815250604051806020016040528084868151811061117357634e487b7160e01b600052603260045260246000fd5b602002602001015181525060405160200161118f929190613162565b60408051601f1981840301815291905260065487519192506001600160a01b03169063d402756e908890869081106111d757634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016111fd91815260200190565b60206040518083038186803b15801561121557600080fd5b505afa158015611229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124d9190612e1b565b6113115760065486516001600160a01b039091169063731133e990899089908790811061128a57634e487b7160e01b600052603260045260246000fd5b60200260200101518887815181106112b257634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518563ffffffff1660e01b81526004016112da949392919061312a565b600060405180830381600087803b1580156112f457600080fd5b505af1158015611308573d6000803e3d6000fd5b505050506113d0565b60065486516001600160a01b039091169063f242432a9030908a908a908890811061134c57634e487b7160e01b600052603260045260246000fd5b602002602001015189888151811061137457634e487b7160e01b600052603260045260246000fd5b6020026020010151866040518663ffffffff1660e01b815260040161139d959493929190613096565b600060405180830381600087803b1580156113b757600080fd5b505af11580156113cb573d6000803e3d6000fd5b505050505b7f5b60e6b7a1385a03cd29f6ac8c80abbd3fe29663ec7d8bbe63bb79a35c176da48787858151811061141257634e487b7160e01b600052603260045260246000fd5b602002602001015187868151811061143a57634e487b7160e01b600052603260045260246000fd5b602002602001015184604051611453949392919061312a565b60405180910390a15050808061146890613464565b9150506110e1565b60408051602081019091526060815260006114ba6114b58460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b61207c565b60408051602081019091529081529392505050565b606061045d82600001516008815181106114f957634e487b7160e01b600052603260045260246000fd5b60200260200101516121ae565b600061045d826000015160028151811061153057634e487b7160e01b600052603260045260246000fd5b6020026020010151611fd7565b6040805160208101909152600081528151606091901561045d57600080611565600086612259565b60f81c9050600181148061157c57508060ff166003145b156116585760018551600261159191906133db565b61159b91906133fa565b67ffffffffffffffff8111156115c157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115eb576020820181803683370190505b50925060006115fb600187612259565b9050808460008151811061161f57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060019250506116ca565b60028551600261166891906133db565b61167291906133fa565b67ffffffffffffffff81111561169857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156116c2576020820181803683370190505b509250600091505b60ff82165b835181101561175a576116f96116e860ff8516836133fa565b6116f3906002613279565b87612259565b84828151811061171957634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061175281613464565b9150506116cf565b50505092915050565b600061045d826000015160098151811061153057634e487b7160e01b600052603260045260246000fd5b6117b160405180606001604052806060815260200160608152602001600081525090565b6117d982600001516006815181106114f957634e487b7160e01b600052603260045260246000fd5b60208281018290526040805180820182526000808252908301528051808201909152825181529181019082015261180f816122f6565b156118245761181d8161207c565b82526118df565b6020820151805160009061183a906001906133fa565b67ffffffffffffffff81111561186057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561188a576020820181803683370190505b5090506000808360210191508260200190506118a882828551612330565b6040805180820182526000808252602091820152815180830190925284518252808501908201526118d8906114b5565b8652505050505b6118e883611763565b604083015250919050565b60408051608081018252600091810182815260608083019390935281526020810191909152600061194f836000015160038151811061194257634e487b7160e01b600052603260045260246000fd5b602002602001015161207c565b83604001518151811061197257634e487b7160e01b600052603260045260246000fd5b6020026020010151905060405180604001604052808281526020016119968361207c565b90529392505050565b600061045d82602001516000815181106119c957634e487b7160e01b600052603260045260246000fd5b60200260200101516123aa565b600061045d826000015160058151811061153057634e487b7160e01b600052603260045260246000fd5b606061045d82600001516007815181106114f957634e487b7160e01b600052603260045260246000fd5b600080611a5e8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b90506000611a6b8261207c565b905060608085600080611a7d8b61153d565b9050805160001415611a99576000975050505050505050611d49565b60005b8651811015611d40578151831115611abf57600098505050505050505050611d49565b611aef878281518110611ae257634e487b7160e01b600052603260045260246000fd5b60200260200101516123c4565b955085805190602001208414611b1057600098505050505050505050611d49565b611b3387828151811061194257634e487b7160e01b600052603260045260246000fd5b9450845160111415611c32578151831415611ba3578c80519060200120611b74866010815181106114f957634e487b7160e01b600052603260045260246000fd5b805190602001201415611b9257600198505050505050505050611d49565b600098505050505050505050611d49565b6000828481518110611bc557634e487b7160e01b600052603260045260246000fd5b016020015160f81c90506010811115611bea5760009950505050505050505050611d49565b611c1d868260ff1681518110611c1057634e487b7160e01b600052603260045260246000fd5b6020026020010151612453565b9450611c2a600185613279565b935050611d2e565b845160021415611b92576000611c6c611c65876000815181106114f957634e487b7160e01b600052603260045260246000fd5b8486612481565b8351909150611c7b8286613279565b1415611cde578d80519060200120611cad876001815181106114f957634e487b7160e01b600052603260045260246000fd5b805190602001201415611ccc5760019950505050505050505050611d49565b60009950505050505050505050611d49565b80611cf55760009950505050505050505050611d49565b611cff8185613279565b9350611d2586600181518110611c1057634e487b7160e01b600052603260045260246000fd5b9450611d2e9050565b80611d3881613464565b915050611a9c565b50505050505050505b949350505050565b600061045d826000015160038151811061153057634e487b7160e01b600052603260045260246000fd5b600061045d826000015160048151811061153057634e487b7160e01b600052603260045260246000fd5b600061045d826000015160008151811061153057634e487b7160e01b600052603260045260246000fd5b606061045d82600001516001815181106114f957634e487b7160e01b600052603260045260246000fd5b6001546040517f41539d4a000000000000000000000000000000000000000000000000000000008152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a06040518083038186803b158015611e5f57600080fd5b505afa158015611e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e979190612e53565b5093505092509250611eee828b611eae91906133fa565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a090920190925280519101209085886125e6565b611f3a5760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f4845414445520000000060448201526064016104da565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280611f89846020015160018151811061194257634e487b7160e01b600052603260045260246000fd5b905292915050565b60408051808201909152600080825260208201528251805183908110611fc757634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b805160009015801590611fec57508151602110155b611ff557600080fd5b6000612004836020015161275c565b9050600081846000015161201891906133fa565b905060008083866020015161202d9190613279565b905080519150602083101561204957826020036101000a820491505b50949350505050565b606061045d82602001516002815181106114f957634e487b7160e01b600052603260045260246000fd5b6060612087826122f6565b61209057600080fd5b600061209b836127e1565b905060008167ffffffffffffffff8111156120c657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561210b57816020015b60408051808201909152600080825260208201528152602001906001900390816120e45790505b509050600061211d856020015161275c565b856020015161212c9190613279565b90506000805b848110156121a35761214383612864565b915060405180604001604052808381526020018481525084828151811061217a57634e487b7160e01b600052603260045260246000fd5b602090810291909101015261218f8284613279565b92508061219b81613464565b915050612132565b509195945050505050565b80516060906121bc57600080fd5b60006121cb836020015161275c565b905060008184600001516121df91906133fa565b905060008167ffffffffffffffff81111561220a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612234576020820181803683370190505b50905060008160200190506120498487602001516122529190613279565b8285612926565b600061226660028461347f565b156122ae57601082612279600286613291565b8151811061229757634e487b7160e01b600052603260045260246000fd5b01602001516122a9919060f81c613493565b6122ec565b6010826122bc600286613291565b815181106122da57634e487b7160e01b600052603260045260246000fd5b01602001516122ec919060f81c6132a5565b60f81b9392505050565b805160009061230757506000610460565b6020820151805160001a9060c082101561232657600092505050610460565b5060019392505050565b8061233a576123a5565b602081106123725782518252612351602084613279565b925061235e602083613279565b915061236b6020826133fa565b905061233a565b600060016123818360206133fa565b61238d9061010061330d565b61239791906133fa565b845184518216911916178352505b505050565b80516000906015146123bb57600080fd5b61045d82611fd7565b60606000826000015167ffffffffffffffff8111156123f357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561241d576020820181803683370190505b509050805160001415612431579050610460565b600081602001905061244c8460200151828660000151612926565b5092915050565b805160009060211461246457600080fd5b600080836020015160016124789190613279565b51949350505050565b6000808061248e8661153d565b90506000815167ffffffffffffffff8111156124ba57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156124e4576020820181803683370190505b509050845b82516124f59087613279565b8110156125b457600087828151811061251e57634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000169050808361255389856133fa565b8151811061257157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505080806125ac90613464565b9150506124e9565b508080519060200120828051906020012014156125d457815192506125d9565b600092505b50909150505b9392505050565b6000602082516125f6919061347f565b156126435760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e67746800000000000000000000000060448201526064016104da565b6000602083516126539190613291565b905061266081600261330d565b85106126ae5760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f20626967000000000000000000000060448201526064016104da565b60008660205b8551811161274e578581015192506126cd60028961347f565b61270257604080516020810184905290810184905260600160405160208183030381529060405280519060200120915061272f565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b61273a600289613291565b9750612747602082613279565b90506126b4565b509094149695505050505050565b8051600090811a6080811015612776576000915050610460565b60b8811080612791575060c08110801590612791575060f881105b156127a0576001915050610460565b60c08110156127d5576127b5600160b8613411565b6127c29060ff16826133fa565b6127cd906001613279565b915050610460565b6127b5600160f8613411565b80516000906127f257506000610460565b600080612802846020015161275c565b84602001516128119190613279565b90506000846000015185602001516128299190613279565b90505b8082101561285b5761283d82612864565b6128479083613279565b91508261285381613464565b93505061282c565b50909392505050565b80516000908190811a608081101561287f576001915061244c565b60b88110156128a5576128936080826133fa565b61289e906001613279565b915061244c565b60c08110156128d25760b78103600185019450806020036101000a8551046001820181019350505061244c565b60f88110156128e65761289360c0826133fa565b60019390930151602084900360f7016101000a90049092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0192915050565b80612930576123a5565b602081106129685782518252612947602084613279565b9250612954602083613279565b91506129616020826133fa565b9050612930565b80612372576123a5565b60008083601f840112612983578182fd5b50813567ffffffffffffffff81111561299a578182fd5b60208301915083602080830285010111156129b457600080fd5b9250929050565b600082601f8301126129cb578081fd5b813560206129e06129db8361322d565b6131fc565b82815281810190858301838502870184018810156129fc578586fd5b855b85811015612a1a578135845292840192908401906001016129fe565b5090979650505050505050565b600082601f830112612a37578081fd5b81516020612a476129db8361322d565b8281528181019085830183850287018401881015612a63578586fd5b855b85811015612a1a57815184529284019290840190600101612a65565b60008083601f840112612a92578182fd5b50813567ffffffffffffffff811115612aa9578182fd5b6020830191508360208285010111156129b457600080fd5b600082601f830112612ad1578081fd5b8151612adf6129db82613251565b818152846020838601011115612af3578283fd5b611d49826020830160208701613434565b600060208284031215612b15578081fd5b81356125df816134f7565b60008060008060808587031215612b35578283fd5b8451612b40816134f7565b602086015190945067ffffffffffffffff80821115612b5d578485fd5b612b6988838901612a27565b94506040870151915080821115612b7e578384fd5b612b8a88838901612a27565b93506060870151915080821115612b9f578283fd5b50612bac87828801612ac1565b91505092959194509250565b60008060008060008060008060a0898b031215612bd3578384fd5b8835612bde816134f7565b97506020890135612bee816134f7565b9650604089013567ffffffffffffffff80821115612c0a578586fd5b612c168c838d01612972565b909850965060608b0135915080821115612c2e578586fd5b612c3a8c838d01612972565b909650945060808b0135915080821115612c52578384fd5b50612c5f8b828c01612a81565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215612c8b578384fd5b8635612c96816134f7565b95506020870135612ca6816134f7565b94506040870135935060608701359250608087013567ffffffffffffffff811115612ccf578283fd5b612cdb89828a01612a81565b979a9699509497509295939492505050565b600080600080600060808688031215612d04578283fd5b8535612d0f816134f7565b9450602086013567ffffffffffffffff80821115612d2b578485fd5b612d3789838a016129bb565b95506040880135915080821115612d4c578485fd5b612d5889838a016129bb565b94506060880135915080821115612d6d578283fd5b50612d7a88828901612a81565b969995985093965092949392505050565b60006020808385031215612d9d578182fd5b825167ffffffffffffffff811115612db3578283fd5b8301601f81018513612dc3578283fd5b8051612dd16129db8261322d565b8181528381019083850185840285018601891015612ded578687fd5b8694505b83851015612e0f578051835260019490940193918501918501612df1565b50979650505050505050565b600060208284031215612e2c578081fd5b815180151581146125df578182fd5b600060208284031215612e4c578081fd5b5035919050565b600080600080600060a08688031215612e6a578283fd5b855194506020860151935060408601519250606086015191506080860151612e91816134f7565b809150509295509295909350565b600060208284031215612eb0578081fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146125df578182fd5b600060208284031215612ef0578081fd5b813567ffffffffffffffff811115612f06578182fd5b8201601f81018413612f16578182fd5b8035612f246129db82613251565b818152856020838501011115612f38578384fd5b81602084016020830137908101602001929092525092915050565b600060208284031215612f64578081fd5b815167ffffffffffffffff811115612f7a578182fd5b611d4984828501612ac1565b6000815180845260208085019450808401835b83811015612fb557815187529582019590820190600101612f99565b509495945050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452613002816020860160208601613434565b601f01601f19169290920160200192915050565b6000848252835161302e816020850160208801613434565b60209201918201929092526040019392505050565b60006001600160a01b03808916835280881660208401525060a0604083015261306f60a0830187612f86565b82810360608401526130818187612f86565b90508281036080840152611f3a818587612fc0565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526130ce60a0830184612fea565b979650505050505050565b60006001600160a01b038416825260406020830152611d496040830184612fea565b60006001600160a01b0387168252856020830152846040830152608060608301526130ce608083018486612fc0565b60006001600160a01b0386168252846020830152836040830152608060608301526131586080830184612fea565b9695505050505050565b60408082526000906060830190830185835b60018110156131c4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08685030183526131af848351612fea565b93506020928301929190910190600101613174565b5050508091505060208083018460005b60018110156131f1578151835291830191908301906001016131d4565b505050509392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613225576132256134e1565b604052919050565b600067ffffffffffffffff821115613247576132476134e1565b5060209081020190565b600067ffffffffffffffff82111561326b5761326b6134e1565b50601f01601f191660200190565b6000821982111561328c5761328c6134b5565b500190565b6000826132a0576132a06134cb565b500490565b600060ff8316806132b8576132b86134cb565b8060ff84160491505092915050565b80825b60018086116132d95750613304565b8187048211156132eb576132eb6134b5565b808616156132f857918102915b9490941c9380026132ca565b94509492505050565b60006125df6000198484600082613326575060016125df565b81613333575060006125df565b8160018114613349576002811461335357613380565b60019150506125df565b60ff841115613364576133646134b5565b6001841b91508482111561337a5761337a6134b5565b506125df565b5060208310610133831016604e8410600b84101617156133b3575081810a838111156133ae576133ae6134b5565b6125df565b6133c084848460016132c7565b8086048211156133d2576133d26134b5565b02949350505050565b60008160001904831182151516156133f5576133f56134b5565b500290565b60008282101561340c5761340c6134b5565b500390565b600060ff821660ff84168082101561342b5761342b6134b5565b90039392505050565b60005b8381101561344f578181015183820152602001613437565b8381111561345e576000848401525b50505050565b6000600019821415613478576134786134b5565b5060010190565b60008261348e5761348e6134cb565b500690565b600060ff8316806134a6576134a66134cb565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a9557600080fdfea26469706673582212208ac65fd4e18ef1805ebfae51d52affe90daae88ba6a9d6d89586c81f43187b0164736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80638da5cb5b116100d8578063ce1b815f1161008c578063f23a6e6111610066578063f23a6e611461036b578063f2fde38b146103a4578063f953cec7146103b757610177565b8063ce1b815f14610334578063da74222814610345578063de9b771f1461035857610177565b8063aea4e49e116100bd578063aea4e49e146102a2578063bc197c81146102b5578063c0857ba01461032157610177565b80638da5cb5b1461027e578063972c49281461028f57610177565b80635c975abb1161012f57806366cd04ad1161011457806366cd04ad1461025b578063715018a61461026e5780638456cb591461027657610177565b80635c975abb14610230578063607f2d421461023857610177565b80631f2d0065116101605780631f2d0065146101d95780633f4ba83a14610204578063572b6c051461020e57610177565b806301ffc9a71461017c5780630e387de6146101a4575b600080fd5b61018f61018a366004612e9f565b6103ca565b60405190151581526020015b60405180910390f35b6101cb7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b60405190815260200161019b565b6006546101ec906001600160a01b031681565b6040516001600160a01b03909116815260200161019b565b61020c610465565b005b61018f61021c366004612b04565b6004546001600160a01b0390811691161490565b61018f6104ed565b61018f610246366004612e3b565b60036020526000908152604090205460ff1681565b61020c610269366004612ced565b61050f565b61020c61073d565b61020c6107c0565b6005546001600160a01b03166101ec565b6002546101ec906001600160a01b031681565b61020c6102b0366004612b04565b610841565b6102f06102c3366004612bb8565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161019b565b6001546101ec906001600160a01b031681565b6004546001600160a01b03166101ec565b61020c610353366004612b04565b6108ef565b6000546101ec906001600160a01b031681565b6102f0610379366004612c73565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b61020c6103b2366004612b04565b610997565b61020c6103c5366004612edf565b610a98565b60007f4e2312e0000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061045d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b61046d610afc565b6001600160a01b03166104886005546001600160a01b031690565b6001600160a01b0316146104e35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6104eb610b0b565b565b60055474010000000000000000000000000000000000000000900460ff165b90565b6105176104ed565b156105645760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104da565b60008451116105b55760405162461bcd60e51b815260206004820152601160248201527f4d495353494e475f544f4b454e5f49445300000000000000000000000000000060448201526064016104da565b6006546001600160a01b0316632eb2c2d66105ce610afc565b30878787876040518763ffffffff1660e01b81526004016105f496959493929190613043565b600060405180830381600087803b15801561060e57600080fd5b505af1158015610622573d6000803e3d6000fd5b5050505060005b845181101561073557600085828151811061065457634e487b7160e01b600052603260045260246000fd5b602002602001015190506000878287858151811061068257634e487b7160e01b600052603260045260246000fd5b602002602001015187876040516020016106a09594939291906130fb565b60405160208183030381529060405290506106ba81610bcd565b7f07c6d86eb9c47d0224ebbb590d5fbb1d9d0d7aca54f94611e5ed37a2c6ee20a788838886815181106106fd57634e487b7160e01b600052603260045260246000fd5b602002602001015188886040516107189594939291906130fb565b60405180910390a15050808061072d90613464565b915050610629565b505050505050565b610745610afc565b6001600160a01b03166107606005546001600160a01b031690565b6001600160a01b0316146107b65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104da565b6104eb6000610c51565b6107c8610afc565b6001600160a01b03166107e36005546001600160a01b031690565b6001600160a01b0316146108395760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104da565b6104eb610cb0565b6002546001600160a01b0316156108c05760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201527f4c52454144595f5345540000000000000000000000000000000000000000000060648201526084016104da565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6108f7610afc565b6001600160a01b03166109126005546001600160a01b031690565b6001600160a01b0316146109685760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104da565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61099f610afc565b6001600160a01b03166109ba6005546001600160a01b031690565b6001600160a01b031614610a105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104da565b6001600160a01b038116610a8c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104da565b610a9581610c51565b50565b6000610aa382610d6d565b9050610aae816110bc565b5050565b6004546000906001600160a01b0316331415610af557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c61050c565b503361050c565b6000610b06610ab2565b905090565b610b136104ed565b610b5f5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016104da565b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610bb0610afc565b6040516001600160a01b03909116815260200160405180910390a1565b6000546002546040517fb47204770000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263b472047792610c1c9291169085906004016130d9565b600060405180830381600087803b158015610c3657600080fd5b505af1158015610c4a573d6000803e3d6000fd5b5050505050565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610cb86104ed565b15610d055760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104da565b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610bb0610afc565b60606000610d7a83611470565b90506000610d87826114cf565b90506000610d9483611506565b9050600081610da28461153d565b610dab86611763565b604051602001610dbd93929190613016565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff1615610e5a5760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201527f535345440000000000000000000000000000000000000000000000000000000060648201526084016104da565b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610e9a8561178d565b90506000610ea7826118f3565b9050610eb28161199f565b6002546001600160a01b03908116911614610f355760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460448201527f554e4e454c00000000000000000000000000000000000000000000000000000060648201526084016104da565b6000610f40876119d6565b9050610f60610f50846020015190565b87610f5a8a611a00565b84611a2a565b610fd25760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201527f4f4f46000000000000000000000000000000000000000000000000000000000060648201526084016104da565b61100085610fdf89611d51565b610fe88a611d7b565b84610ff28c611da5565b610ffb8d611dcf565b611df9565b50600061100c83611f47565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03661104261103d836000611f91565b611fd7565b1461108f5760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e41545552450060448201526064016104da565b600061109a84612052565b8060200190518101906110ad9190612f53565b9b9a5050505050505050505050565b600080600080848060200190518101906110d69190612b20565b935093509350935060005b8351811015610735576000828060200190518101906111009190612d8b565b9050600060405180602001604052806040518060400160405280600581526020017f6279746573000000000000000000000000000000000000000000000000000000815250815250604051806020016040528084868151811061117357634e487b7160e01b600052603260045260246000fd5b602002602001015181525060405160200161118f929190613162565b60408051601f1981840301815291905260065487519192506001600160a01b03169063d402756e908890869081106111d757634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016111fd91815260200190565b60206040518083038186803b15801561121557600080fd5b505afa158015611229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124d9190612e1b565b6113115760065486516001600160a01b039091169063731133e990899089908790811061128a57634e487b7160e01b600052603260045260246000fd5b60200260200101518887815181106112b257634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518563ffffffff1660e01b81526004016112da949392919061312a565b600060405180830381600087803b1580156112f457600080fd5b505af1158015611308573d6000803e3d6000fd5b505050506113d0565b60065486516001600160a01b039091169063f242432a9030908a908a908890811061134c57634e487b7160e01b600052603260045260246000fd5b602002602001015189888151811061137457634e487b7160e01b600052603260045260246000fd5b6020026020010151866040518663ffffffff1660e01b815260040161139d959493929190613096565b600060405180830381600087803b1580156113b757600080fd5b505af11580156113cb573d6000803e3d6000fd5b505050505b7f5b60e6b7a1385a03cd29f6ac8c80abbd3fe29663ec7d8bbe63bb79a35c176da48787858151811061141257634e487b7160e01b600052603260045260246000fd5b602002602001015187868151811061143a57634e487b7160e01b600052603260045260246000fd5b602002602001015184604051611453949392919061312a565b60405180910390a15050808061146890613464565b9150506110e1565b60408051602081019091526060815260006114ba6114b58460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b61207c565b60408051602081019091529081529392505050565b606061045d82600001516008815181106114f957634e487b7160e01b600052603260045260246000fd5b60200260200101516121ae565b600061045d826000015160028151811061153057634e487b7160e01b600052603260045260246000fd5b6020026020010151611fd7565b6040805160208101909152600081528151606091901561045d57600080611565600086612259565b60f81c9050600181148061157c57508060ff166003145b156116585760018551600261159191906133db565b61159b91906133fa565b67ffffffffffffffff8111156115c157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115eb576020820181803683370190505b50925060006115fb600187612259565b9050808460008151811061161f57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060019250506116ca565b60028551600261166891906133db565b61167291906133fa565b67ffffffffffffffff81111561169857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156116c2576020820181803683370190505b509250600091505b60ff82165b835181101561175a576116f96116e860ff8516836133fa565b6116f3906002613279565b87612259565b84828151811061171957634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061175281613464565b9150506116cf565b50505092915050565b600061045d826000015160098151811061153057634e487b7160e01b600052603260045260246000fd5b6117b160405180606001604052806060815260200160608152602001600081525090565b6117d982600001516006815181106114f957634e487b7160e01b600052603260045260246000fd5b60208281018290526040805180820182526000808252908301528051808201909152825181529181019082015261180f816122f6565b156118245761181d8161207c565b82526118df565b6020820151805160009061183a906001906133fa565b67ffffffffffffffff81111561186057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561188a576020820181803683370190505b5090506000808360210191508260200190506118a882828551612330565b6040805180820182526000808252602091820152815180830190925284518252808501908201526118d8906114b5565b8652505050505b6118e883611763565b604083015250919050565b60408051608081018252600091810182815260608083019390935281526020810191909152600061194f836000015160038151811061194257634e487b7160e01b600052603260045260246000fd5b602002602001015161207c565b83604001518151811061197257634e487b7160e01b600052603260045260246000fd5b6020026020010151905060405180604001604052808281526020016119968361207c565b90529392505050565b600061045d82602001516000815181106119c957634e487b7160e01b600052603260045260246000fd5b60200260200101516123aa565b600061045d826000015160058151811061153057634e487b7160e01b600052603260045260246000fd5b606061045d82600001516007815181106114f957634e487b7160e01b600052603260045260246000fd5b600080611a5e8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b90506000611a6b8261207c565b905060608085600080611a7d8b61153d565b9050805160001415611a99576000975050505050505050611d49565b60005b8651811015611d40578151831115611abf57600098505050505050505050611d49565b611aef878281518110611ae257634e487b7160e01b600052603260045260246000fd5b60200260200101516123c4565b955085805190602001208414611b1057600098505050505050505050611d49565b611b3387828151811061194257634e487b7160e01b600052603260045260246000fd5b9450845160111415611c32578151831415611ba3578c80519060200120611b74866010815181106114f957634e487b7160e01b600052603260045260246000fd5b805190602001201415611b9257600198505050505050505050611d49565b600098505050505050505050611d49565b6000828481518110611bc557634e487b7160e01b600052603260045260246000fd5b016020015160f81c90506010811115611bea5760009950505050505050505050611d49565b611c1d868260ff1681518110611c1057634e487b7160e01b600052603260045260246000fd5b6020026020010151612453565b9450611c2a600185613279565b935050611d2e565b845160021415611b92576000611c6c611c65876000815181106114f957634e487b7160e01b600052603260045260246000fd5b8486612481565b8351909150611c7b8286613279565b1415611cde578d80519060200120611cad876001815181106114f957634e487b7160e01b600052603260045260246000fd5b805190602001201415611ccc5760019950505050505050505050611d49565b60009950505050505050505050611d49565b80611cf55760009950505050505050505050611d49565b611cff8185613279565b9350611d2586600181518110611c1057634e487b7160e01b600052603260045260246000fd5b9450611d2e9050565b80611d3881613464565b915050611a9c565b50505050505050505b949350505050565b600061045d826000015160038151811061153057634e487b7160e01b600052603260045260246000fd5b600061045d826000015160048151811061153057634e487b7160e01b600052603260045260246000fd5b600061045d826000015160008151811061153057634e487b7160e01b600052603260045260246000fd5b606061045d82600001516001815181106114f957634e487b7160e01b600052603260045260246000fd5b6001546040517f41539d4a000000000000000000000000000000000000000000000000000000008152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a06040518083038186803b158015611e5f57600080fd5b505afa158015611e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e979190612e53565b5093505092509250611eee828b611eae91906133fa565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a090920190925280519101209085886125e6565b611f3a5760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f4845414445520000000060448201526064016104da565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280611f89846020015160018151811061194257634e487b7160e01b600052603260045260246000fd5b905292915050565b60408051808201909152600080825260208201528251805183908110611fc757634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b805160009015801590611fec57508151602110155b611ff557600080fd5b6000612004836020015161275c565b9050600081846000015161201891906133fa565b905060008083866020015161202d9190613279565b905080519150602083101561204957826020036101000a820491505b50949350505050565b606061045d82602001516002815181106114f957634e487b7160e01b600052603260045260246000fd5b6060612087826122f6565b61209057600080fd5b600061209b836127e1565b905060008167ffffffffffffffff8111156120c657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561210b57816020015b60408051808201909152600080825260208201528152602001906001900390816120e45790505b509050600061211d856020015161275c565b856020015161212c9190613279565b90506000805b848110156121a35761214383612864565b915060405180604001604052808381526020018481525084828151811061217a57634e487b7160e01b600052603260045260246000fd5b602090810291909101015261218f8284613279565b92508061219b81613464565b915050612132565b509195945050505050565b80516060906121bc57600080fd5b60006121cb836020015161275c565b905060008184600001516121df91906133fa565b905060008167ffffffffffffffff81111561220a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612234576020820181803683370190505b50905060008160200190506120498487602001516122529190613279565b8285612926565b600061226660028461347f565b156122ae57601082612279600286613291565b8151811061229757634e487b7160e01b600052603260045260246000fd5b01602001516122a9919060f81c613493565b6122ec565b6010826122bc600286613291565b815181106122da57634e487b7160e01b600052603260045260246000fd5b01602001516122ec919060f81c6132a5565b60f81b9392505050565b805160009061230757506000610460565b6020820151805160001a9060c082101561232657600092505050610460565b5060019392505050565b8061233a576123a5565b602081106123725782518252612351602084613279565b925061235e602083613279565b915061236b6020826133fa565b905061233a565b600060016123818360206133fa565b61238d9061010061330d565b61239791906133fa565b845184518216911916178352505b505050565b80516000906015146123bb57600080fd5b61045d82611fd7565b60606000826000015167ffffffffffffffff8111156123f357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561241d576020820181803683370190505b509050805160001415612431579050610460565b600081602001905061244c8460200151828660000151612926565b5092915050565b805160009060211461246457600080fd5b600080836020015160016124789190613279565b51949350505050565b6000808061248e8661153d565b90506000815167ffffffffffffffff8111156124ba57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156124e4576020820181803683370190505b509050845b82516124f59087613279565b8110156125b457600087828151811061251e57634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000169050808361255389856133fa565b8151811061257157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505080806125ac90613464565b9150506124e9565b508080519060200120828051906020012014156125d457815192506125d9565b600092505b50909150505b9392505050565b6000602082516125f6919061347f565b156126435760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e67746800000000000000000000000060448201526064016104da565b6000602083516126539190613291565b905061266081600261330d565b85106126ae5760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f20626967000000000000000000000060448201526064016104da565b60008660205b8551811161274e578581015192506126cd60028961347f565b61270257604080516020810184905290810184905260600160405160208183030381529060405280519060200120915061272f565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b61273a600289613291565b9750612747602082613279565b90506126b4565b509094149695505050505050565b8051600090811a6080811015612776576000915050610460565b60b8811080612791575060c08110801590612791575060f881105b156127a0576001915050610460565b60c08110156127d5576127b5600160b8613411565b6127c29060ff16826133fa565b6127cd906001613279565b915050610460565b6127b5600160f8613411565b80516000906127f257506000610460565b600080612802846020015161275c565b84602001516128119190613279565b90506000846000015185602001516128299190613279565b90505b8082101561285b5761283d82612864565b6128479083613279565b91508261285381613464565b93505061282c565b50909392505050565b80516000908190811a608081101561287f576001915061244c565b60b88110156128a5576128936080826133fa565b61289e906001613279565b915061244c565b60c08110156128d25760b78103600185019450806020036101000a8551046001820181019350505061244c565b60f88110156128e65761289360c0826133fa565b60019390930151602084900360f7016101000a90049092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0192915050565b80612930576123a5565b602081106129685782518252612947602084613279565b9250612954602083613279565b91506129616020826133fa565b9050612930565b80612372576123a5565b60008083601f840112612983578182fd5b50813567ffffffffffffffff81111561299a578182fd5b60208301915083602080830285010111156129b457600080fd5b9250929050565b600082601f8301126129cb578081fd5b813560206129e06129db8361322d565b6131fc565b82815281810190858301838502870184018810156129fc578586fd5b855b85811015612a1a578135845292840192908401906001016129fe565b5090979650505050505050565b600082601f830112612a37578081fd5b81516020612a476129db8361322d565b8281528181019085830183850287018401881015612a63578586fd5b855b85811015612a1a57815184529284019290840190600101612a65565b60008083601f840112612a92578182fd5b50813567ffffffffffffffff811115612aa9578182fd5b6020830191508360208285010111156129b457600080fd5b600082601f830112612ad1578081fd5b8151612adf6129db82613251565b818152846020838601011115612af3578283fd5b611d49826020830160208701613434565b600060208284031215612b15578081fd5b81356125df816134f7565b60008060008060808587031215612b35578283fd5b8451612b40816134f7565b602086015190945067ffffffffffffffff80821115612b5d578485fd5b612b6988838901612a27565b94506040870151915080821115612b7e578384fd5b612b8a88838901612a27565b93506060870151915080821115612b9f578283fd5b50612bac87828801612ac1565b91505092959194509250565b60008060008060008060008060a0898b031215612bd3578384fd5b8835612bde816134f7565b97506020890135612bee816134f7565b9650604089013567ffffffffffffffff80821115612c0a578586fd5b612c168c838d01612972565b909850965060608b0135915080821115612c2e578586fd5b612c3a8c838d01612972565b909650945060808b0135915080821115612c52578384fd5b50612c5f8b828c01612a81565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215612c8b578384fd5b8635612c96816134f7565b95506020870135612ca6816134f7565b94506040870135935060608701359250608087013567ffffffffffffffff811115612ccf578283fd5b612cdb89828a01612a81565b979a9699509497509295939492505050565b600080600080600060808688031215612d04578283fd5b8535612d0f816134f7565b9450602086013567ffffffffffffffff80821115612d2b578485fd5b612d3789838a016129bb565b95506040880135915080821115612d4c578485fd5b612d5889838a016129bb565b94506060880135915080821115612d6d578283fd5b50612d7a88828901612a81565b969995985093965092949392505050565b60006020808385031215612d9d578182fd5b825167ffffffffffffffff811115612db3578283fd5b8301601f81018513612dc3578283fd5b8051612dd16129db8261322d565b8181528381019083850185840285018601891015612ded578687fd5b8694505b83851015612e0f578051835260019490940193918501918501612df1565b50979650505050505050565b600060208284031215612e2c578081fd5b815180151581146125df578182fd5b600060208284031215612e4c578081fd5b5035919050565b600080600080600060a08688031215612e6a578283fd5b855194506020860151935060408601519250606086015191506080860151612e91816134f7565b809150509295509295909350565b600060208284031215612eb0578081fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146125df578182fd5b600060208284031215612ef0578081fd5b813567ffffffffffffffff811115612f06578182fd5b8201601f81018413612f16578182fd5b8035612f246129db82613251565b818152856020838501011115612f38578384fd5b81602084016020830137908101602001929092525092915050565b600060208284031215612f64578081fd5b815167ffffffffffffffff811115612f7a578182fd5b611d4984828501612ac1565b6000815180845260208085019450808401835b83811015612fb557815187529582019590820190600101612f99565b509495945050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452613002816020860160208601613434565b601f01601f19169290920160200192915050565b6000848252835161302e816020850160208801613434565b60209201918201929092526040019392505050565b60006001600160a01b03808916835280881660208401525060a0604083015261306f60a0830187612f86565b82810360608401526130818187612f86565b90508281036080840152611f3a818587612fc0565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526130ce60a0830184612fea565b979650505050505050565b60006001600160a01b038416825260406020830152611d496040830184612fea565b60006001600160a01b0387168252856020830152846040830152608060608301526130ce608083018486612fc0565b60006001600160a01b0386168252846020830152836040830152608060608301526131586080830184612fea565b9695505050505050565b60408082526000906060830190830185835b60018110156131c4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08685030183526131af848351612fea565b93506020928301929190910190600101613174565b5050508091505060208083018460005b60018110156131f1578151835291830191908301906001016131d4565b505050509392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613225576132256134e1565b604052919050565b600067ffffffffffffffff821115613247576132476134e1565b5060209081020190565b600067ffffffffffffffff82111561326b5761326b6134e1565b50601f01601f191660200190565b6000821982111561328c5761328c6134b5565b500190565b6000826132a0576132a06134cb565b500490565b600060ff8316806132b8576132b86134cb565b8060ff84160491505092915050565b80825b60018086116132d95750613304565b8187048211156132eb576132eb6134b5565b808616156132f857918102915b9490941c9380026132ca565b94509492505050565b60006125df6000198484600082613326575060016125df565b81613333575060006125df565b8160018114613349576002811461335357613380565b60019150506125df565b60ff841115613364576133646134b5565b6001841b91508482111561337a5761337a6134b5565b506125df565b5060208310610133831016604e8410600b84101617156133b3575081810a838111156133ae576133ae6134b5565b6125df565b6133c084848460016132c7565b8086048211156133d2576133d26134b5565b02949350505050565b60008160001904831182151516156133f5576133f56134b5565b500290565b60008282101561340c5761340c6134b5565b500390565b600060ff821660ff84168082101561342b5761342b6134b5565b90039392505050565b60005b8381101561344f578181015183820152602001613437565b8381111561345e576000848401525b50505050565b6000600019821415613478576134786134b5565b5060010190565b60008261348e5761348e6134cb565b500690565b600060ff8316806134a6576134a66134cb565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a9557600080fdfea26469706673582212208ac65fd4e18ef1805ebfae51d52affe90daae88ba6a9d6d89586c81f43187b0164736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses all token transfers across bridge"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses all token transfers across bridge"
      }
    },
    "title": "ASSETERC1155 bridge on L1",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9644,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "fxRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFxStateSender)9594"
      },
      {
        "astId": 9647,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICheckpointManager)9612"
      },
      {
        "astId": 9649,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9653,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "processedExits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 29171,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 389,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 504,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "_paused",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 44767,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC1155Tunnel.sol:AssetERC1155Tunnel",
        "label": "rootToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IAssetERC1155)32783"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAssetERC1155)32783": {
        "encoding": "inplace",
        "label": "contract IAssetERC1155",
        "numberOfBytes": "20"
      },
      "t_contract(ICheckpointManager)9612": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)9594": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}