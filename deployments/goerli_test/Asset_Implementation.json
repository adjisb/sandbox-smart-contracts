{
  "address": "0x21c9FEE5042C6d3D8dA24f201da256E7ceBEC486",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bouncer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "Bouncer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBouncerAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBouncerAdmin",
          "type": "address"
        }
      ],
      "name": "BouncerAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "predicate",
          "type": "address"
        }
      ],
      "name": "PredicateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBouncerAdmin",
          "type": "address"
        }
      ],
      "name": "changeBouncerAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "collectionIndexOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "collectionOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBouncerAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bouncerAdmin",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "chainIndex",
          "type": "uint8"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bouncerAdmin",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "chainIndex",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isBouncer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isCollection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "prepareForExtract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metaData",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bouncer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setBouncer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "predicate",
          "type": "address"
        }
      ],
      "name": "setPredicate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "wasEverMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x70a29745d2fd8c9128cefd7e0567a4a14aa95e80cd70830e66c41894e43ac501",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0x21c9FEE5042C6d3D8dA24f201da256E7ceBEC486",
    "transactionIndex": 63,
    "gasUsed": "3024779",
    "logsBloom": "0x
    "blockHash": "0xbe5900ea261deaa8d0f48aebbf63eddc482c50e71bfb6d925dfa4828369d89c8",
    "transactionHash": "0x70a29745d2fd8c9128cefd7e0567a4a14aa95e80cd70830e66c41894e43ac501",
    "logs": [],
    "blockNumber": 6631723,
    "cumulativeGasUsed": "11811212",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "65f5e19c10bd1cac2517886950f4389d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bouncer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Bouncer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBouncerAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBouncerAdmin\",\"type\":\"address\"}],\"name\":\"BouncerAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"predicate\",\"type\":\"address\"}],\"name\":\"PredicateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBouncerAdmin\",\"type\":\"address\"}],\"name\":\"changeBouncerAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collectionIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collectionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBouncerAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bouncerAdmin\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"chainIndex\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bouncerAdmin\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"chainIndex\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isBouncer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isCollection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"prepareForExtract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metaData\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bouncer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBouncer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"predicate\",\"type\":\"address\"}],\"name\":\"setPredicate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"wasEverMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"id\":\"the token type of which to get the balance of.\",\"owner\":\"The address of the token holder.\"},\"returns\":{\"_0\":\"the balance of `owner` for the token type `id`.\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"ids\":\"ids of each token type to query.\",\"owners\":\"the addresses of the token holders queried.\"},\"returns\":{\"_0\":\"the balance of each `owners` for each token type `ids`.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"changeBouncerAdmin(address)\":{\"params\":{\"newBouncerAdmin\":\"address of the new minting administrator.\"}},\"collectionIndexOf(uint256)\":{\"params\":{\"id\":\"the token to get the index of.\"},\"returns\":{\"_0\":\"the index/order at which the token `id` was minted in a collection.\"}},\"collectionOf(uint256)\":{\"params\":{\"id\":\"the token to get the collection of.\"},\"returns\":{\"_0\":\"the collection the NFT is part of.\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getBouncerAdmin()\":{\"returns\":{\"_0\":\"the current minting administrator in charge of minting rights.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"address of authorized operator.\",\"owner\":\"the owner of the tokens.\"},\"returns\":{\"isOperator\":\"true if the operator is approved, false if not.\"}},\"isBouncer(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has minting rights.\"}},\"isCollection(uint256)\":{\"params\":{\"id\":\"collectionId to check.\"},\"returns\":{\"_0\":\"whether the id is a collection.\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"Should be callable only by MintableERC1155Predicate Make sure minting is done only by this function\",\"params\":{\"account\":\"user address for whom token is being minted\",\"amount\":\"amount of token being minted\",\"data\":\"extra byte data to be accompanied with minted tokens\",\"id\":\"token which is being minted\"}},\"mintBatch(address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"supply for each token type\",\"data\":\"extra data to accompany the minting call\",\"ids\":\"ids to mint\",\"to\":\"address to mint to\"}},\"name()\":{\"returns\":{\"_name\":\"the name of the tokens.\"}},\"prepareForExtract(address,uint256,address)\":{\"params\":{\"id\":\"the token id for which the next collection index is fetched.\"},\"returns\":{\"metaData\":\"required for minting on AssetERC721.\",\"newId\":\"generated after extraction\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"call data should be optimized to order ids so packedBalance can be used efficiently.\",\"params\":{\"data\":\"aditional data accompanying the transfer.\",\"from\":\"address from which tokens are transfered.\",\"ids\":\"ids of each token type transfered.\",\"to\":\"address to which the token will be transfered.\",\"values\":\"amount of each token type transfered.\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"data\":\"aditional data accompanying the transfer.\",\"from\":\"address from which tokens are transfered.\",\"id\":\"the token type transfered.\",\"to\":\"address to which the token will be transfered.\",\"value\":\"amount of token transfered.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"whether to approve or revoke\",\"operator\":\"address which will be granted rights to transfer all tokens of the caller.\"}},\"setApprovalForAllFor(address,address,bool)\":{\"details\":\"used for Meta Transaction (from metaTransactionContract).\",\"params\":{\"approved\":\"whether to approve or revoke.\",\"operator\":\"address which will be granted rights to transfer all token owned by `sender`.\",\"sender\":\"address which grant approval.\"}},\"setBouncer(address,bool)\":{\"params\":{\"bouncer\":\"address that will be given/removed minting bouncer rights.\",\"enabled\":\"set whether the address is enabled or disabled as a minting bouncer.\"}},\"setPredicate(address)\":{\"params\":{\"predicate\":\"address that will be given minting rights for L1.\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"the interface identifier, as specified in ERC-165.\"},\"returns\":{\"_0\":\"`true` if the contract implements `id`.\"}},\"symbol()\":{\"returns\":{\"_symbol\":\"the symbol of the tokens.\"}},\"tokenURI(uint256)\":{\"params\":{\"id\":\"token to get the uri of.\"},\"returns\":{\"_0\":\"URI string\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Get the balance of `owner` for the token type `id`.\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Get the balance of `owners` for each token type `ids`.\"},\"changeBouncerAdmin(address)\":{\"notice\":\"Change the minting administrator to be `newBouncerAdmin`.\"},\"collectionIndexOf(uint256)\":{\"notice\":\"Gives the index at which an NFT was minted in a collection : first of a collection get the zero index.\"},\"collectionOf(uint256)\":{\"notice\":\"Gives the collection a specific token belongs to.\"},\"getBouncerAdmin()\":{\"notice\":\"Returns the current administrator in charge of minting rights.\"},\"initialize(address,address,address,uint8)\":{\"notice\":\"fulfills the purpose of a constructor in upgradeable contracts\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of `operator` for owner `owner`.\"},\"isBouncer(address)\":{\"notice\":\"check whether address `who` is given minting bouncer rights.\"},\"isCollection(uint256)\":{\"notice\":\"Return wether the id is a collection\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"mint(address,uint256,uint256,bytes)\":{\"notice\":\"Creates `amount` tokens of token type `id`, and assigns them to `account`.\"},\"mintBatch(address,uint256[],uint256[],bytes)\":{\"notice\":\"called by predicate to mint tokens transferred from L2\"},\"name()\":{\"notice\":\"A descriptive name for the collection of tokens in this contract.\"},\"prepareForExtract(address,uint256,address)\":{\"notice\":\"Call to perform all AssetERC1155 operations before minting to AssetERC721.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for `operator` to manage all of the caller's tokens.\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Enable or disable approval for `operator` to manage all `sender`'s tokens.\"},\"setBouncer(address,bool)\":{\"notice\":\"Enable or disable the ability of `bouncer` to mint tokens (minting bouncer rights).\"},\"setPredicate(address)\":{\"notice\":\"Set address which will have minting privelages on L1 which is currently limited to tunnels.\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements interface `id`.\"},\"symbol()\":{\"notice\":\"An abbreviated name for the collection of tokens in this contract.\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/assetERC1155/AssetERC1155.sol\":\"AssetERC1155\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/solc_0.8/asset/libraries/AssetHelper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IAssetAttributesRegistry.sol\\\";\\n\\n// used to reduce PolygonAssetV2 contract code size\\nlibrary AssetHelper {\\n    struct AssetRegistryData {\\n        IAssetAttributesRegistry assetRegistry;\\n    }\\n\\n    function setCatalystDatas(\\n        AssetRegistryData storage self,\\n        IAssetAttributesRegistry.AssetGemsCatalystData[] memory assetGemsCatalystData\\n    ) public {\\n        for (uint256 i = 0; i < assetGemsCatalystData.length; i++) {\\n            require(assetGemsCatalystData[i].catalystContractId > 0, \\\"WRONG_catalystContractId\\\");\\n            require(assetGemsCatalystData[i].assetId != 0, \\\"WRONG_assetId\\\");\\n            self.assetRegistry.setCatalystWhenDepositOnOtherLayer(\\n                assetGemsCatalystData[i].assetId,\\n                assetGemsCatalystData[i].catalystContractId,\\n                assetGemsCatalystData[i].gemContractIds\\n            );\\n        }\\n    }\\n\\n    function decodeAndSetCatalystDataL1toL2(AssetRegistryData storage self, bytes calldata depositData)\\n        public\\n        returns (\\n            uint256[] memory ids,\\n            uint256[] memory amounts,\\n            bytes32[] memory hashes\\n        )\\n    {\\n        bytes memory data;\\n        IAssetAttributesRegistry.AssetGemsCatalystData[] memory catalystDatas;\\n        (ids, amounts, data) = abi.decode(depositData, (uint256[], uint256[], bytes));\\n        (hashes, catalystDatas) = abi.decode(data, (bytes32[], IAssetAttributesRegistry.AssetGemsCatalystData[]));\\n\\n        setCatalystDatas(self, catalystDatas);\\n    }\\n\\n    function decodeAndSetCatalystDataL2toL1(AssetRegistryData storage self, bytes calldata data)\\n        public\\n        returns (bytes32[] memory hashes)\\n    {\\n        IAssetAttributesRegistry.AssetGemsCatalystData[] memory catalystDatas;\\n\\n        (hashes, catalystDatas) = abi.decode(data, (bytes32[], IAssetAttributesRegistry.AssetGemsCatalystData[]));\\n\\n        setCatalystDatas(self, catalystDatas);\\n    }\\n\\n    function getGemsAndCatalystData(AssetRegistryData storage self, uint256[] calldata assetIds)\\n        public\\n        view\\n        returns (IAssetAttributesRegistry.AssetGemsCatalystData[] memory)\\n    {\\n        uint256 count = getGemsCatalystDataCount(self, assetIds);\\n        uint256 indexInCatalystArray;\\n\\n        IAssetAttributesRegistry.AssetGemsCatalystData[] memory gemsCatalystDatas =\\n            new IAssetAttributesRegistry.AssetGemsCatalystData[](count);\\n\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            (bool isDataFound, uint16 catalystId, uint16[] memory gemIds) = self.assetRegistry.getRecord(assetIds[i]);\\n            if (isDataFound) {\\n                IAssetAttributesRegistry.AssetGemsCatalystData memory data;\\n                data.assetId = assetIds[i];\\n                data.catalystContractId = catalystId;\\n                data.gemContractIds = gemIds;\\n                require(indexInCatalystArray < count, \\\"indexInCatalystArray out of bound\\\");\\n                gemsCatalystDatas[indexInCatalystArray] = data;\\n                indexInCatalystArray++;\\n            }\\n        }\\n\\n        return gemsCatalystDatas;\\n    }\\n\\n    function getGemsCatalystDataCount(AssetRegistryData storage self, uint256[] calldata assetIds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 count;\\n\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            (bool isDataFound, , ) = self.assetRegistry.getRecord(assetIds[i]);\\n            if (isDataFound) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n\",\"keccak256\":\"0x7fe8407314d07665b27aff8bda0caf2ebedbf93f7618a9d83e2627963284367d\",\"license\":\"MIT\"},\"src/solc_0.8/asset/libraries/ERC1155ERC721Helper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nlibrary ERC1155ERC721Helper {\\n    bytes32 private constant base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n\\n    uint256 public constant CREATOR_OFFSET_MULTIPLIER = uint256(2)**(256 - 160);\\n    uint256 public constant IS_NFT_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1);\\n    uint256 public constant PACK_ID_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1 - 32 - 40);\\n    uint256 public constant PACK_NUM_FT_TYPES_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1 - 32 - 40 - 12);\\n    uint256 public constant NFT_INDEX_OFFSET = 63;\\n\\n    uint256 public constant IS_NFT = 0x0000000000000000000000000000000000000000800000000000000000000000;\\n    uint256 public constant NOT_IS_NFT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 public constant NFT_INDEX = 0x00000000000000000000000000000000000000007FFFFFFF8000000000000000;\\n    uint256 public constant NOT_NFT_INDEX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000007FFFFFFFFFFFFFFF;\\n    uint256 public constant URI_ID = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000007FFFFFFFFFFFF800;\\n    uint256 public constant PACK_ID = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000007FFFFFFFFF800000;\\n    uint256 public constant PACK_INDEX = 0x00000000000000000000000000000000000000000000000000000000000007FF;\\n    uint256 public constant PACK_NUM_FT_TYPES = 0x00000000000000000000000000000000000000000000000000000000007FF800;\\n\\n    uint256 public constant MAX_SUPPLY = uint256(2)**32 - 1;\\n    uint256 public constant MAX_PACK_SIZE = uint256(2)**11;\\n\\n    function toFullURI(bytes32 hash, uint256 id) public pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"ipfs://bafybei\\\", hash2base32(hash), \\\"/\\\", uint2str(id & PACK_INDEX), \\\".json\\\"));\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function hash2base32(bytes32 hash) public pure returns (string memory _uintAsString) {\\n        uint256 _i = uint256(hash);\\n        uint256 k = 52;\\n        bytes memory bstr = new bytes(k);\\n        bstr[--k] = base32Alphabet[uint8((_i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (_i % (2**s)) << (5-s)\\n        _i /= 8;\\n        while (k > 0) {\\n            bstr[--k] = base32Alphabet[_i % 32];\\n            _i /= 32;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function uint2str(uint256 _i) public pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            bstr[--k] = bytes1(uint8(48 + uint8(_i % 10)));\\n            _i /= 10;\\n        }\\n\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x3a1ddd78ae5c82d9d6a11fbbaca3d273f0cedc6129a4a056cbb143abb4b1e62e\",\"license\":\"MIT\"},\"src/solc_0.8/assetERC1155/AssetBaseERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"../common/Libraries/ObjectLib32.sol\\\";\\nimport \\\"../common/BaseWithStorage/WithSuperOperators.sol\\\";\\nimport \\\"../asset/libraries/ERC1155ERC721Helper.sol\\\";\\n\\n// solhint-disable max-states-count\\nabstract contract AssetBaseERC1155 is WithSuperOperators, IERC1155 {\\n    using Address for address;\\n    using ObjectLib32 for ObjectLib32.Operations;\\n    using ObjectLib32 for uint256;\\n\\n    bytes4 private constant ERC1155_IS_RECEIVER = 0x4e2312e0;\\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n\\n    mapping(address => uint256) private _numNFTPerAddress; // erc721\\n    mapping(uint256 => uint256) private _owners; // erc721\\n    mapping(address => mapping(uint256 => uint256)) private _packedTokenBalance; // erc1155\\n    mapping(address => mapping(address => bool)) private _operatorsForAll; // erc721 and erc1155\\n    mapping(uint256 => address) private _erc721operators; // erc721\\n    mapping(uint256 => bytes32) internal _metadataHash; // erc721 and erc1155\\n    mapping(uint256 => bytes) internal _rarityPacks; // rarity configuration per packs (2 bits per Asset)\\n    mapping(uint256 => uint32) private _nextCollectionIndex; // extraction\\n\\n    // @note : Deprecated.\\n    mapping(address => address) private _creatorship; // creatorship transfer // deprecated\\n\\n    mapping(address => bool) private _bouncers; // the contracts allowed to mint\\n\\n    // @note : Deprecated.\\n    mapping(address => bool) private _metaTransactionContracts;\\n\\n    address private _bouncerAdmin;\\n\\n    bool internal _init;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n\\n    uint256 internal _initBits;\\n    address internal _predicate; // used in place of polygon's `PREDICATE_ROLE`\\n\\n    uint8 internal _chainIndex; // modify this for l2\\n\\n    address internal _trustedForwarder;\\n\\n    uint256[20] private __gap;\\n    // solhint-enable max-states-count\\n\\n    event BouncerAdminChanged(address oldBouncerAdmin, address newBouncerAdmin);\\n    event Bouncer(address bouncer, bool enabled);\\n\\n    function init(\\n        address trustedForwarder,\\n        address admin,\\n        address bouncerAdmin,\\n        uint8 chainIndex\\n    ) public {\\n        // one-time init of bitfield's previous versions\\n        _checkInit(1);\\n        _admin = admin;\\n        _bouncerAdmin = bouncerAdmin;\\n        __ERC2771Handler_initialize(trustedForwarder);\\n        _chainIndex = chainIndex;\\n    }\\n\\n    /// @notice Change the minting administrator to be `newBouncerAdmin`.\\n    /// @param newBouncerAdmin address of the new minting administrator.\\n    function changeBouncerAdmin(address newBouncerAdmin) external {\\n        require(_msgSender() == _bouncerAdmin, \\\"!BOUNCER_ADMIN\\\");\\n        require(newBouncerAdmin != address(0), \\\"AssetBaseERC1155: new bouncer admin can't be zero address\\\");\\n        emit BouncerAdminChanged(_bouncerAdmin, newBouncerAdmin);\\n        _bouncerAdmin = newBouncerAdmin;\\n    }\\n\\n    /// @notice Enable or disable the ability of `bouncer` to mint tokens (minting bouncer rights).\\n    /// @param bouncer address that will be given/removed minting bouncer rights.\\n    /// @param enabled set whether the address is enabled or disabled as a minting bouncer.\\n    function setBouncer(address bouncer, bool enabled) external {\\n        require(_msgSender() == _bouncerAdmin, \\\"!BOUNCER_ADMIN\\\");\\n        _bouncers[bouncer] = enabled;\\n        emit Bouncer(bouncer, enabled);\\n    }\\n\\n    /// @notice Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param id the token type transfered.\\n    /// @param value amount of token transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override {\\n        require(to != address(0), \\\"TO==0\\\");\\n        require(from != address(0), \\\"FROM==0\\\");\\n        bool success = _transferFrom(from, to, id, value);\\n        if (success) {\\n            require(\\n                _checkOnERC1155Received(isTrustedForwarder(msg.sender) ? from : msg.sender, from, to, id, value, data),\\n                \\\"1155_TRANSFER_REJECTED\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\\n    /// @dev call data should be optimized to order ids so packedBalance can be used efficiently.\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param ids ids of each token type transfered.\\n    /// @param values amount of each token type transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override {\\n        require(ids.length == values.length, \\\"MISMATCHED_ARR_LEN\\\");\\n        require(to != address(0), \\\"TO==0\\\");\\n        require(from != address(0), \\\"FROM==0\\\");\\n        bool metaTx = isTrustedForwarder(msg.sender);\\n        bool authorized = from == _msgSender() || isApprovedForAll(from, _msgSender());\\n\\n        _batchTransferFrom(from, to, ids, values, authorized);\\n        emit TransferBatch(metaTx ? from : _msgSender(), from, to, ids, values);\\n        require(\\n            _checkOnERC1155BatchReceived(metaTx ? from : _msgSender(), from, to, ids, values, data),\\n            \\\"1155_TRANSFER_REJECTED\\\"\\n        );\\n    }\\n\\n    /// @notice Enable or disable approval for `operator` to manage all `sender`'s tokens.\\n    /// @dev used for Meta Transaction (from metaTransactionContract).\\n    /// @param sender address which grant approval.\\n    /// @param operator address which will be granted rights to transfer all token owned by `sender`.\\n    /// @param approved whether to approve or revoke.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(sender == _msgSender() || _superOperators[_msgSender()], \\\"!AUTHORIZED\\\");\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Enable or disable approval for `operator` to manage all of the caller's tokens.\\n    /// @param operator address which will be granted rights to transfer all tokens of the caller.\\n    /// @param approved whether to approve or revoke\\n    function setApprovalForAll(address operator, bool approved) external override(IERC1155) {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Returns the current administrator in charge of minting rights.\\n    /// @return the current minting administrator in charge of minting rights.\\n    function getBouncerAdmin() external view returns (address) {\\n        return _bouncerAdmin;\\n    }\\n\\n    /// @notice check whether address `who` is given minting bouncer rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minting rights.\\n    function isBouncer(address who) public view returns (bool) {\\n        return _bouncers[who];\\n    }\\n\\n    /// @notice Get the balance of `owners` for each token type `ids`.\\n    /// @param owners the addresses of the token holders queried.\\n    /// @param ids ids of each token type to query.\\n    /// @return the balance of each `owners` for each token type `ids`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(owners.length == ids.length, \\\"ARG_LENGTH_MISMATCH\\\");\\n        uint256[] memory balances = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            balances[i] = balanceOf(owners[i], ids[i]);\\n        }\\n        return balances;\\n    }\\n\\n    /// @notice A descriptive name for the collection of tokens in this contract.\\n    /// @return _name the name of the tokens.\\n    function name() external pure returns (string memory _name) {\\n        return \\\"Sandbox's ASSETs ERC1155\\\";\\n    }\\n\\n    /// @notice An abbreviated name for the collection of tokens in this contract.\\n    /// @return _symbol the symbol of the tokens.\\n    function symbol() external pure returns (string memory _symbol) {\\n        return \\\"ASSETERC1155\\\";\\n    }\\n\\n    /// @notice Query if a contract implements interface `id`.\\n    /// @param id the interface identifier, as specified in ERC-165.\\n    /// @return `true` if the contract implements `id`.\\n    function supportsInterface(bytes4 id) external pure override returns (bool) {\\n        return\\n            id == 0x01ffc9a7 || //ERC165\\n            id == 0xd9b67a26 || // ERC1155\\n            id == 0x0e89341c || // ERC1155 metadata\\n            id == 0x9930ed5a; // ERC2771\\n    }\\n\\n    /// @notice Gives the collection a specific token belongs to.\\n    /// @param id the token to get the collection of.\\n    /// @return the collection the NFT is part of.\\n    function collectionOf(uint256 id) public view returns (uint256) {\\n        require(wasEverMinted(id), \\\"FT_!MINTED\\\"); // TODO: review\\n        uint256 collectionId = id & ERC1155ERC721Helper.NOT_NFT_INDEX & ERC1155ERC721Helper.NOT_IS_NFT;\\n        require(wasEverMinted(collectionId), \\\"UNMINTED_COLLECTION\\\");\\n        return collectionId;\\n    }\\n\\n    /// @notice Return wether the id is a collection\\n    /// @param id collectionId to check.\\n    /// @return whether the id is a collection.\\n    function isCollection(uint256 id) public view returns (bool) {\\n        uint256 collectionId = id & ERC1155ERC721Helper.NOT_NFT_INDEX & ERC1155ERC721Helper.NOT_IS_NFT;\\n        return wasEverMinted(collectionId);\\n    }\\n\\n    /// @notice Gives the index at which an NFT was minted in a collection : first of a collection get the zero index.\\n    /// @param id the token to get the index of.\\n    /// @return the index/order at which the token `id` was minted in a collection.\\n    function collectionIndexOf(uint256 id) public view returns (uint256) {\\n        collectionOf(id); // this check if id and collection indeed was ever minted\\n        return uint32((id & ERC1155ERC721Helper.NFT_INDEX) >> ERC1155ERC721Helper.NFT_INDEX_OFFSET);\\n    }\\n\\n    function wasEverMinted(uint256 id) public view returns (bool) {\\n        // TODO: discuss\\n        // ((id & ERC1155ERC721Helper.PACK_INDEX) <\\n        //     ((id & ERC1155ERC721Helper.PACK_NUM_FT_TYPES) /\\n        //         ERC1155ERC721Helper.PACK_NUM_FT_TYPES_OFFSET_MULTIPLIER)) &&\\n        return _metadataHash[id & ERC1155ERC721Helper.URI_ID] != 0;\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @param id token to get the uri of.\\n    /// @return URI string\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n        require(wasEverMinted(id), \\\"FT_!MINTED\\\");\\n        return ERC1155ERC721Helper.toFullURI(_metadataHash[id & ERC1155ERC721Helper.URI_ID], id);\\n    }\\n\\n    /// @notice Get the balance of `owner` for the token type `id`.\\n    /// @param owner The address of the token holder.\\n    /// @param id the token type of which to get the balance of.\\n    /// @return the balance of `owner` for the token type `id`.\\n    function balanceOf(address owner, uint256 id) public view override returns (uint256) {\\n        require(wasEverMinted(id), \\\"token was never minted\\\");\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        return _packedTokenBalance[owner][bin].getValueInBin(index);\\n    }\\n\\n    /// @notice Call to perform all AssetERC1155 operations before minting to AssetERC721.\\n    /// @param id the token id for which the next collection index is fetched.\\n    /// @return newId generated after extraction\\n    /// @return metaData required for minting on AssetERC721.\\n    function prepareForExtract(\\n        address sender,\\n        uint256 id,\\n        address to\\n    ) external returns (uint256 newId, string memory metaData) {\\n        require(_bouncers[msg.sender], \\\"!BOUNCER\\\"); // TODO: should we limit this call to asset upgrader?\\n        require(balanceOf(to, id) == 1, \\\"!NFT\\\");\\n        uint32 tokenCollectionIndex = _nextCollectionIndex[id];\\n        metaData = tokenURI(id);\\n        newId = id + ERC1155ERC721Helper.IS_NFT + (tokenCollectionIndex) * 2**ERC1155ERC721Helper.NFT_INDEX_OFFSET; // TODO: To review\\n        _nextCollectionIndex[id] = tokenCollectionIndex + 1;\\n        _burnFT(sender, id, 1);\\n    }\\n\\n    /// @notice Queries the approval status of `operator` for owner `owner`.\\n    /// @param owner the owner of the tokens.\\n    /// @param operator address of authorized operator.\\n    /// @return isOperator true if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override(IERC1155)\\n        returns (bool isOperator)\\n    {\\n        require(owner != address(0), \\\"OWNER==0\\\");\\n        require(operator != address(0), \\\"OPERATOR==0\\\");\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(sender != address(0), \\\"SENDER==0\\\");\\n        require(sender != operator, \\\"SENDER==OPERATOR\\\");\\n        require(operator != address(0), \\\"OPERATOR==0\\\");\\n        require(!_superOperators[operator], \\\"APPR_EXISTING_SUPEROPERATOR\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /* solhint-disable code-complexity */\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bool authorized\\n    ) internal {\\n        uint256 numItems = ids.length;\\n        uint256 bin;\\n        uint256 index;\\n        uint256 balFrom;\\n        uint256 balTo;\\n\\n        uint256 lastBin;\\n        require(authorized, \\\"OPERATOR_!AUTH\\\");\\n\\n        for (uint256 i = 0; i < numItems; i++) {\\n            if (from == to) {\\n                _checkEnoughBalance(from, ids[i], values[i]);\\n            } else if (values[i] > 0) {\\n                (bin, index) = ids[i].getTokenBinIndex();\\n                if (lastBin == 0) {\\n                    lastBin = bin;\\n                    balFrom = ObjectLib32.updateTokenBalance(\\n                        _packedTokenBalance[from][bin],\\n                        index,\\n                        values[i],\\n                        ObjectLib32.Operations.SUB\\n                    );\\n                    balTo = ObjectLib32.updateTokenBalance(\\n                        _packedTokenBalance[to][bin],\\n                        index,\\n                        values[i],\\n                        ObjectLib32.Operations.ADD\\n                    );\\n                } else {\\n                    if (bin != lastBin) {\\n                        _packedTokenBalance[from][lastBin] = balFrom;\\n                        _packedTokenBalance[to][lastBin] = balTo;\\n                        balFrom = _packedTokenBalance[from][bin];\\n                        balTo = _packedTokenBalance[to][bin];\\n                        lastBin = bin;\\n                    }\\n\\n                    balFrom = balFrom.updateTokenBalance(index, values[i], ObjectLib32.Operations.SUB);\\n                    balTo = balTo.updateTokenBalance(index, values[i], ObjectLib32.Operations.ADD);\\n                }\\n            }\\n        }\\n\\n        if (bin != 0 && from != to) {\\n            _packedTokenBalance[from][bin] = balFrom;\\n            _packedTokenBalance[to][bin] = balTo;\\n        }\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0 && amount <= ERC1155ERC721Helper.MAX_SUPPLY, \\\"INVALID_AMOUNT\\\");\\n        _burnFT(from, id, uint32(amount));\\n        emit TransferSingle(_msgSender(), from, address(0), id, amount);\\n    }\\n\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal {\\n        address operator = isTrustedForwarder(msg.sender) ? from : _msgSender();\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(amounts[i] > 0 && amounts[i] <= ERC1155ERC721Helper.MAX_SUPPLY, \\\"INVALID_AMOUNT\\\");\\n            _burnFT(from, ids[i], uint32(amounts[i]));\\n        }\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    function _burnFT(\\n        address from,\\n        uint256 id,\\n        uint32 amount\\n    ) internal {\\n        (uint256 bin, uint256 index) = (id).getTokenBinIndex();\\n        _packedTokenBalance[from][bin] = _packedTokenBalance[from][bin].updateTokenBalance(\\n            index,\\n            amount,\\n            ObjectLib32.Operations.SUB\\n        );\\n    }\\n\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        uint16 offset = 0;\\n        while (offset < amounts.length) {\\n            _mintPack(offset, amounts, to, ids);\\n            offset += 8;\\n        }\\n        _completeBatchMint(_msgSender(), to, ids, amounts, data);\\n    }\\n\\n    function _mintPack(\\n        uint16 offset,\\n        uint256[] memory supplies,\\n        address owner,\\n        uint256[] memory ids\\n    ) internal {\\n        (uint256 bin, uint256 index) = ids[offset].getTokenBinIndex();\\n        for (uint256 i = 0; i < 8 && offset + i < supplies.length; i++) {\\n            uint256 j = offset + i;\\n            if (supplies[j] > 0) {\\n                _packedTokenBalance[owner][bin] = _packedTokenBalance[owner][bin].updateTokenBalance(\\n                    index + i,\\n                    supplies[j],\\n                    ObjectLib32.Operations.ADD\\n                );\\n            }\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    ) internal returns (bool) {\\n        address sender = _msgSender();\\n        bool authorized = from == sender || isApprovedForAll(from, sender);\\n\\n        require(authorized, \\\"OPERATOR_!AUTH\\\");\\n        if (value > 0) {\\n            (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n            _packedTokenBalance[from][bin] = _packedTokenBalance[from][bin].updateTokenBalance(\\n                index,\\n                value,\\n                ObjectLib32.Operations.SUB\\n            );\\n            _packedTokenBalance[to][bin] = _packedTokenBalance[to][bin].updateTokenBalance(\\n                index,\\n                value,\\n                ObjectLib32.Operations.ADD\\n            );\\n        }\\n\\n        emit TransferSingle(isTrustedForwarder(msg.sender) ? from : sender, from, to, id, value);\\n        return true;\\n    }\\n\\n    function _mint(\\n        bytes32 hash,\\n        uint256 supply,\\n        uint8 rarity,\\n        address operator,\\n        address owner,\\n        uint256 id,\\n        bytes memory data,\\n        bool extraction\\n    ) internal {\\n        uint256 uriId = id & ERC1155ERC721Helper.URI_ID;\\n        if (!extraction) {\\n            require(uint256(_metadataHash[uriId]) == 0, \\\"ID_TAKEN\\\");\\n            _metadataHash[uriId] = hash;\\n            require(rarity < 4, \\\"RARITY>=4\\\");\\n            bytes memory pack = new bytes(1);\\n            pack[0] = bytes1(rarity * 64);\\n            _rarityPacks[uriId] = pack;\\n        }\\n        _mint(operator, owner, id, supply, data);\\n    }\\n\\n    function _mint(\\n        address operator,\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        _packedTokenBalance[account][bin] = _packedTokenBalance[account][bin].updateTokenBalance(\\n            index,\\n            amount,\\n            ObjectLib32.Operations.REPLACE\\n        );\\n\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n        require(_checkOnERC1155Received(operator, address(0), account, id, amount, data), \\\"TRANSFER_REJECTED\\\");\\n    }\\n\\n    /// @dev Allows the use of a bitfield to track the initialized status of the version `v` passed in as an arg.\\n    /// If the bit at the index corresponding to the given version is already set, revert.\\n    /// Otherwise, set the bit and return.\\n    /// @param v The version of this contract.\\n    function _checkInit(uint256 v) internal {\\n        require((_initBits >> v) & uint256(1) != 1, \\\"ALREADY_INITIALISED\\\");\\n        _initBits = _initBits | (uint256(1) << v);\\n    }\\n\\n    function _completeBatchMint(\\n        address operator,\\n        address owner,\\n        uint256[] memory ids,\\n        uint256[] memory supplies,\\n        bytes memory data\\n    ) internal {\\n        emit TransferBatch(operator, address(0), owner, ids, supplies);\\n        require(_checkOnERC1155BatchReceived(operator, address(0), owner, ids, supplies, data), \\\"TRANSFER_REJECTED\\\");\\n    }\\n\\n    function _checkEnoughBalance(\\n        address from,\\n        uint256 id,\\n        uint256 value\\n    ) internal view {\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        require(_packedTokenBalance[from][bin].getValueInBin(index) >= value, \\\"BALANCE_TOO_LOW\\\");\\n    }\\n\\n    function _checkOnERC1155Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        return IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) == ERC1155_RECEIVED;\\n    }\\n\\n    function _checkOnERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes4 retval = IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data);\\n        return (retval == ERC1155_BATCH_RECEIVED);\\n    }\\n}\\n\",\"keccak256\":\"0x1fb8da0a0fba8305fcb969fb074ee2b9ee96b1d639d43a352cbe46543052927f\",\"license\":\"MIT\"},\"src/solc_0.8/assetERC1155/AssetERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./AssetBaseERC1155.sol\\\";\\nimport \\\"../asset/libraries/AssetHelper.sol\\\";\\nimport \\\"../common/interfaces/IAssetAttributesRegistry.sol\\\";\\nimport \\\"../common/interfaces/IMintableERC1155.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ncontract AssetERC1155 is AssetBaseERC1155, IMintableERC1155 {\\n    event PredicateSet(address predicate);\\n\\n    /// @notice fulfills the purpose of a constructor in upgradeable contracts\\n    function initialize(\\n        address trustedForwarder,\\n        address admin,\\n        address bouncerAdmin,\\n        uint8 chainIndex\\n    ) external {\\n        init(trustedForwarder, admin, bouncerAdmin, chainIndex);\\n    }\\n\\n    /**\\n     * @notice Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     * @dev Should be callable only by MintableERC1155Predicate\\n     * Make sure minting is done only by this function\\n     * @param account user address for whom token is being minted\\n     * @param id token which is being minted\\n     * @param amount amount of token being minted\\n     * @param data extra byte data to be accompanied with minted tokens\\n     */\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override {\\n        require(_msgSender() == _predicate, \\\"!PREDICATE\\\");\\n        uint256 uriId = id & ERC1155ERC721Helper.URI_ID;\\n        _metadataHash[uriId] = abi.decode(data, (bytes32));\\n        _mint(_msgSender(), account, id, amount, data);\\n    }\\n\\n    /// @notice called by predicate to mint tokens transferred from L2\\n    /// @param to address to mint to\\n    /// @param ids ids to mint\\n    /// @param amounts supply for each token type\\n    /// @param data extra data to accompany the minting call\\n    function mintBatch(\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external override {\\n        require(_msgSender() == _predicate, \\\"!PREDICATE\\\");\\n        bytes32[] memory hashes = abi.decode(data, (bytes32[]));\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 uriId = ids[i] & ERC1155ERC721Helper.URI_ID;\\n            _metadataHash[uriId] = hashes[i]; // To Review\\n        }\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    /// @notice Set address which will have minting privelages on L1 which is currently limited to tunnels.\\n    /// @param predicate address that will be given minting rights for L1.\\n    function setPredicate(address predicate) external {\\n        require(_msgSender() == _admin, \\\"!ADMIN\\\");\\n        _predicate = predicate;\\n        emit PredicateSet(predicate);\\n    }\\n}\\n\",\"keccak256\":\"0xfea24955e269bfabaaaa8eb4e3367bd4dbc22c5c5b5621e8c9a426648207ff8f\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0xf2ce40f1b23052a50a5b2d5ad61fbc04ab6c9fb2e5b1dba17ccddf4507e4649f\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperators.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithSuperOperators is WithAdmin {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0xa0d9b0e08ccae5e6b1f56e41ef750a68686d8958bc398369ac283aa4440f87ab\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/ObjectLib32.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nlibrary ObjectLib32 {\\n    enum Operations {ADD, SUB, REPLACE}\\n    // Constants regarding bin or chunk sizes for balance packing\\n    uint256 internal constant TYPES_BITS_SIZE = 32; // Max size of each object\\n    uint256 internal constant TYPES_PER_UINT256 = 256 / TYPES_BITS_SIZE; // Number of types per uint256\\n\\n    //\\n    // Objects and Tokens Functions\\n    //\\n\\n    /// @dev Return the bin number and index within that bin where ID is\\n    /// @param tokenId Object type\\n    /// @return bin Bin number.\\n    /// @return index ID's index within that bin.\\n    function getTokenBinIndex(uint256 tokenId) internal pure returns (uint256 bin, uint256 index) {\\n        unchecked {bin = (tokenId * TYPES_BITS_SIZE) / 256;}\\n        index = tokenId % TYPES_PER_UINT256;\\n        return (bin, index);\\n    }\\n\\n    /**\\n     * @dev update the balance of a type provided in binBalances\\n     * @param binBalances Uint256 containing the balances of objects\\n     * @param index Index of the object in the provided bin\\n     * @param amount Value to update the type balance\\n     * @param operation Which operation to conduct :\\n     *     Operations.REPLACE : Replace type balance with amount\\n     *     Operations.ADD     : ADD amount to type balance\\n     *     Operations.SUB     : Substract amount from type balance\\n     */\\n    function updateTokenBalance(\\n        uint256 binBalances,\\n        uint256 index,\\n        uint256 amount,\\n        Operations operation\\n    ) internal pure returns (uint256 newBinBalance) {\\n        uint256 objectBalance = 0;\\n        if (operation == Operations.ADD) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            newBinBalance = writeValueInBin(binBalances, index, objectBalance + amount);\\n        } else if (operation == Operations.SUB) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            require(objectBalance >= amount, \\\"can't substract more than there is\\\");\\n            newBinBalance = writeValueInBin(binBalances, index, objectBalance - amount);\\n        } else if (operation == Operations.REPLACE) {\\n            newBinBalance = writeValueInBin(binBalances, index, amount);\\n        } else {\\n            revert(\\\"Invalid operation\\\"); // Bad operation\\n        }\\n\\n        return newBinBalance;\\n    }\\n\\n    /*\\n     * @dev return value in binValue at position index\\n     * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n     * @param index index at which to retrieve value\\n     * @return Value at given index in bin\\n     */\\n    function getValueInBin(uint256 binValue, uint256 index) internal pure returns (uint256) {\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 rightShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue >> rightShift) & mask;\\n    }\\n\\n    /**\\n     * @dev return the updated binValue after writing amount at index\\n     * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n     * @param index Index at which to retrieve value\\n     * @param amount Value to store at index in bin\\n     * @return Value at given index in bin\\n     */\\n    function writeValueInBin(\\n        uint256 binValue,\\n        uint256 index,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        require(amount < 2**TYPES_BITS_SIZE, \\\"Amount to write in bin is too large\\\");\\n\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 leftShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue & ~(mask << leftShift)) | (amount << leftShift);\\n    }\\n}\\n\",\"keccak256\":\"0xa29615ee5e0cf81655b9a14f2694a5e8068db3eb9ea41d4b40b007c65676857e\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetAttributesRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAssetAttributesRegistry {\\n    struct GemEvent {\\n        uint16[] gemIds;\\n        bytes32 blockHash;\\n    }\\n\\n    struct AssetGemsCatalystData {\\n        uint256 assetId;\\n        uint16 catalystContractId;\\n        uint16[] gemContractIds;\\n    }\\n\\n    function getRecord(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            bool exists,\\n            uint16 catalystId,\\n            uint16[] memory gemIds\\n        );\\n\\n    function getAttributes(uint256 assetId, GemEvent[] calldata events) external view returns (uint32[] memory values);\\n\\n    function setCatalyst(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWhenDepositOnOtherLayer(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWithBlockNumber(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint64 blockNumber\\n    ) external;\\n\\n    function addGems(uint256 assetId, uint16[] calldata gemIds) external;\\n\\n    function setMigrationContract(address _migrationContract) external;\\n\\n    function getCatalystRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7f12fa565160d7598f702dcae0e511943be9c6eaa4dc338f3439a36f0a6086c9\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IMintableERC1155.sol\":{\"content\":\"pragma solidity 0.8.2;\\n\\ninterface IMintableERC1155 {\\n    /**\\n     * @notice Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     * @dev Should be callable only by MintableERC1155Predicate\\n     * Make sure minting is done only by this function\\n     * @param account user address for whom token is being minted\\n     * @param id token which is being minted\\n     * @param amount amount of token being minted\\n     * @param data extra byte data to be accompanied with minted tokens\\n     */\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Batched version of singular token minting, where\\n     * for each token in `ids` respective amount to be minted from `amounts`\\n     * array, for address `to`.\\n     * @dev Should be callable only by MintableERC1155Predicate\\n     * Make sure minting is done only by this function\\n     * @param to user address for whom token is being minted\\n     * @param ids tokens which are being minted\\n     * @param amounts amount of each token being minted\\n     * @param data extra byte data to be accompanied with minted tokens\\n     */\\n    function mintBatch(\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbeb8bb6abea69b82bed4c0cb33a83b569abd6922fddae205710e9612213924b3\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506135f7806100206000396000f3fe608060405234801561001057600080fd5b50600436106101e45760003560e01c806395d89b411161010f578063c87b56dd116100a2578063d402756e11610071578063d402756e146104a1578063e985e9c5146104d2578063eeb5a5d1146104e5578063f242432a146104f8576101e4565b8063c87b56dd14610449578063cc0f8b5d1461045c578063ce1b815f1461047d578063d12e76d01461048e576101e4565b8063ac9fe421116100de578063ac9fe421146103fd578063b9b75ebc14610410578063bd9ff41b14610423578063c7778baa14610436576101e4565b806395d89b411461038d5780639bc88b9c146103c6578063a0ea837c146103d7578063a22cb465146103ea576101e4565b80633073cecf11610187578063654b748a11610156578063654b748a146103165780636e9960c314610342578063731133e9146103675780638f2839701461037a576101e4565b80633073cecf146102955780634c4d07e7146102a85780634e1273f4146102d4578063572b6c05146102f4576101e4565b806306fdde03116101c357806306fdde03146102475780631f7fdffa1461025c5780632e712b461461026f5780632eb2c2d614610282576101e4565b8062fdd58e146101e957806301ffc9a71461020f578063049476df14610232575b600080fd5b6101fc6101f7366004612e90565b61050b565b6040519081526020015b60405180910390f35b61022261021d366004613079565b6105c3565b6040519015158152602001610206565b610245610240366004612bab565b610696565b005b61024f6107f2565b60405161020691906132eb565b61024561026a366004612dc0565b61082a565b6101fc61027d366004613061565b6109e4565b610245610290366004612c51565b6109fd565b6102456102a3366004612bf7565b610d26565b6102226102b6366004612bab565b6001600160a01b03166000908152600b602052604090205460ff1690565b6102e76102e2366004612f51565b610d38565b60405161020691906132b3565b610222610302366004612bab565b6010546001600160a01b0390811691161490565b610222610324366004612bab565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610206565b610245610375366004612eeb565b610e94565b610245610388366004612bab565b610f7b565b60408051808201909152600c81527f4153534554455243313135350000000000000000000000000000000000000000602082015261024f565b600d546001600160a01b031661034f565b6102456103e5366004612bf7565b61104b565b6102456103f8366004612e67565b6110ee565b61024561040b366004612e67565b611104565b61024561041e366004612e67565b6111e8565b610222610431366004613061565b6112ae565b6101fc610444366004613061565b6112e8565b61024f610457366004613061565b6113d6565b61046f61046a366004612eb9565b611513565b6040516102069291906132fe565b6010546001600160a01b031661034f565b61024561049c366004612bab565b61168f565b6102226104af366004613061565b6bffffffff80000000000007ff1916600090815260076020526040902054151590565b6102226104e0366004612bc5565b61175a565b6102456104f3366004612d08565b611858565b610245610506366004612d4a565b611900565b6bffffffff80000000000007ff19811660009081526007602052604081205461057b5760405162461bcd60e51b815260206004820152601660248201527f746f6b656e20776173206e65766572206d696e7465640000000000000000000060448201526064015b60405180910390fd5b60008061058784611a75565b6001600160a01b038716600090815260046020908152604080832085845290915290205491935091506105ba9082611aa0565b95945050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061062657507fd9b67a26000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061065a57507f0e89341c000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061068e57507f9930ed5a000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b600d546001600160a01b03166106aa611ae5565b6001600160a01b0316146107005760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e0000000000000000000000000000000000006044820152606401610572565b6001600160a01b03811661077c5760405162461bcd60e51b815260206004820152603960248201527f417373657442617365455243313135353a206e657720626f756e63657220616460448201527f6d696e2063616e2774206265207a65726f2061646472657373000000000000006064820152608401610572565b600d54604080516001600160a01b03928316815291831660208301527f1bab6ababbec5519512e9ee16964953ec0f72839126138285cac1f1136bd642e910160405180910390a1600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60408051808201909152601881527f53616e64626f782773204153534554732045524331313535000000000000000060208201525b90565b600f546001600160a01b031661083e611ae5565b6001600160a01b0316146108945760405162461bcd60e51b815260206004820152600a60248201527f21505245444943415445000000000000000000000000000000000000000000006044820152606401610572565b60006108a282840184612fba565b905060005b868110156109375760006bffffffff80000000000007ff198989848181106108df57634e487b7160e01b600052603260045260246000fd5b9050602002013516905082828151811061090957634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600092835260079091526040909120558061092f81613537565b9150506108a7565b506109da8888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525050604080516020601f8b018190048102820181019092528981529250899150889081908401838280828437600092019190915250611b2f92505050565b5050505050505050565b60006109ef826112e8565b5050603f1c63ffffffff1690565b848314610a4c5760405162461bcd60e51b815260206004820152601260248201527f4d49534d4154434845445f4152525f4c454e00000000000000000000000000006044820152606401610572565b6001600160a01b038716610aa25760405162461bcd60e51b815260206004820152600560248201527f544f3d3d300000000000000000000000000000000000000000000000000000006044820152606401610572565b6001600160a01b038816610af85760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d30000000000000000000000000000000000000000000000000006044820152606401610572565b6010546001600160a01b031633146000610b10611ae5565b6001600160a01b03168a6001600160a01b03161480610b365750610b368a6104e0611ae5565b9050610ba98a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c918291850190849080828437600092019190915250889250611b78915050565b886001600160a01b03168a6001600160a01b031683610bcf57610bca611ae5565b610bd1565b8b5b6001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8b8b8b8b604051610c0f949392919061328c565b60405180910390a4610cce82610c2c57610c27611ae5565b610c2e565b8a5b8b8b8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b9081908401838280828437600092019190915250611ee292505050565b610d1a5760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a4543544544000000000000000000006044820152606401610572565b50505050505050505050565b610d328484848461104b565b50505050565b6060838214610d895760405162461bcd60e51b815260206004820152601360248201527f4152475f4c454e4754485f4d49534d41544348000000000000000000000000006044820152606401610572565b60008267ffffffffffffffff811115610db257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ddb578160200160208202803683370190505b50905060005b83811015610e8a57610e4d878783818110610e0c57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610e219190612bab565b868684818110610e4157634e487b7160e01b600052603260045260246000fd5b9050602002013561050b565b828281518110610e6d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610e8281613537565b915050610de1565b5095945050505050565b600f546001600160a01b0316610ea8611ae5565b6001600160a01b031614610efe5760405162461bcd60e51b815260206004820152600a60248201527f21505245444943415445000000000000000000000000000000000000000000006044820152606401610572565b6bffffffff80000000000007ff198416610f1a82840184613061565b600082815260076020526040902055610f73610f34611ae5565b87878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fd792505050565b505050505050565b6000546001600160a01b03163314610fd55760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e494544000000000000000000000000006044820152606401610572565b600054604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a16000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61105560016120d9565b600080546001600160a01b0385811673ffffffffffffffffffffffffffffffffffffffff1992831617909255600d80548584169083161790556010805492871692909116919091179055600f805460ff90921674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055505050565b6111006110f9611ae5565b8383612144565b5050565b6000546001600160a01b031633146111845760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f727300000000000000000000000000000000000000006064820152608401610572565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891015b60405180910390a15050565b600d546001600160a01b03166111fc611ae5565b6001600160a01b0316146112525760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e0000000000000000000000000000000000006044820152606401610572565b6001600160a01b0382166000818152600b6020908152604091829020805460ff19168515159081179091558251938452908301527f5ecd928ac22825e06273a3e8db8118dd7fe11bd2637ecfe4bfa25154948bd85f91016111dc565b6bffffffff80000000000007ff1981166000908152600760205260408120546bffffffff80000000000000001983169015155b9392505050565b6bffffffff80000000000007ff1981166000908152600760205260408120546113535760405162461bcd60e51b815260206004820152600a60248201527f46545f214d494e544544000000000000000000000000000000000000000000006044820152606401610572565b6bffffffff800000000000000019821661138a816bffffffff80000000000007ff1916600090815260076020526040902054151590565b61068e5760405162461bcd60e51b815260206004820152601360248201527f554e4d494e5445445f434f4c4c454354494f4e000000000000000000000000006044820152606401610572565b60606113ff826bffffffff80000000000007ff1916600090815260076020526040902054151590565b61144b5760405162461bcd60e51b815260206004820152600a60248201527f46545f214d494e544544000000000000000000000000000000000000000000006044820152606401610572565b6bffffffff80000000000007ff198216600090815260076020526040908190205490517f55f43cd40000000000000000000000000000000000000000000000000000000081526004810191909152602481018390527300E9e534777fB51aAbA8F5cCb51d5D528C283BA2906355f43cd49060440160006040518083038186803b1580156114d757600080fd5b505af41580156114eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261068e91908101906130b1565b336000908152600b602052604081205460609060ff166115755760405162461bcd60e51b815260206004820152600860248201527f21424f554e4345520000000000000000000000000000000000000000000000006044820152606401610572565b61157f838561050b565b6001146115d05760405162461bcd60e51b81526004016105729060208082526004908201527f214e465400000000000000000000000000000000000000000000000000000000604082015260600190565b60008481526009602052604090205463ffffffff166115ee856113d6565b91506115fc603f6002613407565b61160c9063ffffffff83166134d5565b6116226b80000000000000000000000087613376565b61162c9190613376565b925061163981600161338e565b600086815260096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff9290921691909117905561168686866001612328565b50935093915050565b6000546001600160a01b03166116a3611ae5565b6001600160a01b0316146116f95760405162461bcd60e51b815260206004820152600660248201527f2141444d494e00000000000000000000000000000000000000000000000000006044820152606401610572565b600f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f41f738d25e68ffb96e8fd4d3de42056b6bf6961dd470e7b1158c46534596bbc99060200160405180910390a150565b60006001600160a01b0383166117b25760405162461bcd60e51b815260206004820152600860248201527f4f574e45523d3d300000000000000000000000000000000000000000000000006044820152606401610572565b6001600160a01b0382166118085760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d300000000000000000000000000000000000000000006044820152606401610572565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff16806112e15750506001600160a01b031660009081526001602052604090205460ff16919050565b611860611ae5565b6001600160a01b0316836001600160a01b031614806118a4575060016000611886611ae5565b6001600160a01b0316815260208101919091526040016000205460ff165b6118f05760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a45440000000000000000000000000000000000000000006044820152606401610572565b6118fb838383612144565b505050565b6001600160a01b0385166119565760405162461bcd60e51b815260206004820152600560248201527f544f3d3d300000000000000000000000000000000000000000000000000000006044820152606401610572565b6001600160a01b0386166119ac5760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d30000000000000000000000000000000000000000000000000006044820152606401610572565b60006119ba878787876123a3565b90508015611a6c57601054611a20906001600160a01b031633146119de57336119e0565b875b8888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061255c92505050565b611a6c5760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a4543544544000000000000000000006044820152606401610572565b50505050505050565b60008061010060208402049150611a8f60206101006133ad565b611a999084613552565b9050915091565b600080611ab360016401000000006134f4565b90506000611ac2846001613376565b611acd9060206134d5565b611ad9906101006134f4565b9490941c169392505050565b6010546000906001600160a01b0316331415611b2857507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610827565b5033610827565b60005b82518161ffff161015611b5d57611b4b8184878761262c565b611b56600882613350565b9050611b32565b611b71611b68611ae5565b8686868661275b565b5050505050565b825160008080808086611bcd5760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f21415554480000000000000000000000000000000000006044820152606401610572565b60005b86811015611e72578a6001600160a01b03168c6001600160a01b03161415611c5057611c4b8c8b8381518110611c1657634e487b7160e01b600052603260045260246000fd5b60200260200101518b8481518110611c3e57634e487b7160e01b600052603260045260246000fd5b602002602001015161280e565b611e60565b6000898281518110611c7257634e487b7160e01b600052603260045260246000fd5b60200260200101511115611e6057611cb08a8281518110611ca357634e487b7160e01b600052603260045260246000fd5b6020026020010151611a75565b909650945081611d7e576001600160a01b038c1660009081526004602090815260408083208984529091529020548951879350611d19919087908c9085908110611d0a57634e487b7160e01b600052603260045260246000fd5b6020026020010151600161289d565b6001600160a01b038c1660009081526004602090815260408083208a84529091529020548a51919550611d779187908c9085908110611d6857634e487b7160e01b600052603260045260246000fd5b6020026020010151600061289d565b9250611e60565b818614611ddd576001600160a01b038c8116600090815260046020818152604080842087855280835281852099909955938f16835290815282822094825284815282822095909555878152948452808520549290935291909220549084905b611e1c858a8381518110611e0157634e487b7160e01b600052603260045260246000fd5b602002602001015160018761289d909392919063ffffffff16565b9350611e5d858a8381518110611e4257634e487b7160e01b600052603260045260246000fd5b602002602001015160008661289d909392919063ffffffff16565b92505b80611e6a81613537565b915050611bd0565b508415801590611e945750896001600160a01b03168b6001600160a01b031614155b15611ed5576001600160a01b03808c1660009081526004602081815260408084208a85528252808420889055938e1683529081528282208883529052208290555b5050505050505050505050565b60006001600160a01b0385163b611efb57506001611fcd565b6040517fbc197c810000000000000000000000000000000000000000000000000000000081526000906001600160a01b0387169063bc197c8190611f4b908b908b908a908a908a906004016131eb565b602060405180830381600087803b158015611f6557600080fd5b505af1158015611f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9d9190613095565b6001600160e01b0319167fbc197c8100000000000000000000000000000000000000000000000000000000149150505b9695505050505050565b600080611fe385611a75565b6001600160a01b03881660009081526004602090815260408083208584529091529020549193509150612019908286600261289d565b6001600160a01b03878116600081815260046020908152604080832088845282528083209590955584518a8152908101899052919390928b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461208d8760008888888861255c565b611a6c5760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a45435445440000000000000000000000000000006044820152606401610572565b600181600e54901c16600114156121325760405162461bcd60e51b815260206004820152601360248201527f414c52454144595f494e495449414c49534544000000000000000000000000006044820152606401610572565b806001901b600e5417600e8190555050565b6001600160a01b03831661219a5760405162461bcd60e51b815260206004820152600960248201527f53454e4445523d3d3000000000000000000000000000000000000000000000006044820152606401610572565b816001600160a01b0316836001600160a01b031614156121fc5760405162461bcd60e51b815260206004820152601060248201527f53454e4445523d3d4f50455241544f52000000000000000000000000000000006044820152606401610572565b6001600160a01b0382166122525760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d300000000000000000000000000000000000000000006044820152606401610572565b6001600160a01b03821660009081526001602052604090205460ff16156122bb5760405162461bcd60e51b815260206004820152601b60248201527f415050525f4558495354494e475f53555045524f50455241544f5200000000006044820152606401610572565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60008061233484611a75565b6001600160a01b03871660009081526004602090815260408083208584529091529020549193509150612374908263ffffffff8087169060019061289d16565b6001600160a01b0390951660009081526004602090815260408083209483529390529190912093909355505050565b6000806123ae611ae5565b90506000816001600160a01b0316876001600160a01b031614806123d757506123d7878361175a565b9050806124265760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f21415554480000000000000000000000000000000000006044820152606401610572565b83156124e25760008061243887611a75565b6001600160a01b038b166000908152600460209081526040808320858452909152902054919350915061246e908288600161289d565b6001600160a01b03808b166000908152600460208181526040808420888552825280842095909555928c1682528252828120858252909152908120546124b7918390899061289d565b6001600160a01b03891660009081526004602090815260408083209583529490529290922091909155505b6010546001600160a01b0380881691898216911633146125025783612504565b885b6001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051612547929190918252602082015260400190565b60405180910390a45060019695505050505050565b60006001600160a01b0385163b61257557506001611fcd565b6040517ff23a6e6100000000000000000000000000000000000000000000000000000000808252906001600160a01b0387169063f23a6e61906125c4908b908b908a908a908a90600401613249565b602060405180830381600087803b1580156125de57600080fd5b505af11580156125f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126169190613095565b6001600160e01b03191614979650505050505050565b600080612656838761ffff1681518110611ca357634e487b7160e01b600052603260045260246000fd5b9150915060005b60088110801561267a575085516126788261ffff8a16613376565b105b15611a6c57600061268f8261ffff8a16613376565b905060008782815181106126b357634e487b7160e01b600052603260045260246000fd5b60200260200101511115612748576127236126ce8385613376565b8883815181106126ee57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038a1660009081526004835260408082208a835290935291822054929161289d565b6001600160a01b03871660009081526004602090815260408083208884529091529020555b508061275381613537565b91505061265d565b836001600160a01b031660006001600160a01b0316866001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516127ab9291906132c6565b60405180910390a46127c285600086868686611ee2565b611b715760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a45435445440000000000000000000000000000006044820152606401610572565b60008061281a84611a75565b6001600160a01b03871660009081526004602090815260408083208584529091529020549193509150839061284f9083611aa0565b1015611b715760405162461bcd60e51b815260206004820152600f60248201527f42414c414e43455f544f4f5f4c4f5700000000000000000000000000000000006044820152606401610572565b600080808360028111156128c157634e487b7160e01b600052602160045260246000fd5b14156128ee576128d18686611aa0565b90506128e786866128e28785613376565b612a2b565b9150612a22565b600183600281111561291057634e487b7160e01b600052602160045260246000fd5b14156129a7576129208686611aa0565b9050838110156129985760405162461bcd60e51b815260206004820152602260248201527f63616e277420737562737472616374206d6f7265207468616e2074686572652060448201527f69730000000000000000000000000000000000000000000000000000000000006064820152608401610572565b6128e786866128e287856134f4565b60028360028111156129c957634e487b7160e01b600052602160045260246000fd5b14156129da576128e7868686612a2b565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c6964206f7065726174696f6e0000000000000000000000000000006044820152606401610572565b50949350505050565b6000612a3960206002613407565b8210612aad5760405162461bcd60e51b815260206004820152602360248201527f416d6f756e7420746f20777269746520696e2062696e20697320746f6f206c6160448201527f72676500000000000000000000000000000000000000000000000000000000006064820152608401610572565b6000612abf60016401000000006134f4565b90506000612ace856001613376565b612ad99060206134d5565b612ae5906101006134f4565b91821b199590951692901b919091179392505050565b80356001600160a01b038116811461069157600080fd5b60008083601f840112612b23578182fd5b50813567ffffffffffffffff811115612b3a578182fd5b6020830191508360208083028501011115612b5457600080fd5b9250929050565b8035801515811461069157600080fd5b60008083601f840112612b7c578182fd5b50813567ffffffffffffffff811115612b93578182fd5b602083019150836020828501011115612b5457600080fd5b600060208284031215612bbc578081fd5b6112e182612afb565b60008060408385031215612bd7578081fd5b612be083612afb565b9150612bee60208401612afb565b90509250929050565b60008060008060808587031215612c0c578182fd5b612c1585612afb565b9350612c2360208601612afb565b9250612c3160408601612afb565b9150606085013560ff81168114612c46578182fd5b939692955090935050565b60008060008060008060008060a0898b031215612c6c578384fd5b612c7589612afb565b9750612c8360208a01612afb565b9650604089013567ffffffffffffffff80821115612c9f578586fd5b612cab8c838d01612b12565b909850965060608b0135915080821115612cc3578586fd5b612ccf8c838d01612b12565b909650945060808b0135915080821115612ce7578384fd5b50612cf48b828c01612b6b565b999c989b5096995094979396929594505050565b600080600060608486031215612d1c578283fd5b612d2584612afb565b9250612d3360208501612afb565b9150612d4160408501612b5b565b90509250925092565b60008060008060008060a08789031215612d62578182fd5b612d6b87612afb565b9550612d7960208801612afb565b94506040870135935060608701359250608087013567ffffffffffffffff811115612da2578283fd5b612dae89828a01612b6b565b979a9699509497509295939492505050565b60008060008060008060006080888a031215612dda578283fd5b612de388612afb565b9650602088013567ffffffffffffffff80821115612dff578485fd5b612e0b8b838c01612b12565b909850965060408a0135915080821115612e23578485fd5b612e2f8b838c01612b12565b909650945060608a0135915080821115612e47578384fd5b50612e548a828b01612b6b565b989b979a50959850939692959293505050565b60008060408385031215612e79578182fd5b612e8283612afb565b9150612bee60208401612b5b565b60008060408385031215612ea2578182fd5b612eab83612afb565b946020939093013593505050565b600080600060608486031215612ecd578081fd5b612ed684612afb565b925060208401359150612d4160408501612afb565b600080600080600060808688031215612f02578283fd5b612f0b86612afb565b94506020860135935060408601359250606086013567ffffffffffffffff811115612f34578182fd5b612f4088828901612b6b565b969995985093965092949392505050565b60008060008060408587031215612f66578182fd5b843567ffffffffffffffff80821115612f7d578384fd5b612f8988838901612b12565b90965094506020870135915080821115612fa1578384fd5b50612fae87828801612b12565b95989497509550505050565b60006020808385031215612fcc578182fd5b823567ffffffffffffffff80821115612fe3578384fd5b818501915085601f830112612ff6578384fd5b81358181111561300857613008613592565b838102915061301884830161331f565b8181528481019084860184860187018a1015613032578788fd5b8795505b83861015613054578035835260019590950194918601918601613036565b5098975050505050505050565b600060208284031215613072578081fd5b5035919050565b60006020828403121561308a578081fd5b81356112e1816135a8565b6000602082840312156130a6578081fd5b81516112e1816135a8565b6000602082840312156130c2578081fd5b815167ffffffffffffffff808211156130d9578283fd5b818401915084601f8301126130ec578283fd5b8151818111156130fe576130fe613592565b6131116020601f19601f8401160161331f565b9150808252856020828501011115613127578384fd5b612a2281602084016020860161350b565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115613169578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b838110156131b457815187529582019590820190600101613198565b509495945050505050565b600081518084526131d781602086016020860161350b565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a0604083015261321760a0830186613185565b82810360608401526132298186613185565b9050828103608084015261323d81856131bf565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261328160a08301846131bf565b979650505050505050565b6000604082526132a0604083018688613138565b8281036020840152613281818587613138565b6000602082526112e16020830184613185565b6000604082526132d96040830185613185565b82810360208401526105ba8185613185565b6000602082526112e160208301846131bf565b60008382526040602083015261331760408301846131bf565b949350505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561334857613348613592565b604052919050565b600061ffff80831681851680830382111561336d5761336d613566565b01949350505050565b6000821982111561338957613389613566565b500190565b600063ffffffff80831681851680830382111561336d5761336d613566565b6000826133bc576133bc61357c565b500490565b80825b60018086116133d357506133fe565b8187048211156133e5576133e5613566565b808616156133f257918102915b9490941c9380026133c4565b94509492505050565b60006112e16000198484600082613420575060016112e1565b8161342d575060006112e1565b8160018114613443576002811461344d5761347a565b60019150506112e1565b60ff84111561345e5761345e613566565b6001841b91508482111561347457613474613566565b506112e1565b5060208310610133831016604e8410600b84101617156134ad575081810a838111156134a8576134a8613566565b6112e1565b6134ba84848460016133c1565b8086048211156134cc576134cc613566565b02949350505050565b60008160001904831182151516156134ef576134ef613566565b500290565b60008282101561350657613506613566565b500390565b60005b8381101561352657818101518382015260200161350e565b83811115610d325750506000910152565b600060001982141561354b5761354b613566565b5060010190565b6000826135615761356161357c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146135be57600080fd5b5056fea26469706673582212200c56ac0bf92dfe0c73b96ab321dae4e5159cb61bcf8d891804fbf8e75e7acf5a64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e45760003560e01c806395d89b411161010f578063c87b56dd116100a2578063d402756e11610071578063d402756e146104a1578063e985e9c5146104d2578063eeb5a5d1146104e5578063f242432a146104f8576101e4565b8063c87b56dd14610449578063cc0f8b5d1461045c578063ce1b815f1461047d578063d12e76d01461048e576101e4565b8063ac9fe421116100de578063ac9fe421146103fd578063b9b75ebc14610410578063bd9ff41b14610423578063c7778baa14610436576101e4565b806395d89b411461038d5780639bc88b9c146103c6578063a0ea837c146103d7578063a22cb465146103ea576101e4565b80633073cecf11610187578063654b748a11610156578063654b748a146103165780636e9960c314610342578063731133e9146103675780638f2839701461037a576101e4565b80633073cecf146102955780634c4d07e7146102a85780634e1273f4146102d4578063572b6c05146102f4576101e4565b806306fdde03116101c357806306fdde03146102475780631f7fdffa1461025c5780632e712b461461026f5780632eb2c2d614610282576101e4565b8062fdd58e146101e957806301ffc9a71461020f578063049476df14610232575b600080fd5b6101fc6101f7366004612e90565b61050b565b6040519081526020015b60405180910390f35b61022261021d366004613079565b6105c3565b6040519015158152602001610206565b610245610240366004612bab565b610696565b005b61024f6107f2565b60405161020691906132eb565b61024561026a366004612dc0565b61082a565b6101fc61027d366004613061565b6109e4565b610245610290366004612c51565b6109fd565b6102456102a3366004612bf7565b610d26565b6102226102b6366004612bab565b6001600160a01b03166000908152600b602052604090205460ff1690565b6102e76102e2366004612f51565b610d38565b60405161020691906132b3565b610222610302366004612bab565b6010546001600160a01b0390811691161490565b610222610324366004612bab565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610206565b610245610375366004612eeb565b610e94565b610245610388366004612bab565b610f7b565b60408051808201909152600c81527f4153534554455243313135350000000000000000000000000000000000000000602082015261024f565b600d546001600160a01b031661034f565b6102456103e5366004612bf7565b61104b565b6102456103f8366004612e67565b6110ee565b61024561040b366004612e67565b611104565b61024561041e366004612e67565b6111e8565b610222610431366004613061565b6112ae565b6101fc610444366004613061565b6112e8565b61024f610457366004613061565b6113d6565b61046f61046a366004612eb9565b611513565b6040516102069291906132fe565b6010546001600160a01b031661034f565b61024561049c366004612bab565b61168f565b6102226104af366004613061565b6bffffffff80000000000007ff1916600090815260076020526040902054151590565b6102226104e0366004612bc5565b61175a565b6102456104f3366004612d08565b611858565b610245610506366004612d4a565b611900565b6bffffffff80000000000007ff19811660009081526007602052604081205461057b5760405162461bcd60e51b815260206004820152601660248201527f746f6b656e20776173206e65766572206d696e7465640000000000000000000060448201526064015b60405180910390fd5b60008061058784611a75565b6001600160a01b038716600090815260046020908152604080832085845290915290205491935091506105ba9082611aa0565b95945050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061062657507fd9b67a26000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061065a57507f0e89341c000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061068e57507f9930ed5a000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b600d546001600160a01b03166106aa611ae5565b6001600160a01b0316146107005760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e0000000000000000000000000000000000006044820152606401610572565b6001600160a01b03811661077c5760405162461bcd60e51b815260206004820152603960248201527f417373657442617365455243313135353a206e657720626f756e63657220616460448201527f6d696e2063616e2774206265207a65726f2061646472657373000000000000006064820152608401610572565b600d54604080516001600160a01b03928316815291831660208301527f1bab6ababbec5519512e9ee16964953ec0f72839126138285cac1f1136bd642e910160405180910390a1600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60408051808201909152601881527f53616e64626f782773204153534554732045524331313535000000000000000060208201525b90565b600f546001600160a01b031661083e611ae5565b6001600160a01b0316146108945760405162461bcd60e51b815260206004820152600a60248201527f21505245444943415445000000000000000000000000000000000000000000006044820152606401610572565b60006108a282840184612fba565b905060005b868110156109375760006bffffffff80000000000007ff198989848181106108df57634e487b7160e01b600052603260045260246000fd5b9050602002013516905082828151811061090957634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600092835260079091526040909120558061092f81613537565b9150506108a7565b506109da8888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525050604080516020601f8b018190048102820181019092528981529250899150889081908401838280828437600092019190915250611b2f92505050565b5050505050505050565b60006109ef826112e8565b5050603f1c63ffffffff1690565b848314610a4c5760405162461bcd60e51b815260206004820152601260248201527f4d49534d4154434845445f4152525f4c454e00000000000000000000000000006044820152606401610572565b6001600160a01b038716610aa25760405162461bcd60e51b815260206004820152600560248201527f544f3d3d300000000000000000000000000000000000000000000000000000006044820152606401610572565b6001600160a01b038816610af85760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d30000000000000000000000000000000000000000000000000006044820152606401610572565b6010546001600160a01b031633146000610b10611ae5565b6001600160a01b03168a6001600160a01b03161480610b365750610b368a6104e0611ae5565b9050610ba98a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c918291850190849080828437600092019190915250889250611b78915050565b886001600160a01b03168a6001600160a01b031683610bcf57610bca611ae5565b610bd1565b8b5b6001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8b8b8b8b604051610c0f949392919061328c565b60405180910390a4610cce82610c2c57610c27611ae5565b610c2e565b8a5b8b8b8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b9081908401838280828437600092019190915250611ee292505050565b610d1a5760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a4543544544000000000000000000006044820152606401610572565b50505050505050505050565b610d328484848461104b565b50505050565b6060838214610d895760405162461bcd60e51b815260206004820152601360248201527f4152475f4c454e4754485f4d49534d41544348000000000000000000000000006044820152606401610572565b60008267ffffffffffffffff811115610db257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ddb578160200160208202803683370190505b50905060005b83811015610e8a57610e4d878783818110610e0c57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610e219190612bab565b868684818110610e4157634e487b7160e01b600052603260045260246000fd5b9050602002013561050b565b828281518110610e6d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610e8281613537565b915050610de1565b5095945050505050565b600f546001600160a01b0316610ea8611ae5565b6001600160a01b031614610efe5760405162461bcd60e51b815260206004820152600a60248201527f21505245444943415445000000000000000000000000000000000000000000006044820152606401610572565b6bffffffff80000000000007ff198416610f1a82840184613061565b600082815260076020526040902055610f73610f34611ae5565b87878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fd792505050565b505050505050565b6000546001600160a01b03163314610fd55760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e494544000000000000000000000000006044820152606401610572565b600054604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a16000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61105560016120d9565b600080546001600160a01b0385811673ffffffffffffffffffffffffffffffffffffffff1992831617909255600d80548584169083161790556010805492871692909116919091179055600f805460ff90921674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055505050565b6111006110f9611ae5565b8383612144565b5050565b6000546001600160a01b031633146111845760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f727300000000000000000000000000000000000000006064820152608401610572565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891015b60405180910390a15050565b600d546001600160a01b03166111fc611ae5565b6001600160a01b0316146112525760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e0000000000000000000000000000000000006044820152606401610572565b6001600160a01b0382166000818152600b6020908152604091829020805460ff19168515159081179091558251938452908301527f5ecd928ac22825e06273a3e8db8118dd7fe11bd2637ecfe4bfa25154948bd85f91016111dc565b6bffffffff80000000000007ff1981166000908152600760205260408120546bffffffff80000000000000001983169015155b9392505050565b6bffffffff80000000000007ff1981166000908152600760205260408120546113535760405162461bcd60e51b815260206004820152600a60248201527f46545f214d494e544544000000000000000000000000000000000000000000006044820152606401610572565b6bffffffff800000000000000019821661138a816bffffffff80000000000007ff1916600090815260076020526040902054151590565b61068e5760405162461bcd60e51b815260206004820152601360248201527f554e4d494e5445445f434f4c4c454354494f4e000000000000000000000000006044820152606401610572565b60606113ff826bffffffff80000000000007ff1916600090815260076020526040902054151590565b61144b5760405162461bcd60e51b815260206004820152600a60248201527f46545f214d494e544544000000000000000000000000000000000000000000006044820152606401610572565b6bffffffff80000000000007ff198216600090815260076020526040908190205490517f55f43cd400000000000000000000000000000000000000000000000000000000815260048101919091526024810183905273__$22fbfd89be1e25db7d564b4a9955403d23$__906355f43cd49060440160006040518083038186803b1580156114d757600080fd5b505af41580156114eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261068e91908101906130b1565b336000908152600b602052604081205460609060ff166115755760405162461bcd60e51b815260206004820152600860248201527f21424f554e4345520000000000000000000000000000000000000000000000006044820152606401610572565b61157f838561050b565b6001146115d05760405162461bcd60e51b81526004016105729060208082526004908201527f214e465400000000000000000000000000000000000000000000000000000000604082015260600190565b60008481526009602052604090205463ffffffff166115ee856113d6565b91506115fc603f6002613407565b61160c9063ffffffff83166134d5565b6116226b80000000000000000000000087613376565b61162c9190613376565b925061163981600161338e565b600086815260096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff9290921691909117905561168686866001612328565b50935093915050565b6000546001600160a01b03166116a3611ae5565b6001600160a01b0316146116f95760405162461bcd60e51b815260206004820152600660248201527f2141444d494e00000000000000000000000000000000000000000000000000006044820152606401610572565b600f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f41f738d25e68ffb96e8fd4d3de42056b6bf6961dd470e7b1158c46534596bbc99060200160405180910390a150565b60006001600160a01b0383166117b25760405162461bcd60e51b815260206004820152600860248201527f4f574e45523d3d300000000000000000000000000000000000000000000000006044820152606401610572565b6001600160a01b0382166118085760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d300000000000000000000000000000000000000000006044820152606401610572565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff16806112e15750506001600160a01b031660009081526001602052604090205460ff16919050565b611860611ae5565b6001600160a01b0316836001600160a01b031614806118a4575060016000611886611ae5565b6001600160a01b0316815260208101919091526040016000205460ff165b6118f05760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a45440000000000000000000000000000000000000000006044820152606401610572565b6118fb838383612144565b505050565b6001600160a01b0385166119565760405162461bcd60e51b815260206004820152600560248201527f544f3d3d300000000000000000000000000000000000000000000000000000006044820152606401610572565b6001600160a01b0386166119ac5760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d30000000000000000000000000000000000000000000000000006044820152606401610572565b60006119ba878787876123a3565b90508015611a6c57601054611a20906001600160a01b031633146119de57336119e0565b875b8888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061255c92505050565b611a6c5760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a4543544544000000000000000000006044820152606401610572565b50505050505050565b60008061010060208402049150611a8f60206101006133ad565b611a999084613552565b9050915091565b600080611ab360016401000000006134f4565b90506000611ac2846001613376565b611acd9060206134d5565b611ad9906101006134f4565b9490941c169392505050565b6010546000906001600160a01b0316331415611b2857507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610827565b5033610827565b60005b82518161ffff161015611b5d57611b4b8184878761262c565b611b56600882613350565b9050611b32565b611b71611b68611ae5565b8686868661275b565b5050505050565b825160008080808086611bcd5760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f21415554480000000000000000000000000000000000006044820152606401610572565b60005b86811015611e72578a6001600160a01b03168c6001600160a01b03161415611c5057611c4b8c8b8381518110611c1657634e487b7160e01b600052603260045260246000fd5b60200260200101518b8481518110611c3e57634e487b7160e01b600052603260045260246000fd5b602002602001015161280e565b611e60565b6000898281518110611c7257634e487b7160e01b600052603260045260246000fd5b60200260200101511115611e6057611cb08a8281518110611ca357634e487b7160e01b600052603260045260246000fd5b6020026020010151611a75565b909650945081611d7e576001600160a01b038c1660009081526004602090815260408083208984529091529020548951879350611d19919087908c9085908110611d0a57634e487b7160e01b600052603260045260246000fd5b6020026020010151600161289d565b6001600160a01b038c1660009081526004602090815260408083208a84529091529020548a51919550611d779187908c9085908110611d6857634e487b7160e01b600052603260045260246000fd5b6020026020010151600061289d565b9250611e60565b818614611ddd576001600160a01b038c8116600090815260046020818152604080842087855280835281852099909955938f16835290815282822094825284815282822095909555878152948452808520549290935291909220549084905b611e1c858a8381518110611e0157634e487b7160e01b600052603260045260246000fd5b602002602001015160018761289d909392919063ffffffff16565b9350611e5d858a8381518110611e4257634e487b7160e01b600052603260045260246000fd5b602002602001015160008661289d909392919063ffffffff16565b92505b80611e6a81613537565b915050611bd0565b508415801590611e945750896001600160a01b03168b6001600160a01b031614155b15611ed5576001600160a01b03808c1660009081526004602081815260408084208a85528252808420889055938e1683529081528282208883529052208290555b5050505050505050505050565b60006001600160a01b0385163b611efb57506001611fcd565b6040517fbc197c810000000000000000000000000000000000000000000000000000000081526000906001600160a01b0387169063bc197c8190611f4b908b908b908a908a908a906004016131eb565b602060405180830381600087803b158015611f6557600080fd5b505af1158015611f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9d9190613095565b6001600160e01b0319167fbc197c8100000000000000000000000000000000000000000000000000000000149150505b9695505050505050565b600080611fe385611a75565b6001600160a01b03881660009081526004602090815260408083208584529091529020549193509150612019908286600261289d565b6001600160a01b03878116600081815260046020908152604080832088845282528083209590955584518a8152908101899052919390928b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461208d8760008888888861255c565b611a6c5760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a45435445440000000000000000000000000000006044820152606401610572565b600181600e54901c16600114156121325760405162461bcd60e51b815260206004820152601360248201527f414c52454144595f494e495449414c49534544000000000000000000000000006044820152606401610572565b806001901b600e5417600e8190555050565b6001600160a01b03831661219a5760405162461bcd60e51b815260206004820152600960248201527f53454e4445523d3d3000000000000000000000000000000000000000000000006044820152606401610572565b816001600160a01b0316836001600160a01b031614156121fc5760405162461bcd60e51b815260206004820152601060248201527f53454e4445523d3d4f50455241544f52000000000000000000000000000000006044820152606401610572565b6001600160a01b0382166122525760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d300000000000000000000000000000000000000000006044820152606401610572565b6001600160a01b03821660009081526001602052604090205460ff16156122bb5760405162461bcd60e51b815260206004820152601b60248201527f415050525f4558495354494e475f53555045524f50455241544f5200000000006044820152606401610572565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60008061233484611a75565b6001600160a01b03871660009081526004602090815260408083208584529091529020549193509150612374908263ffffffff8087169060019061289d16565b6001600160a01b0390951660009081526004602090815260408083209483529390529190912093909355505050565b6000806123ae611ae5565b90506000816001600160a01b0316876001600160a01b031614806123d757506123d7878361175a565b9050806124265760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f21415554480000000000000000000000000000000000006044820152606401610572565b83156124e25760008061243887611a75565b6001600160a01b038b166000908152600460209081526040808320858452909152902054919350915061246e908288600161289d565b6001600160a01b03808b166000908152600460208181526040808420888552825280842095909555928c1682528252828120858252909152908120546124b7918390899061289d565b6001600160a01b03891660009081526004602090815260408083209583529490529290922091909155505b6010546001600160a01b0380881691898216911633146125025783612504565b885b6001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051612547929190918252602082015260400190565b60405180910390a45060019695505050505050565b60006001600160a01b0385163b61257557506001611fcd565b6040517ff23a6e6100000000000000000000000000000000000000000000000000000000808252906001600160a01b0387169063f23a6e61906125c4908b908b908a908a908a90600401613249565b602060405180830381600087803b1580156125de57600080fd5b505af11580156125f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126169190613095565b6001600160e01b03191614979650505050505050565b600080612656838761ffff1681518110611ca357634e487b7160e01b600052603260045260246000fd5b9150915060005b60088110801561267a575085516126788261ffff8a16613376565b105b15611a6c57600061268f8261ffff8a16613376565b905060008782815181106126b357634e487b7160e01b600052603260045260246000fd5b60200260200101511115612748576127236126ce8385613376565b8883815181106126ee57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038a1660009081526004835260408082208a835290935291822054929161289d565b6001600160a01b03871660009081526004602090815260408083208884529091529020555b508061275381613537565b91505061265d565b836001600160a01b031660006001600160a01b0316866001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516127ab9291906132c6565b60405180910390a46127c285600086868686611ee2565b611b715760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a45435445440000000000000000000000000000006044820152606401610572565b60008061281a84611a75565b6001600160a01b03871660009081526004602090815260408083208584529091529020549193509150839061284f9083611aa0565b1015611b715760405162461bcd60e51b815260206004820152600f60248201527f42414c414e43455f544f4f5f4c4f5700000000000000000000000000000000006044820152606401610572565b600080808360028111156128c157634e487b7160e01b600052602160045260246000fd5b14156128ee576128d18686611aa0565b90506128e786866128e28785613376565b612a2b565b9150612a22565b600183600281111561291057634e487b7160e01b600052602160045260246000fd5b14156129a7576129208686611aa0565b9050838110156129985760405162461bcd60e51b815260206004820152602260248201527f63616e277420737562737472616374206d6f7265207468616e2074686572652060448201527f69730000000000000000000000000000000000000000000000000000000000006064820152608401610572565b6128e786866128e287856134f4565b60028360028111156129c957634e487b7160e01b600052602160045260246000fd5b14156129da576128e7868686612a2b565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c6964206f7065726174696f6e0000000000000000000000000000006044820152606401610572565b50949350505050565b6000612a3960206002613407565b8210612aad5760405162461bcd60e51b815260206004820152602360248201527f416d6f756e7420746f20777269746520696e2062696e20697320746f6f206c6160448201527f72676500000000000000000000000000000000000000000000000000000000006064820152608401610572565b6000612abf60016401000000006134f4565b90506000612ace856001613376565b612ad99060206134d5565b612ae5906101006134f4565b91821b199590951692901b919091179392505050565b80356001600160a01b038116811461069157600080fd5b60008083601f840112612b23578182fd5b50813567ffffffffffffffff811115612b3a578182fd5b6020830191508360208083028501011115612b5457600080fd5b9250929050565b8035801515811461069157600080fd5b60008083601f840112612b7c578182fd5b50813567ffffffffffffffff811115612b93578182fd5b602083019150836020828501011115612b5457600080fd5b600060208284031215612bbc578081fd5b6112e182612afb565b60008060408385031215612bd7578081fd5b612be083612afb565b9150612bee60208401612afb565b90509250929050565b60008060008060808587031215612c0c578182fd5b612c1585612afb565b9350612c2360208601612afb565b9250612c3160408601612afb565b9150606085013560ff81168114612c46578182fd5b939692955090935050565b60008060008060008060008060a0898b031215612c6c578384fd5b612c7589612afb565b9750612c8360208a01612afb565b9650604089013567ffffffffffffffff80821115612c9f578586fd5b612cab8c838d01612b12565b909850965060608b0135915080821115612cc3578586fd5b612ccf8c838d01612b12565b909650945060808b0135915080821115612ce7578384fd5b50612cf48b828c01612b6b565b999c989b5096995094979396929594505050565b600080600060608486031215612d1c578283fd5b612d2584612afb565b9250612d3360208501612afb565b9150612d4160408501612b5b565b90509250925092565b60008060008060008060a08789031215612d62578182fd5b612d6b87612afb565b9550612d7960208801612afb565b94506040870135935060608701359250608087013567ffffffffffffffff811115612da2578283fd5b612dae89828a01612b6b565b979a9699509497509295939492505050565b60008060008060008060006080888a031215612dda578283fd5b612de388612afb565b9650602088013567ffffffffffffffff80821115612dff578485fd5b612e0b8b838c01612b12565b909850965060408a0135915080821115612e23578485fd5b612e2f8b838c01612b12565b909650945060608a0135915080821115612e47578384fd5b50612e548a828b01612b6b565b989b979a50959850939692959293505050565b60008060408385031215612e79578182fd5b612e8283612afb565b9150612bee60208401612b5b565b60008060408385031215612ea2578182fd5b612eab83612afb565b946020939093013593505050565b600080600060608486031215612ecd578081fd5b612ed684612afb565b925060208401359150612d4160408501612afb565b600080600080600060808688031215612f02578283fd5b612f0b86612afb565b94506020860135935060408601359250606086013567ffffffffffffffff811115612f34578182fd5b612f4088828901612b6b565b969995985093965092949392505050565b60008060008060408587031215612f66578182fd5b843567ffffffffffffffff80821115612f7d578384fd5b612f8988838901612b12565b90965094506020870135915080821115612fa1578384fd5b50612fae87828801612b12565b95989497509550505050565b60006020808385031215612fcc578182fd5b823567ffffffffffffffff80821115612fe3578384fd5b818501915085601f830112612ff6578384fd5b81358181111561300857613008613592565b838102915061301884830161331f565b8181528481019084860184860187018a1015613032578788fd5b8795505b83861015613054578035835260019590950194918601918601613036565b5098975050505050505050565b600060208284031215613072578081fd5b5035919050565b60006020828403121561308a578081fd5b81356112e1816135a8565b6000602082840312156130a6578081fd5b81516112e1816135a8565b6000602082840312156130c2578081fd5b815167ffffffffffffffff808211156130d9578283fd5b818401915084601f8301126130ec578283fd5b8151818111156130fe576130fe613592565b6131116020601f19601f8401160161331f565b9150808252856020828501011115613127578384fd5b612a2281602084016020860161350b565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115613169578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b838110156131b457815187529582019590820190600101613198565b509495945050505050565b600081518084526131d781602086016020860161350b565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a0604083015261321760a0830186613185565b82810360608401526132298186613185565b9050828103608084015261323d81856131bf565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261328160a08301846131bf565b979650505050505050565b6000604082526132a0604083018688613138565b8281036020840152613281818587613138565b6000602082526112e16020830184613185565b6000604082526132d96040830185613185565b82810360208401526105ba8185613185565b6000602082526112e160208301846131bf565b60008382526040602083015261331760408301846131bf565b949350505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561334857613348613592565b604052919050565b600061ffff80831681851680830382111561336d5761336d613566565b01949350505050565b6000821982111561338957613389613566565b500190565b600063ffffffff80831681851680830382111561336d5761336d613566565b6000826133bc576133bc61357c565b500490565b80825b60018086116133d357506133fe565b8187048211156133e5576133e5613566565b808616156133f257918102915b9490941c9380026133c4565b94509492505050565b60006112e16000198484600082613420575060016112e1565b8161342d575060006112e1565b8160018114613443576002811461344d5761347a565b60019150506112e1565b60ff84111561345e5761345e613566565b6001841b91508482111561347457613474613566565b506112e1565b5060208310610133831016604e8410600b84101617156134ad575081810a838111156134a8576134a8613566565b6112e1565b6134ba84848460016133c1565b8086048211156134cc576134cc613566565b02949350505050565b60008160001904831182151516156134ef576134ef613566565b500290565b60008282101561350657613506613566565b500390565b60005b8381101561352657818101518382015260200161350e565b83811115610d325750506000910152565b600060001982141561354b5761354b613566565b5060010190565b6000826135615761356161357c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146135be57600080fd5b5056fea26469706673582212200c56ac0bf92dfe0c73b96ab321dae4e5159cb61bcf8d891804fbf8e75e7acf5a64736f6c63430008020033",
  "libraries": {
    "ERC1155ERC721Helper": "0x00E9e534777fB51aAbA8F5cCb51d5D528C283BA2",
    "AssetHelper": "0xfeB0bD6ea6F0728005CBB71e961c546e07Cc0989"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "id": "the token type of which to get the balance of.",
          "owner": "The address of the token holder."
        },
        "returns": {
          "_0": "the balance of `owner` for the token type `id`."
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "ids": "ids of each token type to query.",
          "owners": "the addresses of the token holders queried."
        },
        "returns": {
          "_0": "the balance of each `owners` for each token type `ids`."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "changeBouncerAdmin(address)": {
        "params": {
          "newBouncerAdmin": "address of the new minting administrator."
        }
      },
      "collectionIndexOf(uint256)": {
        "params": {
          "id": "the token to get the index of."
        },
        "returns": {
          "_0": "the index/order at which the token `id` was minted in a collection."
        }
      },
      "collectionOf(uint256)": {
        "params": {
          "id": "the token to get the collection of."
        },
        "returns": {
          "_0": "the collection the NFT is part of."
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getBouncerAdmin()": {
        "returns": {
          "_0": "the current minting administrator in charge of minting rights."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "address of authorized operator.",
          "owner": "the owner of the tokens."
        },
        "returns": {
          "isOperator": "true if the operator is approved, false if not."
        }
      },
      "isBouncer(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has minting rights."
        }
      },
      "isCollection(uint256)": {
        "params": {
          "id": "collectionId to check."
        },
        "returns": {
          "_0": "whether the id is a collection."
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "mint(address,uint256,uint256,bytes)": {
        "details": "Should be callable only by MintableERC1155Predicate Make sure minting is done only by this function",
        "params": {
          "account": "user address for whom token is being minted",
          "amount": "amount of token being minted",
          "data": "extra byte data to be accompanied with minted tokens",
          "id": "token which is being minted"
        }
      },
      "mintBatch(address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "supply for each token type",
          "data": "extra data to accompany the minting call",
          "ids": "ids to mint",
          "to": "address to mint to"
        }
      },
      "name()": {
        "returns": {
          "_name": "the name of the tokens."
        }
      },
      "prepareForExtract(address,uint256,address)": {
        "params": {
          "id": "the token id for which the next collection index is fetched."
        },
        "returns": {
          "metaData": "required for minting on AssetERC721.",
          "newId": "generated after extraction"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "call data should be optimized to order ids so packedBalance can be used efficiently.",
        "params": {
          "data": "aditional data accompanying the transfer.",
          "from": "address from which tokens are transfered.",
          "ids": "ids of each token type transfered.",
          "to": "address to which the token will be transfered.",
          "values": "amount of each token type transfered."
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "data": "aditional data accompanying the transfer.",
          "from": "address from which tokens are transfered.",
          "id": "the token type transfered.",
          "to": "address to which the token will be transfered.",
          "value": "amount of token transfered."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "whether to approve or revoke",
          "operator": "address which will be granted rights to transfer all tokens of the caller."
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "details": "used for Meta Transaction (from metaTransactionContract).",
        "params": {
          "approved": "whether to approve or revoke.",
          "operator": "address which will be granted rights to transfer all token owned by `sender`.",
          "sender": "address which grant approval."
        }
      },
      "setBouncer(address,bool)": {
        "params": {
          "bouncer": "address that will be given/removed minting bouncer rights.",
          "enabled": "set whether the address is enabled or disabled as a minting bouncer."
        }
      },
      "setPredicate(address)": {
        "params": {
          "predicate": "address that will be given minting rights for L1."
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "the interface identifier, as specified in ERC-165."
        },
        "returns": {
          "_0": "`true` if the contract implements `id`."
        }
      },
      "symbol()": {
        "returns": {
          "_symbol": "the symbol of the tokens."
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "id": "token to get the uri of."
        },
        "returns": {
          "_0": "URI string"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "Get the balance of `owner` for the token type `id`."
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "Get the balance of `owners` for each token type `ids`."
      },
      "changeBouncerAdmin(address)": {
        "notice": "Change the minting administrator to be `newBouncerAdmin`."
      },
      "collectionIndexOf(uint256)": {
        "notice": "Gives the index at which an NFT was minted in a collection : first of a collection get the zero index."
      },
      "collectionOf(uint256)": {
        "notice": "Gives the collection a specific token belongs to."
      },
      "getBouncerAdmin()": {
        "notice": "Returns the current administrator in charge of minting rights."
      },
      "initialize(address,address,address,uint8)": {
        "notice": "fulfills the purpose of a constructor in upgradeable contracts"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Queries the approval status of `operator` for owner `owner`."
      },
      "isBouncer(address)": {
        "notice": "check whether address `who` is given minting bouncer rights."
      },
      "isCollection(uint256)": {
        "notice": "Return wether the id is a collection"
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "mint(address,uint256,uint256,bytes)": {
        "notice": "Creates `amount` tokens of token type `id`, and assigns them to `account`."
      },
      "mintBatch(address,uint256[],uint256[],bytes)": {
        "notice": "called by predicate to mint tokens transferred from L2"
      },
      "name()": {
        "notice": "A descriptive name for the collection of tokens in this contract."
      },
      "prepareForExtract(address,uint256,address)": {
        "notice": "Call to perform all AssetERC1155 operations before minting to AssetERC721."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call)."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call)."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Enable or disable approval for `operator` to manage all of the caller's tokens."
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Enable or disable approval for `operator` to manage all `sender`'s tokens."
      },
      "setBouncer(address,bool)": {
        "notice": "Enable or disable the ability of `bouncer` to mint tokens (minting bouncer rights)."
      },
      "setPredicate(address)": {
        "notice": "Set address which will have minting privelages on L1 which is currently limited to tunnels."
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements interface `id`."
      },
      "symbol()": {
        "notice": "An abbreviated name for the collection of tokens in this contract."
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29610,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29842,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_superOperators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20113,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_numNFTPerAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20117,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 20123,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_packedTokenBalance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 20129,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 20133,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_erc721operators",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 20137,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_metadataHash",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 20141,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_rarityPacks",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 20145,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_nextCollectionIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 20149,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_creatorship",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 20153,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_bouncers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20157,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_metaTransactionContracts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20159,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_bouncerAdmin",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 20161,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_init",
        "offset": 20,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 20166,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_initBits",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 20168,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_predicate",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 20170,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_chainIndex",
        "offset": 20,
        "slot": "15",
        "type": "t_uint8"
      },
      {
        "astId": 20172,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 20176,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_uint256)20_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)20_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[20]",
        "numberOfBytes": "640"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}