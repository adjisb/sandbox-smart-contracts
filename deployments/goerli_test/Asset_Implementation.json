{
  "address": "0xae7C80525e26113c4d61FB9D1d68615E86A80885",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAssetERC721",
          "name": "assetERC721",
          "type": "address"
        }
      ],
      "name": "AssetERC721Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bouncer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "Bouncer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBouncerAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBouncerAdmin",
          "type": "address"
        }
      ],
      "name": "BouncerAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newId",
          "type": "uint256"
        }
      ],
      "name": "Extraction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "predicate",
          "type": "address"
        }
      ],
      "name": "PredicateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_assetERC721",
      "outputs": [
        {
          "internalType": "contract IAssetERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBouncerAdmin",
          "type": "address"
        }
      ],
      "name": "changeBouncerAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "collectionIndexOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "collectionOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "extractERC721From",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBouncerAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bouncerAdmin",
          "type": "address"
        },
        {
          "internalType": "contract IAssetERC721",
          "name": "assetERC721",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "chainIndex",
          "type": "uint8"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bouncerAdmin",
          "type": "address"
        },
        {
          "internalType": "contract IAssetERC721",
          "name": "assetERC721",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "chainIndex",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isBouncer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isCollection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint40",
          "name": "packId",
          "type": "uint40"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAssetERC721",
          "name": "assetERC721",
          "type": "address"
        }
      ],
      "name": "setAssetERC721",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bouncer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setBouncer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "predicate",
          "type": "address"
        }
      ],
      "name": "setPredicate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "wasEverMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x599c811e977e2621207f3f9c6cd2262e89be7b3ea57d3fdf731716b7a8d6ccef",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0xae7C80525e26113c4d61FB9D1d68615E86A80885",
    "transactionIndex": 148,
    "gasUsed": "3579119",
    "logsBloom": "0x
    "blockHash": "0xed3efdb1213d1661156c17173e56e75be1110b7ef0f7ffee510eff251762e9fe",
    "transactionHash": "0x599c811e977e2621207f3f9c6cd2262e89be7b3ea57d3fdf731716b7a8d6ccef",
    "logs": [],
    "blockNumber": 6858673,
    "cumulativeGasUsed": "29246180",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "8bc6593f86e06c77b2d62641ad6af9b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAssetERC721\",\"name\":\"assetERC721\",\"type\":\"address\"}],\"name\":\"AssetERC721Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bouncer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Bouncer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBouncerAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBouncerAdmin\",\"type\":\"address\"}],\"name\":\"BouncerAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newId\",\"type\":\"uint256\"}],\"name\":\"Extraction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"predicate\",\"type\":\"address\"}],\"name\":\"PredicateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_assetERC721\",\"outputs\":[{\"internalType\":\"contract IAssetERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBouncerAdmin\",\"type\":\"address\"}],\"name\":\"changeBouncerAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collectionIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collectionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"extractERC721From\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBouncerAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bouncerAdmin\",\"type\":\"address\"},{\"internalType\":\"contract IAssetERC721\",\"name\":\"assetERC721\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"chainIndex\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bouncerAdmin\",\"type\":\"address\"},{\"internalType\":\"contract IAssetERC721\",\"name\":\"assetERC721\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"chainIndex\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isBouncer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isCollection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAssetERC721\",\"name\":\"assetERC721\",\"type\":\"address\"}],\"name\":\"setAssetERC721\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bouncer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBouncer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"predicate\",\"type\":\"address\"}],\"name\":\"setPredicate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"wasEverMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"id\":\"the token type of which to get the balance of.\",\"owner\":\"The address of the token holder.\"},\"returns\":{\"_0\":\"the balance of `owner` for the token type `id`.\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"ids\":\"ids of each token type to query.\",\"owners\":\"the addresses of the token holders queried.\"},\"returns\":{\"_0\":\"the balance of each `owners` for each token type `ids`.\"}},\"burn(uint256,uint256)\":{\"params\":{\"amount\":\"amount of token to burn.\",\"id\":\"token type which will be burnt.\"}},\"burnFrom(address,uint256,uint256)\":{\"params\":{\"amount\":\"amount of token to burn.\",\"from\":\"address whose token is to be burnt.\",\"id\":\"token type which will be burnt.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"changeBouncerAdmin(address)\":{\"params\":{\"newBouncerAdmin\":\"address of the new minting administrator.\"}},\"collectionIndexOf(uint256)\":{\"params\":{\"id\":\"the token to get the index of.\"},\"returns\":{\"_0\":\"the index/order at which the token `id` was minted in a collection.\"}},\"collectionOf(uint256)\":{\"params\":{\"id\":\"the token to get the collection of.\"},\"returns\":{\"_0\":\"the collection the NFT is part of.\"}},\"extractERC721From(address,uint256,address)\":{\"params\":{\"id\":\"the token type to extract from.\",\"sender\":\"address which own the token to be extracted.\",\"to\":\"address which will receive the token.\"},\"returns\":{\"_0\":\"newId the id of the newly minted NFT.\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getBouncerAdmin()\":{\"returns\":{\"_0\":\"the current minting administrator in charge of minting rights.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"address of authorized operator.\",\"owner\":\"the owner of the tokens.\"},\"returns\":{\"isOperator\":\"true if the operator is approved, false if not.\"}},\"isBouncer(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has minting rights.\"}},\"isCollection(uint256)\":{\"params\":{\"id\":\"collectionId to check.\"},\"returns\":{\"_0\":\"whether the id is a collection.\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"Should be callable only by AssetERC1155Tunnel.Encoded bytes32 metadata hash must be provided as data. Make sure minting is done only by this function.\",\"params\":{\"account\":\"user address for whom token is being minted.\",\"amount\":\"amount of token being minted.\",\"data\":\"token metadata.\",\"id\":\"token which is being minted.\"}},\"mint(address,uint40,bytes32,uint256,address,bytes)\":{\"details\":\"Function implementation reserved for future use cases on L1.For this function it is not required to provide data.\",\"params\":{\"creator\":\"address of the creator of the token.\",\"data\":\"extra data to accompany the minting call.\",\"hash\":\"hash of an IPFS cidv1 folder that contains the metadata of the token type in the file 0.json.\",\"owner\":\"address that will receive the tokens.\",\"packId\":\"unique packId for that token.\",\"supply\":\"number of tokens minted for that token type.\"},\"returns\":{\"id\":\"the id of the newly minted token type.\"}},\"mintMultiple(address,uint256[],uint256[],bytes)\":{\"details\":\"Should be callable only by AssetERC1155Tunnel.Encoded bytes32[] metadata hashes must be provided as data.\",\"params\":{\"amounts\":\"supply for each token type.\",\"data\":\"token metadata.\",\"ids\":\"ids to mint.\",\"to\":\"address to mint to.\"}},\"name()\":{\"returns\":{\"_name\":\"the name of the tokens.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"call data should be optimized to order ids so packedBalance can be used efficiently.\",\"params\":{\"data\":\"aditional data accompanying the transfer.\",\"from\":\"address from which tokens are transfered.\",\"ids\":\"ids of each token type transfered.\",\"to\":\"address to which the token will be transfered.\",\"values\":\"amount of each token type transfered.\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"data\":\"aditional data accompanying the transfer.\",\"from\":\"address from which tokens are transfered.\",\"id\":\"the token type transfered.\",\"to\":\"address to which the token will be transfered.\",\"value\":\"amount of token transfered.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"whether to approve or revoke\",\"operator\":\"address which will be granted rights to transfer all tokens of the caller.\"}},\"setApprovalForAllFor(address,address,bool)\":{\"details\":\"used for Meta Transaction (from metaTransactionContract).\",\"params\":{\"approved\":\"whether to approve or revoke.\",\"operator\":\"address which will be granted rights to transfer all token owned by `sender`.\",\"sender\":\"address which grant approval.\"}},\"setBouncer(address,bool)\":{\"params\":{\"bouncer\":\"address that will be given/removed minting bouncer rights.\",\"enabled\":\"set whether the address is enabled or disabled as a minting bouncer.\"}},\"setPredicate(address)\":{\"params\":{\"predicate\":\"address that will be given minting rights for L1.\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"the interface identifier, as specified in ERC-165.\"},\"returns\":{\"_0\":\"`true` if the contract implements `id`.\"}},\"symbol()\":{\"returns\":{\"_symbol\":\"the symbol of the tokens.\"}},\"tokenURI(uint256)\":{\"params\":{\"id\":\"token to get the uri of.\"},\"returns\":{\"_0\":\"URI string\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Get the balance of `owner` for the token type `id`.\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Get the balance of `owners` for each token type `ids`.\"},\"burn(uint256,uint256)\":{\"notice\":\"Burns `amount` tokens of type `id`.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns `amount` tokens of type `id` from `from`.\"},\"changeBouncerAdmin(address)\":{\"notice\":\"Change the minting administrator to be `newBouncerAdmin`.\"},\"collectionIndexOf(uint256)\":{\"notice\":\"Gives the index at which an NFT was minted in a collection : first of a collection get the zero index.\"},\"collectionOf(uint256)\":{\"notice\":\"Gives the collection a specific token belongs to.\"},\"extractERC721From(address,uint256,address)\":{\"notice\":\"Extracts an EIP-721 Asset from an EIP-1155 Asset.\"},\"getBouncerAdmin()\":{\"notice\":\"Returns the current administrator in charge of minting rights.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of `operator` for owner `owner`.\"},\"isBouncer(address)\":{\"notice\":\"check whether address `who` is given minting bouncer rights.\"},\"isCollection(uint256)\":{\"notice\":\"Return wether the id is a collection\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"mint(address,uint256,uint256,bytes)\":{\"notice\":\"Creates `amount` tokens of token type `id`, and assigns them to `account`.\"},\"mint(address,uint40,bytes32,uint256,address,bytes)\":{\"notice\":\"Mint a token type for `creator` on slot `packId`.\"},\"mintMultiple(address,uint256[],uint256[],bytes)\":{\"notice\":\"Creates `amounts` tokens of token types `ids`, and assigns them to `account`.\"},\"name()\":{\"notice\":\"A descriptive name for the collection of tokens in this contract.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for `operator` to manage all of the caller's tokens.\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Enable or disable approval for `operator` to manage all `sender`'s tokens.\"},\"setBouncer(address,bool)\":{\"notice\":\"Enable or disable the ability of `bouncer` to mint tokens (minting bouncer rights).\"},\"setPredicate(address)\":{\"notice\":\"Set the address that will be able to mint on L1 (limited to custom predicate).\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements interface `id`.\"},\"symbol()\":{\"notice\":\"An abbreviated name for the collection of tokens in this contract.\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/assetERC1155/AssetERC1155.sol\":\"AssetERC1155\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/solc_0.8/asset/libraries/ERC1155ERC721Helper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nlibrary ERC1155ERC721Helper {\\n    bytes32 private constant base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n\\n    uint256 public constant CREATOR_OFFSET_MULTIPLIER = uint256(2)**(256 - 160);\\n    uint256 public constant IS_NFT_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1);\\n    uint256 public constant PACK_ID_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1 - 32 - 40);\\n    uint256 public constant PACK_NUM_FT_TYPES_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1 - 32 - 40 - 12);\\n    uint256 public constant NFT_INDEX_OFFSET = 63;\\n\\n    uint256 public constant IS_NFT = 0x0000000000000000000000000000000000000000800000000000000000000000;\\n    uint256 public constant NOT_IS_NFT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 public constant NFT_INDEX = 0x00000000000000000000000000000000000000007FFFFFFF8000000000000000;\\n    uint256 public constant NOT_NFT_INDEX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000007FFFFFFFFFFFFFFF;\\n    uint256 public constant URI_ID = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000007FFFFFFFFFFFF800;\\n    uint256 public constant PACK_ID = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000007FFFFFFFFF800000;\\n    uint256 public constant PACK_INDEX = 0x00000000000000000000000000000000000000000000000000000000000007FF;\\n    uint256 public constant PACK_NUM_FT_TYPES = 0x00000000000000000000000000000000000000000000000000000000007FF800;\\n\\n    uint256 public constant MAX_SUPPLY = uint256(2)**32 - 1;\\n    uint256 public constant MAX_PACK_SIZE = uint256(2)**11;\\n\\n    function toFullURI(bytes32 hash, uint256 id) public pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"ipfs://bafybei\\\", hash2base32(hash), \\\"/\\\", uint2str(id & PACK_INDEX), \\\".json\\\"));\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function hash2base32(bytes32 hash) public pure returns (string memory _uintAsString) {\\n        uint256 _i = uint256(hash);\\n        uint256 k = 52;\\n        bytes memory bstr = new bytes(k);\\n        bstr[--k] = base32Alphabet[uint8((_i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (_i % (2**s)) << (5-s)\\n        _i /= 8;\\n        while (k > 0) {\\n            bstr[--k] = base32Alphabet[_i % 32];\\n            _i /= 32;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function uint2str(uint256 _i) public pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            bstr[--k] = bytes1(uint8(48 + uint8(_i % 10)));\\n            _i /= 10;\\n        }\\n\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x3a1ddd78ae5c82d9d6a11fbbaca3d273f0cedc6129a4a056cbb143abb4b1e62e\",\"license\":\"MIT\"},\"src/solc_0.8/assetERC1155/AssetBaseERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"../common/interfaces/IAssetERC721.sol\\\";\\nimport \\\"../common/Libraries/ObjectLib32.sol\\\";\\nimport \\\"../common/BaseWithStorage/WithSuperOperators.sol\\\";\\nimport \\\"../asset/libraries/ERC1155ERC721Helper.sol\\\";\\n\\n// solhint-disable max-states-count\\nabstract contract AssetBaseERC1155 is WithSuperOperators, IERC1155 {\\n    using Address for address;\\n    using ObjectLib32 for ObjectLib32.Operations;\\n    using ObjectLib32 for uint256;\\n\\n    bytes4 private constant ERC1155_IS_RECEIVER = 0x4e2312e0;\\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n\\n    mapping(address => uint256) private _numNFTPerAddress; // erc721\\n    mapping(uint256 => uint256) private _owners; // erc721\\n    mapping(address => mapping(uint256 => uint256)) private _packedTokenBalance; // erc1155\\n    mapping(address => mapping(address => bool)) private _operatorsForAll; // erc721 and erc1155\\n    mapping(uint256 => address) private _erc721operators; // erc721\\n    mapping(uint256 => bytes32) internal _metadataHash; // erc721 and erc1155\\n    mapping(uint256 => bytes) internal _rarityPacks; // rarity configuration per packs (2 bits per Asset) *DEPRECATED*\\n    mapping(uint256 => uint32) private _nextCollectionIndex; // extraction\\n\\n    // @note : Deprecated.\\n    mapping(address => address) private _creatorship; // creatorship transfer // deprecated\\n\\n    mapping(address => bool) private _bouncers; // the contracts allowed to mint\\n\\n    // @note : Deprecated.\\n    mapping(address => bool) private _metaTransactionContracts;\\n\\n    address private _bouncerAdmin;\\n\\n    bool internal _init;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n\\n    uint256 internal _initBits;\\n    address internal _predicate; // used in place of polygon's `PREDICATE_ROLE`\\n\\n    uint8 internal _chainIndex; // modify this for l2\\n\\n    address internal _trustedForwarder;\\n\\n    IAssetERC721 public _assetERC721;\\n\\n    uint256[20] private __gap;\\n    // solhint-enable max-states-count\\n\\n    event BouncerAdminChanged(address oldBouncerAdmin, address newBouncerAdmin);\\n    event Bouncer(address bouncer, bool enabled);\\n    event Extraction(uint256 indexed id, uint256 indexed newId);\\n    event AssetERC721Set(IAssetERC721 assetERC721);\\n\\n    function init(\\n        address trustedForwarder,\\n        address admin,\\n        address bouncerAdmin,\\n        IAssetERC721 assetERC721,\\n        uint8 chainIndex\\n    ) public {\\n        // one-time init of bitfield's previous versions\\n        _checkInit(1);\\n        _admin = admin;\\n        _bouncerAdmin = bouncerAdmin;\\n        _assetERC721 = assetERC721;\\n        __ERC2771Handler_initialize(trustedForwarder);\\n        _chainIndex = chainIndex;\\n    }\\n\\n    /// @notice Change the minting administrator to be `newBouncerAdmin`.\\n    /// @param newBouncerAdmin address of the new minting administrator.\\n    function changeBouncerAdmin(address newBouncerAdmin) external {\\n        require(_msgSender() == _bouncerAdmin, \\\"!BOUNCER_ADMIN\\\");\\n        require(newBouncerAdmin != address(0), \\\"AssetBaseERC1155: new bouncer admin can't be zero address\\\");\\n        emit BouncerAdminChanged(_bouncerAdmin, newBouncerAdmin);\\n        _bouncerAdmin = newBouncerAdmin;\\n    }\\n\\n    /// @notice Enable or disable the ability of `bouncer` to mint tokens (minting bouncer rights).\\n    /// @param bouncer address that will be given/removed minting bouncer rights.\\n    /// @param enabled set whether the address is enabled or disabled as a minting bouncer.\\n    function setBouncer(address bouncer, bool enabled) external {\\n        require(_msgSender() == _bouncerAdmin, \\\"!BOUNCER_ADMIN\\\");\\n        _bouncers[bouncer] = enabled;\\n        emit Bouncer(bouncer, enabled);\\n    }\\n\\n    /// @notice Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param id the token type transfered.\\n    /// @param value amount of token transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override {\\n        require(to != address(0), \\\"TO==0\\\");\\n        require(from != address(0), \\\"FROM==0\\\");\\n        bool success = _transferFrom(from, to, id, value);\\n        if (success) {\\n            require(\\n                _checkOnERC1155Received(isTrustedForwarder(msg.sender) ? from : msg.sender, from, to, id, value, data),\\n                \\\"1155_TRANSFER_REJECTED\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\\n    /// @dev call data should be optimized to order ids so packedBalance can be used efficiently.\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param ids ids of each token type transfered.\\n    /// @param values amount of each token type transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override {\\n        require(ids.length == values.length, \\\"MISMATCHED_ARR_LEN\\\");\\n        require(to != address(0), \\\"TO==0\\\");\\n        require(from != address(0), \\\"FROM==0\\\");\\n        bool metaTx = isTrustedForwarder(msg.sender);\\n        bool authorized = from == _msgSender() || isApprovedForAll(from, _msgSender());\\n\\n        _batchTransferFrom(from, to, ids, values, authorized);\\n        emit TransferBatch(metaTx ? from : _msgSender(), from, to, ids, values);\\n        require(\\n            _checkOnERC1155BatchReceived(metaTx ? from : _msgSender(), from, to, ids, values, data),\\n            \\\"1155_TRANSFER_REJECTED\\\"\\n        );\\n    }\\n\\n    /// @notice Enable or disable approval for `operator` to manage all `sender`'s tokens.\\n    /// @dev used for Meta Transaction (from metaTransactionContract).\\n    /// @param sender address which grant approval.\\n    /// @param operator address which will be granted rights to transfer all token owned by `sender`.\\n    /// @param approved whether to approve or revoke.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(sender == _msgSender() || _superOperators[_msgSender()], \\\"!AUTHORIZED\\\");\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Enable or disable approval for `operator` to manage all of the caller's tokens.\\n    /// @param operator address which will be granted rights to transfer all tokens of the caller.\\n    /// @param approved whether to approve or revoke\\n    function setApprovalForAll(address operator, bool approved) external override(IERC1155) {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Returns the current administrator in charge of minting rights.\\n    /// @return the current minting administrator in charge of minting rights.\\n    function getBouncerAdmin() external view returns (address) {\\n        return _bouncerAdmin;\\n    }\\n\\n    /// @notice check whether address `who` is given minting bouncer rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minting rights.\\n    function isBouncer(address who) public view returns (bool) {\\n        return _bouncers[who];\\n    }\\n\\n    /// @notice Get the balance of `owners` for each token type `ids`.\\n    /// @param owners the addresses of the token holders queried.\\n    /// @param ids ids of each token type to query.\\n    /// @return the balance of each `owners` for each token type `ids`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(owners.length == ids.length, \\\"ARG_LENGTH_MISMATCH\\\");\\n        uint256[] memory balances = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            balances[i] = balanceOf(owners[i], ids[i]);\\n        }\\n        return balances;\\n    }\\n\\n    /// @notice A descriptive name for the collection of tokens in this contract.\\n    /// @return _name the name of the tokens.\\n    function name() external pure returns (string memory _name) {\\n        return \\\"Sandbox's ASSETs\\\";\\n    }\\n\\n    /// @notice An abbreviated name for the collection of tokens in this contract.\\n    /// @return _symbol the symbol of the tokens.\\n    function symbol() external pure returns (string memory _symbol) {\\n        return \\\"ASSET\\\";\\n    }\\n\\n    /// @notice Query if a contract implements interface `id`.\\n    /// @param id the interface identifier, as specified in ERC-165.\\n    /// @return `true` if the contract implements `id`.\\n    function supportsInterface(bytes4 id) external pure override returns (bool) {\\n        return\\n            id == 0x01ffc9a7 || //ERC165\\n            id == 0xd9b67a26 || // ERC1155\\n            id == 0x0e89341c || // ERC1155 metadata\\n            id == 0x9930ed5a; // ERC2771\\n    }\\n\\n    /// @notice Gives the collection a specific token belongs to.\\n    /// @param id the token to get the collection of.\\n    /// @return the collection the NFT is part of.\\n    function collectionOf(uint256 id) public view returns (uint256) {\\n        require(wasEverMinted(id), \\\"FT_!MINTED\\\"); // TODO: review\\n        uint256 collectionId = id & ERC1155ERC721Helper.NOT_NFT_INDEX & ERC1155ERC721Helper.NOT_IS_NFT;\\n        require(wasEverMinted(collectionId), \\\"UNMINTED_COLLECTION\\\");\\n        return collectionId;\\n    }\\n\\n    /// @notice Return wether the id is a collection\\n    /// @param id collectionId to check.\\n    /// @return whether the id is a collection.\\n    function isCollection(uint256 id) public view returns (bool) {\\n        uint256 collectionId = id & ERC1155ERC721Helper.NOT_NFT_INDEX & ERC1155ERC721Helper.NOT_IS_NFT;\\n        return wasEverMinted(collectionId);\\n    }\\n\\n    /// @notice Gives the index at which an NFT was minted in a collection : first of a collection get the zero index.\\n    /// @param id the token to get the index of.\\n    /// @return the index/order at which the token `id` was minted in a collection.\\n    function collectionIndexOf(uint256 id) public view returns (uint256) {\\n        collectionOf(id); // this check if id and collection indeed was ever minted\\n        return uint32((id & ERC1155ERC721Helper.NFT_INDEX) >> ERC1155ERC721Helper.NFT_INDEX_OFFSET);\\n    }\\n\\n    function wasEverMinted(uint256 id) public view returns (bool) {\\n        // TODO: discuss\\n        // ((id & ERC1155ERC721Helper.PACK_INDEX) <\\n        //     ((id & ERC1155ERC721Helper.PACK_NUM_FT_TYPES) /\\n        //         ERC1155ERC721Helper.PACK_NUM_FT_TYPES_OFFSET_MULTIPLIER)) &&\\n        return _metadataHash[id & ERC1155ERC721Helper.URI_ID] != 0;\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @param id token to get the uri of.\\n    /// @return URI string\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n        require(wasEverMinted(id), \\\"FT_!MINTED\\\");\\n        return ERC1155ERC721Helper.toFullURI(_metadataHash[id & ERC1155ERC721Helper.URI_ID], id);\\n    }\\n\\n    /// @notice Get the balance of `owner` for the token type `id`.\\n    /// @param owner The address of the token holder.\\n    /// @param id the token type of which to get the balance of.\\n    /// @return the balance of `owner` for the token type `id`.\\n    function balanceOf(address owner, uint256 id) public view override returns (uint256) {\\n        require(wasEverMinted(id), \\\"token was never minted\\\");\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        return _packedTokenBalance[owner][bin].getValueInBin(index);\\n    }\\n\\n    /// @notice Extracts an EIP-721 Asset from an EIP-1155 Asset.\\n    /// @param sender address which own the token to be extracted.\\n    /// @param id the token type to extract from.\\n    /// @param to address which will receive the token.\\n    /// @return newId the id of the newly minted NFT.\\n    function extractERC721From(\\n        address sender,\\n        uint256 id,\\n        address to\\n    ) external returns (uint256) {\\n        require(sender == _msgSender() || isApprovedForAll(sender, _msgSender()), \\\"!AUTHORIZED\\\");\\n        require(to != address(0), \\\"TO==0\\\");\\n        require(id & ERC1155ERC721Helper.IS_NFT == 0, \\\"NOT_ERC1155_TOKEN\\\");\\n        uint32 tokenCollectionIndex = _nextCollectionIndex[id];\\n        string memory metaData = tokenURI(id);\\n        uint256 newId =\\n            id + ERC1155ERC721Helper.IS_NFT + (tokenCollectionIndex) * 2**ERC1155ERC721Helper.NFT_INDEX_OFFSET;\\n        _nextCollectionIndex[id] = tokenCollectionIndex + 1;\\n        _burnFT(sender, id, 1);\\n        _assetERC721.mint(to, newId, bytes(abi.encode(metaData)));\\n        emit Extraction(id, newId);\\n        return newId;\\n    }\\n\\n    function setAssetERC721(IAssetERC721 assetERC721) external returns (bool) {\\n        require(_admin == _msgSender(), \\\"AUTHORIZED\\\");\\n        _assetERC721 = assetERC721;\\n        emit AssetERC721Set(assetERC721);\\n        return true;\\n    }\\n\\n    /// @notice Queries the approval status of `operator` for owner `owner`.\\n    /// @param owner the owner of the tokens.\\n    /// @param operator address of authorized operator.\\n    /// @return isOperator true if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override(IERC1155)\\n        returns (bool isOperator)\\n    {\\n        require(owner != address(0), \\\"OWNER==0\\\");\\n        require(operator != address(0), \\\"OPERATOR==0\\\");\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(sender != address(0), \\\"SENDER==0\\\");\\n        require(sender != operator, \\\"SENDER==OPERATOR\\\");\\n        require(operator != address(0), \\\"OPERATOR==0\\\");\\n        require(!_superOperators[operator], \\\"APPR_EXISTING_SUPEROPERATOR\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /* solhint-disable code-complexity */\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bool authorized\\n    ) internal {\\n        uint256 numItems = ids.length;\\n        uint256 bin;\\n        uint256 index;\\n        uint256 balFrom;\\n        uint256 balTo;\\n\\n        uint256 lastBin;\\n        require(authorized, \\\"OPERATOR_!AUTH\\\");\\n\\n        for (uint256 i = 0; i < numItems; i++) {\\n            if (from == to) {\\n                _checkEnoughBalance(from, ids[i], values[i]);\\n            } else if (values[i] > 0) {\\n                (bin, index) = ids[i].getTokenBinIndex();\\n                if (lastBin == 0) {\\n                    lastBin = bin;\\n                    balFrom = ObjectLib32.updateTokenBalance(\\n                        _packedTokenBalance[from][bin],\\n                        index,\\n                        values[i],\\n                        ObjectLib32.Operations.SUB\\n                    );\\n                    balTo = ObjectLib32.updateTokenBalance(\\n                        _packedTokenBalance[to][bin],\\n                        index,\\n                        values[i],\\n                        ObjectLib32.Operations.ADD\\n                    );\\n                } else {\\n                    if (bin != lastBin) {\\n                        _packedTokenBalance[from][lastBin] = balFrom;\\n                        _packedTokenBalance[to][lastBin] = balTo;\\n                        balFrom = _packedTokenBalance[from][bin];\\n                        balTo = _packedTokenBalance[to][bin];\\n                        lastBin = bin;\\n                    }\\n\\n                    balFrom = balFrom.updateTokenBalance(index, values[i], ObjectLib32.Operations.SUB);\\n                    balTo = balTo.updateTokenBalance(index, values[i], ObjectLib32.Operations.ADD);\\n                }\\n            }\\n        }\\n\\n        if (bin != 0 && from != to) {\\n            _packedTokenBalance[from][bin] = balFrom;\\n            _packedTokenBalance[to][bin] = balTo;\\n        }\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0 && amount <= ERC1155ERC721Helper.MAX_SUPPLY, \\\"INVALID_AMOUNT\\\");\\n        _burnFT(from, id, uint32(amount));\\n        emit TransferSingle(_msgSender(), from, address(0), id, amount);\\n    }\\n\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal {\\n        address operator = isTrustedForwarder(msg.sender) ? from : _msgSender();\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(amounts[i] > 0 && amounts[i] <= ERC1155ERC721Helper.MAX_SUPPLY, \\\"INVALID_AMOUNT\\\");\\n            _burnFT(from, ids[i], uint32(amounts[i]));\\n        }\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    function _burnFT(\\n        address from,\\n        uint256 id,\\n        uint32 amount\\n    ) internal {\\n        (uint256 bin, uint256 index) = (id).getTokenBinIndex();\\n        _packedTokenBalance[from][bin] = _packedTokenBalance[from][bin].updateTokenBalance(\\n            index,\\n            amount,\\n            ObjectLib32.Operations.SUB\\n        );\\n    }\\n\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        uint16 offset = 0;\\n        while (offset < amounts.length) {\\n            _mintPack(offset, amounts, to, ids);\\n            offset += 8;\\n        }\\n        _completeBatchMint(_msgSender(), to, ids, amounts, data);\\n    }\\n\\n    function _mintPack(\\n        uint16 offset,\\n        uint256[] memory supplies,\\n        address owner,\\n        uint256[] memory ids\\n    ) internal {\\n        (uint256 bin, uint256 index) = ids[offset].getTokenBinIndex();\\n        for (uint256 i = 0; i < 8 && offset + i < supplies.length; i++) {\\n            uint256 j = offset + i;\\n            if (supplies[j] > 0) {\\n                _packedTokenBalance[owner][bin] = _packedTokenBalance[owner][bin].updateTokenBalance(\\n                    index + i,\\n                    supplies[j],\\n                    ObjectLib32.Operations.ADD\\n                );\\n            }\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    ) internal returns (bool) {\\n        address sender = _msgSender();\\n        bool authorized = from == sender || isApprovedForAll(from, sender);\\n\\n        require(authorized, \\\"OPERATOR_!AUTH\\\");\\n        if (value > 0) {\\n            (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n            _packedTokenBalance[from][bin] = _packedTokenBalance[from][bin].updateTokenBalance(\\n                index,\\n                value,\\n                ObjectLib32.Operations.SUB\\n            );\\n            _packedTokenBalance[to][bin] = _packedTokenBalance[to][bin].updateTokenBalance(\\n                index,\\n                value,\\n                ObjectLib32.Operations.ADD\\n            );\\n        }\\n\\n        emit TransferSingle(isTrustedForwarder(msg.sender) ? from : sender, from, to, id, value);\\n        return true;\\n    }\\n\\n    function _mint(\\n        address operator,\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        _packedTokenBalance[account][bin] = _packedTokenBalance[account][bin].updateTokenBalance(\\n            index,\\n            amount,\\n            ObjectLib32.Operations.REPLACE\\n        );\\n\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n        require(_checkOnERC1155Received(operator, address(0), account, id, amount, data), \\\"TRANSFER_REJECTED\\\");\\n    }\\n\\n    /// @dev Allows the use of a bitfield to track the initialized status of the version `v` passed in as an arg.\\n    /// If the bit at the index corresponding to the given version is already set, revert.\\n    /// Otherwise, set the bit and return.\\n    /// @param v The version of this contract.\\n    function _checkInit(uint256 v) internal {\\n        require((_initBits >> v) & uint256(1) != 1, \\\"ALREADY_INITIALISED\\\");\\n        _initBits = _initBits | (uint256(1) << v);\\n    }\\n\\n    function _completeBatchMint(\\n        address operator,\\n        address owner,\\n        uint256[] memory ids,\\n        uint256[] memory supplies,\\n        bytes memory data\\n    ) internal {\\n        emit TransferBatch(operator, address(0), owner, ids, supplies);\\n        require(_checkOnERC1155BatchReceived(operator, address(0), owner, ids, supplies, data), \\\"TRANSFER_REJECTED\\\");\\n    }\\n\\n    function _checkEnoughBalance(\\n        address from,\\n        uint256 id,\\n        uint256 value\\n    ) internal view {\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        require(_packedTokenBalance[from][bin].getValueInBin(index) >= value, \\\"BALANCE_TOO_LOW\\\");\\n    }\\n\\n    function _checkOnERC1155Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        return IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) == ERC1155_RECEIVED;\\n    }\\n\\n    function _checkOnERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes4 retval = IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data);\\n        return (retval == ERC1155_BATCH_RECEIVED);\\n    }\\n}\\n\",\"keccak256\":\"0x09b5e06d1005096baedf608ab7531b84909ab562c82d84d572f409f06f8d721c\",\"license\":\"MIT\"},\"src/solc_0.8/assetERC1155/AssetERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./AssetBaseERC1155.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ncontract AssetERC1155 is AssetBaseERC1155 {\\n    uint256 private constant CHAIN_INDEX_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1 - 32);\\n\\n    event PredicateSet(address predicate);\\n\\n    function initialize(\\n        address trustedForwarder,\\n        address admin,\\n        address bouncerAdmin,\\n        IAssetERC721 assetERC721,\\n        uint8 chainIndex\\n    ) external {\\n        init(trustedForwarder, admin, bouncerAdmin, assetERC721, chainIndex);\\n    }\\n\\n    /// @notice Mint a token type for `creator` on slot `packId`.\\n    /// @dev Function implementation reserved for future use cases on L1.\\n    /// @dev For this function it is not required to provide data.\\n    /// @param creator address of the creator of the token.\\n    /// @param packId unique packId for that token.\\n    /// @param hash hash of an IPFS cidv1 folder that contains the metadata of the token type in the file 0.json.\\n    /// @param supply number of tokens minted for that token type.\\n    /// @param owner address that will receive the tokens.\\n    /// @param data extra data to accompany the minting call.\\n    /// @return id the id of the newly minted token type.\\n    function mint(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256 supply,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256 id) {\\n        require(hash != 0, \\\"HASH==0\\\");\\n        require(isBouncer(_msgSender()), \\\"!BOUNCER\\\");\\n        require(owner != address(0), \\\"TO==0\\\");\\n        id = _generateTokenId(creator, supply, packId, supply == 1 ? 0 : 1, 0);\\n        uint256 uriId = id & ERC1155ERC721Helper.URI_ID;\\n        require(uint256(_metadataHash[uriId]) == 0, \\\"ID_TAKEN\\\");\\n        _metadataHash[uriId] = hash;\\n        _mint(_msgSender(), owner, id, supply, data);\\n    }\\n\\n    /// @notice Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n    /// @dev Should be callable only by AssetERC1155Tunnel.\\n    /// @dev Encoded bytes32 metadata hash must be provided as data.\\n    /// Make sure minting is done only by this function.\\n    /// @param account user address for whom token is being minted.\\n    /// @param id token which is being minted.\\n    /// @param amount amount of token being minted.\\n    /// @param data token metadata.\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external {\\n        require(_msgSender() == _predicate, \\\"!PREDICATE\\\");\\n        require(data.length > 0, \\\"METADATA_MISSING\\\");\\n        require(account != address(0), \\\"TO==0\\\");\\n        uint256 uriId = id & ERC1155ERC721Helper.URI_ID;\\n        require(uint256(_metadataHash[uriId]) == 0, \\\"ID_TAKEN\\\");\\n        _metadataHash[uriId] = abi.decode(data, (bytes32));\\n        _mint(_msgSender(), account, id, amount, data);\\n    }\\n\\n    /// @notice Creates `amounts` tokens of token types `ids`, and assigns them to `account`.\\n    /// @dev Should be callable only by AssetERC1155Tunnel.\\n    /// @dev Encoded bytes32[] metadata hashes must be provided as data.\\n    /// @param to address to mint to.\\n    /// @param ids ids to mint.\\n    /// @param amounts supply for each token type.\\n    /// @param data token metadata.\\n    function mintMultiple(\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external {\\n        require(_msgSender() == _predicate, \\\"!PREDICATE\\\");\\n        require(data.length > 0, \\\"METADATA_MISSING\\\");\\n        require(to != address(0), \\\"TO==0\\\");\\n        bytes32[] memory hashes = abi.decode(data, (bytes32[]));\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 uriId = ids[i] & ERC1155ERC721Helper.URI_ID;\\n            require(uint256(_metadataHash[uriId]) == 0, \\\"ID_TAKEN\\\");\\n            _metadataHash[uriId] = hashes[i];\\n        }\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    /// @notice Set the address that will be able to mint on L1 (limited to custom predicate).\\n    /// @param predicate address that will be given minting rights for L1.\\n    function setPredicate(address predicate) external {\\n        require(_msgSender() == _admin, \\\"!ADMIN\\\");\\n        _predicate = predicate;\\n        emit PredicateSet(predicate);\\n    }\\n\\n    /// @notice Burns `amount` tokens of type `id`.\\n    /// @param id token type which will be burnt.\\n    /// @param amount amount of token to burn.\\n    function burn(uint256 id, uint256 amount) external {\\n        _burn(_msgSender(), id, amount);\\n    }\\n\\n    /// @notice Burns `amount` tokens of type `id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id token type which will be burnt.\\n    /// @param amount amount of token to burn.\\n    function burnFrom(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()), \\\"!AUTHORIZED\\\");\\n        _burn(from, id, amount);\\n    }\\n\\n    function _generateTokenId(\\n        address creator,\\n        uint256 supply,\\n        uint40 packId,\\n        uint16 numFTs,\\n        uint16 packIndex\\n    ) internal view returns (uint256) {\\n        require(supply > 0 && supply <= ERC1155ERC721Helper.MAX_SUPPLY, \\\"SUPPLY_OUT_OF_BOUNDS\\\");\\n        return\\n            uint256(uint160(creator)) *\\n            ERC1155ERC721Helper.CREATOR_OFFSET_MULTIPLIER + // CREATOR\\n            (supply == 1 ? uint256(1) * ERC1155ERC721Helper.IS_NFT_OFFSET_MULTIPLIER : 0) + // minted as NFT(1)|FT(0)\\n            uint256(_chainIndex) *\\n            CHAIN_INDEX_OFFSET_MULTIPLIER + // mainnet = 0, polygon = 1\\n            uint256(packId) *\\n            ERC1155ERC721Helper.PACK_ID_OFFSET_MULTIPLIER + // packId (unique pack)\\n            numFTs *\\n            ERC1155ERC721Helper.PACK_NUM_FT_TYPES_OFFSET_MULTIPLIER + // number of fungible token in the pack\\n            packIndex; // packIndex (position in the pack)\\n    }\\n}\\n\",\"keccak256\":\"0x33dbd0432cefdbbad8ff39b27ead949af69f3a193d20b8326b53e5f3b2ba917f\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0xf2ce40f1b23052a50a5b2d5ad61fbc04ab6c9fb2e5b1dba17ccddf4507e4649f\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperators.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithSuperOperators is WithAdmin {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0xa0d9b0e08ccae5e6b1f56e41ef750a68686d8958bc398369ac283aa4440f87ab\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/ObjectLib32.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nlibrary ObjectLib32 {\\n    enum Operations {ADD, SUB, REPLACE}\\n    // Constants regarding bin or chunk sizes for balance packing\\n    uint256 internal constant TYPES_BITS_SIZE = 32; // Max size of each object\\n    uint256 internal constant TYPES_PER_UINT256 = 256 / TYPES_BITS_SIZE; // Number of types per uint256\\n\\n    //\\n    // Objects and Tokens Functions\\n    //\\n\\n    /// @dev Return the bin number and index within that bin where ID is\\n    /// @param tokenId Object type\\n    /// @return bin Bin number.\\n    /// @return index ID's index within that bin.\\n    function getTokenBinIndex(uint256 tokenId) internal pure returns (uint256 bin, uint256 index) {\\n        unchecked {bin = (tokenId * TYPES_BITS_SIZE) / 256;}\\n        index = tokenId % TYPES_PER_UINT256;\\n        return (bin, index);\\n    }\\n\\n    /**\\n     * @dev update the balance of a type provided in binBalances\\n     * @param binBalances Uint256 containing the balances of objects\\n     * @param index Index of the object in the provided bin\\n     * @param amount Value to update the type balance\\n     * @param operation Which operation to conduct :\\n     *     Operations.REPLACE : Replace type balance with amount\\n     *     Operations.ADD     : ADD amount to type balance\\n     *     Operations.SUB     : Substract amount from type balance\\n     */\\n    function updateTokenBalance(\\n        uint256 binBalances,\\n        uint256 index,\\n        uint256 amount,\\n        Operations operation\\n    ) internal pure returns (uint256 newBinBalance) {\\n        uint256 objectBalance = 0;\\n        if (operation == Operations.ADD) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            newBinBalance = writeValueInBin(binBalances, index, objectBalance + amount);\\n        } else if (operation == Operations.SUB) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            require(objectBalance >= amount, \\\"can't substract more than there is\\\");\\n            newBinBalance = writeValueInBin(binBalances, index, objectBalance - amount);\\n        } else if (operation == Operations.REPLACE) {\\n            newBinBalance = writeValueInBin(binBalances, index, amount);\\n        } else {\\n            revert(\\\"Invalid operation\\\"); // Bad operation\\n        }\\n\\n        return newBinBalance;\\n    }\\n\\n    /*\\n     * @dev return value in binValue at position index\\n     * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n     * @param index index at which to retrieve value\\n     * @return Value at given index in bin\\n     */\\n    function getValueInBin(uint256 binValue, uint256 index) internal pure returns (uint256) {\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 rightShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue >> rightShift) & mask;\\n    }\\n\\n    /**\\n     * @dev return the updated binValue after writing amount at index\\n     * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n     * @param index Index at which to retrieve value\\n     * @param amount Value to store at index in bin\\n     * @return Value at given index in bin\\n     */\\n    function writeValueInBin(\\n        uint256 binValue,\\n        uint256 index,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        require(amount < 2**TYPES_BITS_SIZE, \\\"Amount to write in bin is too large\\\");\\n\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 leftShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue & ~(mask << leftShift)) | (amount << leftShift);\\n    }\\n}\\n\",\"keccak256\":\"0xa29615ee5e0cf81655b9a14f2694a5e8068db3eb9ea41d4b40b007c65676857e\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetERC721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Base} from \\\"./IERC721Base.sol\\\";\\n\\ninterface IAssetERC721 is IERC721Base {\\n    function mint(address to, uint256 id) external override;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) external override;\\n\\n    function setTokenURI(uint256 id, string memory uri) external;\\n\\n    function tokenURI(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3b9a9a153b67f1b525a777be5daf2bef73bd9a2f1f883128258105f313e28de9\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC721ExtendedToken} from \\\"./IERC721ExtendedToken.sol\\\";\\n\\ninterface IERC721Base is IERC721Upgradeable {\\n    function mint(address to, uint256 id) external;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata metaData\\n    ) external;\\n\\n    function approveFor(\\n        address from,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address from,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function supportsInterface(bytes4 id) external view override returns (bool);\\n\\n    function setTrustedForwarder(address trustedForwarder) external;\\n\\n    function isTrustedForwarder(address forwarder) external returns (bool);\\n\\n    function getTrustedForwarder() external returns (address trustedForwarder);\\n}\\n\",\"keccak256\":\"0x515a9d8e988c63547108b16b7efd4942ab15887529a98861a522dea6dbb0437d\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721ExtendedToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IERC721ExtendedToken {\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n}\\n\",\"keccak256\":\"0xe574d923fe66e20909df0d06b73478d2922e4865d85c578db60bda34f6273d45\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614004806100206000396000f3fe608060405234801561001057600080fd5b506004361061025a5760003560e01c806398fbde6411610145578063c87b56dd116100bd578063d9f37f8e1161008c578063eeb5a5d111610071578063eeb5a5d114610599578063f242432a146105ac578063ff23be53146105bf5761025a565b8063d9f37f8e14610573578063e985e9c5146105865761025a565b8063c87b56dd1461050b578063ce1b815f1461051e578063d12e76d01461052f578063d402756e146105425761025a565b8063b390c0ab11610114578063bd9ff41b116100f9578063bd9ff41b146104d2578063c0d24150146104e5578063c7778baa146104f85761025a565b8063b390c0ab146104ac578063b9b75ebc146104bf5761025a565b806398fbde64146104625780639bc88b9c14610475578063a22cb46514610486578063ac9fe421146104995761025a565b80634c4d07e7116101d85780636e9960c3116101a757806376596d211161018c57806376596d21146104035780638f2839701461041657806395d89b41146104295761025a565b80636e9960c3146103cb578063731133e9146103f05761025a565b80634c4d07e7146103315780634e1273f41461035d578063572b6c051461037d578063654b748a1461039f5761025a565b806306fdde031161022f5780632e712b46116102145780632e712b46146102f85780632eb2c2d61461030b57806331e5361f1461031e5761025a565b806306fdde03146102d0578063124d91e5146102e55761025a565b80628c26761461025f578062fdd58e1461027457806301ffc9a71461029a578063049476df146102bd575b600080fd5b61027261026d3660046134b2565b6105d2565b005b61028761028236600461377f565b6105e6565b6040519081526020015b60405180910390f35b6102ad6102a8366004613a32565b61069e565b6040519015158152602001610291565b6102726102cb36600461345e565b610771565b6102d86108cd565b6040516102919190613ced565b6102726102f33660046137eb565b610905565b610287610306366004613a1a565b61098f565b610272610319366004613527565b6109a8565b6102ad61032c36600461345e565b610cb9565b6102ad61033f36600461345e565b6001600160a01b03166000908152600b602052604090205460ff1690565b61037061036b36600461390a565b610d86565b6040516102919190613cb5565b6102ad61038b36600461345e565b6010546001600160a01b0390811691161490565b6102ad6103ad36600461345e565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610291565b6102726103fe36600461381f565b610ee2565b6102726104113660046134b2565b61109b565b61027261042436600461345e565b61114c565b60408051808201909152600581527f415353455400000000000000000000000000000000000000000000000000000060208201526102d8565b610287610470366004613887565b61121c565b600d546001600160a01b03166103d8565b61027261049436600461374b565b6113e4565b6102726104a736600461374b565b6113fa565b6102726104ba366004613af1565b6114de565b6102726104cd36600461374b565b6114f0565b6102ad6104e0366004613a1a565b6115b6565b6102726104f33660046136a2565b6115f0565b610287610506366004613a1a565b611886565b6102d8610519366004613a1a565b611974565b6010546001600160a01b03166103d8565b61027261053d36600461345e565b611ab1565b6102ad610550366004613a1a565b6bffffffff80000000000007ff1916600090815260076020526040902054151590565b6011546103d8906001600160a01b031681565b6102ad61059436600461347a565b611b7c565b6102726105a73660046135e2565b611c7a565b6102726105ba366004613628565b611d1d565b6102876105cd3660046137aa565b611e7a565b6105df858585858561109b565b5050505050565b6bffffffff80000000000007ff1981166000908152600760205260408120546106565760405162461bcd60e51b815260206004820152601660248201527f746f6b656e20776173206e65766572206d696e7465640000000000000000000060448201526064015b60405180910390fd5b60008061066284612109565b6001600160a01b038716600090815260046020908152604080832085845290915290205491935091506106959082612134565b95945050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061070157507fd9b67a26000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061073557507f0e89341c000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061076957507f9930ed5a000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b600d546001600160a01b0316610785612179565b6001600160a01b0316146107db5760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e000000000000000000000000000000000000604482015260640161064d565b6001600160a01b0381166108575760405162461bcd60e51b815260206004820152603960248201527f417373657442617365455243313135353a206e657720626f756e63657220616460448201527f6d696e2063616e2774206265207a65726f206164647265737300000000000000606482015260840161064d565b600d54604080516001600160a01b03928316815291831660208301527f1bab6ababbec5519512e9ee16964953ec0f72839126138285cac1f1136bd642e910160405180910390a1600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60408051808201909152601081527f53616e64626f782773204153534554730000000000000000000000000000000060208201525b90565b61090d612179565b6001600160a01b0316836001600160a01b03161480610933575061093383610594612179565b61097f5760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a4544000000000000000000000000000000000000000000604482015260640161064d565b61098a8383836121c3565b505050565b600061099a82611886565b5050603f1c63ffffffff1690565b8483146109f75760405162461bcd60e51b815260206004820152601260248201527f4d49534d4154434845445f4152525f4c454e0000000000000000000000000000604482015260640161064d565b6001600160a01b038716610a355760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b604482015260640161064d565b6001600160a01b038816610a8b5760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d3000000000000000000000000000000000000000000000000000604482015260640161064d565b6010546001600160a01b031633146000610aa3612179565b6001600160a01b03168a6001600160a01b03161480610ac95750610ac98a610594612179565b9050610b3c8a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152508892506122a5915050565b886001600160a01b03168a6001600160a01b031683610b6257610b5d612179565b610b64565b8b5b6001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8b8b8b8b604051610ba29493929190613c8e565b60405180910390a4610c6182610bbf57610bba612179565b610bc1565b8a5b8b8b8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061260f92505050565b610cad5760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a454354454400000000000000000000604482015260640161064d565b50505050505050505050565b6000610cc3612179565b6000546001600160a01b03908116911614610d205760405162461bcd60e51b815260206004820152600a60248201527f415554484f52495a454400000000000000000000000000000000000000000000604482015260640161064d565b6011805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527f5a91617bd1e0deac2e7e6f6fbd384ff93d50ab3d50b6f3cec6b7979a7b5c9de09060200160405180910390a1506001919050565b6060838214610dd75760405162461bcd60e51b815260206004820152601360248201527f4152475f4c454e4754485f4d49534d4154434800000000000000000000000000604482015260640161064d565b60008267ffffffffffffffff811115610e0057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e29578160200160208202803683370190505b50905060005b83811015610ed857610e9b878783818110610e5a57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610e6f919061345e565b868684818110610e8f57634e487b7160e01b600052603260045260246000fd5b905060200201356105e6565b828281518110610ebb57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610ed081613f2f565b915050610e2f565b5095945050505050565b600f546001600160a01b0316610ef6612179565b6001600160a01b031614610f4c5760405162461bcd60e51b815260206004820152600a60248201527f2150524544494341544500000000000000000000000000000000000000000000604482015260640161064d565b80610f995760405162461bcd60e51b815260206004820152601060248201527f4d455441444154415f4d495353494e4700000000000000000000000000000000604482015260640161064d565b6001600160a01b038516610fd75760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b604482015260640161064d565b6bffffffff80000000000007ff1984166000818152600760205260409020541561102e5760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b604482015260640161064d565b61103a82840184613a1a565b600082815260076020526040902055611093611054612179565b87878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061270492505050565b505050505050565b6110a56001612806565b6000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0387811691909117909255600d8054821686841617905560118054821685841617905560108054909116918716919091179055600f805460ff90921674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90921691909117905550505050565b6000546001600160a01b031633146111a65760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e49454400000000000000000000000000604482015260640161064d565b600054604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a16000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60008561126b5760405162461bcd60e51b815260206004820152600760248201527f484153483d3d3000000000000000000000000000000000000000000000000000604482015260640161064d565b61127661033f612179565b6112c25760405162461bcd60e51b815260206004820152600860248201527f21424f554e434552000000000000000000000000000000000000000000000000604482015260640161064d565b6001600160a01b0384166113005760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b604482015260640161064d565b61132288868988600114611315576001611318565b60005b60ff166000612871565b6bffffffff80000000000007ff198116600081815260076020526040902054919250901561137d5760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b604482015260640161064d565b60008181526007602052604090208790556113d8611399612179565b86848988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061270492505050565b50979650505050505050565b6113f66113ef612179565b83836129cc565b5050565b6000546001600160a01b0316331461147a5760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f72730000000000000000000000000000000000000000606482015260840161064d565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891015b60405180910390a15050565b6113f66114e9612179565b83836121c3565b600d546001600160a01b0316611504612179565b6001600160a01b03161461155a5760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e000000000000000000000000000000000000604482015260640161064d565b6001600160a01b0382166000818152600b6020908152604091829020805460ff19168515159081179091558251938452908301527f5ecd928ac22825e06273a3e8db8118dd7fe11bd2637ecfe4bfa25154948bd85f91016114d2565b6bffffffff80000000000007ff1981166000908152600760205260408120546bffffffff80000000000000001983169015155b9392505050565b600f546001600160a01b0316611604612179565b6001600160a01b03161461165a5760405162461bcd60e51b815260206004820152600a60248201527f2150524544494341544500000000000000000000000000000000000000000000604482015260640161064d565b806116a75760405162461bcd60e51b815260206004820152601060248201527f4d455441444154415f4d495353494e4700000000000000000000000000000000604482015260640161064d565b6001600160a01b0387166116e55760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b604482015260640161064d565b60006116f382840184613973565b905060005b868110156117d95760006bffffffff80000000000007ff1989898481811061173057634e487b7160e01b600052603260045260246000fd5b90506020020135169050600760008281526020019081526020016000205460001c60001461178b5760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b604482015260640161064d565b8282815181106117ab57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160009283526007909152604090912055806117d181613f2f565b9150506116f8565b5061187c8888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525050604080516020601f8b018190048102820181019092528981529250899150889081908401838280828437600092019190915250612bb092505050565b5050505050505050565b6bffffffff80000000000007ff1981166000908152600760205260408120546118f15760405162461bcd60e51b815260206004820152600a60248201527f46545f214d494e54454400000000000000000000000000000000000000000000604482015260640161064d565b6bffffffff8000000000000000198216611928816bffffffff80000000000007ff1916600090815260076020526040902054151590565b6107695760405162461bcd60e51b815260206004820152601360248201527f554e4d494e5445445f434f4c4c454354494f4e00000000000000000000000000604482015260640161064d565b606061199d826bffffffff80000000000007ff1916600090815260076020526040902054151590565b6119e95760405162461bcd60e51b815260206004820152600a60248201527f46545f214d494e54454400000000000000000000000000000000000000000000604482015260640161064d565b6bffffffff80000000000007ff198216600090815260076020526040908190205490517f55f43cd40000000000000000000000000000000000000000000000000000000081526004810191909152602481018390527300E9e534777fB51aAbA8F5cCb51d5D528C283BA2906355f43cd49060440160006040518083038186803b158015611a7557600080fd5b505af4158015611a89573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107699190810190613a6a565b6000546001600160a01b0316611ac5612179565b6001600160a01b031614611b1b5760405162461bcd60e51b815260206004820152600660248201527f2141444d494e0000000000000000000000000000000000000000000000000000604482015260640161064d565b600f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f41f738d25e68ffb96e8fd4d3de42056b6bf6961dd470e7b1158c46534596bbc99060200160405180910390a150565b60006001600160a01b038316611bd45760405162461bcd60e51b815260206004820152600860248201527f4f574e45523d3d30000000000000000000000000000000000000000000000000604482015260640161064d565b6001600160a01b038216611c2a5760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d30000000000000000000000000000000000000000000604482015260640161064d565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff16806115e95750506001600160a01b031660009081526001602052604090205460ff16919050565b611c82612179565b6001600160a01b0316836001600160a01b03161480611cc6575060016000611ca8612179565b6001600160a01b0316815260208101919091526040016000205460ff165b611d125760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a4544000000000000000000000000000000000000000000604482015260640161064d565b61098a8383836129cc565b6001600160a01b038516611d5b5760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b604482015260640161064d565b6001600160a01b038616611db15760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d3000000000000000000000000000000000000000000000000000604482015260640161064d565b6000611dbf87878787612bf2565b90508015611e7157601054611e25906001600160a01b03163314611de35733611de5565b875b8888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612dab92505050565b611e715760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a454354454400000000000000000000604482015260640161064d565b50505050505050565b6000611e84612179565b6001600160a01b0316846001600160a01b03161480611eaa5750611eaa84610594612179565b611ef65760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a4544000000000000000000000000000000000000000000604482015260640161064d565b6001600160a01b038216611f345760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b604482015260640161064d565b6b800000000000000000000000831615611f905760405162461bcd60e51b815260206004820152601160248201527f4e4f545f455243313135355f544f4b454e000000000000000000000000000000604482015260640161064d565b60008381526009602052604081205463ffffffff1690611faf85611974565b90506000611fbf603f6002613de8565b611fcf9063ffffffff8516613ec9565b611fe56b80000000000000000000000088613d57565b611fef9190613d57565b9050611ffc836001613d6f565b600087815260096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff9290921691909117905561204987876001612e7b565b6011546040516001600160a01b03909116906394d008ef9087908490612073908790602001613ced565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016120a093929190613c66565b600060405180830381600087803b1580156120ba57600080fd5b505af11580156120ce573d6000803e3d6000fd5b50506040518392508891507faa923cda6d3360ee3cd49c083ac1fe5e062a5739b82a32d597a65168c0c6926c90600090a39695505050505050565b600080610100602084020491506121236020610100613d8e565b61212d9084613f4a565b9050915091565b6000806121476001640100000000613ee8565b90506000612156846001613d57565b612161906020613ec9565b61216d90610100613ee8565b9490941c169392505050565b6010546000906001600160a01b03163314156121bc57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610902565b5033610902565b6000811180156121ea575060016121dc60206002613df7565b6121e69190613ee8565b8111155b6122365760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f414d4f554e54000000000000000000000000000000000000604482015260640161064d565b612241838383612e7b565b60006001600160a01b038416612255612179565b6001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051612298929190918252602082015260400190565b60405180910390a4505050565b8251600080808080866122fa5760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f2141555448000000000000000000000000000000000000604482015260640161064d565b60005b8681101561259f578a6001600160a01b03168c6001600160a01b0316141561237d576123788c8b838151811061234357634e487b7160e01b600052603260045260246000fd5b60200260200101518b848151811061236b57634e487b7160e01b600052603260045260246000fd5b6020026020010151612ef6565b61258d565b600089828151811061239f57634e487b7160e01b600052603260045260246000fd5b6020026020010151111561258d576123dd8a82815181106123d057634e487b7160e01b600052603260045260246000fd5b6020026020010151612109565b9096509450816124ab576001600160a01b038c1660009081526004602090815260408083208984529091529020548951879350612446919087908c908590811061243757634e487b7160e01b600052603260045260246000fd5b60200260200101516001612f85565b6001600160a01b038c1660009081526004602090815260408083208a84529091529020548a519195506124a49187908c908590811061249557634e487b7160e01b600052603260045260246000fd5b60200260200101516000612f85565b925061258d565b81861461250a576001600160a01b038c8116600090815260046020818152604080842087855280835281852099909955938f16835290815282822094825284815282822095909555878152948452808520549290935291909220549084905b612549858a838151811061252e57634e487b7160e01b600052603260045260246000fd5b6020026020010151600187612f85909392919063ffffffff16565b935061258a858a838151811061256f57634e487b7160e01b600052603260045260246000fd5b6020026020010151600086612f85909392919063ffffffff16565b92505b8061259781613f2f565b9150506122fd565b5084158015906125c15750896001600160a01b03168b6001600160a01b031614155b15612602576001600160a01b03808c1660009081526004602081815260408084208a85528252808420889055938e1683529081528282208883529052208290555b5050505050505050505050565b60006001600160a01b0385163b612628575060016126fa565b6040517fbc197c810000000000000000000000000000000000000000000000000000000081526000906001600160a01b0387169063bc197c8190612678908b908b908a908a908a90600401613bc5565b602060405180830381600087803b15801561269257600080fd5b505af11580156126a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ca9190613a4e565b6001600160e01b0319167fbc197c8100000000000000000000000000000000000000000000000000000000149150505b9695505050505050565b60008061271085612109565b6001600160a01b038816600090815260046020908152604080832085845290915290205491935091506127469082866002612f85565b6001600160a01b03878116600081815260046020908152604080832088845282528083209590955584518a8152908101899052919390928b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46127ba87600088888888612dab565b611e715760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a4543544544000000000000000000000000000000604482015260640161064d565b600181600e54901c166001141561285f5760405162461bcd60e51b815260206004820152601360248201527f414c52454144595f494e495449414c4953454400000000000000000000000000604482015260640161064d565b806001901b600e5417600e8190555050565b600080851180156128995750600161288b60206002613df7565b6128959190613ee8565b8511155b6128e55760405162461bcd60e51b815260206004820152601460248201527f535550504c595f4f55545f4f465f424f554e4453000000000000000000000000604482015260640161064d565b61ffff82166128f6600b6002613df7565b6129049061ffff8616613ec9565b61291060176002613df7565b6129219064ffffffffff8816613ec9565b61292d603f6002613df7565b600f54612955919074010000000000000000000000000000000000000000900460ff16613ec9565b8860011461296457600061297b565b612970605f6002613df7565b61297b906001613ec9565b61298760606002613df7565b61299a906001600160a01b038d16613ec9565b6129a49190613d57565b6129ae9190613d57565b6129b89190613d57565b6129c29190613d57565b6126fa9190613d57565b6001600160a01b038316612a225760405162461bcd60e51b815260206004820152600960248201527f53454e4445523d3d300000000000000000000000000000000000000000000000604482015260640161064d565b816001600160a01b0316836001600160a01b03161415612a845760405162461bcd60e51b815260206004820152601060248201527f53454e4445523d3d4f50455241544f5200000000000000000000000000000000604482015260640161064d565b6001600160a01b038216612ada5760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d30000000000000000000000000000000000000000000604482015260640161064d565b6001600160a01b03821660009081526001602052604090205460ff1615612b435760405162461bcd60e51b815260206004820152601b60248201527f415050525f4558495354494e475f53555045524f50455241544f520000000000604482015260640161064d565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60005b82518161ffff161015612bde57612bcc81848787613113565b612bd7600882613d31565b9050612bb3565b6105df612be9612179565b86868686613242565b600080612bfd612179565b90506000816001600160a01b0316876001600160a01b03161480612c265750612c268783611b7c565b905080612c755760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f2141555448000000000000000000000000000000000000604482015260640161064d565b8315612d3157600080612c8787612109565b6001600160a01b038b1660009081526004602090815260408083208584529091529020549193509150612cbd9082886001612f85565b6001600160a01b03808b166000908152600460208181526040808420888552825280842095909555928c168252825282812085825290915290812054612d069183908990612f85565b6001600160a01b03891660009081526004602090815260408083209583529490529290922091909155505b6010546001600160a01b038088169189821691163314612d515783612d53565b885b6001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051612d96929190918252602082015260400190565b60405180910390a45060019695505050505050565b60006001600160a01b0385163b612dc4575060016126fa565b6040517ff23a6e6100000000000000000000000000000000000000000000000000000000808252906001600160a01b0387169063f23a6e6190612e13908b908b908a908a908a90600401613c23565b602060405180830381600087803b158015612e2d57600080fd5b505af1158015612e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e659190613a4e565b6001600160e01b03191614979650505050505050565b600080612e8784612109565b6001600160a01b03871660009081526004602090815260408083208584529091529020549193509150612ec7908263ffffffff80871690600190612f8516565b6001600160a01b0390951660009081526004602090815260408083209483529390529190912093909355505050565b600080612f0284612109565b6001600160a01b038716600090815260046020908152604080832085845290915290205491935091508390612f379083612134565b10156105df5760405162461bcd60e51b815260206004820152600f60248201527f42414c414e43455f544f4f5f4c4f570000000000000000000000000000000000604482015260640161064d565b60008080836002811115612fa957634e487b7160e01b600052602160045260246000fd5b1415612fd657612fb98686612134565b9050612fcf8686612fca8785613d57565b6132f5565b915061310a565b6001836002811115612ff857634e487b7160e01b600052602160045260246000fd5b141561308f576130088686612134565b9050838110156130805760405162461bcd60e51b815260206004820152602260248201527f63616e277420737562737472616374206d6f7265207468616e2074686572652060448201527f6973000000000000000000000000000000000000000000000000000000000000606482015260840161064d565b612fcf8686612fca8785613ee8565b60028360028111156130b157634e487b7160e01b600052602160045260246000fd5b14156130c257612fcf8686866132f5565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c6964206f7065726174696f6e000000000000000000000000000000604482015260640161064d565b50949350505050565b60008061313d838761ffff16815181106123d057634e487b7160e01b600052603260045260246000fd5b9150915060005b6008811080156131615750855161315f8261ffff8a16613d57565b105b15611e715760006131768261ffff8a16613d57565b9050600087828151811061319a57634e487b7160e01b600052603260045260246000fd5b6020026020010151111561322f5761320a6131b58385613d57565b8883815181106131d557634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038a1660009081526004835260408082208a8352909352918220549291612f85565b6001600160a01b03871660009081526004602090815260408083208884529091529020555b508061323a81613f2f565b915050613144565b836001600160a01b031660006001600160a01b0316866001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051613292929190613cc8565b60405180910390a46132a98560008686868661260f565b6105df5760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a4543544544000000000000000000000000000000604482015260640161064d565b600061330360206002613de8565b82106133775760405162461bcd60e51b815260206004820152602360248201527f416d6f756e7420746f20777269746520696e2062696e20697320746f6f206c6160448201527f7267650000000000000000000000000000000000000000000000000000000000606482015260840161064d565b60006133896001640100000000613ee8565b90506000613398856001613d57565b6133a3906020613ec9565b6133af90610100613ee8565b91821b199590951692901b919091179392505050565b60008083601f8401126133d6578182fd5b50813567ffffffffffffffff8111156133ed578182fd5b602083019150836020808302850101111561340757600080fd5b9250929050565b8035801515811461076c57600080fd5b60008083601f84011261342f578182fd5b50813567ffffffffffffffff811115613446578182fd5b60208301915083602082850101111561340757600080fd5b60006020828403121561346f578081fd5b81356115e981613fa0565b6000806040838503121561348c578081fd5b823561349781613fa0565b915060208301356134a781613fa0565b809150509250929050565b600080600080600060a086880312156134c9578081fd5b85356134d481613fa0565b945060208601356134e481613fa0565b935060408601356134f481613fa0565b9250606086013561350481613fa0565b9150608086013560ff81168114613519578182fd5b809150509295509295909350565b60008060008060008060008060a0898b031215613542578283fd5b883561354d81613fa0565b9750602089013561355d81613fa0565b9650604089013567ffffffffffffffff80821115613579578485fd5b6135858c838d016133c5565b909850965060608b013591508082111561359d578485fd5b6135a98c838d016133c5565b909650945060808b01359150808211156135c1578384fd5b506135ce8b828c0161341e565b999c989b5096995094979396929594505050565b6000806000606084860312156135f6578283fd5b833561360181613fa0565b9250602084013561361181613fa0565b915061361f6040850161340e565b90509250925092565b60008060008060008060a08789031215613640578182fd5b863561364b81613fa0565b9550602087013561365b81613fa0565b94506040870135935060608701359250608087013567ffffffffffffffff811115613684578283fd5b61369089828a0161341e565b979a9699509497509295939492505050565b60008060008060008060006080888a0312156136bc578081fd5b87356136c781613fa0565b9650602088013567ffffffffffffffff808211156136e3578283fd5b6136ef8b838c016133c5565b909850965060408a0135915080821115613707578283fd5b6137138b838c016133c5565b909650945060608a013591508082111561372b578283fd5b506137388a828b0161341e565b989b979a50959850939692959293505050565b6000806040838503121561375d578182fd5b823561376881613fa0565b91506137766020840161340e565b90509250929050565b60008060408385031215613791578182fd5b823561379c81613fa0565b946020939093013593505050565b6000806000606084860312156137be578081fd5b83356137c981613fa0565b92506020840135915060408401356137e081613fa0565b809150509250925092565b6000806000606084860312156137ff578081fd5b833561380a81613fa0565b95602085013595506040909401359392505050565b600080600080600060808688031215613836578283fd5b853561384181613fa0565b94506020860135935060408601359250606086013567ffffffffffffffff81111561386a578182fd5b6138768882890161341e565b969995985093965092949392505050565b600080600080600080600060c0888a0312156138a1578081fd5b87356138ac81613fa0565b9650602088013564ffffffffff811681146138c5578182fd5b9550604088013594506060880135935060808801356138e381613fa0565b925060a088013567ffffffffffffffff8111156138fe578182fd5b6137388a828b0161341e565b6000806000806040858703121561391f578182fd5b843567ffffffffffffffff80821115613936578384fd5b613942888389016133c5565b9096509450602087013591508082111561395a578384fd5b50613967878288016133c5565b95989497509550505050565b60006020808385031215613985578182fd5b823567ffffffffffffffff8082111561399c578384fd5b818501915085601f8301126139af578384fd5b8135818111156139c1576139c1613f8a565b83810291506139d1848301613d00565b8181528481019084860184860187018a10156139eb578788fd5b8795505b83861015613a0d5780358352600195909501949186019186016139ef565b5098975050505050505050565b600060208284031215613a2b578081fd5b5035919050565b600060208284031215613a43578081fd5b81356115e981613fb8565b600060208284031215613a5f578081fd5b81516115e981613fb8565b600060208284031215613a7b578081fd5b815167ffffffffffffffff80821115613a92578283fd5b818401915084601f830112613aa5578283fd5b815181811115613ab757613ab7613f8a565b613aca6020601f19601f84011601613d00565b9150808252856020828501011115613ae0578384fd5b61310a816020840160208601613eff565b60008060408385031215613b03578182fd5b50508035926020909101359150565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115613b43578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015613b8e57815187529582019590820190600101613b72565b509495945050505050565b60008151808452613bb1816020860160208601613eff565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a06040830152613bf160a0830186613b5f565b8281036060840152613c038186613b5f565b90508281036080840152613c178185613b99565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613c5b60a0830184613b99565b979650505050505050565b60006001600160a01b0385168252836020830152606060408301526106956060830184613b99565b600060408252613ca2604083018688613b12565b8281036020840152613c5b818587613b12565b6000602082526115e96020830184613b5f565b600060408252613cdb6040830185613b5f565b82810360208401526106958185613b5f565b6000602082526115e96020830184613b99565b604051601f8201601f1916810167ffffffffffffffff81118282101715613d2957613d29613f8a565b604052919050565b600061ffff808316818516808303821115613d4e57613d4e613f5e565b01949350505050565b60008219821115613d6a57613d6a613f5e565b500190565b600063ffffffff808316818516808303821115613d4e57613d4e613f5e565b600082613d9d57613d9d613f74565b500490565b80825b6001808611613db45750613ddf565b818704821115613dc657613dc6613f5e565b80861615613dd357918102915b9490941c938002613da5565b94509492505050565b60006115e96000198484613e05565b60006115e960001960ff8516845b600082613e14575060016115e9565b81613e21575060006115e9565b8160018114613e375760028114613e4157613e6e565b60019150506115e9565b60ff841115613e5257613e52613f5e565b6001841b915084821115613e6857613e68613f5e565b506115e9565b5060208310610133831016604e8410600b8410161715613ea1575081810a83811115613e9c57613e9c613f5e565b6115e9565b613eae8484846001613da2565b808604821115613ec057613ec0613f5e565b02949350505050565b6000816000190483118215151615613ee357613ee3613f5e565b500290565b600082821015613efa57613efa613f5e565b500390565b60005b83811015613f1a578181015183820152602001613f02565b83811115613f29576000848401525b50505050565b6000600019821415613f4357613f43613f5e565b5060010190565b600082613f5957613f59613f74565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613fb557600080fd5b50565b6001600160e01b031981168114613fb557600080fdfea26469706673582212204347d4b5bbe40c3ea73acb008d656ee2ebe7ac964163da83f53e39e3c488d36f64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025a5760003560e01c806398fbde6411610145578063c87b56dd116100bd578063d9f37f8e1161008c578063eeb5a5d111610071578063eeb5a5d114610599578063f242432a146105ac578063ff23be53146105bf5761025a565b8063d9f37f8e14610573578063e985e9c5146105865761025a565b8063c87b56dd1461050b578063ce1b815f1461051e578063d12e76d01461052f578063d402756e146105425761025a565b8063b390c0ab11610114578063bd9ff41b116100f9578063bd9ff41b146104d2578063c0d24150146104e5578063c7778baa146104f85761025a565b8063b390c0ab146104ac578063b9b75ebc146104bf5761025a565b806398fbde64146104625780639bc88b9c14610475578063a22cb46514610486578063ac9fe421146104995761025a565b80634c4d07e7116101d85780636e9960c3116101a757806376596d211161018c57806376596d21146104035780638f2839701461041657806395d89b41146104295761025a565b80636e9960c3146103cb578063731133e9146103f05761025a565b80634c4d07e7146103315780634e1273f41461035d578063572b6c051461037d578063654b748a1461039f5761025a565b806306fdde031161022f5780632e712b46116102145780632e712b46146102f85780632eb2c2d61461030b57806331e5361f1461031e5761025a565b806306fdde03146102d0578063124d91e5146102e55761025a565b80628c26761461025f578062fdd58e1461027457806301ffc9a71461029a578063049476df146102bd575b600080fd5b61027261026d3660046134b2565b6105d2565b005b61028761028236600461377f565b6105e6565b6040519081526020015b60405180910390f35b6102ad6102a8366004613a32565b61069e565b6040519015158152602001610291565b6102726102cb36600461345e565b610771565b6102d86108cd565b6040516102919190613ced565b6102726102f33660046137eb565b610905565b610287610306366004613a1a565b61098f565b610272610319366004613527565b6109a8565b6102ad61032c36600461345e565b610cb9565b6102ad61033f36600461345e565b6001600160a01b03166000908152600b602052604090205460ff1690565b61037061036b36600461390a565b610d86565b6040516102919190613cb5565b6102ad61038b36600461345e565b6010546001600160a01b0390811691161490565b6102ad6103ad36600461345e565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610291565b6102726103fe36600461381f565b610ee2565b6102726104113660046134b2565b61109b565b61027261042436600461345e565b61114c565b60408051808201909152600581527f415353455400000000000000000000000000000000000000000000000000000060208201526102d8565b610287610470366004613887565b61121c565b600d546001600160a01b03166103d8565b61027261049436600461374b565b6113e4565b6102726104a736600461374b565b6113fa565b6102726104ba366004613af1565b6114de565b6102726104cd36600461374b565b6114f0565b6102ad6104e0366004613a1a565b6115b6565b6102726104f33660046136a2565b6115f0565b610287610506366004613a1a565b611886565b6102d8610519366004613a1a565b611974565b6010546001600160a01b03166103d8565b61027261053d36600461345e565b611ab1565b6102ad610550366004613a1a565b6bffffffff80000000000007ff1916600090815260076020526040902054151590565b6011546103d8906001600160a01b031681565b6102ad61059436600461347a565b611b7c565b6102726105a73660046135e2565b611c7a565b6102726105ba366004613628565b611d1d565b6102876105cd3660046137aa565b611e7a565b6105df858585858561109b565b5050505050565b6bffffffff80000000000007ff1981166000908152600760205260408120546106565760405162461bcd60e51b815260206004820152601660248201527f746f6b656e20776173206e65766572206d696e7465640000000000000000000060448201526064015b60405180910390fd5b60008061066284612109565b6001600160a01b038716600090815260046020908152604080832085845290915290205491935091506106959082612134565b95945050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061070157507fd9b67a26000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061073557507f0e89341c000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061076957507f9930ed5a000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b600d546001600160a01b0316610785612179565b6001600160a01b0316146107db5760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e000000000000000000000000000000000000604482015260640161064d565b6001600160a01b0381166108575760405162461bcd60e51b815260206004820152603960248201527f417373657442617365455243313135353a206e657720626f756e63657220616460448201527f6d696e2063616e2774206265207a65726f206164647265737300000000000000606482015260840161064d565b600d54604080516001600160a01b03928316815291831660208301527f1bab6ababbec5519512e9ee16964953ec0f72839126138285cac1f1136bd642e910160405180910390a1600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60408051808201909152601081527f53616e64626f782773204153534554730000000000000000000000000000000060208201525b90565b61090d612179565b6001600160a01b0316836001600160a01b03161480610933575061093383610594612179565b61097f5760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a4544000000000000000000000000000000000000000000604482015260640161064d565b61098a8383836121c3565b505050565b600061099a82611886565b5050603f1c63ffffffff1690565b8483146109f75760405162461bcd60e51b815260206004820152601260248201527f4d49534d4154434845445f4152525f4c454e0000000000000000000000000000604482015260640161064d565b6001600160a01b038716610a355760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b604482015260640161064d565b6001600160a01b038816610a8b5760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d3000000000000000000000000000000000000000000000000000604482015260640161064d565b6010546001600160a01b031633146000610aa3612179565b6001600160a01b03168a6001600160a01b03161480610ac95750610ac98a610594612179565b9050610b3c8a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152508892506122a5915050565b886001600160a01b03168a6001600160a01b031683610b6257610b5d612179565b610b64565b8b5b6001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8b8b8b8b604051610ba29493929190613c8e565b60405180910390a4610c6182610bbf57610bba612179565b610bc1565b8a5b8b8b8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061260f92505050565b610cad5760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a454354454400000000000000000000604482015260640161064d565b50505050505050505050565b6000610cc3612179565b6000546001600160a01b03908116911614610d205760405162461bcd60e51b815260206004820152600a60248201527f415554484f52495a454400000000000000000000000000000000000000000000604482015260640161064d565b6011805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527f5a91617bd1e0deac2e7e6f6fbd384ff93d50ab3d50b6f3cec6b7979a7b5c9de09060200160405180910390a1506001919050565b6060838214610dd75760405162461bcd60e51b815260206004820152601360248201527f4152475f4c454e4754485f4d49534d4154434800000000000000000000000000604482015260640161064d565b60008267ffffffffffffffff811115610e0057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e29578160200160208202803683370190505b50905060005b83811015610ed857610e9b878783818110610e5a57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610e6f919061345e565b868684818110610e8f57634e487b7160e01b600052603260045260246000fd5b905060200201356105e6565b828281518110610ebb57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610ed081613f2f565b915050610e2f565b5095945050505050565b600f546001600160a01b0316610ef6612179565b6001600160a01b031614610f4c5760405162461bcd60e51b815260206004820152600a60248201527f2150524544494341544500000000000000000000000000000000000000000000604482015260640161064d565b80610f995760405162461bcd60e51b815260206004820152601060248201527f4d455441444154415f4d495353494e4700000000000000000000000000000000604482015260640161064d565b6001600160a01b038516610fd75760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b604482015260640161064d565b6bffffffff80000000000007ff1984166000818152600760205260409020541561102e5760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b604482015260640161064d565b61103a82840184613a1a565b600082815260076020526040902055611093611054612179565b87878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061270492505050565b505050505050565b6110a56001612806565b6000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0387811691909117909255600d8054821686841617905560118054821685841617905560108054909116918716919091179055600f805460ff90921674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90921691909117905550505050565b6000546001600160a01b031633146111a65760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e49454400000000000000000000000000604482015260640161064d565b600054604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a16000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60008561126b5760405162461bcd60e51b815260206004820152600760248201527f484153483d3d3000000000000000000000000000000000000000000000000000604482015260640161064d565b61127661033f612179565b6112c25760405162461bcd60e51b815260206004820152600860248201527f21424f554e434552000000000000000000000000000000000000000000000000604482015260640161064d565b6001600160a01b0384166113005760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b604482015260640161064d565b61132288868988600114611315576001611318565b60005b60ff166000612871565b6bffffffff80000000000007ff198116600081815260076020526040902054919250901561137d5760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b604482015260640161064d565b60008181526007602052604090208790556113d8611399612179565b86848988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061270492505050565b50979650505050505050565b6113f66113ef612179565b83836129cc565b5050565b6000546001600160a01b0316331461147a5760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f72730000000000000000000000000000000000000000606482015260840161064d565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891015b60405180910390a15050565b6113f66114e9612179565b83836121c3565b600d546001600160a01b0316611504612179565b6001600160a01b03161461155a5760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e000000000000000000000000000000000000604482015260640161064d565b6001600160a01b0382166000818152600b6020908152604091829020805460ff19168515159081179091558251938452908301527f5ecd928ac22825e06273a3e8db8118dd7fe11bd2637ecfe4bfa25154948bd85f91016114d2565b6bffffffff80000000000007ff1981166000908152600760205260408120546bffffffff80000000000000001983169015155b9392505050565b600f546001600160a01b0316611604612179565b6001600160a01b03161461165a5760405162461bcd60e51b815260206004820152600a60248201527f2150524544494341544500000000000000000000000000000000000000000000604482015260640161064d565b806116a75760405162461bcd60e51b815260206004820152601060248201527f4d455441444154415f4d495353494e4700000000000000000000000000000000604482015260640161064d565b6001600160a01b0387166116e55760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b604482015260640161064d565b60006116f382840184613973565b905060005b868110156117d95760006bffffffff80000000000007ff1989898481811061173057634e487b7160e01b600052603260045260246000fd5b90506020020135169050600760008281526020019081526020016000205460001c60001461178b5760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b604482015260640161064d565b8282815181106117ab57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160009283526007909152604090912055806117d181613f2f565b9150506116f8565b5061187c8888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525050604080516020601f8b018190048102820181019092528981529250899150889081908401838280828437600092019190915250612bb092505050565b5050505050505050565b6bffffffff80000000000007ff1981166000908152600760205260408120546118f15760405162461bcd60e51b815260206004820152600a60248201527f46545f214d494e54454400000000000000000000000000000000000000000000604482015260640161064d565b6bffffffff8000000000000000198216611928816bffffffff80000000000007ff1916600090815260076020526040902054151590565b6107695760405162461bcd60e51b815260206004820152601360248201527f554e4d494e5445445f434f4c4c454354494f4e00000000000000000000000000604482015260640161064d565b606061199d826bffffffff80000000000007ff1916600090815260076020526040902054151590565b6119e95760405162461bcd60e51b815260206004820152600a60248201527f46545f214d494e54454400000000000000000000000000000000000000000000604482015260640161064d565b6bffffffff80000000000007ff198216600090815260076020526040908190205490517f55f43cd400000000000000000000000000000000000000000000000000000000815260048101919091526024810183905273__$22fbfd89be1e25db7d564b4a9955403d23$__906355f43cd49060440160006040518083038186803b158015611a7557600080fd5b505af4158015611a89573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107699190810190613a6a565b6000546001600160a01b0316611ac5612179565b6001600160a01b031614611b1b5760405162461bcd60e51b815260206004820152600660248201527f2141444d494e0000000000000000000000000000000000000000000000000000604482015260640161064d565b600f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f41f738d25e68ffb96e8fd4d3de42056b6bf6961dd470e7b1158c46534596bbc99060200160405180910390a150565b60006001600160a01b038316611bd45760405162461bcd60e51b815260206004820152600860248201527f4f574e45523d3d30000000000000000000000000000000000000000000000000604482015260640161064d565b6001600160a01b038216611c2a5760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d30000000000000000000000000000000000000000000604482015260640161064d565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff16806115e95750506001600160a01b031660009081526001602052604090205460ff16919050565b611c82612179565b6001600160a01b0316836001600160a01b03161480611cc6575060016000611ca8612179565b6001600160a01b0316815260208101919091526040016000205460ff165b611d125760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a4544000000000000000000000000000000000000000000604482015260640161064d565b61098a8383836129cc565b6001600160a01b038516611d5b5760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b604482015260640161064d565b6001600160a01b038616611db15760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d3000000000000000000000000000000000000000000000000000604482015260640161064d565b6000611dbf87878787612bf2565b90508015611e7157601054611e25906001600160a01b03163314611de35733611de5565b875b8888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612dab92505050565b611e715760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a454354454400000000000000000000604482015260640161064d565b50505050505050565b6000611e84612179565b6001600160a01b0316846001600160a01b03161480611eaa5750611eaa84610594612179565b611ef65760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a4544000000000000000000000000000000000000000000604482015260640161064d565b6001600160a01b038216611f345760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b604482015260640161064d565b6b800000000000000000000000831615611f905760405162461bcd60e51b815260206004820152601160248201527f4e4f545f455243313135355f544f4b454e000000000000000000000000000000604482015260640161064d565b60008381526009602052604081205463ffffffff1690611faf85611974565b90506000611fbf603f6002613de8565b611fcf9063ffffffff8516613ec9565b611fe56b80000000000000000000000088613d57565b611fef9190613d57565b9050611ffc836001613d6f565b600087815260096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff9290921691909117905561204987876001612e7b565b6011546040516001600160a01b03909116906394d008ef9087908490612073908790602001613ced565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016120a093929190613c66565b600060405180830381600087803b1580156120ba57600080fd5b505af11580156120ce573d6000803e3d6000fd5b50506040518392508891507faa923cda6d3360ee3cd49c083ac1fe5e062a5739b82a32d597a65168c0c6926c90600090a39695505050505050565b600080610100602084020491506121236020610100613d8e565b61212d9084613f4a565b9050915091565b6000806121476001640100000000613ee8565b90506000612156846001613d57565b612161906020613ec9565b61216d90610100613ee8565b9490941c169392505050565b6010546000906001600160a01b03163314156121bc57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610902565b5033610902565b6000811180156121ea575060016121dc60206002613df7565b6121e69190613ee8565b8111155b6122365760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f414d4f554e54000000000000000000000000000000000000604482015260640161064d565b612241838383612e7b565b60006001600160a01b038416612255612179565b6001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051612298929190918252602082015260400190565b60405180910390a4505050565b8251600080808080866122fa5760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f2141555448000000000000000000000000000000000000604482015260640161064d565b60005b8681101561259f578a6001600160a01b03168c6001600160a01b0316141561237d576123788c8b838151811061234357634e487b7160e01b600052603260045260246000fd5b60200260200101518b848151811061236b57634e487b7160e01b600052603260045260246000fd5b6020026020010151612ef6565b61258d565b600089828151811061239f57634e487b7160e01b600052603260045260246000fd5b6020026020010151111561258d576123dd8a82815181106123d057634e487b7160e01b600052603260045260246000fd5b6020026020010151612109565b9096509450816124ab576001600160a01b038c1660009081526004602090815260408083208984529091529020548951879350612446919087908c908590811061243757634e487b7160e01b600052603260045260246000fd5b60200260200101516001612f85565b6001600160a01b038c1660009081526004602090815260408083208a84529091529020548a519195506124a49187908c908590811061249557634e487b7160e01b600052603260045260246000fd5b60200260200101516000612f85565b925061258d565b81861461250a576001600160a01b038c8116600090815260046020818152604080842087855280835281852099909955938f16835290815282822094825284815282822095909555878152948452808520549290935291909220549084905b612549858a838151811061252e57634e487b7160e01b600052603260045260246000fd5b6020026020010151600187612f85909392919063ffffffff16565b935061258a858a838151811061256f57634e487b7160e01b600052603260045260246000fd5b6020026020010151600086612f85909392919063ffffffff16565b92505b8061259781613f2f565b9150506122fd565b5084158015906125c15750896001600160a01b03168b6001600160a01b031614155b15612602576001600160a01b03808c1660009081526004602081815260408084208a85528252808420889055938e1683529081528282208883529052208290555b5050505050505050505050565b60006001600160a01b0385163b612628575060016126fa565b6040517fbc197c810000000000000000000000000000000000000000000000000000000081526000906001600160a01b0387169063bc197c8190612678908b908b908a908a908a90600401613bc5565b602060405180830381600087803b15801561269257600080fd5b505af11580156126a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ca9190613a4e565b6001600160e01b0319167fbc197c8100000000000000000000000000000000000000000000000000000000149150505b9695505050505050565b60008061271085612109565b6001600160a01b038816600090815260046020908152604080832085845290915290205491935091506127469082866002612f85565b6001600160a01b03878116600081815260046020908152604080832088845282528083209590955584518a8152908101899052919390928b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46127ba87600088888888612dab565b611e715760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a4543544544000000000000000000000000000000604482015260640161064d565b600181600e54901c166001141561285f5760405162461bcd60e51b815260206004820152601360248201527f414c52454144595f494e495449414c4953454400000000000000000000000000604482015260640161064d565b806001901b600e5417600e8190555050565b600080851180156128995750600161288b60206002613df7565b6128959190613ee8565b8511155b6128e55760405162461bcd60e51b815260206004820152601460248201527f535550504c595f4f55545f4f465f424f554e4453000000000000000000000000604482015260640161064d565b61ffff82166128f6600b6002613df7565b6129049061ffff8616613ec9565b61291060176002613df7565b6129219064ffffffffff8816613ec9565b61292d603f6002613df7565b600f54612955919074010000000000000000000000000000000000000000900460ff16613ec9565b8860011461296457600061297b565b612970605f6002613df7565b61297b906001613ec9565b61298760606002613df7565b61299a906001600160a01b038d16613ec9565b6129a49190613d57565b6129ae9190613d57565b6129b89190613d57565b6129c29190613d57565b6126fa9190613d57565b6001600160a01b038316612a225760405162461bcd60e51b815260206004820152600960248201527f53454e4445523d3d300000000000000000000000000000000000000000000000604482015260640161064d565b816001600160a01b0316836001600160a01b03161415612a845760405162461bcd60e51b815260206004820152601060248201527f53454e4445523d3d4f50455241544f5200000000000000000000000000000000604482015260640161064d565b6001600160a01b038216612ada5760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d30000000000000000000000000000000000000000000604482015260640161064d565b6001600160a01b03821660009081526001602052604090205460ff1615612b435760405162461bcd60e51b815260206004820152601b60248201527f415050525f4558495354494e475f53555045524f50455241544f520000000000604482015260640161064d565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60005b82518161ffff161015612bde57612bcc81848787613113565b612bd7600882613d31565b9050612bb3565b6105df612be9612179565b86868686613242565b600080612bfd612179565b90506000816001600160a01b0316876001600160a01b03161480612c265750612c268783611b7c565b905080612c755760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f2141555448000000000000000000000000000000000000604482015260640161064d565b8315612d3157600080612c8787612109565b6001600160a01b038b1660009081526004602090815260408083208584529091529020549193509150612cbd9082886001612f85565b6001600160a01b03808b166000908152600460208181526040808420888552825280842095909555928c168252825282812085825290915290812054612d069183908990612f85565b6001600160a01b03891660009081526004602090815260408083209583529490529290922091909155505b6010546001600160a01b038088169189821691163314612d515783612d53565b885b6001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051612d96929190918252602082015260400190565b60405180910390a45060019695505050505050565b60006001600160a01b0385163b612dc4575060016126fa565b6040517ff23a6e6100000000000000000000000000000000000000000000000000000000808252906001600160a01b0387169063f23a6e6190612e13908b908b908a908a908a90600401613c23565b602060405180830381600087803b158015612e2d57600080fd5b505af1158015612e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e659190613a4e565b6001600160e01b03191614979650505050505050565b600080612e8784612109565b6001600160a01b03871660009081526004602090815260408083208584529091529020549193509150612ec7908263ffffffff80871690600190612f8516565b6001600160a01b0390951660009081526004602090815260408083209483529390529190912093909355505050565b600080612f0284612109565b6001600160a01b038716600090815260046020908152604080832085845290915290205491935091508390612f379083612134565b10156105df5760405162461bcd60e51b815260206004820152600f60248201527f42414c414e43455f544f4f5f4c4f570000000000000000000000000000000000604482015260640161064d565b60008080836002811115612fa957634e487b7160e01b600052602160045260246000fd5b1415612fd657612fb98686612134565b9050612fcf8686612fca8785613d57565b6132f5565b915061310a565b6001836002811115612ff857634e487b7160e01b600052602160045260246000fd5b141561308f576130088686612134565b9050838110156130805760405162461bcd60e51b815260206004820152602260248201527f63616e277420737562737472616374206d6f7265207468616e2074686572652060448201527f6973000000000000000000000000000000000000000000000000000000000000606482015260840161064d565b612fcf8686612fca8785613ee8565b60028360028111156130b157634e487b7160e01b600052602160045260246000fd5b14156130c257612fcf8686866132f5565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c6964206f7065726174696f6e000000000000000000000000000000604482015260640161064d565b50949350505050565b60008061313d838761ffff16815181106123d057634e487b7160e01b600052603260045260246000fd5b9150915060005b6008811080156131615750855161315f8261ffff8a16613d57565b105b15611e715760006131768261ffff8a16613d57565b9050600087828151811061319a57634e487b7160e01b600052603260045260246000fd5b6020026020010151111561322f5761320a6131b58385613d57565b8883815181106131d557634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038a1660009081526004835260408082208a8352909352918220549291612f85565b6001600160a01b03871660009081526004602090815260408083208884529091529020555b508061323a81613f2f565b915050613144565b836001600160a01b031660006001600160a01b0316866001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051613292929190613cc8565b60405180910390a46132a98560008686868661260f565b6105df5760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a4543544544000000000000000000000000000000604482015260640161064d565b600061330360206002613de8565b82106133775760405162461bcd60e51b815260206004820152602360248201527f416d6f756e7420746f20777269746520696e2062696e20697320746f6f206c6160448201527f7267650000000000000000000000000000000000000000000000000000000000606482015260840161064d565b60006133896001640100000000613ee8565b90506000613398856001613d57565b6133a3906020613ec9565b6133af90610100613ee8565b91821b199590951692901b919091179392505050565b60008083601f8401126133d6578182fd5b50813567ffffffffffffffff8111156133ed578182fd5b602083019150836020808302850101111561340757600080fd5b9250929050565b8035801515811461076c57600080fd5b60008083601f84011261342f578182fd5b50813567ffffffffffffffff811115613446578182fd5b60208301915083602082850101111561340757600080fd5b60006020828403121561346f578081fd5b81356115e981613fa0565b6000806040838503121561348c578081fd5b823561349781613fa0565b915060208301356134a781613fa0565b809150509250929050565b600080600080600060a086880312156134c9578081fd5b85356134d481613fa0565b945060208601356134e481613fa0565b935060408601356134f481613fa0565b9250606086013561350481613fa0565b9150608086013560ff81168114613519578182fd5b809150509295509295909350565b60008060008060008060008060a0898b031215613542578283fd5b883561354d81613fa0565b9750602089013561355d81613fa0565b9650604089013567ffffffffffffffff80821115613579578485fd5b6135858c838d016133c5565b909850965060608b013591508082111561359d578485fd5b6135a98c838d016133c5565b909650945060808b01359150808211156135c1578384fd5b506135ce8b828c0161341e565b999c989b5096995094979396929594505050565b6000806000606084860312156135f6578283fd5b833561360181613fa0565b9250602084013561361181613fa0565b915061361f6040850161340e565b90509250925092565b60008060008060008060a08789031215613640578182fd5b863561364b81613fa0565b9550602087013561365b81613fa0565b94506040870135935060608701359250608087013567ffffffffffffffff811115613684578283fd5b61369089828a0161341e565b979a9699509497509295939492505050565b60008060008060008060006080888a0312156136bc578081fd5b87356136c781613fa0565b9650602088013567ffffffffffffffff808211156136e3578283fd5b6136ef8b838c016133c5565b909850965060408a0135915080821115613707578283fd5b6137138b838c016133c5565b909650945060608a013591508082111561372b578283fd5b506137388a828b0161341e565b989b979a50959850939692959293505050565b6000806040838503121561375d578182fd5b823561376881613fa0565b91506137766020840161340e565b90509250929050565b60008060408385031215613791578182fd5b823561379c81613fa0565b946020939093013593505050565b6000806000606084860312156137be578081fd5b83356137c981613fa0565b92506020840135915060408401356137e081613fa0565b809150509250925092565b6000806000606084860312156137ff578081fd5b833561380a81613fa0565b95602085013595506040909401359392505050565b600080600080600060808688031215613836578283fd5b853561384181613fa0565b94506020860135935060408601359250606086013567ffffffffffffffff81111561386a578182fd5b6138768882890161341e565b969995985093965092949392505050565b600080600080600080600060c0888a0312156138a1578081fd5b87356138ac81613fa0565b9650602088013564ffffffffff811681146138c5578182fd5b9550604088013594506060880135935060808801356138e381613fa0565b925060a088013567ffffffffffffffff8111156138fe578182fd5b6137388a828b0161341e565b6000806000806040858703121561391f578182fd5b843567ffffffffffffffff80821115613936578384fd5b613942888389016133c5565b9096509450602087013591508082111561395a578384fd5b50613967878288016133c5565b95989497509550505050565b60006020808385031215613985578182fd5b823567ffffffffffffffff8082111561399c578384fd5b818501915085601f8301126139af578384fd5b8135818111156139c1576139c1613f8a565b83810291506139d1848301613d00565b8181528481019084860184860187018a10156139eb578788fd5b8795505b83861015613a0d5780358352600195909501949186019186016139ef565b5098975050505050505050565b600060208284031215613a2b578081fd5b5035919050565b600060208284031215613a43578081fd5b81356115e981613fb8565b600060208284031215613a5f578081fd5b81516115e981613fb8565b600060208284031215613a7b578081fd5b815167ffffffffffffffff80821115613a92578283fd5b818401915084601f830112613aa5578283fd5b815181811115613ab757613ab7613f8a565b613aca6020601f19601f84011601613d00565b9150808252856020828501011115613ae0578384fd5b61310a816020840160208601613eff565b60008060408385031215613b03578182fd5b50508035926020909101359150565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115613b43578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015613b8e57815187529582019590820190600101613b72565b509495945050505050565b60008151808452613bb1816020860160208601613eff565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a06040830152613bf160a0830186613b5f565b8281036060840152613c038186613b5f565b90508281036080840152613c178185613b99565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613c5b60a0830184613b99565b979650505050505050565b60006001600160a01b0385168252836020830152606060408301526106956060830184613b99565b600060408252613ca2604083018688613b12565b8281036020840152613c5b818587613b12565b6000602082526115e96020830184613b5f565b600060408252613cdb6040830185613b5f565b82810360208401526106958185613b5f565b6000602082526115e96020830184613b99565b604051601f8201601f1916810167ffffffffffffffff81118282101715613d2957613d29613f8a565b604052919050565b600061ffff808316818516808303821115613d4e57613d4e613f5e565b01949350505050565b60008219821115613d6a57613d6a613f5e565b500190565b600063ffffffff808316818516808303821115613d4e57613d4e613f5e565b600082613d9d57613d9d613f74565b500490565b80825b6001808611613db45750613ddf565b818704821115613dc657613dc6613f5e565b80861615613dd357918102915b9490941c938002613da5565b94509492505050565b60006115e96000198484613e05565b60006115e960001960ff8516845b600082613e14575060016115e9565b81613e21575060006115e9565b8160018114613e375760028114613e4157613e6e565b60019150506115e9565b60ff841115613e5257613e52613f5e565b6001841b915084821115613e6857613e68613f5e565b506115e9565b5060208310610133831016604e8410600b8410161715613ea1575081810a83811115613e9c57613e9c613f5e565b6115e9565b613eae8484846001613da2565b808604821115613ec057613ec0613f5e565b02949350505050565b6000816000190483118215151615613ee357613ee3613f5e565b500290565b600082821015613efa57613efa613f5e565b500390565b60005b83811015613f1a578181015183820152602001613f02565b83811115613f29576000848401525b50505050565b6000600019821415613f4357613f43613f5e565b5060010190565b600082613f5957613f59613f74565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613fb557600080fd5b50565b6001600160e01b031981168114613fb557600080fdfea26469706673582212204347d4b5bbe40c3ea73acb008d656ee2ebe7ac964163da83f53e39e3c488d36f64736f6c63430008020033",
  "libraries": {
    "ERC1155ERC721Helper": "0x00E9e534777fB51aAbA8F5cCb51d5D528C283BA2",
    "AssetHelper": "0xfeB0bD6ea6F0728005CBB71e961c546e07Cc0989"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "id": "the token type of which to get the balance of.",
          "owner": "The address of the token holder."
        },
        "returns": {
          "_0": "the balance of `owner` for the token type `id`."
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "ids": "ids of each token type to query.",
          "owners": "the addresses of the token holders queried."
        },
        "returns": {
          "_0": "the balance of each `owners` for each token type `ids`."
        }
      },
      "burn(uint256,uint256)": {
        "params": {
          "amount": "amount of token to burn.",
          "id": "token type which will be burnt."
        }
      },
      "burnFrom(address,uint256,uint256)": {
        "params": {
          "amount": "amount of token to burn.",
          "from": "address whose token is to be burnt.",
          "id": "token type which will be burnt."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "changeBouncerAdmin(address)": {
        "params": {
          "newBouncerAdmin": "address of the new minting administrator."
        }
      },
      "collectionIndexOf(uint256)": {
        "params": {
          "id": "the token to get the index of."
        },
        "returns": {
          "_0": "the index/order at which the token `id` was minted in a collection."
        }
      },
      "collectionOf(uint256)": {
        "params": {
          "id": "the token to get the collection of."
        },
        "returns": {
          "_0": "the collection the NFT is part of."
        }
      },
      "extractERC721From(address,uint256,address)": {
        "params": {
          "id": "the token type to extract from.",
          "sender": "address which own the token to be extracted.",
          "to": "address which will receive the token."
        },
        "returns": {
          "_0": "newId the id of the newly minted NFT."
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getBouncerAdmin()": {
        "returns": {
          "_0": "the current minting administrator in charge of minting rights."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "address of authorized operator.",
          "owner": "the owner of the tokens."
        },
        "returns": {
          "isOperator": "true if the operator is approved, false if not."
        }
      },
      "isBouncer(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has minting rights."
        }
      },
      "isCollection(uint256)": {
        "params": {
          "id": "collectionId to check."
        },
        "returns": {
          "_0": "whether the id is a collection."
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "mint(address,uint256,uint256,bytes)": {
        "details": "Should be callable only by AssetERC1155Tunnel.Encoded bytes32 metadata hash must be provided as data. Make sure minting is done only by this function.",
        "params": {
          "account": "user address for whom token is being minted.",
          "amount": "amount of token being minted.",
          "data": "token metadata.",
          "id": "token which is being minted."
        }
      },
      "mint(address,uint40,bytes32,uint256,address,bytes)": {
        "details": "Function implementation reserved for future use cases on L1.For this function it is not required to provide data.",
        "params": {
          "creator": "address of the creator of the token.",
          "data": "extra data to accompany the minting call.",
          "hash": "hash of an IPFS cidv1 folder that contains the metadata of the token type in the file 0.json.",
          "owner": "address that will receive the tokens.",
          "packId": "unique packId for that token.",
          "supply": "number of tokens minted for that token type."
        },
        "returns": {
          "id": "the id of the newly minted token type."
        }
      },
      "mintMultiple(address,uint256[],uint256[],bytes)": {
        "details": "Should be callable only by AssetERC1155Tunnel.Encoded bytes32[] metadata hashes must be provided as data.",
        "params": {
          "amounts": "supply for each token type.",
          "data": "token metadata.",
          "ids": "ids to mint.",
          "to": "address to mint to."
        }
      },
      "name()": {
        "returns": {
          "_name": "the name of the tokens."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "call data should be optimized to order ids so packedBalance can be used efficiently.",
        "params": {
          "data": "aditional data accompanying the transfer.",
          "from": "address from which tokens are transfered.",
          "ids": "ids of each token type transfered.",
          "to": "address to which the token will be transfered.",
          "values": "amount of each token type transfered."
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "data": "aditional data accompanying the transfer.",
          "from": "address from which tokens are transfered.",
          "id": "the token type transfered.",
          "to": "address to which the token will be transfered.",
          "value": "amount of token transfered."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "whether to approve or revoke",
          "operator": "address which will be granted rights to transfer all tokens of the caller."
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "details": "used for Meta Transaction (from metaTransactionContract).",
        "params": {
          "approved": "whether to approve or revoke.",
          "operator": "address which will be granted rights to transfer all token owned by `sender`.",
          "sender": "address which grant approval."
        }
      },
      "setBouncer(address,bool)": {
        "params": {
          "bouncer": "address that will be given/removed minting bouncer rights.",
          "enabled": "set whether the address is enabled or disabled as a minting bouncer."
        }
      },
      "setPredicate(address)": {
        "params": {
          "predicate": "address that will be given minting rights for L1."
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "the interface identifier, as specified in ERC-165."
        },
        "returns": {
          "_0": "`true` if the contract implements `id`."
        }
      },
      "symbol()": {
        "returns": {
          "_symbol": "the symbol of the tokens."
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "id": "token to get the uri of."
        },
        "returns": {
          "_0": "URI string"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "Get the balance of `owner` for the token type `id`."
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "Get the balance of `owners` for each token type `ids`."
      },
      "burn(uint256,uint256)": {
        "notice": "Burns `amount` tokens of type `id`."
      },
      "burnFrom(address,uint256,uint256)": {
        "notice": "Burns `amount` tokens of type `id` from `from`."
      },
      "changeBouncerAdmin(address)": {
        "notice": "Change the minting administrator to be `newBouncerAdmin`."
      },
      "collectionIndexOf(uint256)": {
        "notice": "Gives the index at which an NFT was minted in a collection : first of a collection get the zero index."
      },
      "collectionOf(uint256)": {
        "notice": "Gives the collection a specific token belongs to."
      },
      "extractERC721From(address,uint256,address)": {
        "notice": "Extracts an EIP-721 Asset from an EIP-1155 Asset."
      },
      "getBouncerAdmin()": {
        "notice": "Returns the current administrator in charge of minting rights."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Queries the approval status of `operator` for owner `owner`."
      },
      "isBouncer(address)": {
        "notice": "check whether address `who` is given minting bouncer rights."
      },
      "isCollection(uint256)": {
        "notice": "Return wether the id is a collection"
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "mint(address,uint256,uint256,bytes)": {
        "notice": "Creates `amount` tokens of token type `id`, and assigns them to `account`."
      },
      "mint(address,uint40,bytes32,uint256,address,bytes)": {
        "notice": "Mint a token type for `creator` on slot `packId`."
      },
      "mintMultiple(address,uint256[],uint256[],bytes)": {
        "notice": "Creates `amounts` tokens of token types `ids`, and assigns them to `account`."
      },
      "name()": {
        "notice": "A descriptive name for the collection of tokens in this contract."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call)."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call)."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Enable or disable approval for `operator` to manage all of the caller's tokens."
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Enable or disable approval for `operator` to manage all `sender`'s tokens."
      },
      "setBouncer(address,bool)": {
        "notice": "Enable or disable the ability of `bouncer` to mint tokens (minting bouncer rights)."
      },
      "setPredicate(address)": {
        "notice": "Set the address that will be able to mint on L1 (limited to custom predicate)."
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements interface `id`."
      },
      "symbol()": {
        "notice": "An abbreviated name for the collection of tokens in this contract."
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31360,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31752,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_superOperators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20465,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_numNFTPerAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20469,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 20475,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_packedTokenBalance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 20481,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 20485,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_erc721operators",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 20489,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_metadataHash",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 20493,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_rarityPacks",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 20497,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_nextCollectionIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 20501,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_creatorship",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 20505,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_bouncers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20509,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_metaTransactionContracts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20511,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_bouncerAdmin",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 20513,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_init",
        "offset": 20,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 20518,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_initBits",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 20520,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_predicate",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 20522,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_chainIndex",
        "offset": 20,
        "slot": "15",
        "type": "t_uint8"
      },
      {
        "astId": 20524,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 20527,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_assetERC721",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IAssetERC721)33132"
      },
      {
        "astId": 20531,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_uint256)20_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)20_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[20]",
        "numberOfBytes": "640"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IAssetERC721)33132": {
        "encoding": "inplace",
        "label": "contract IAssetERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}