{
  "address": "0xec552B17995198A0e71E9198D047B5Ec42710359",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEstateToken",
          "name": "_estateToken",
          "type": "address"
        },
        {
          "internalType": "contract IExperienceToken",
          "name": "_experienceToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC721",
          "name": "_landToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "expIdsToUnlink",
          "type": "uint256[]"
        }
      ],
      "name": "batchUnLinkFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estateToken",
      "outputs": [
        {
          "internalType": "contract IEstateToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "experienceToken",
      "outputs": [
        {
          "internalType": "contract IExperienceToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expId",
          "type": "uint256"
        }
      ],
      "name": "isLinked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][3]",
          "name": "quads",
          "type": "uint256[][3]"
        }
      ],
      "name": "isLinked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[3]",
                  "name": "data",
                  "type": "uint256[3]"
                }
              ],
              "internalType": "struct TileLib.Tile",
              "name": "tile",
              "type": "tuple"
            }
          ],
          "internalType": "struct TileWithCoordLib.TileWithCoord[]",
          "name": "tiles",
          "type": "tuple[]"
        }
      ],
      "name": "isLinked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "landToken",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "link",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "linkSingle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "expIdsToUnlink",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "estateId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExperienceEstateRegistry.RelinkData[]",
          "name": "expToLink",
          "type": "tuple[]"
        }
      ],
      "name": "relink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expId",
          "type": "uint256"
        }
      ],
      "name": "unLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa9437e77d38766c00de6b5ed5d8451e673a11bb32961d998eccefd8de59c395f",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0xec552B17995198A0e71E9198D047B5Ec42710359",
    "transactionIndex": 0,
    "gasUsed": "1946514",
    "logsBloom": "0x
    "blockHash": "0x4390125e12e6d9c1d4d3ca92989598aedfa82b05aabc16a03b5a9b00ee182139",
    "transactionHash": "0xa9437e77d38766c00de6b5ed5d8451e673a11bb32961d998eccefd8de59c395f",
    "logs": [],
    "blockNumber": 30680783,
    "cumulativeGasUsed": "1946514",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x376698f160E16978f2Cc0339ff72887923E5F3a1",
    "0x43E77eC0D2079A046736969391F0b9e7CE3f4A45",
    "0x9d305a42A3975Ee4c1C57555BeD5919889DCE63F"
  ],
  "numDeployments": 1,
  "solcInputHash": "6b6bb51793ac28176be0d330acf83587",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEstateToken\",\"name\":\"_estateToken\",\"type\":\"address\"},{\"internalType\":\"contract IExperienceToken\",\"name\":\"_experienceToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_landToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"expIdsToUnlink\",\"type\":\"uint256[]\"}],\"name\":\"batchUnLinkFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estateToken\",\"outputs\":[{\"internalType\":\"contract IEstateToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"experienceToken\",\"outputs\":[{\"internalType\":\"contract IExperienceToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expId\",\"type\":\"uint256\"}],\"name\":\"isLinked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][3]\",\"name\":\"quads\",\"type\":\"uint256[][3]\"}],\"name\":\"isLinked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct TileLib.Tile\",\"name\":\"tile\",\"type\":\"tuple\"}],\"internalType\":\"struct TileWithCoordLib.TileWithCoord[]\",\"name\":\"tiles\",\"type\":\"tuple[]\"}],\"name\":\"isLinked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landToken\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"link\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"linkSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"expIdsToUnlink\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct ExperienceEstateRegistry.RelinkData[]\",\"name\":\"expToLink\",\"type\":\"tuple[]\"}],\"name\":\"relink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expId\",\"type\":\"uint256\"}],\"name\":\"unLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contract managing tExperiences and Estates\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/child/estate/ExperienceEstateRegistry.sol\":\"ExperienceEstateRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/MapLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/* solhint-disable code-complexity */\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {TileWithCoordLib} from \\\"./TileWithCoordLib.sol\\\";\\nimport {TileLib} from \\\"./TileLib.sol\\\";\\n\\n/// @title An iterable mapping of Tiles (24x24 bit set).\\n/// @notice Used to represent a the presence or absence of certain x,y coordinate in a map of lands\\n/// @dev The key of the mapping is a combination of x and y.\\n/// @dev This library try to reduce the gas consumption and to do that it accesses the internal structure of the Tiles\\nlibrary MapLib {\\n    using TileWithCoordLib for TileWithCoordLib.TileWithCoord;\\n    using TileLib for TileLib.Tile;\\n\\n    uint256 private constant LEFT_MASK = 0x000001000001000001000001000001000001000001000001;\\n    uint256 private constant LEFT_MASK_NEG = ~LEFT_MASK;\\n    uint256 private constant RIGHT_MASK = 0x800000800000800000800000800000800000800000800000;\\n    uint256 private constant RIGHT_MASK_NEG = ~RIGHT_MASK;\\n    uint256 private constant UP_MASK = 0x000000000000000000000000000000000000000000FFFFFF;\\n    uint256 private constant DOWN_MASK = 0xFFFFFF000000000000000000000000000000000000000000;\\n\\n    struct TranslateResult {\\n        TileWithCoordLib.TileWithCoord topLeft;\\n        TileWithCoordLib.TileWithCoord topRight;\\n        TileWithCoordLib.TileWithCoord bottomLeft;\\n        TileWithCoordLib.TileWithCoord bottomRight;\\n    }\\n\\n    // An iterable mapping of tiles (24x24 bit set).\\n    struct Map {\\n        TileWithCoordLib.TileWithCoord[] values;\\n        // Position of the value in the `values` array, plus 1 because index 0 means that the key is not found.\\n        mapping(uint256 => uint256) indexes;\\n    }\\n\\n    /// @notice Set the bits inside a square that has size x size in the x,y coordinates in the map\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map in which the bits are set\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    function set(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            // Add a new tile\\n            TileWithCoordLib.TileWithCoord memory t = TileWithCoordLib.init(x, y);\\n            self.values.push(t.set(x, y, size));\\n            self.indexes[key] = self.values.length;\\n        } else {\\n            // contains\\n            self.values[idx - 1] = self.values[idx - 1].set(x, y, size);\\n        }\\n    }\\n\\n    /// @notice Given a translation of a tile the corresponding bits are set in the current map\\n    /// @param self the Map in which the bits are set\\n    /// @param s translation result, the result of a translation of a tile are four tiles.\\n    function set(Map storage self, TranslateResult memory s) public {\\n        set(self, s.topLeft);\\n        set(self, s.topRight);\\n        set(self, s.bottomLeft);\\n        set(self, s.bottomRight);\\n    }\\n\\n    /// @notice Given a TileWithCoord (a tile that includes coordinates inside it) set the corresponding bits in the map\\n    /// @param self the Map in which the bits are set\\n    /// @param tile the tile that is used to set the bits inside the map\\n    function set(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public {\\n        if (tile.isEmpty()) {\\n            return;\\n        }\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            // Add a new tile\\n            self.values.push(tile);\\n            self.indexes[key] = self.values.length;\\n        } else {\\n            self.values[idx - 1] = self.values[idx - 1].merge(tile);\\n        }\\n    }\\n\\n    /// @notice Merge the bits of a list of TileWithCoord in the current one\\n    /// @param self the Map in which the bits are set\\n    /// @param tiles the list of TileWithCoord\\n    function set(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            set(self, tiles[i]);\\n        }\\n    }\\n\\n    /// @notice Merge the bits of another map in the current one\\n    /// @param self the Map in which the bits are set\\n    /// @param other the map that is used as source to set the bits in the current one\\n    function set(Map storage self, Map storage other) public {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            set(self, other.values[i]);\\n        }\\n    }\\n\\n    /// @notice Clear the bits inside a square that has size x size in the x,y coordinates in the map\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map, in which the bits will be cleared\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return false if the the coordinates are not found so the bits are already cleared\\n    function clear(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains, nothing to clear\\n            return false;\\n        }\\n        TileWithCoordLib.TileWithCoord memory t = self.values[idx - 1].clear(x, y, size);\\n        if (t.isEmpty()) {\\n            _remove(self, idx, key);\\n        } else {\\n            self.values[idx - 1] = t;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Given a TileWithCoord (a tile that includes coordinates inside it) clear the corresponding bits in the map\\n    /// @param self the Map, in which the bits will be cleared\\n    /// @param tile the tile that is used to clear the bits inside the map\\n    /// @return false if the the coordinates are not found so the bits are already cleared\\n    function clear(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public returns (bool) {\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        TileWithCoordLib.TileWithCoord memory t = self.values[idx - 1].clear(tile);\\n        if (t.isEmpty()) {\\n            _remove(self, idx, key);\\n        } else {\\n            self.values[idx - 1] = t;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Clear the bits of a list of TileWithCoord\\n    /// @param self the Map in which the bits are cleared\\n    /// @param tiles the list of TileWithCoord\\n    function clear(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            clear(self, tiles[i]);\\n        }\\n    }\\n\\n    /// @notice Clear the bits of another map in the current one\\n    /// @param self the Map in which the bits are cleared\\n    /// @param other the map that is used as source to clear the bits in the current one\\n    function clear(Map storage self, Map storage other) public {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            clear(self, other.values[i]);\\n        }\\n    }\\n\\n    /// @notice Clear the all the bits in the map\\n    /// @param self the Map in which the bits are cleared\\n    function clear(Map storage self) public {\\n        for (uint256 i; i < self.values.length; i++) {\\n            delete self.indexes[self.values[i].getKey()];\\n        }\\n        delete self.values;\\n    }\\n\\n    /// @notice given a tile, translate all the bits in the x and y direction\\n    /// @dev the result of the translation are four tiles\\n    /// @param deltaX the x distance to translate\\n    /// @param deltaY the y distance to translate\\n    /// @return four tiles with coords that are the result of the translation\\n    function translate(\\n        TileLib.Tile memory tile,\\n        uint256 deltaX,\\n        uint256 deltaY\\n    ) internal pure returns (TranslateResult memory) {\\n        (uint256[6] memory col1, uint256[6] memory col2) = tile.translate(deltaX % 24, deltaY % 24);\\n        return\\n            TranslateResult({\\n                topLeft: TileWithCoordLib.init(deltaX, deltaY, col1[0], col1[1], col1[2]),\\n                bottomLeft: TileWithCoordLib.init(deltaX, deltaY + 24, col1[3], col1[4], col1[5]),\\n                topRight: TileWithCoordLib.init(deltaX + 24, deltaY, col2[0], col2[1], col2[2]),\\n                bottomRight: TileWithCoordLib.init(deltaX + 24, deltaY + 24, col2[3], col2[4], col2[5])\\n            });\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate are set or not inside the map\\n    /// @param self the Map where the check is done\\n    /// @param x the x coordinate\\n    /// @param y the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function contain(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y\\n    ) public view returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].contain(x, y);\\n    }\\n\\n    /// @notice Check if the all the bits of a square inside the Map are set or not\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if al the bits are set or false if at least one bit is cleared\\n    function contain(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public view returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].contain(x, y, size);\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in a TileWithCoord\\n    /// @param self the Map that is checked for inclusion\\n    /// @param tile the TileWithCoord that must be included\\n    /// @return true if self contain tile TileWithCoord\\n    function contain(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public view returns (bool) {\\n        if (tile.isEmpty()) {\\n            return true;\\n        }\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].tile.contain(tile.tile);\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in a TileWithCoord[]\\n    /// @param self the Map that is checked for inclusion\\n    /// @param tiles the TileWithCoord that must be included\\n    /// @return true if self contain tiles TileWithCoord[]\\n    function contain(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public view returns (bool) {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            if (!contain(self, tiles[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in translation result\\n    /// @dev this routine is used to match an experience template after translation\\n    /// @param self the bigger Tile that is checked for inclusion\\n    /// @param s the translation result that must be included\\n    /// @return true if self contain all the bits in the translation result\\n    function contain(Map storage self, TranslateResult memory s) public view returns (bool) {\\n        return\\n            contain(self, s.topLeft) &&\\n            contain(self, s.topRight) &&\\n            contain(self, s.bottomLeft) &&\\n            contain(self, s.bottomRight);\\n    }\\n\\n    /// @notice Check if a Map includes all the bits that are set in another Map\\n    /// @dev self can be huge, but other must be small, we iterate over other values.\\n    /// @param self the Map that is checked for inclusion\\n    /// @param other the Map that must be included\\n    /// @return true if self contain other Map\\n    function contain(Map storage self, Map storage other) public view returns (bool) {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            if (!contain(self, other.values[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if a map has at least one bit in common with a square (x,y,size)\\n    /// @dev the coordinates must be % size and size can be 1, 3, 6, 12 and 24 to match the Quads in the land contract\\n    /// @param self the Map where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if there is at least one bit set in both the Map and the square\\n    function intersect(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public view returns (bool) {\\n        uint256 key = TileWithCoordLib.getKey(x, y);\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !intersect\\n            return false;\\n        }\\n        return self.values[idx - 1].intersect(x, y, size);\\n    }\\n\\n    /// @notice Check if a map has at least one bit in common with some TileWithCoord\\n    /// @param self the Map to compare\\n    /// @param tile the TileWithCoord to compare\\n    /// @return true if there is at least one bit set in both the Map and the TileWithCoord\\n    function intersect(Map storage self, TileWithCoordLib.TileWithCoord memory tile) public view returns (bool) {\\n        if (tile.isEmpty()) {\\n            return false;\\n        }\\n        uint256 key = tile.getKey();\\n        uint256 idx = self.indexes[key];\\n        if (idx == 0) {\\n            // !contains\\n            return false;\\n        }\\n        return self.values[idx - 1].tile.intersect(tile.tile);\\n    }\\n\\n    /// @notice Check if a Map has at least one of the bits that are set in a TileWithCoord[]\\n    /// @param self the Map that is checked for inclusion\\n    /// @param tiles the TileWithCoord that must be included\\n    /// @return true if there is at least one bit set in both the Map and the TileWithCoord[]\\n    function intersect(Map storage self, TileWithCoordLib.TileWithCoord[] memory tiles) public view returns (bool) {\\n        uint256 len = tiles.length;\\n        for (uint256 i; i < len; i++) {\\n            if (intersect(self, tiles[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Check if a map has at least one bit in common with some translation result\\n    /// @param self the Map to compare\\n    /// @param s the four tiles that are the result of a translation\\n    /// @return true if there is at least one bit set in both the Map and the TranslationResult\\n    function intersect(Map storage self, TranslateResult memory s) public view returns (bool) {\\n        return\\n            intersect(self, s.topLeft) ||\\n            intersect(self, s.topRight) ||\\n            intersect(self, s.bottomLeft) ||\\n            intersect(self, s.bottomRight);\\n    }\\n\\n    /// @notice Check if a Map includes any of the bits that are set in another Map\\n    /// @dev self can be huge, but other must be small, we iterate over other values.\\n    /// @param self the Map that is checked for inclusion\\n    /// @param other the Map that must be included\\n    /// @return true if there is at least one bit set in both Maps\\n    function intersect(Map storage self, Map storage other) public view returns (bool) {\\n        uint256 len = other.values.length;\\n        for (uint256 i; i < len; i++) {\\n            if (intersect(self, other.values[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Check if a map is empty (no bits are set)\\n    /// @param self the Map to check\\n    /// @return true if the map is empty\\n    function isEmpty(Map storage self) public view returns (bool) {\\n        // We remove the tiles when they are empty\\n        return self.values.length == 0;\\n    }\\n\\n    /// @notice Check if two maps are equal\\n    /// @param self the first Map to check\\n    /// @param other the second Map to check\\n    /// @return true if the two maps are equal\\n    function isEqual(Map storage self, Map storage other) public view returns (bool) {\\n        return isEqual(self, other.values);\\n    }\\n\\n    /// @notice Check if a map is equal to an array of TileWithCoord\\n    /// @param self the Map to check\\n    /// @param other the list of TileWithCoord to check\\n    /// @return true if the two are equal\\n    function isEqual(Map storage self, TileWithCoordLib.TileWithCoord[] memory other) public view returns (bool) {\\n        if (other.length != self.values.length) {\\n            return false;\\n        }\\n        uint256 cant = other.length;\\n        // Check that self contains the same set of tiles than other and they are equal\\n        for (uint256 i; i < cant; i++) {\\n            uint256 key = other[i].getKey();\\n            uint256 idx = self.indexes[key];\\n            if (idx == 0 || !self.values[idx - 1].isEqual(other[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice return the length of the internal list of tiles\\n    /// @dev used to iterate off-chain over the tiles.\\n    /// @param self the Map\\n    /// @return the length of the list\\n    function length(Map storage self) public view returns (uint256) {\\n        return self.values.length;\\n    }\\n\\n    /// @notice get the tile that is in certain position in the internal list of tiles\\n    /// @dev used to iterate off-chain over the tiles.\\n    /// @param self the Map\\n    /// @param index the index of the tile\\n    /// @return the tile that is in the position index in the list\\n    function at(Map storage self, uint256 index) public view returns (TileWithCoordLib.TileWithCoord memory) {\\n        return self.values[index];\\n    }\\n\\n    /// @notice get the internal list of tiles with pagination\\n    /// @dev used to iterate off-chain over the tiles.\\n    /// @param self the Map\\n    /// @param offset initial offset used to paginate\\n    /// @param limit amount of tiles to get\\n    /// @return the partial list of tiles\\n    function at(\\n        Map storage self,\\n        uint256 offset,\\n        uint256 limit\\n    ) public view returns (TileWithCoordLib.TileWithCoord[] memory) {\\n        TileWithCoordLib.TileWithCoord[] memory ret = new TileWithCoordLib.TileWithCoord[](limit);\\n        for (uint256 i; i < limit; i++) {\\n            ret[i] = self.values[offset + i];\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice return the internal list of tiles\\n    /// @dev Use only for testing. This can be problematic if it grows too much !!!\\n    /// @param self the map\\n    /// @return the list of internal tiles\\n    function getMap(Map storage self) public view returns (TileWithCoordLib.TileWithCoord[] memory) {\\n        return self.values;\\n    }\\n\\n    /// @notice count the amount of bits (lands) set inside a Map\\n    /// @param self the map\\n    /// @return the quantity of lands\\n    function getLandCount(Map storage self) public view returns (uint256) {\\n        uint256 ret;\\n        uint256 len = self.values.length;\\n        for (uint256 i; i < len; i++) {\\n            ret += self.values[i].countBits();\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice check if a square is adjacent (4-connected component) to the current map.\\n    /// @dev used to add a quad to a map, it is cheaper than isAdjacent(map)\\n    /// @param self the map\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if the square is 4-connected to the map\\n    function isAdjacent(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) public view returns (bool) {\\n        if (isEmpty(self)) {\\n            return true;\\n        }\\n\\n        uint256 idx;\\n        TileLib.Tile memory spot;\\n        spot = spot.set(x % 24, y % 24, size);\\n        // left\\n        if (x >= 24) {\\n            idx = _getIdx(self, x - 24, y);\\n            if (idx != 0 && !self.values[idx - 1].tile.and(_growLeft(spot)).isEmpty()) {\\n                return true;\\n            }\\n        }\\n        // up\\n        if (y >= 24) {\\n            idx = _getIdx(self, x, y - 24);\\n            if (idx != 0 && (self.values[idx - 1].tile.data[0] & ((spot.data[0] & UP_MASK) << (24 * 7))) != 0) {\\n                return true;\\n            }\\n        }\\n        // middle\\n        idx = _getIdx(self, x, y);\\n        if (idx != 0 && !self.values[idx - 1].tile.and(_growMiddle(spot)).isEmpty()) {\\n            return true;\\n        }\\n        // down\\n        idx = _getIdx(self, x, y + 24);\\n        if (idx != 0 && (self.values[idx - 1].tile.data[2] & ((spot.data[2] & DOWN_MASK) >> (24 * 7))) != 0) {\\n            return true;\\n        }\\n        // right\\n        idx = _getIdx(self, x + 24, y);\\n        if (idx != 0 && !self.values[idx - 1].tile.and(_growRight(spot)).isEmpty()) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice check that the map has only one 4-connected component, aka everything is adjacent\\n    /// @dev Checks the full map to see if all the pixels are adjacent\\n    /// @param self the map\\n    /// @return ret true if all the bits (lands) are adjacent\\n    function isAdjacent(Map storage self) public view returns (bool ret) {\\n        if (isEmpty(self)) {\\n            // everything is adjacent to an empty map\\n            return true;\\n        }\\n\\n        TileLib.Tile[] memory spot = new TileLib.Tile[](self.values.length);\\n        // We assume that all self.values[] are non empty (we remove them if they are empty).\\n        spot[0] = self.values[0].tile.findAPixel();\\n        bool done;\\n        while (!done) {\\n            (spot, done) = floodStep(self, spot);\\n        }\\n        uint256 len = self.values.length;\\n        uint256 i;\\n        for (; i < len; i++) {\\n            // Check the tile ignoring coordinates\\n            if (!self.values[i].tile.isEqual(spot[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice used to check adjacency. See: https://en.wikipedia.org/wiki/Flood_fill and isAdjacent.\\n    /// @param self the map\\n    /// @param current the current image\\n    /// @return next return the image with the extra pixels that correspond to the flooding process\\n    /// @return done true if the current image is the same as the next one so the algorithm is ready to stop flooding.\\n    function floodStep(Map storage self, TileLib.Tile[] memory current)\\n        public\\n        view\\n        returns (TileLib.Tile[] memory next, bool done)\\n    {\\n        uint256 len = self.values.length;\\n        uint256 i;\\n        uint256 x;\\n        uint256 y;\\n        uint256 idx;\\n        TileLib.Tile memory ci;\\n        next = new TileLib.Tile[](len);\\n        // grow\\n        for (i; i < len; i++) {\\n            ci = current[i];\\n            // isEmpty\\n            if ((ci.data[0] | ci.data[1] | ci.data[2]) == 0) {\\n                continue;\\n            }\\n            x = self.values[i].getX() * 24;\\n            y = self.values[i].getY() * 24;\\n\\n            // middle, always included\\n            next[i].data[0] |= _grow(ci.data[0]) | ((ci.data[1] & UP_MASK) << (24 * 7));\\n            next[i].data[1] |=\\n                _grow(ci.data[1]) |\\n                ((ci.data[2] & UP_MASK) << (24 * 7)) |\\n                ((ci.data[0] & DOWN_MASK) >> (24 * 7));\\n            next[i].data[2] |= _grow(ci.data[2]) | ((ci.data[1] & DOWN_MASK) >> (24 * 7));\\n            // left\\n            if (x >= 24) {\\n                idx = _getIdx(self, x - 24, y);\\n                if (idx != 0) {\\n                    next[idx - 1].data[0] |= (ci.data[0] & LEFT_MASK) << 23;\\n                    next[idx - 1].data[1] |= (ci.data[1] & LEFT_MASK) << 23;\\n                    next[idx - 1].data[2] |= (ci.data[2] & LEFT_MASK) << 23;\\n                }\\n            }\\n            // up\\n            if (y >= 24) {\\n                idx = _getIdx(self, x, y - 24);\\n                if (idx != 0) {\\n                    next[idx - 1].data[2] |= (ci.data[0] & UP_MASK) << (24 * 7);\\n                }\\n            }\\n            // down\\n            idx = _getIdx(self, x, y + 24);\\n            if (idx != 0) {\\n                next[idx - 1].data[0] |= (ci.data[2] & DOWN_MASK) >> (24 * 7);\\n            }\\n            // right\\n            idx = _getIdx(self, x + 24, y);\\n            if (idx != 0) {\\n                next[idx - 1].data[0] |= (ci.data[0] & RIGHT_MASK) >> 23;\\n                next[idx - 1].data[1] |= (ci.data[1] & RIGHT_MASK) >> 23;\\n                next[idx - 1].data[2] |= (ci.data[2] & RIGHT_MASK) >> 23;\\n            }\\n        }\\n        // Mask it.\\n        done = true;\\n        for (i = 0; i < len; i++) {\\n            // next[i] = next[i].and(self.values[i].tile);\\n            // done = done && next[i].isEqual(current[i]);\\n            next[i].data[0] &= self.values[i].tile.data[0];\\n            next[i].data[1] &= self.values[i].tile.data[1];\\n            next[i].data[2] &= self.values[i].tile.data[2];\\n            done =\\n                done &&\\n                next[i].data[0] == current[i].data[0] &&\\n                next[i].data[1] == current[i].data[1] &&\\n                next[i].data[2] == current[i].data[2];\\n        }\\n        return (next, done);\\n    }\\n\\n    /// @notice delete certain tile from the map\\n    /// @param self the Map where the tile is removed\\n    /// @param idx the index of the tile in the internal list\\n    /// @param key the key of the tile (combination of x,y)\\n    function _remove(\\n        Map storage self,\\n        uint256 idx,\\n        uint256 key\\n    ) private {\\n        uint256 toDeleteIndex = idx - 1;\\n        uint256 lastIndex = self.values.length - 1;\\n        if (lastIndex != toDeleteIndex) {\\n            TileWithCoordLib.TileWithCoord memory lastValue = self.values[lastIndex];\\n            self.values[toDeleteIndex] = lastValue;\\n            self.indexes[lastValue.getKey()] = idx;\\n        }\\n        self.values.pop();\\n        delete self.indexes[key];\\n    }\\n\\n    /// @notice given x and y return the index of the tile inside the internal list of tiles\\n    /// @param self the Map where the tile is removed\\n    /// @param x the x coordinate\\n    /// @param y the y coordinate\\n    /// @return the index in the list + 1 or zero if not found\\n    function _getIdx(\\n        Map storage self,\\n        uint256 x,\\n        uint256 y\\n    ) private view returns (uint256) {\\n        return self.indexes[TileWithCoordLib.getKey(x, y)];\\n    }\\n\\n    /// @notice grow (4-connected) the internal word that represent 8 lines of the tile adding pixels\\n    /// @param x the value of the internal work\\n    /// @return the internal work with the extra pixels from growing it\\n    function _grow(uint256 x) private pure returns (uint256) {\\n        return (x | ((x & RIGHT_MASK_NEG) << 1) | ((x & LEFT_MASK_NEG) >> 1) | (x << 24) | (x >> 24));\\n    }\\n\\n    /// @notice grow (4-connected) a tile adding pixels around those that exists\\n    /// @param self the tile to grow\\n    /// @return e the tile that results from adding all the 4-connected pixels\\n    function _growMiddle(TileLib.Tile memory self) internal pure returns (TileLib.Tile memory e) {\\n        e.data[0] = _grow(self.data[0]) | ((self.data[1] & UP_MASK) << (24 * 7));\\n        e.data[1] =\\n            _grow(self.data[1]) |\\n            ((self.data[2] & UP_MASK) << (24 * 7)) |\\n            ((self.data[0] & DOWN_MASK) >> (24 * 7));\\n        e.data[2] = _grow(self.data[2]) | ((self.data[1] & DOWN_MASK) >> (24 * 7));\\n        return e;\\n    }\\n\\n    /// @notice grow (4-connected) a tile adding pixels around those that exists\\n    /// @param self the tile to grow\\n    /// @return e the extra tile to the right that results from adding all the 4-connected pixels\\n    function _growRight(TileLib.Tile memory self) internal pure returns (TileLib.Tile memory e) {\\n        // for loop removed to save some gas.\\n        e.data[0] = (self.data[0] & RIGHT_MASK) >> 23;\\n        e.data[1] = (self.data[1] & RIGHT_MASK) >> 23;\\n        e.data[2] = (self.data[2] & RIGHT_MASK) >> 23;\\n        return e;\\n    }\\n\\n    /// @notice grow (4-connected) a tile adding pixels around those that exists\\n    /// @param self the tile to grow\\n    /// @return e the extra tile to the left that results from adding all the 4-connected pixels\\n    function _growLeft(TileLib.Tile memory self) internal pure returns (TileLib.Tile memory e) {\\n        e.data[0] = (self.data[0] & LEFT_MASK) << 23;\\n        e.data[1] = (self.data[1] & LEFT_MASK) << 23;\\n        e.data[2] = (self.data[2] & LEFT_MASK) << 23;\\n        return e;\\n    }\\n}\\n\",\"keccak256\":\"0xa851b13fc6ea0af93e3c72c00e1e9baec322bf99cc279c1d3f0b74d35a829672\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/TileLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @title An optimized bitset of 24x24 bits (used to represent maps)\\n/// @notice see: http://\\n/// @dev We store 8 lines of 24 bits in each uint256 and leave some free space.\\nlibrary TileLib {\\n    uint256 public constant PIXEL_MASK = 0x0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 public constant PIXEL_MASK_INV = 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000;\\n\\n    struct Tile {\\n        uint256[3] data;\\n    }\\n\\n    /// @notice init the tile with the internal data directly\\n    /// @return A Tile that has the bit data set\\n    function init(\\n        Tile memory self,\\n        uint256 pixelData1,\\n        uint256 pixelData2,\\n        uint256 pixelData3\\n    ) internal pure returns (Tile memory) {\\n        self.data[0] = pixelData1 & PIXEL_MASK;\\n        self.data[1] = pixelData2 & PIXEL_MASK;\\n        self.data[2] = pixelData3 & PIXEL_MASK;\\n        return self;\\n    }\\n\\n    /// @notice Set the bits inside a square that has size x size in the x,y coordinates\\n    /// @dev can be optimized for the specific case of a 24x24 square\\n    /// @param self the Tile in which the bits are set\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding bits set\\n    function set(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (Tile memory) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            self.data[idx] |= mask << (x + 24 * ((y + i) % 8));\\n        }\\n        return self;\\n    }\\n\\n    /// @notice Clear the bits inside a square that has size x size in the x,y coordinates\\n    /// @dev can be optimized for the specific case of a 24x24 square\\n    /// @param self the Tile in which the bits will be cleared\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding cleared bits\\n    function clear(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (Tile memory) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            self.data[idx] &= ~(mask << (x + 24 * ((y + i) % 8)));\\n        }\\n        return self;\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate inside the Tile is set or not, if not set it.\\n    /// @dev this routine is a combination of contains and set, used to save some gas\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate\\n    /// @param y the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function addIfNotContain(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (bool, Tile memory) {\\n        require(x < 24 && y < 24, \\\"Invalid coordinates\\\");\\n        uint256 idx = y / 8;\\n        uint256 bitMask = 1 << (x + 24 * (y % 8));\\n        if (self.data[idx] & bitMask == bitMask) {\\n            return (false, self);\\n        }\\n        self.data[idx] |= bitMask;\\n        return (true, self);\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate inside the Tile is set or not\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate\\n    /// @param y the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function contain(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (bool) {\\n        require(x < 24 && y < 24, \\\"Invalid coordinates\\\");\\n        uint256 idx = y / 8;\\n        uint256 bitMask = 1 << (x + 24 * (y % 8));\\n        return (self.data[idx] & bitMask == bitMask);\\n    }\\n\\n    /// @notice Check if the all the bits of a square inside the Tile are set or not\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if al the bits are set or false if at least one bit is cleared\\n    function contain(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            uint256 bitMask = mask << (x + 24 * ((y + i) % 8));\\n            if (self.data[idx] & bitMask != bitMask) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if a Tile includes all the bits that are set in another Tile\\n    /// @param self the bigger Tile that is checked for inclusion\\n    /// @param contained the Tile that must be included\\n    /// @return true if self contain contained Tile\\n    function contain(Tile memory self, Tile memory contained) internal pure returns (bool) {\\n        uint256 d0 = contained.data[0] & PIXEL_MASK;\\n        uint256 d1 = contained.data[1] & PIXEL_MASK;\\n        uint256 d2 = contained.data[2] & PIXEL_MASK;\\n        return (self.data[0] & d0 == d0) && (self.data[1] & d1 == d1) && (self.data[2] & d2 == d2);\\n    }\\n\\n    /// @notice Check if the Tile has any bit in common with a square\\n    /// @param self the Tile where the check is done\\n    /// @param x the x coordinate of the square\\n    /// @param y the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if there is at least one bit set in both Tiles\\n    function intersect(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(x < 24 && y < 24, \\\"Invalid tile coordinates\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        uint256 mask = _quadMask(size);\\n        require(mask != 0, \\\"invalid size\\\");\\n        uint256 i;\\n        for (; i < size; i++) {\\n            uint256 idx = (y + i) / 8;\\n            uint256 bitMask = mask << (x + 24 * ((y + i) % 8));\\n            if (self.data[idx] & bitMask != 0) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Check if two Tiles has any bit in common\\n    /// @param self first Tile to compare\\n    /// @param other second tile to compare\\n    /// @return true if there is at least one bit set in both Tiles\\n    function intersect(Tile memory self, Tile memory other) internal pure returns (bool) {\\n        return\\n            ((self.data[0] & other.data[0]) | (self.data[1] & other.data[1]) | (self.data[2] & other.data[2])) &\\n                PIXEL_MASK !=\\n            0;\\n    }\\n\\n    /// @notice Check if two Tiles has exactly the same bits set\\n    /// @param self first Tile to compare\\n    /// @param other second Tile to compare\\n    /// @return true if the two Tiles has the same bits set\\n    function isEqual(Tile memory self, Tile memory other) internal pure returns (bool) {\\n        return\\n            ((self.data[0] ^ other.data[0]) | (self.data[1] ^ other.data[1]) | (self.data[2] ^ other.data[2])) &\\n                PIXEL_MASK ==\\n            0;\\n    }\\n\\n    /// @notice return a Tile that is the union of two Tiles\\n    /// @dev this function destroys data outside the pixel data (we want to save some gas)\\n    /// @param self first Tile to compare\\n    /// @param other second Tile to compare\\n    /// @return a Tile that is the union of self and other\\n    function or(Tile memory self, Tile memory other) internal pure returns (Tile memory) {\\n        self.data[0] |= other.data[0] & PIXEL_MASK;\\n        self.data[1] |= other.data[1] & PIXEL_MASK;\\n        self.data[2] |= other.data[2] & PIXEL_MASK;\\n        return self;\\n    }\\n\\n    /// @notice return a Tile that is the intersection of two Tiles\\n    /// @dev this function destroys data outside the pixel data (we want to save some gas)\\n    /// @param self first Tile to compare\\n    /// @param other second Tile to compare\\n    /// @return a Tile that is the intersection of self and other\\n    function and(Tile memory self, Tile memory other) internal pure returns (Tile memory) {\\n        self.data[0] &= other.data[0] | PIXEL_MASK_INV;\\n        self.data[1] &= other.data[1] | PIXEL_MASK_INV;\\n        self.data[2] &= other.data[2] | PIXEL_MASK_INV;\\n        return self;\\n    }\\n\\n    /// @notice Calculates the subtraction of two Tile\\n    /// @param self the Tile to subtract from\\n    /// @param value the Tile subtracted\\n    /// @return the self with all the bits set in value cleared\\n    function subtract(Tile memory self, Tile memory value) internal pure returns (Tile memory) {\\n        self.data[0] &= ~(value.data[0] & PIXEL_MASK);\\n        self.data[1] &= ~(value.data[1] & PIXEL_MASK);\\n        self.data[2] &= ~(value.data[2] & PIXEL_MASK);\\n        return self;\\n    }\\n\\n    /// @notice check if a Tile is empty, doesn't have any bit set\\n    /// @param self first Tile to compare\\n    /// @return true if the Tile is empty\\n    function isEmpty(Tile memory self) internal pure returns (bool) {\\n        return (self.data[0] | self.data[1] | self.data[2]) & PIXEL_MASK == 0;\\n    }\\n\\n    /// @notice return a Tile that has only one of the pixels from the original Tile set\\n    /// @param self Tile in which one pixel is searched\\n    /// @return ret a Tile that has only one pixel set\\n    function findAPixel(Tile memory self) internal pure returns (Tile memory ret) {\\n        uint256 target;\\n        uint256 shift;\\n\\n        target = self.data[2] & PIXEL_MASK;\\n        if (target != 0) {\\n            shift = _findAPixel(target);\\n            ret.data[2] = (1 << shift);\\n            return ret;\\n        }\\n\\n        target = self.data[1] & PIXEL_MASK;\\n        if (target != 0) {\\n            shift = _findAPixel(target);\\n            ret.data[1] = (1 << shift);\\n            return ret;\\n        }\\n\\n        target = self.data[0] & PIXEL_MASK;\\n        if (target != 0) {\\n            shift = _findAPixel(target);\\n            ret.data[0] = (1 << shift);\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice given a tile, translate all the bits in the x and y direction\\n    /// @param self the initial Tile to translate\\n    /// @param x the x distance to translate\\n    /// @param y the y distance to translate\\n    /// @return col1 first column that represents the four tiles that are the result of the translation\\n    /// @return col2 second column that represents the four tiles that are the result of the translation\\n    function translate(\\n        Tile memory self,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256[6] memory col1, uint256[6] memory col2) {\\n        // Move right\\n        uint256 mask = _getTranslateXMask(x);\\n        col1[0] = (self.data[0] & mask) << x;\\n        col1[1] = (self.data[1] & mask) << x;\\n        col1[2] = (self.data[2] & mask) << x;\\n        if (x > 0) {\\n            mask = PIXEL_MASK - mask;\\n            col2[0] = (self.data[0] & mask) >> (24 - x);\\n            col2[1] = (self.data[1] & mask) >> (24 - x);\\n            col2[2] = (self.data[2] & mask) >> (24 - x);\\n        }\\n        // Move down\\n        uint256 rem = 24 * (y % 8);\\n        uint256 div = y / 8;\\n        mask = PIXEL_MASK - (2**(24 * 8 - rem) - 1);\\n        // TODO: optimization, remove the loop, check gas consumption\\n        for (uint256 i = 5; i > div; i--) {\\n            col1[i] = (col1[i - div] << rem) | ((col1[i - div - 1] & mask) >> (24 * 8 - rem));\\n            col2[i] = (col2[i - div] << rem) | ((col2[i - div - 1] & mask) >> (24 * 8 - rem));\\n        }\\n        col1[div] = col1[0] << rem;\\n        col2[div] = col2[0] << rem;\\n        if (div > 0) {\\n            col1[0] = 0;\\n            col2[0] = 0;\\n            if (div > 1) {\\n                col1[1] = 0;\\n                col2[1] = 0;\\n            }\\n        }\\n        return (col1, col2);\\n    }\\n\\n    uint256 private constant QUAD_MASK_1 = 1;\\n    uint256 private constant QUAD_MASK_3 = 2**3 - 1;\\n    uint256 private constant QUAD_MASK_6 = 2**6 - 1;\\n    uint256 private constant QUAD_MASK_12 = 2**12 - 1;\\n    uint256 private constant QUAD_MASK_24 = 2**24 - 1;\\n\\n    /// @notice return a bit mask used to set or clear a square of certain size in the Tile\\n    /// @param size the size of the square\\n    /// @return the bit mask or zero if the size is not supported\\n    function _quadMask(uint256 size) private pure returns (uint256) {\\n        if (size == 1) return 1;\\n        if (size == 3) return QUAD_MASK_3;\\n        if (size == 6) return QUAD_MASK_6;\\n        if (size == 12) return QUAD_MASK_12;\\n        if (size == 24) return QUAD_MASK_24;\\n        return 0;\\n    }\\n\\n    /// @notice count the amount of bits set inside the Tile\\n    /// @param self the Tile in which the bits are counted\\n    /// @return the count of bits that are set\\n    function countBits(Tile memory self) internal pure returns (uint256) {\\n        return _countBits(self.data[0]) + _countBits(self.data[1]) + _countBits(self.data[2]);\\n    }\\n\\n    /// @notice count the amount of bits set inside a word\\n    /// @dev see: https://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer\\n    /// @param x the word in which the bits are counted\\n    /// @return the count of bits that are set\\n    function _countBits(uint256 x) private pure returns (uint256) {\\n        x = x - ((x >> 1) & 0x0000000000000000555555555555555555555555555555555555555555555555);\\n        x =\\n            (x & 0x0000000000000000333333333333333333333333333333333333333333333333) +\\n            ((x >> 2) & 0x0000000000000000333333333333333333333333333333333333333333333333);\\n        x = (x + (x >> 4)) & 0x00000000000000000F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F;\\n        return\\n            ((((x >> 96) * 0x010101010101010101010101) +\\n                ((x & 0x0F0F0F0F0F0F0F0F0F0F0F0F) * 0x010101010101010101010101)) >> (11 * 8)) & 0xFF;\\n    }\\n\\n    /// @notice giving 8 lines of a Tile, find any bit that is set\\n    /// @dev we must search in 8 * 24 bits that correspond to 8 lines, so 2^6 * 3, we split in three and then do a binary search\\n    /// @param target the uint256 that has the 8 lines\\n    /// @return shift the amount of bits shift left so the choose bit is set in the resulting Tile\\n    function _findAPixel(uint256 target) private pure returns (uint256 shift) {\\n        uint256 mask = (2**64 - 1);\\n        // divide in 3 parts, then do a binary search\\n        if ((target & mask) == 0) {\\n            target = target >> 64;\\n            shift = 64;\\n            if ((target & mask) == 0) {\\n                target = target >> 64;\\n                shift = 128;\\n            }\\n        }\\n        for (uint256 i = 32; i > 0; i = i / 2) {\\n            mask = mask >> i;\\n            if ((target & mask) == 0) {\\n                target = target >> i;\\n                shift += i;\\n            }\\n        }\\n        return shift;\\n    }\\n\\n    /// @notice return a bit mask used translate a Tile data in the x direction\\n    /// @param x the x value to translate\\n    /// @return the bit mask\\n    function _getTranslateXMask(uint256 x) private pure returns (uint256) {\\n        uint256 mask = (2**24 - 1) >> x;\\n        mask |= mask << 24;\\n        mask |= mask << (24 * 2);\\n        mask |= mask << (24 * 4);\\n        return mask;\\n    }\\n}\\n\",\"keccak256\":\"0x597571a993575cf7f27e1313fab368b3d362d5539caaea46fb06546ccf883d63\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/TileWithCoordLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {TileLib} from \\\"./TileLib.sol\\\";\\n\\n/// @title A Tile (24x24 map piece) that also stores x,y coordinates and a combination of the two called key\\n/// @dev Using a sparse array of TileWithCoords we build a bigger map covered with Tiles\\nlibrary TileWithCoordLib {\\n    using TileLib for TileLib.Tile;\\n\\n    struct TileWithCoord {\\n        TileLib.Tile tile;\\n    }\\n\\n    /// @notice initialize the TileWithCoord structure\\n    /// @return An empty Tile that has the x,y and corresponding key value set\\n    function init(uint256 x, uint256 y) internal pure returns (TileWithCoord memory) {\\n        TileWithCoord memory ret;\\n        ret.tile.data[0] = (getKey(x, y)) << 224;\\n        ret.tile.data[1] = (x / 24) << 224;\\n        ret.tile.data[2] = (y / 24) << 224;\\n        return ret;\\n    }\\n\\n    /// @notice initialize the TileWithCoord structure\\n    /// @return An TileWithCoord that has the x,y, key and the Tile bit data set\\n    function init(\\n        uint256 x,\\n        uint256 y,\\n        uint256 pixelData1,\\n        uint256 pixelData2,\\n        uint256 pixelData3\\n    ) internal pure returns (TileWithCoord memory) {\\n        TileWithCoord memory ret;\\n        ret.tile = ret.tile.init(pixelData1, pixelData2, pixelData3);\\n        ret.tile.data[0] |= (getKey(x, y)) << 224;\\n        ret.tile.data[1] |= (x / 24) << 224;\\n        ret.tile.data[2] |= (y / 24) << 224;\\n        return ret;\\n    }\\n\\n    /// @notice Set the bits inside a square that has size x size in the x,y coordinates\\n    /// @param self the TileWithCoord in which the bits are set\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding bits set\\n    function set(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.set(xi % 24, yi % 24, size);\\n        return self;\\n    }\\n\\n    /// @notice Calculates the union/addition of two TileWithCoord\\n    /// @dev to be able to merge the two TileWithCoord must have the same coordinates\\n    /// @param self one of the TileWithCoord to merge\\n    /// @param value the second TileWithCoord to merge\\n    /// @return the merge of the two TileWithCoord\\n    function merge(TileWithCoord memory self, TileWithCoord memory value) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == getX(value) && getY(self) == getY(value), \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.or(value.tile);\\n        return self;\\n    }\\n\\n    /// @notice Clear the bits inside a square that has size x size in the x,y coordinates\\n    /// @param self the TileWithCoord, in which the bits will be cleared\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return self with the corresponding cleared bits\\n    function clear(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.clear(xi % 24, yi % 24, size);\\n        return self;\\n    }\\n\\n    /// @notice Calculates the subtraction of two TileWithCoord\\n    /// @dev to be able to subtract them the two TileWithCoord must have the same coordinates\\n    /// @param self the TileWithCoord to subtract from\\n    /// @param value the TileWithCoord subtracted\\n    /// @return the self with all the bits set in value cleared\\n    function clear(TileWithCoord memory self, TileWithCoord memory value) internal pure returns (TileWithCoord memory) {\\n        require(getX(self) == getX(value) && getY(self) == getY(value), \\\"Invalid tile coordinates\\\");\\n        self.tile = self.tile.subtract(value.tile);\\n        return self;\\n    }\\n\\n    /// @notice Check if the bit in certain coordinate are set or not in the TileWithCoord\\n    /// @param self the TileWithCoord where the check is done\\n    /// @param xi the x coordinate\\n    /// @param yi the  coordinate\\n    /// @return true if the x,y coordinate bit is set or false if it is cleared\\n    function contain(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi\\n    ) internal pure returns (bool) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid coordinates\\\");\\n        return self.tile.contain(xi % 24, yi % 24);\\n    }\\n\\n    /// @notice Check if the all the bits of a square inside the TileWithCoord are set or not\\n    /// @param self the TileWithCoord where the check is done\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if al the bits are set or false if at least one bit is cleared\\n    function contain(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        return self.tile.contain(xi % 24, yi % 24, size);\\n    }\\n\\n    /// @notice Check if the TileWithCoord has any bit in common with a square\\n    /// @param self the TileWithCoord where the check is done\\n    /// @param xi the x coordinate of the square\\n    /// @param yi the y coordinate of the square\\n    /// @param size the size of the square\\n    /// @return true if there is at least one bit set in the TileWithCoords and the square\\n    function intersect(\\n        TileWithCoord memory self,\\n        uint256 xi,\\n        uint256 yi,\\n        uint256 size\\n    ) internal pure returns (bool) {\\n        require(getX(self) == xi / 24 && getY(self) == yi / 24, \\\"Invalid tile coordinates\\\");\\n        return self.tile.intersect(xi % 24, yi % 24, size);\\n    }\\n\\n    /// @notice return the key value stored in the TileWithCoord\\n    /// @param self the TileWithCoord to get the key from\\n    /// @return the key value\\n    function getKey(TileWithCoord memory self) internal pure returns (uint256) {\\n        return self.tile.data[0] >> 224;\\n    }\\n\\n    /// @notice return the x coordinate value stored in the TileWithCoord\\n    /// @param self the TileWithCoord to get the x coordinate from\\n    /// @return the x value\\n    function getX(TileWithCoord memory self) internal pure returns (uint256) {\\n        return self.tile.data[1] >> 224;\\n    }\\n\\n    /// @notice return the y coordinate value stored in the TileWithCoord\\n    /// @param self the TileWithCoord to get the y coordinate from\\n    /// @return the y value\\n    function getY(TileWithCoord memory self) internal pure returns (uint256) {\\n        return self.tile.data[2] >> 224;\\n    }\\n\\n    /// @notice helper to calculate the key value given the x,y coordinates\\n    /// @param x the x coordinate\\n    /// @param y the y coordinate\\n    /// @return the key value\\n    function getKey(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x / 24) | ((y / 24) << 16);\\n    }\\n\\n    /// @notice count the amount of bits set inside the TileWithCoord\\n    /// @param self the TileWithCoord in which the bits are counted\\n    /// @return the count of bits that are set\\n    function countBits(TileWithCoord memory self) internal pure returns (uint256) {\\n        return self.tile.countBits();\\n    }\\n\\n    /// @notice check if a TileWithCoord is empty, none of the bits are set\\n    /// @param self the TileWithCoord to check\\n    /// @return true if none of the bits are set\\n    function isEmpty(TileWithCoord memory self) internal pure returns (bool) {\\n        return self.tile.isEmpty();\\n    }\\n\\n    /// @notice Check if two TileWithCoord has exactly the same coordinates and bits set\\n    /// @param self first TileWithCoord to compare\\n    /// @param other second TileWithCoord to compare\\n    /// @return true if the two TileWithCoord has the same coordinates and bits set\\n    function isEqual(TileWithCoord memory self, TileWithCoord memory other) internal pure returns (bool) {\\n        return\\n            self.tile.data[0] == other.tile.data[0] &&\\n            self.tile.data[1] == other.tile.data[1] &&\\n            self.tile.data[2] == other.tile.data[2];\\n    }\\n}\\n\",\"keccak256\":\"0xdd8f0df8786c11865f76645eb7b83648605a4bf36cda9dcfcaecbd92fcc1b8c5\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IEstateExperienceRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {TileWithCoordLib} from \\\"../Libraries/TileWithCoordLib.sol\\\";\\n\\ninterface IEstateExperienceRegistry {\\n    function link(\\n        uint256 estateId, // estateId == 0 => single land experience\\n        uint256 expId,\\n        uint256 x,\\n        uint256 y\\n    ) external;\\n\\n    function unLink(uint256 expId) external;\\n\\n    // Called only by the estate contract\\n    function batchUnLinkFrom(address from, uint256[] calldata expIdsToUnlink) external;\\n\\n    function isLinked(uint256 expId) external view returns (bool);\\n\\n    function isLinked(uint256[][3] calldata quads) external view returns (bool);\\n\\n    function isLinked(TileWithCoordLib.TileWithCoord[] calldata) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x551a00f46500b7510d7efb302860a6dc627ef1255e298ee5d379ed8810725ddd\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IEstateToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {TileWithCoordLib} from \\\"../Libraries/TileWithCoordLib.sol\\\";\\nimport {MapLib} from \\\"../Libraries/MapLib.sol\\\";\\n\\n/// @title Interface for the Estate token on L1\\ninterface IEstateToken {\\n    function mintEstate(address from, TileWithCoordLib.TileWithCoord[] calldata freeLand) external returns (uint256);\\n\\n    function burnEstate(address from, uint256 estateId)\\n        external\\n        returns (TileWithCoordLib.TileWithCoord[] memory tiles);\\n\\n    function contain(uint256 estateId, MapLib.TranslateResult memory s) external view returns (bool);\\n\\n    function getStorageId(uint256 tokenId) external pure returns (uint256);\\n\\n    function getOwnerOfStorage(uint256 estateId) external view returns (address owner);\\n}\\n\",\"keccak256\":\"0x80de86ceb641ad87b4f858f97a174229d185128d254c0c3f73adc29e41f1f835\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IExperienceToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {TileLib} from \\\"../Libraries/TileLib.sol\\\";\\n\\ninterface IExperienceToken {\\n    function getTemplate(uint256 expId) external view returns (TileLib.Tile calldata, uint256[] calldata landCoords);\\n\\n    function getStorageId(uint256 expId) external view returns (uint256 storageId);\\n}\\n\",\"keccak256\":\"0xf3efb2ad6d138bbbeb63196e2051ddf1fbb6869cf3ba23e94936aefbcfaeeb95\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/estate/ExperienceEstateRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport {IEstateToken} from \\\"../../../common/interfaces/IEstateToken.sol\\\";\\nimport {IEstateExperienceRegistry} from \\\"../../../common/interfaces/IEstateExperienceRegistry.sol\\\";\\nimport {TileLib} from \\\"../../../common/Libraries/TileLib.sol\\\";\\nimport {TileWithCoordLib} from \\\"../../../common/Libraries/TileWithCoordLib.sol\\\";\\nimport {MapLib} from \\\"../../../common/Libraries/MapLib.sol\\\";\\nimport {IExperienceToken} from \\\"../../../common/interfaces/IExperienceToken.sol\\\";\\n\\n/// @notice Contract managing tExperiences and Estates\\ncontract ExperienceEstateRegistry is Context, IEstateExperienceRegistry {\\n    using MapLib for MapLib.Map;\\n    using TileLib for TileLib.Tile;\\n\\n    struct RelinkData {\\n        uint256 estateId;\\n        uint256 expId;\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    IExperienceToken public experienceToken;\\n    IEstateToken public estateToken;\\n    IERC721 public landToken;\\n\\n    struct EstateAndLands {\\n        // 0 means not found, 1 means single land,  >1 means multiLand with the value estateId - 1,\\n        uint256 estateId;\\n        uint256 singleLand;\\n        MapLib.Map multiLand;\\n    }\\n\\n    // Experience Id => EstateAndLands\\n    mapping(uint256 => EstateAndLands) internal links;\\n\\n    MapLib.Map internal linkedLands;\\n\\n    constructor(\\n        //address trustedForwarder,\\n        IEstateToken _estateToken,\\n        IExperienceToken _experienceToken,\\n        //uint8 chainIndex,\\n        IERC721 _landToken\\n    ) {\\n        experienceToken = _experienceToken;\\n        estateToken = _estateToken;\\n        landToken = _landToken;\\n    }\\n\\n    function linkSingle(\\n        uint256 expId,\\n        uint256 x,\\n        uint256 y\\n    ) external {\\n        _link(0, expId, x, y);\\n    }\\n\\n    function link(\\n        uint256 estateId,\\n        uint256 expId,\\n        uint256 x,\\n        uint256 y\\n    ) external override {\\n        _link(estateId, expId, x, y);\\n    }\\n\\n    function unLink(uint256 expId) external override {\\n        _unLinkFrom(_msgSender(), expId);\\n    }\\n\\n    function relink(uint256[] calldata expIdsToUnlink, RelinkData[] memory expToLink) external {\\n        _batchUnLinkFrom(_msgSender(), expIdsToUnlink);\\n        uint256 len = expToLink.length;\\n        for (uint256 i; i < len; i++) {\\n            RelinkData memory d = expToLink[i];\\n            _link(d.estateId, d.expId, d.x, d.y);\\n        }\\n    }\\n\\n    function batchUnLinkFrom(address from, uint256[] calldata expIdsToUnlink) external override {\\n        require(address(estateToken) == _msgSender(), \\\"can be called only by estate\\\");\\n        _batchUnLinkFrom(from, expIdsToUnlink);\\n    }\\n\\n    // Called by the estate contract to check that the land are ready to remove.\\n    function isLinked(uint256[][3] calldata quads) external view override returns (bool) {\\n        uint256 len = quads[0].length;\\n        for (uint256 i; i < len; i++) {\\n            if (linkedLands.intersect(quads[1][i], quads[2][i], quads[0][i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function isLinked(uint256 expId) external view override returns (bool) {\\n        uint256 expStorageId = experienceToken.getStorageId(expId);\\n        EstateAndLands storage est = links[expStorageId];\\n        return est.estateId > 0;\\n    }\\n\\n    function isLinked(TileWithCoordLib.TileWithCoord[] calldata tiles) external view override returns (bool) {\\n        return linkedLands.intersect(tiles);\\n    }\\n\\n    function _link(\\n        uint256 estateId,\\n        uint256 expId,\\n        uint256 x,\\n        uint256 y\\n    ) internal {\\n        uint256 expStorageId = experienceToken.getStorageId(expId);\\n        (TileLib.Tile memory template, uint256[] memory landCoords) = experienceToken.getTemplate(expStorageId);\\n        require(landCoords.length > 0, \\\"empty template\\\");\\n        EstateAndLands storage est = links[expStorageId];\\n        require(est.estateId == 0, \\\"Exp already in use\\\");\\n\\n        if (estateId == 0) {\\n            require(landCoords.length == 1, \\\"must be done inside estate\\\");\\n            uint256 translatedId = landCoords[0] + x + (y * 408);\\n            uint256 translatedX = translatedId % 408;\\n            uint256 translatedY = translatedId / 408;\\n            require(landToken.ownerOf(translatedId) == _msgSender(), \\\"invalid user\\\");\\n            require(!linkedLands.contain(translatedX, translatedY), \\\"already linked\\\");\\n            linkedLands.set(translatedX, translatedY, 1);\\n            est.singleLand = translatedId;\\n        } else {\\n            require(estateToken.getOwnerOfStorage(estateId) == _msgSender(), \\\"invalid user\\\");\\n            MapLib.TranslateResult memory s = MapLib.translate(template, x, y);\\n            require(!linkedLands.intersect(s), \\\"already linked\\\");\\n            linkedLands.set(s);\\n            require(estateToken.contain(estateId, s), \\\"not enough land\\\");\\n            est.multiLand.set(s);\\n        }\\n        est.estateId = estateId + 1;\\n    }\\n\\n    function _batchUnLinkFrom(address from, uint256[] calldata expIdsToUnlink) internal {\\n        uint256 len = expIdsToUnlink.length;\\n        for (uint256 i; i < len; i++) {\\n            _unLinkFrom(from, expIdsToUnlink[i]);\\n        }\\n    }\\n\\n    function _unLinkFrom(address from, uint256 expId) internal {\\n        uint256 expStorageId = experienceToken.getStorageId(expId);\\n        EstateAndLands storage est = links[expStorageId];\\n        require(est.estateId > 0, \\\"unknown experience\\\");\\n        if (est.estateId == 1) {\\n            uint256 landId = est.singleLand;\\n            require(landToken.ownerOf(landId) == from, \\\"invalid user\\\");\\n            uint256 x = landId % 408;\\n            uint256 y = landId / 408;\\n            linkedLands.clear(x, y, 1);\\n        } else {\\n            require(estateToken.getOwnerOfStorage(est.estateId - 1) == from, \\\"invalid user\\\");\\n            linkedLands.clear(est.multiLand);\\n        }\\n        delete links[expStorageId];\\n    }\\n}\\n\",\"keccak256\":\"0x5dfe84722d90924efbeccfbf4a5b0dc801c7989b86565591b56798e2cbeded64\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200220238038062002202833981016040819052620000349162000075565b600080546001600160a01b03199081166001600160a01b039485161790915560018054821694841694909417909355600280549093169116179055620000e1565b6000806000606084860312156200008a578283fd5b83516200009781620000c8565b6020850151909350620000aa81620000c8565b6040850151909250620000bd81620000c8565b809150509250925092565b6001600160a01b0381168114620000de57600080fd5b50565b61211180620000f16000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c8063ad51dacb11610081578063cb1ada7c1161005b578063cb1ada7c14610195578063d6c6cfde146101a8578063e67af1b1146101bb576100c9565b8063ad51dacb1461015c578063b44468fb1461016f578063c396d7b414610182576100c9565b80631a07585d116100b25780631a07585d146100f657806320a23e34146101265780633cbe399714610149576100c9565b8063108487fc146100ce57806312202d0a146100e3575b600080fd5b6100e16100dc366004611b03565b6101ce565b005b6100e16100f1366004611a08565b610248565b600054610109906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610139610134366004611cc7565b6102b7565b604051901515815260200161011d565b610139610157366004611a5b565b61034e565b61013961016a366004611a93565b610515565b600254610109906001600160a01b031681565b6100e1610190366004611cf7565b6105c3565b6100e16101a3366004611cc7565b6105d0565b6100e16101b6366004611d22565b6105dd565b600154610109906001600160a01b031681565b6101d93384846105ef565b805160005b8181101561024157600083828151811061020857634e487b7160e01b600052603260045260246000fd5b6020026020010151905061022e816000015182602001518360400151846060015161063d565b508061023981612055565b9150506101de565b5050505050565b6001546001600160a01b031633146102a75760405162461bcd60e51b815260206004820152601c60248201527f63616e2062652063616c6c6564206f6e6c79206279206573746174650000000060448201526064015b60405180910390fd5b6102b28383836105ef565b505050565b600080546040516321ab0c7160e01b81526004810184905282916001600160a01b0316906321ab0c719060240160206040518083038186803b1580156102fc57600080fd5b505afa158015610310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103349190611cdf565b60009081526003602052604090205415159150505b919050565b60008061035b8380611e0e565b9050905060005b8181101561050b5773f23B8c9debCdCEa2a40E81c3f6d786987069D40d6372ba788860046103936020880188611e0e565b858181106103b157634e487b7160e01b600052603260045260246000fd5b90506020020135876002600381106103d957634e487b7160e01b600052603260045260246000fd5b6020028101906103e99190611e0e565b8681811061040757634e487b7160e01b600052603260045260246000fd5b905060200201358860006003811061042f57634e487b7160e01b600052603260045260246000fd5b60200281019061043f9190611e0e565b8781811061045d57634e487b7160e01b600052603260045260246000fd5b905060200201356040518563ffffffff1660e01b8152600401610499949392919093845260208401929092526040830152606082015260800190565b60206040518083038186803b1580156104b157600080fd5b505af41580156104c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e99190611bfb565b156104f957600192505050610349565b8061050381612055565b915050610362565b5060009392505050565b6040517fcca0f3b700000000000000000000000000000000000000000000000000000000815260009073f23B8c9debCdCEa2a40E81c3f6d786987069D40d9063cca0f3b79061056c90600490879087908301611d79565b60206040518083038186803b15801561058457600080fd5b505af4158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc9190611bfb565b9392505050565b6102b2600084848461063d565b6105da3382610f27565b50565b6105e98484848461063d565b50505050565b8060005b818110156102415761062b8585858481811061061f57634e487b7160e01b600052603260045260246000fd5b90506020020135610f27565b8061063581612055565b9150506105f3565b600080546040516321ab0c7160e01b8152600481018690526001600160a01b03909116906321ab0c719060240160206040518083038186803b15801561068257600080fd5b505afa158015610696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ba9190611cdf565b600080546040517f31543cf400000000000000000000000000000000000000000000000000000000815260048101849052929350909182916001600160a01b0316906331543cf49060240160006040518083038186803b15801561071d57600080fd5b505afa158015610731573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107599190810190611c1b565b9150915060008151116107ae5760405162461bcd60e51b815260206004820152600e60248201527f656d7074792074656d706c617465000000000000000000000000000000000000604482015260640161029e565b600083815260036020526040902080541561080b5760405162461bcd60e51b815260206004820152601260248201527f45787020616c726561647920696e207573650000000000000000000000000000604482015260640161029e565b87610b435781516001146108615760405162461bcd60e51b815260206004820152601a60248201527f6d75737420626520646f6e6520696e7369646520657374617465000000000000604482015260640161029e565b600061086f86610198612008565b878460008151811061089157634e487b7160e01b600052603260045260246000fd5b60200260200101516108a39190611ec8565b6108ad9190611ec8565b905060006108bd61019883612070565b905060006108cd61019884611ee0565b9050336002546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b039283169290911690636352211e9060240160206040518083038186803b15801561093157600080fd5b505afa158015610945573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096991906119ec565b6001600160a01b0316146109ae5760405162461bcd60e51b815260206004820152600c60248201526b34b73b30b634b2103ab9b2b960a11b604482015260640161029e565b6040517f3362c7cd000000000000000000000000000000000000000000000000000000008152600480820152602481018390526044810182905273f23B8c9debCdCEa2a40E81c3f6d786987069D40d90633362c7cd9060640160206040518083038186803b158015610a1f57600080fd5b505af4158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a579190611bfb565b15610aa45760405162461bcd60e51b815260206004820152600e60248201527f616c7265616479206c696e6b6564000000000000000000000000000000000000604482015260640161029e565b6040517ff9b9fec600000000000000000000000000000000000000000000000000000000815260048082015260248101839052604481018290526001606482015273f23B8c9debCdCEa2a40E81c3f6d786987069D40d9063f9b9fec69060840160006040518083038186803b158015610b1c57600080fd5b505af4158015610b30573d6000803e3d6000fd5b5050505050600183019190915550610f11565b336001546040517fd3fec7cf000000000000000000000000000000000000000000000000000000008152600481018b90526001600160a01b03928316929091169063d3fec7cf9060240160206040518083038186803b158015610ba557600080fd5b505afa158015610bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdd91906119ec565b6001600160a01b031614610c225760405162461bcd60e51b815260206004820152600c60248201526b34b73b30b634b2103ab9b2b960a11b604482015260640161029e565b6000610c2f848888611358565b6040517f552a98a500000000000000000000000000000000000000000000000000000000815290915073f23B8c9debCdCEa2a40E81c3f6d786987069D40d9063552a98a590610c849060049085908201611db3565b60206040518083038186803b158015610c9c57600080fd5b505af4158015610cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd49190611bfb565b15610d215760405162461bcd60e51b815260206004820152600e60248201527f616c7265616479206c696e6b6564000000000000000000000000000000000000604482015260640161029e565b6040517f74527bfb00000000000000000000000000000000000000000000000000000000815273f23B8c9debCdCEa2a40E81c3f6d786987069D40d906374527bfb90610d739060049085908201611db3565b60006040518083038186803b158015610d8b57600080fd5b505af4158015610d9f573d6000803e3d6000fd5b50506001546040517f8bee92e60000000000000000000000000000000000000000000000000000000081526001600160a01b039091169250638bee92e69150610dee908c908590600401611db3565b60206040518083038186803b158015610e0657600080fd5b505afa158015610e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3e9190611bfb565b610e8a5760405162461bcd60e51b815260206004820152600f60248201527f6e6f7420656e6f756768206c616e640000000000000000000000000000000000604482015260640161029e565b6040517f74527bfb00000000000000000000000000000000000000000000000000000000815273f23B8c9debCdCEa2a40E81c3f6d786987069D40d906374527bfb90610edf9060028601908590600401611db3565b60006040518083038186803b158015610ef757600080fd5b505af4158015610f0b573d6000803e3d6000fd5b50505050505b610f1c886001611ec8565b905550505050505050565b600080546040516321ab0c7160e01b8152600481018490526001600160a01b03909116906321ab0c719060240160206040518083038186803b158015610f6c57600080fd5b505afa158015610f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa49190611cdf565b60008181526003602052604090208054919250906110045760405162461bcd60e51b815260206004820152601260248201527f756e6b6e6f776e20657870657269656e63650000000000000000000000000000604482015260640161029e565b8054600114156111c95760018101546002546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03878116921690636352211e9060240160206040518083038186803b15801561107257600080fd5b505afa158015611086573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110aa91906119ec565b6001600160a01b0316146110ef5760405162461bcd60e51b815260206004820152600c60248201526b34b73b30b634b2103ab9b2b960a11b604482015260640161029e565b60006110fd61019883612070565b9050600061110d61019884611ee0565b6040517fe8485b0700000000000000000000000000000000000000000000000000000000815260048082015260248101849052604481018290526001606482015290915073f23B8c9debCdCEa2a40E81c3f6d786987069D40d9063e8485b079060840160206040518083038186803b15801561118857600080fd5b505af415801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c09190611bfb565b50505050611326565b6001805482546001600160a01b038088169392169163d3fec7cf916111ee9190612027565b6040518263ffffffff1660e01b815260040161120c91815260200190565b60206040518083038186803b15801561122457600080fd5b505afa158015611238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125c91906119ec565b6001600160a01b0316146112a15760405162461bcd60e51b815260206004820152600c60248201526b34b73b30b634b2103ab9b2b960a11b604482015260640161029e565b6040517fca26a6ad00000000000000000000000000000000000000000000000000000000815260048082015260028201602482015273f23B8c9debCdCEa2a40E81c3f6d786987069D40d9063ca26a6ad9060440160006040518083038186803b15801561130d57600080fd5b505af4158015611321573d6000803e3d6000fd5b505050505b60008281526003602052604081208181556001810182905590600282018161134e8282611854565b5050505050505050565b611360611875565b600080611384611371601887612070565b61137c601887612070565b88919061145b565b9150915060405180608001604052806113d48787866000600681106113b957634e487b7160e01b600052603260045260246000fd5b602002015187600160200201518860025b6020020151611772565b81526020016113f96113e7886018611ec8565b845160208601518991908760026113ca565b815260200161141f8761140d886018611ec8565b606087015160808801518860056113ca565b815260200161144f611432886018611ec8565b61143d886018611ec8565b606086015160808701518760056113ca565b90529695505050505050565b6114636118b4565b61146b6118b4565b84515162ffffff851c601881901b17603081901b17606081901b17908116851b835285516020908101518216861b9084015285516040908101518216861b908401528415611524576114d58177ffffffffffffffffffffffffffffffffffffffffffffffff612027565b90506114e2856018612027565b8651518216901c82526114f6856018612027565b8651602090810151831690911c90830152611512856018612027565b8651604090810151831690911c908301525b6000611531600886612070565b61153c906018612008565b9050600061154b600887611ee0565b9050600161155a8360c0612027565b611565906002611f3a565b61156f9190612027565b6115919077ffffffffffffffffffffffffffffffffffffffffffffffff612027565b925060055b818111156116f0576115a98360c0612027565b848760016115b78686612027565b6115c19190612027565b600681106115df57634e487b7160e01b600052603260045260246000fd5b602002015116901c83876115f38585612027565b6006811061161157634e487b7160e01b600052603260045260246000fd5b6020020151901b1786826006811061163957634e487b7160e01b600052603260045260246000fd5b60200201526116498360c0612027565b848660016116578686612027565b6116619190612027565b6006811061167f57634e487b7160e01b600052603260045260246000fd5b602002015116901c83866116938585612027565b600681106116b157634e487b7160e01b600052603260045260246000fd5b6020020151901b178582600681106116d957634e487b7160e01b600052603260045260246000fd5b6020020152806116e88161203e565b915050611596565b508451821b85826006811061171557634e487b7160e01b600052603260045260246000fd5b60200201528351821b84826006811061173e57634e487b7160e01b600052603260045260246000fd5b602002015280156117675760008086528452600181111561176757600060208087018290528501525b505050935093915050565b61177a6118d2565b6117826118d2565b8051611790908686866117ec565b815260e061179e8888611830565b82515180519190921b17905260e06117b7601889611ee0565b82515160200180519190921b17905260e06117d3601888611ee0565b82515160400180519190921b1790529695505050505050565b6117f46118e1565b50835177ffffffffffffffffffffffffffffffffffffffffffffffff938416905283519183166020909201919091528251911660409091015290565b6000601061183f601884611ee0565b901b61184c601885611ee0565b179392505050565b50805460008255600302906000526020600020908101906105da91906118f4565b60405180608001604052806118886118d2565b81526020016118956118d2565b81526020016118a26118d2565b81526020016118af6118d2565b905290565b6040518060c001604052806006906020820280368337509192915050565b60405180602001604052806118af5b60405180602001604052806118af611919565b808211156119155760008082556001820181905560028201556003016118f4565b5090565b60405180606001604052806003906020820280368337509192915050565b60008083601f840112611948578182fd5b50813567ffffffffffffffff81111561195f578182fd5b602083019150836020808302850101111561197957600080fd5b9250929050565b600082601f830112611990578081fd5b815160206119a56119a083611ea4565b611e73565b82815281810190858301838502870184018810156119c1578586fd5b855b858110156119df578151845292840192908401906001016119c3565b5090979650505050505050565b6000602082840312156119fd578081fd5b81516105bc816120c6565b600080600060408486031215611a1c578182fd5b8335611a27816120c6565b9250602084013567ffffffffffffffff811115611a42578283fd5b611a4e86828701611937565b9497909650939450505050565b600060208284031215611a6c578081fd5b813567ffffffffffffffff811115611a82578182fd5b8201606081018410156105bc578182fd5b60008060208385031215611aa5578182fd5b823567ffffffffffffffff80821115611abc578384fd5b818501915085601f830112611acf578384fd5b813581811115611add578485fd5b866020606083028501011115611af1578485fd5b60209290920196919550909350505050565b60008060006040808587031215611b18578384fd5b843567ffffffffffffffff80821115611b2f578586fd5b611b3b88838901611937565b9096509450602091508682013581811115611b54578485fd5b87019050601f81018813611b66578384fd5b8035611b746119a082611ea4565b818152838101908385016080808502860187018d1015611b92578889fd5b8895505b84861015611be95780828e031215611bac578889fd5b611bb581611e73565b8235815287830135888201528883013589820152606080840135908201528452600195909501949286019290810190611b96565b50508096505050505050509250925092565b600060208284031215611c0c578081fd5b815180151581146105bc578182fd5b6000808284036080811215611c2e578283fd5b6060811215611c3b578283fd5b506020611c4781611e73565b85601f860112611c55578384fd5b611c5f6060611e73565b80866060880189811115611c71578788fd5b875b6003811015611c9057825185529386019391860191600101611c73565b5091845250519194509091505067ffffffffffffffff811115611cb1578182fd5b611cbd85828601611980565b9150509250929050565b600060208284031215611cd8578081fd5b5035919050565b600060208284031215611cf0578081fd5b5051919050565b600080600060608486031215611d0b578081fd5b505081359360208301359350604090920135919050565b60008060008060808587031215611d37578182fd5b5050823594602084013594506040840135936060013592509050565b8051518260005b6003811015610241578251825260209283019290910190600101611d5a565b83815260406020820181905281018290526000606080830185835b868110156119df57838284379183018481529190830190600101611d94565b60006101a082019050838252611dcd602083018451611d53565b6020830151611ddf6080840182611d53565b506040830151611df260e0840182611d53565b506060830151611e06610140840182611d53565b509392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611e42578283fd5b83018035915067ffffffffffffffff821115611e5c578283fd5b602090810192508102360382131561197957600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e9c57611e9c6120b0565b604052919050565b600067ffffffffffffffff821115611ebe57611ebe6120b0565b5060209081020190565b60008219821115611edb57611edb612084565b500190565b600082611eef57611eef61209a565b500490565b80825b6001808611611f065750611f31565b818704821115611f1857611f18612084565b80861615611f2557918102915b9490941c938002611ef7565b94509492505050565b60006105bc6000198484600082611f53575060016105bc565b81611f60575060006105bc565b8160018114611f765760028114611f8057611fad565b60019150506105bc565b60ff841115611f9157611f91612084565b6001841b915084821115611fa757611fa7612084565b506105bc565b5060208310610133831016604e8410600b8410161715611fe0575081810a83811115611fdb57611fdb612084565b6105bc565b611fed8484846001611ef4565b808604821115611fff57611fff612084565b02949350505050565b600081600019048311821515161561202257612022612084565b500290565b60008282101561203957612039612084565b500390565b60008161204d5761204d612084565b506000190190565b600060001982141561206957612069612084565b5060010190565b60008261207f5761207f61209a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146105da57600080fdfea26469706673582212202fb45120717672b5ffb911e1133798c272443e34f0b55b5e401faac93a3e661c64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c8063ad51dacb11610081578063cb1ada7c1161005b578063cb1ada7c14610195578063d6c6cfde146101a8578063e67af1b1146101bb576100c9565b8063ad51dacb1461015c578063b44468fb1461016f578063c396d7b414610182576100c9565b80631a07585d116100b25780631a07585d146100f657806320a23e34146101265780633cbe399714610149576100c9565b8063108487fc146100ce57806312202d0a146100e3575b600080fd5b6100e16100dc366004611b03565b6101ce565b005b6100e16100f1366004611a08565b610248565b600054610109906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610139610134366004611cc7565b6102b7565b604051901515815260200161011d565b610139610157366004611a5b565b61034e565b61013961016a366004611a93565b610515565b600254610109906001600160a01b031681565b6100e1610190366004611cf7565b6105c3565b6100e16101a3366004611cc7565b6105d0565b6100e16101b6366004611d22565b6105dd565b600154610109906001600160a01b031681565b6101d93384846105ef565b805160005b8181101561024157600083828151811061020857634e487b7160e01b600052603260045260246000fd5b6020026020010151905061022e816000015182602001518360400151846060015161063d565b508061023981612055565b9150506101de565b5050505050565b6001546001600160a01b031633146102a75760405162461bcd60e51b815260206004820152601c60248201527f63616e2062652063616c6c6564206f6e6c79206279206573746174650000000060448201526064015b60405180910390fd5b6102b28383836105ef565b505050565b600080546040516321ab0c7160e01b81526004810184905282916001600160a01b0316906321ab0c719060240160206040518083038186803b1580156102fc57600080fd5b505afa158015610310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103349190611cdf565b60009081526003602052604090205415159150505b919050565b60008061035b8380611e0e565b9050905060005b8181101561050b5773__$c8b13b5401e105a03ccb2d5c98950fab3b$__6372ba788860046103936020880188611e0e565b858181106103b157634e487b7160e01b600052603260045260246000fd5b90506020020135876002600381106103d957634e487b7160e01b600052603260045260246000fd5b6020028101906103e99190611e0e565b8681811061040757634e487b7160e01b600052603260045260246000fd5b905060200201358860006003811061042f57634e487b7160e01b600052603260045260246000fd5b60200281019061043f9190611e0e565b8781811061045d57634e487b7160e01b600052603260045260246000fd5b905060200201356040518563ffffffff1660e01b8152600401610499949392919093845260208401929092526040830152606082015260800190565b60206040518083038186803b1580156104b157600080fd5b505af41580156104c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e99190611bfb565b156104f957600192505050610349565b8061050381612055565b915050610362565b5060009392505050565b6040517fcca0f3b700000000000000000000000000000000000000000000000000000000815260009073__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063cca0f3b79061056c90600490879087908301611d79565b60206040518083038186803b15801561058457600080fd5b505af4158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc9190611bfb565b9392505050565b6102b2600084848461063d565b6105da3382610f27565b50565b6105e98484848461063d565b50505050565b8060005b818110156102415761062b8585858481811061061f57634e487b7160e01b600052603260045260246000fd5b90506020020135610f27565b8061063581612055565b9150506105f3565b600080546040516321ab0c7160e01b8152600481018690526001600160a01b03909116906321ab0c719060240160206040518083038186803b15801561068257600080fd5b505afa158015610696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ba9190611cdf565b600080546040517f31543cf400000000000000000000000000000000000000000000000000000000815260048101849052929350909182916001600160a01b0316906331543cf49060240160006040518083038186803b15801561071d57600080fd5b505afa158015610731573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107599190810190611c1b565b9150915060008151116107ae5760405162461bcd60e51b815260206004820152600e60248201527f656d7074792074656d706c617465000000000000000000000000000000000000604482015260640161029e565b600083815260036020526040902080541561080b5760405162461bcd60e51b815260206004820152601260248201527f45787020616c726561647920696e207573650000000000000000000000000000604482015260640161029e565b87610b435781516001146108615760405162461bcd60e51b815260206004820152601a60248201527f6d75737420626520646f6e6520696e7369646520657374617465000000000000604482015260640161029e565b600061086f86610198612008565b878460008151811061089157634e487b7160e01b600052603260045260246000fd5b60200260200101516108a39190611ec8565b6108ad9190611ec8565b905060006108bd61019883612070565b905060006108cd61019884611ee0565b9050336002546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b039283169290911690636352211e9060240160206040518083038186803b15801561093157600080fd5b505afa158015610945573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096991906119ec565b6001600160a01b0316146109ae5760405162461bcd60e51b815260206004820152600c60248201526b34b73b30b634b2103ab9b2b960a11b604482015260640161029e565b6040517f3362c7cd000000000000000000000000000000000000000000000000000000008152600480820152602481018390526044810182905273__$c8b13b5401e105a03ccb2d5c98950fab3b$__90633362c7cd9060640160206040518083038186803b158015610a1f57600080fd5b505af4158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a579190611bfb565b15610aa45760405162461bcd60e51b815260206004820152600e60248201527f616c7265616479206c696e6b6564000000000000000000000000000000000000604482015260640161029e565b6040517ff9b9fec600000000000000000000000000000000000000000000000000000000815260048082015260248101839052604481018290526001606482015273__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063f9b9fec69060840160006040518083038186803b158015610b1c57600080fd5b505af4158015610b30573d6000803e3d6000fd5b5050505050600183019190915550610f11565b336001546040517fd3fec7cf000000000000000000000000000000000000000000000000000000008152600481018b90526001600160a01b03928316929091169063d3fec7cf9060240160206040518083038186803b158015610ba557600080fd5b505afa158015610bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdd91906119ec565b6001600160a01b031614610c225760405162461bcd60e51b815260206004820152600c60248201526b34b73b30b634b2103ab9b2b960a11b604482015260640161029e565b6000610c2f848888611358565b6040517f552a98a500000000000000000000000000000000000000000000000000000000815290915073__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063552a98a590610c849060049085908201611db3565b60206040518083038186803b158015610c9c57600080fd5b505af4158015610cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd49190611bfb565b15610d215760405162461bcd60e51b815260206004820152600e60248201527f616c7265616479206c696e6b6564000000000000000000000000000000000000604482015260640161029e565b6040517f74527bfb00000000000000000000000000000000000000000000000000000000815273__$c8b13b5401e105a03ccb2d5c98950fab3b$__906374527bfb90610d739060049085908201611db3565b60006040518083038186803b158015610d8b57600080fd5b505af4158015610d9f573d6000803e3d6000fd5b50506001546040517f8bee92e60000000000000000000000000000000000000000000000000000000081526001600160a01b039091169250638bee92e69150610dee908c908590600401611db3565b60206040518083038186803b158015610e0657600080fd5b505afa158015610e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3e9190611bfb565b610e8a5760405162461bcd60e51b815260206004820152600f60248201527f6e6f7420656e6f756768206c616e640000000000000000000000000000000000604482015260640161029e565b6040517f74527bfb00000000000000000000000000000000000000000000000000000000815273__$c8b13b5401e105a03ccb2d5c98950fab3b$__906374527bfb90610edf9060028601908590600401611db3565b60006040518083038186803b158015610ef757600080fd5b505af4158015610f0b573d6000803e3d6000fd5b50505050505b610f1c886001611ec8565b905550505050505050565b600080546040516321ab0c7160e01b8152600481018490526001600160a01b03909116906321ab0c719060240160206040518083038186803b158015610f6c57600080fd5b505afa158015610f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa49190611cdf565b60008181526003602052604090208054919250906110045760405162461bcd60e51b815260206004820152601260248201527f756e6b6e6f776e20657870657269656e63650000000000000000000000000000604482015260640161029e565b8054600114156111c95760018101546002546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03878116921690636352211e9060240160206040518083038186803b15801561107257600080fd5b505afa158015611086573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110aa91906119ec565b6001600160a01b0316146110ef5760405162461bcd60e51b815260206004820152600c60248201526b34b73b30b634b2103ab9b2b960a11b604482015260640161029e565b60006110fd61019883612070565b9050600061110d61019884611ee0565b6040517fe8485b0700000000000000000000000000000000000000000000000000000000815260048082015260248101849052604481018290526001606482015290915073__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063e8485b079060840160206040518083038186803b15801561118857600080fd5b505af415801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c09190611bfb565b50505050611326565b6001805482546001600160a01b038088169392169163d3fec7cf916111ee9190612027565b6040518263ffffffff1660e01b815260040161120c91815260200190565b60206040518083038186803b15801561122457600080fd5b505afa158015611238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125c91906119ec565b6001600160a01b0316146112a15760405162461bcd60e51b815260206004820152600c60248201526b34b73b30b634b2103ab9b2b960a11b604482015260640161029e565b6040517fca26a6ad00000000000000000000000000000000000000000000000000000000815260048082015260028201602482015273__$c8b13b5401e105a03ccb2d5c98950fab3b$__9063ca26a6ad9060440160006040518083038186803b15801561130d57600080fd5b505af4158015611321573d6000803e3d6000fd5b505050505b60008281526003602052604081208181556001810182905590600282018161134e8282611854565b5050505050505050565b611360611875565b600080611384611371601887612070565b61137c601887612070565b88919061145b565b9150915060405180608001604052806113d48787866000600681106113b957634e487b7160e01b600052603260045260246000fd5b602002015187600160200201518860025b6020020151611772565b81526020016113f96113e7886018611ec8565b845160208601518991908760026113ca565b815260200161141f8761140d886018611ec8565b606087015160808801518860056113ca565b815260200161144f611432886018611ec8565b61143d886018611ec8565b606086015160808701518760056113ca565b90529695505050505050565b6114636118b4565b61146b6118b4565b84515162ffffff851c601881901b17603081901b17606081901b17908116851b835285516020908101518216861b9084015285516040908101518216861b908401528415611524576114d58177ffffffffffffffffffffffffffffffffffffffffffffffff612027565b90506114e2856018612027565b8651518216901c82526114f6856018612027565b8651602090810151831690911c90830152611512856018612027565b8651604090810151831690911c908301525b6000611531600886612070565b61153c906018612008565b9050600061154b600887611ee0565b9050600161155a8360c0612027565b611565906002611f3a565b61156f9190612027565b6115919077ffffffffffffffffffffffffffffffffffffffffffffffff612027565b925060055b818111156116f0576115a98360c0612027565b848760016115b78686612027565b6115c19190612027565b600681106115df57634e487b7160e01b600052603260045260246000fd5b602002015116901c83876115f38585612027565b6006811061161157634e487b7160e01b600052603260045260246000fd5b6020020151901b1786826006811061163957634e487b7160e01b600052603260045260246000fd5b60200201526116498360c0612027565b848660016116578686612027565b6116619190612027565b6006811061167f57634e487b7160e01b600052603260045260246000fd5b602002015116901c83866116938585612027565b600681106116b157634e487b7160e01b600052603260045260246000fd5b6020020151901b178582600681106116d957634e487b7160e01b600052603260045260246000fd5b6020020152806116e88161203e565b915050611596565b508451821b85826006811061171557634e487b7160e01b600052603260045260246000fd5b60200201528351821b84826006811061173e57634e487b7160e01b600052603260045260246000fd5b602002015280156117675760008086528452600181111561176757600060208087018290528501525b505050935093915050565b61177a6118d2565b6117826118d2565b8051611790908686866117ec565b815260e061179e8888611830565b82515180519190921b17905260e06117b7601889611ee0565b82515160200180519190921b17905260e06117d3601888611ee0565b82515160400180519190921b1790529695505050505050565b6117f46118e1565b50835177ffffffffffffffffffffffffffffffffffffffffffffffff938416905283519183166020909201919091528251911660409091015290565b6000601061183f601884611ee0565b901b61184c601885611ee0565b179392505050565b50805460008255600302906000526020600020908101906105da91906118f4565b60405180608001604052806118886118d2565b81526020016118956118d2565b81526020016118a26118d2565b81526020016118af6118d2565b905290565b6040518060c001604052806006906020820280368337509192915050565b60405180602001604052806118af5b60405180602001604052806118af611919565b808211156119155760008082556001820181905560028201556003016118f4565b5090565b60405180606001604052806003906020820280368337509192915050565b60008083601f840112611948578182fd5b50813567ffffffffffffffff81111561195f578182fd5b602083019150836020808302850101111561197957600080fd5b9250929050565b600082601f830112611990578081fd5b815160206119a56119a083611ea4565b611e73565b82815281810190858301838502870184018810156119c1578586fd5b855b858110156119df578151845292840192908401906001016119c3565b5090979650505050505050565b6000602082840312156119fd578081fd5b81516105bc816120c6565b600080600060408486031215611a1c578182fd5b8335611a27816120c6565b9250602084013567ffffffffffffffff811115611a42578283fd5b611a4e86828701611937565b9497909650939450505050565b600060208284031215611a6c578081fd5b813567ffffffffffffffff811115611a82578182fd5b8201606081018410156105bc578182fd5b60008060208385031215611aa5578182fd5b823567ffffffffffffffff80821115611abc578384fd5b818501915085601f830112611acf578384fd5b813581811115611add578485fd5b866020606083028501011115611af1578485fd5b60209290920196919550909350505050565b60008060006040808587031215611b18578384fd5b843567ffffffffffffffff80821115611b2f578586fd5b611b3b88838901611937565b9096509450602091508682013581811115611b54578485fd5b87019050601f81018813611b66578384fd5b8035611b746119a082611ea4565b818152838101908385016080808502860187018d1015611b92578889fd5b8895505b84861015611be95780828e031215611bac578889fd5b611bb581611e73565b8235815287830135888201528883013589820152606080840135908201528452600195909501949286019290810190611b96565b50508096505050505050509250925092565b600060208284031215611c0c578081fd5b815180151581146105bc578182fd5b6000808284036080811215611c2e578283fd5b6060811215611c3b578283fd5b506020611c4781611e73565b85601f860112611c55578384fd5b611c5f6060611e73565b80866060880189811115611c71578788fd5b875b6003811015611c9057825185529386019391860191600101611c73565b5091845250519194509091505067ffffffffffffffff811115611cb1578182fd5b611cbd85828601611980565b9150509250929050565b600060208284031215611cd8578081fd5b5035919050565b600060208284031215611cf0578081fd5b5051919050565b600080600060608486031215611d0b578081fd5b505081359360208301359350604090920135919050565b60008060008060808587031215611d37578182fd5b5050823594602084013594506040840135936060013592509050565b8051518260005b6003811015610241578251825260209283019290910190600101611d5a565b83815260406020820181905281018290526000606080830185835b868110156119df57838284379183018481529190830190600101611d94565b60006101a082019050838252611dcd602083018451611d53565b6020830151611ddf6080840182611d53565b506040830151611df260e0840182611d53565b506060830151611e06610140840182611d53565b509392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611e42578283fd5b83018035915067ffffffffffffffff821115611e5c578283fd5b602090810192508102360382131561197957600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e9c57611e9c6120b0565b604052919050565b600067ffffffffffffffff821115611ebe57611ebe6120b0565b5060209081020190565b60008219821115611edb57611edb612084565b500190565b600082611eef57611eef61209a565b500490565b80825b6001808611611f065750611f31565b818704821115611f1857611f18612084565b80861615611f2557918102915b9490941c938002611ef7565b94509492505050565b60006105bc6000198484600082611f53575060016105bc565b81611f60575060006105bc565b8160018114611f765760028114611f8057611fad565b60019150506105bc565b60ff841115611f9157611f91612084565b6001841b915084821115611fa757611fa7612084565b506105bc565b5060208310610133831016604e8410600b8410161715611fe0575081810a83811115611fdb57611fdb612084565b6105bc565b611fed8484846001611ef4565b808604821115611fff57611fff612084565b02949350505050565b600081600019048311821515161561202257612022612084565b500290565b60008282101561203957612039612084565b500390565b60008161204d5761204d612084565b506000190190565b600060001982141561206957612069612084565b5060010190565b60008261207f5761207f61209a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146105da57600080fdfea26469706673582212202fb45120717672b5ffb911e1133798c272443e34f0b55b5e401faac93a3e661c64736f6c63430008020033",
  "libraries": {
    "MapLib": "0xf23B8c9debCdCEa2a40E81c3f6d786987069D40d"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Contract managing tExperiences and Estates",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53278,
        "contract": "src/solc_0.8/polygon/child/estate/ExperienceEstateRegistry.sol:ExperienceEstateRegistry",
        "label": "experienceToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IExperienceToken)47505"
      },
      {
        "astId": 53281,
        "contract": "src/solc_0.8/polygon/child/estate/ExperienceEstateRegistry.sol:ExperienceEstateRegistry",
        "label": "estateToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IEstateToken)47482"
      },
      {
        "astId": 53284,
        "contract": "src/solc_0.8/polygon/child/estate/ExperienceEstateRegistry.sol:ExperienceEstateRegistry",
        "label": "landToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC721)4258"
      },
      {
        "astId": 53297,
        "contract": "src/solc_0.8/polygon/child/estate/ExperienceEstateRegistry.sol:ExperienceEstateRegistry",
        "label": "links",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(EstateAndLands)53292_storage)"
      },
      {
        "astId": 53300,
        "contract": "src/solc_0.8/polygon/child/estate/ExperienceEstateRegistry.sol:ExperienceEstateRegistry",
        "label": "linkedLands",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Map)40675_storage"
      }
    ],
    "types": {
      "t_array(t_struct(TileWithCoord)45754_storage)dyn_storage": {
        "base": "t_struct(TileWithCoord)45754_storage",
        "encoding": "dynamic_array",
        "label": "struct TileWithCoordLib.TileWithCoord[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_contract(IERC721)4258": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_contract(IEstateToken)47482": {
        "encoding": "inplace",
        "label": "contract IEstateToken",
        "numberOfBytes": "20"
      },
      "t_contract(IExperienceToken)47505": {
        "encoding": "inplace",
        "label": "contract IExperienceToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(EstateAndLands)53292_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ExperienceEstateRegistry.EstateAndLands)",
        "numberOfBytes": "32",
        "value": "t_struct(EstateAndLands)53292_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(EstateAndLands)53292_storage": {
        "encoding": "inplace",
        "label": "struct ExperienceEstateRegistry.EstateAndLands",
        "members": [
          {
            "astId": 53286,
            "contract": "src/solc_0.8/polygon/child/estate/ExperienceEstateRegistry.sol:ExperienceEstateRegistry",
            "label": "estateId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 53288,
            "contract": "src/solc_0.8/polygon/child/estate/ExperienceEstateRegistry.sol:ExperienceEstateRegistry",
            "label": "singleLand",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 53291,
            "contract": "src/solc_0.8/polygon/child/estate/ExperienceEstateRegistry.sol:ExperienceEstateRegistry",
            "label": "multiLand",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Map)40675_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Map)40675_storage": {
        "encoding": "inplace",
        "label": "struct MapLib.Map",
        "members": [
          {
            "astId": 40670,
            "contract": "src/solc_0.8/polygon/child/estate/ExperienceEstateRegistry.sol:ExperienceEstateRegistry",
            "label": "values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(TileWithCoord)45754_storage)dyn_storage"
          },
          {
            "astId": 40674,
            "contract": "src/solc_0.8/polygon/child/estate/ExperienceEstateRegistry.sol:ExperienceEstateRegistry",
            "label": "indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Tile)44049_storage": {
        "encoding": "inplace",
        "label": "struct TileLib.Tile",
        "members": [
          {
            "astId": 44048,
            "contract": "src/solc_0.8/polygon/child/estate/ExperienceEstateRegistry.sol:ExperienceEstateRegistry",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)3_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TileWithCoord)45754_storage": {
        "encoding": "inplace",
        "label": "struct TileWithCoordLib.TileWithCoord",
        "members": [
          {
            "astId": 45753,
            "contract": "src/solc_0.8/polygon/child/estate/ExperienceEstateRegistry.sol:ExperienceEstateRegistry",
            "label": "tile",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Tile)44049_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}